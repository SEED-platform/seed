/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: seed_admin_controller", function(){
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });
    beforeEach(inject(function($controller, $rootScope, user_service, organization_service, $q) {
        this.scope = $rootScope.$new();
        $controller('seed_admin_controller', {
            $scope: this.scope,
            user_service: user_service,
            organization_service: organization_service,
            user_profile_payload: {
              user: {first_name: "b", last_name: "d"}
            }
        });

        mock_organization_service = organization_service;
        spyOn(mock_organization_service, "delete_organization_buildings")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
    }));
    describe("update_alert", function() {
        it("should set the show state to true", function() {
            // arrange

            // act
            this.scope.update_alert(true, "test message");

            // assertions
            expect(this.scope.alert.show).toBe(true);
            expect(this.scope.alert.message).toBe("test message");
        });
    });

    it("should call the delete_organization_buildings service", function() {
        // arrange

        // act
        this.scope.delete_org_buildings({org_id: 44});

        // assertions
        expect(mock_organization_service.delete_organization_buildings)
        .toHaveBeenCalledWith(44);
    });

    it("should raise an confirm window when the delete buildings button is" +
    " clicked", function() {
        // arrange
        var oldConfirm = confirm;
        confirm = jasmine.createSpy();


        // act
        this.scope.confirm_delete({org_id: 44, name: "my new org"});

        // assertions
        expect(confirm).toHaveBeenCalledWith(
            "Are you sure you want to PERMANENTLY delete '" +
            "my new org" + "'s buildings?");

        confirm = oldConfirm;
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: seed_admin_controller", function(){
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });
    beforeEach(inject(function($controller, $rootScope, user_service, organization_service, $q) {
        this.scope = $rootScope.$new();
        $controller('seed_admin_controller', {
            $scope: this.scope,
            user_service: user_service,
            organization_service: organization_service,
            user_profile_payload: {
              user: {first_name: "b", last_name: "d"}
            }
        });

        mock_organization_service = organization_service;
        spyOn(mock_organization_service, "delete_organization_buildings")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
    }));
    describe("update_alert", function() {
        it("should set the show state to true", function() {
            // arrange

            // act
            this.scope.update_alert(true, "test message");

            // assertions
            expect(this.scope.alert.show).toBe(true);
            expect(this.scope.alert.message).toBe("test message");
        });
    });

    it("should call the delete_organization_buildings service", function() {
        // arrange

        // act
        this.scope.delete_org_buildings({org_id: 44});

        // assertions
        expect(mock_organization_service.delete_organization_buildings)
        .toHaveBeenCalledWith(44);
    });

    it("should raise an confirm window when the delete buildings button is" +
    " clicked", function() {
        // arrange
        var oldConfirm = confirm;
        confirm = jasmine.createSpy();


        // act
        this.scope.confirm_delete({org_id: 44, name: "my new org"});

        // assertions
        expect(confirm).toHaveBeenCalledWith(
            "Are you sure you want to PERMANENTLY delete '" +
            "my new org" + "'s buildings?");

        confirm = oldConfirm;
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: seed_admin_controller", function(){
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });
    beforeEach(inject(function($controller, $rootScope, user_service, organization_service, $q) {
        this.scope = $rootScope.$new();
        $controller('seed_admin_controller', {
            $scope: this.scope,
            user_service: user_service,
            organization_service: organization_service,
            user_profile_payload: {
              user: {first_name: "b", last_name: "d"}
            }
        });

        mock_organization_service = organization_service;
        spyOn(mock_organization_service, "delete_organization_buildings")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
    }));
    describe("update_alert", function() {
        it("should set the show state to true", function() {
            // arrange

            // act
            this.scope.update_alert(true, "test message");

            // assertions
            expect(this.scope.alert.show).toBe(true);
            expect(this.scope.alert.message).toBe("test message");
        });
    });

    it("should call the delete_organization_buildings service", function() {
        // arrange

        // act
        this.scope.delete_org_buildings({org_id: 44});

        // assertions
        expect(mock_organization_service.delete_organization_buildings)
        .toHaveBeenCalledWith(44);
    });

    it("should raise an confirm window when the delete buildings button is" +
    " clicked", function() {
        // arrange
        var oldConfirm = confirm;
        confirm = jasmine.createSpy();


        // act
        this.scope.confirm_delete({org_id: 44, name: "my new org"});

        // assertions
        expect(confirm).toHaveBeenCalledWith(
            "Are you sure you want to PERMANENTLY delete '" +
            "my new org" + "'s buildings?");

        confirm = oldConfirm;
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: seed_admin_controller", function(){
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });
    beforeEach(inject(function($controller, $rootScope, user_service, organization_service, $q) {
        this.scope = $rootScope.$new();
        $controller('seed_admin_controller', {
            $scope: this.scope,
            user_service: user_service,
            organization_service: organization_service,
            user_profile_payload: {
              user: {first_name: "b", last_name: "d"}
            }
        });

        mock_organization_service = organization_service;
        spyOn(mock_organization_service, "delete_organization_buildings")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
    }));
    describe("update_alert", function() {
        it("should set the show state to true", function() {
            // arrange

            // act
            this.scope.update_alert(true, "test message");

            // assertions
            expect(this.scope.alert.show).toBe(true);
            expect(this.scope.alert.message).toBe("test message");
        });
    });

    it("should call the delete_organization_buildings service", function() {
        // arrange

        // act
        this.scope.delete_org_buildings({org_id: 44});

        // assertions
        expect(mock_organization_service.delete_organization_buildings)
        .toHaveBeenCalledWith(44);
    });

    it("should raise an confirm window when the delete buildings button is" +
    " clicked", function() {
        // arrange
        var oldConfirm = confirm;
        confirm = jasmine.createSpy();


        // act
        this.scope.confirm_delete({org_id: 44, name: "my new org"});

        // assertions
        expect(confirm).toHaveBeenCalledWith(
            "Are you sure you want to PERMANENTLY delete '" +
            "my new org" + "'s buildings?");

        confirm = oldConfirm;
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: seed_admin_controller", function(){
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });
    beforeEach(inject(function($controller, $rootScope, user_service, organization_service, $q) {
        this.scope = $rootScope.$new();
        $controller('seed_admin_controller', {
            $scope: this.scope,
            user_service: user_service,
            organization_service: organization_service,
            user_profile_payload: {
              user: {first_name: "b", last_name: "d"}
            }
        });

        mock_organization_service = organization_service;
        spyOn(mock_organization_service, "delete_organization_buildings")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
    }));
    describe("update_alert", function() {
        it("should set the show state to true", function() {
            // arrange

            // act
            this.scope.update_alert(true, "test message");

            // assertions
            expect(this.scope.alert.show).toBe(true);
            expect(this.scope.alert.message).toBe("test message");
        });
    });

    it("should call the delete_organization_buildings service", function() {
        // arrange

        // act
        this.scope.delete_org_buildings({org_id: 44});

        // assertions
        expect(mock_organization_service.delete_organization_buildings)
        .toHaveBeenCalledWith(44);
    });

    it("should raise an confirm window when the delete buildings button is" +
    " clicked", function() {
        // arrange
        var oldConfirm = confirm;
        confirm = jasmine.createSpy();


        // act
        this.scope.confirm_delete({org_id: 44, name: "my new org"});

        // assertions
        expect(confirm).toHaveBeenCalledWith(
            "Are you sure you want to PERMANENTLY delete '" +
            "my new org" + "'s buildings?");

        confirm = oldConfirm;
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: seed_admin_controller", function(){
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });
    beforeEach(inject(function($controller, $rootScope, user_service, organization_service, $q) {
        this.scope = $rootScope.$new();
        $controller('seed_admin_controller', {
            $scope: this.scope,
            user_service: user_service,
            organization_service: organization_service,
            user_profile_payload: {
              user: {first_name: "b", last_name: "d"}
            }
        });

        mock_organization_service = organization_service;
        spyOn(mock_organization_service, "delete_organization_buildings")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
    }));
    describe("update_alert", function() {
        it("should set the show state to true", function() {
            // arrange

            // act
            this.scope.update_alert(true, "test message");

            // assertions
            expect(this.scope.alert.show).toBe(true);
            expect(this.scope.alert.message).toBe("test message");
        });
    });

    it("should call the delete_organization_buildings service", function() {
        // arrange

        // act
        this.scope.delete_org_buildings({org_id: 44});

        // assertions
        expect(mock_organization_service.delete_organization_buildings)
        .toHaveBeenCalledWith(44);
    });

    it("should raise an confirm window when the delete buildings button is" +
    " clicked", function() {
        // arrange
        var oldConfirm = confirm;
        confirm = jasmine.createSpy();


        // act
        this.scope.confirm_delete({org_id: 44, name: "my new org"});

        // assertions
        expect(confirm).toHaveBeenCalledWith(
            "Are you sure you want to PERMANENTLY delete '" +
            "my new org" + "'s buildings?");

        confirm = oldConfirm;
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: seed_admin_controller", function(){
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });
    beforeEach(inject(function($controller, $rootScope, user_service, organization_service, $q) {
        this.scope = $rootScope.$new();
        $controller('seed_admin_controller', {
            $scope: this.scope,
            user_service: user_service,
            organization_service: organization_service,
            user_profile_payload: {
              user: {first_name: "b", last_name: "d"}
            }
        });

        mock_organization_service = organization_service;
        spyOn(mock_organization_service, "delete_organization_buildings")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
    }));
    describe("update_alert", function() {
        it("should set the show state to true", function() {
            // arrange

            // act
            this.scope.update_alert(true, "test message");

            // assertions
            expect(this.scope.alert.show).toBe(true);
            expect(this.scope.alert.message).toBe("test message");
        });
    });

    it("should call the delete_organization_buildings service", function() {
        // arrange

        // act
        this.scope.delete_org_buildings({org_id: 44});

        // assertions
        expect(mock_organization_service.delete_organization_buildings)
        .toHaveBeenCalledWith(44);
    });

    it("should raise an confirm window when the delete buildings button is" +
    " clicked", function() {
        // arrange
        var oldConfirm = confirm;
        confirm = jasmine.createSpy();


        // act
        this.scope.confirm_delete({org_id: 44, name: "my new org"});

        // assertions
        expect(confirm).toHaveBeenCalledWith(
            "Are you sure you want to PERMANENTLY delete '" +
            "my new org" + "'s buildings?");

        confirm = oldConfirm;
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: seed_admin_controller", function(){
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });
    beforeEach(inject(function($controller, $rootScope, user_service, organization_service, $q) {
        this.scope = $rootScope.$new();
        $controller('seed_admin_controller', {
            $scope: this.scope,
            user_service: user_service,
            organization_service: organization_service,
            user_profile_payload: {
              user: {first_name: "b", last_name: "d"}
            }
        });

        mock_organization_service = organization_service;
        spyOn(mock_organization_service, "delete_organization_buildings")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
    }));
    describe("update_alert", function() {
        it("should set the show state to true", function() {
            // arrange

            // act
            this.scope.update_alert(true, "test message");

            // assertions
            expect(this.scope.alert.show).toBe(true);
            expect(this.scope.alert.message).toBe("test message");
        });
    });

    it("should call the delete_organization_buildings service", function() {
        // arrange

        // act
        this.scope.delete_org_buildings({org_id: 44});

        // assertions
        expect(mock_organization_service.delete_organization_buildings)
        .toHaveBeenCalledWith(44);
    });

    it("should raise an confirm window when the delete buildings button is" +
    " clicked", function() {
        // arrange
        var oldConfirm = confirm;
        confirm = jasmine.createSpy();


        // act
        this.scope.confirm_delete({org_id: 44, name: "my new org"});

        // assertions
        expect(confirm).toHaveBeenCalledWith(
            "Are you sure you want to PERMANENTLY delete '" +
            "my new org" + "'s buildings?");

        confirm = oldConfirm;
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: seed_admin_controller", function(){
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });
    beforeEach(inject(function($controller, $rootScope, user_service, organization_service, $q) {
        this.scope = $rootScope.$new();
        $controller('seed_admin_controller', {
            $scope: this.scope,
            user_service: user_service,
            organization_service: organization_service,
            user_profile_payload: {
              user: {first_name: "b", last_name: "d"}
            }
        });

        mock_organization_service = organization_service;
        spyOn(mock_organization_service, "delete_organization_buildings")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
    }));
    describe("update_alert", function() {
        it("should set the show state to true", function() {
            // arrange

            // act
            this.scope.update_alert(true, "test message");

            // assertions
            expect(this.scope.alert.show).toBe(true);
            expect(this.scope.alert.message).toBe("test message");
        });
    });

    it("should call the delete_organization_buildings service", function() {
        // arrange

        // act
        this.scope.delete_org_buildings({org_id: 44});

        // assertions
        expect(mock_organization_service.delete_organization_buildings)
        .toHaveBeenCalledWith(44);
    });

    it("should raise an confirm window when the delete buildings button is" +
    " clicked", function() {
        // arrange
        var oldConfirm = confirm;
        confirm = jasmine.createSpy();


        // act
        this.scope.confirm_delete({org_id: 44, name: "my new org"});

        // assertions
        expect(confirm).toHaveBeenCalledWith(
            "Are you sure you want to PERMANENTLY delete '" +
            "my new org" + "'s buildings?");

        confirm = oldConfirm;
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: seed_admin_controller", function(){
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });
    beforeEach(inject(function($controller, $rootScope, user_service, organization_service, $q) {
        this.scope = $rootScope.$new();
        $controller('seed_admin_controller', {
            $scope: this.scope,
            user_service: user_service,
            organization_service: organization_service,
            user_profile_payload: {
              user: {first_name: "b", last_name: "d"}
            }
        });

        mock_organization_service = organization_service;
        spyOn(mock_organization_service, "delete_organization_buildings")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
    }));
    describe("update_alert", function() {
        it("should set the show state to true", function() {
            // arrange

            // act
            this.scope.update_alert(true, "test message");

            // assertions
            expect(this.scope.alert.show).toBe(true);
            expect(this.scope.alert.message).toBe("test message");
        });
    });

    it("should call the delete_organization_buildings service", function() {
        // arrange

        // act
        this.scope.delete_org_buildings({org_id: 44});

        // assertions
        expect(mock_organization_service.delete_organization_buildings)
        .toHaveBeenCalledWith(44);
    });

    it("should raise an confirm window when the delete buildings button is" +
    " clicked", function() {
        // arrange
        var oldConfirm = confirm;
        confirm = jasmine.createSpy();


        // act
        this.scope.confirm_delete({org_id: 44, name: "my new org"});

        // assertions
        expect(confirm).toHaveBeenCalledWith(
            "Are you sure you want to PERMANENTLY delete '" +
            "my new org" + "'s buildings?");

        confirm = oldConfirm;
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: seed_admin_controller", function(){
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });
    beforeEach(inject(function($controller, $rootScope, user_service, organization_service, $q) {
        this.scope = $rootScope.$new();
        $controller('seed_admin_controller', {
            $scope: this.scope,
            user_service: user_service,
            organization_service: organization_service,
            user_profile_payload: {
              user: {first_name: "b", last_name: "d"}
            }
        });

        mock_organization_service = organization_service;
        spyOn(mock_organization_service, "delete_organization_buildings")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
    }));
    describe("update_alert", function() {
        it("should set the show state to true", function() {
            // arrange

            // act
            this.scope.update_alert(true, "test message");

            // assertions
            expect(this.scope.alert.show).toBe(true);
            expect(this.scope.alert.message).toBe("test message");
        });
    });

    it("should call the delete_organization_buildings service", function() {
        // arrange

        // act
        this.scope.delete_org_buildings({org_id: 44});

        // assertions
        expect(mock_organization_service.delete_organization_buildings)
        .toHaveBeenCalledWith(44);
    });

    it("should raise an confirm window when the delete buildings button is" +
    " clicked", function() {
        // arrange
        var oldConfirm = confirm;
        confirm = jasmine.createSpy();


        // act
        this.scope.confirm_delete({org_id: 44, name: "my new org"});

        // assertions
        expect(confirm).toHaveBeenCalledWith(
            "Are you sure you want to PERMANENTLY delete '" +
            "my new org" + "'s buildings?");

        confirm = oldConfirm;
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: seed_admin_controller", function(){
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });
    beforeEach(inject(function($controller, $rootScope, user_service, organization_service, $q) {
        this.scope = $rootScope.$new();
        $controller('seed_admin_controller', {
            $scope: this.scope,
            user_service: user_service,
            organization_service: organization_service,
            user_profile_payload: {
              user: {first_name: "b", last_name: "d"}
            }
        });

        mock_organization_service = organization_service;
        spyOn(mock_organization_service, "delete_organization_buildings")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
    }));
    describe("update_alert", function() {
        it("should set the show state to true", function() {
            // arrange

            // act
            this.scope.update_alert(true, "test message");

            // assertions
            expect(this.scope.alert.show).toBe(true);
            expect(this.scope.alert.message).toBe("test message");
        });
    });

    it("should call the delete_organization_buildings service", function() {
        // arrange

        // act
        this.scope.delete_org_buildings({org_id: 44});

        // assertions
        expect(mock_organization_service.delete_organization_buildings)
        .toHaveBeenCalledWith(44);
    });

    it("should raise an confirm window when the delete buildings button is" +
    " clicked", function() {
        // arrange
        var oldConfirm = confirm;
        confirm = jasmine.createSpy();


        // act
        this.scope.confirm_delete({org_id: 44, name: "my new org"});

        // assertions
        expect(confirm).toHaveBeenCalledWith(
            "Are you sure you want to PERMANENTLY delete '" +
            "my new org" + "'s buildings?");

        confirm = oldConfirm;
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: seed_admin_controller", function(){
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });
    beforeEach(inject(function($controller, $rootScope, user_service, organization_service, $q) {
        this.scope = $rootScope.$new();
        $controller('seed_admin_controller', {
            $scope: this.scope,
            user_service: user_service,
            organization_service: organization_service,
            user_profile_payload: {
              user: {first_name: "b", last_name: "d"}
            }
        });

        mock_organization_service = organization_service;
        spyOn(mock_organization_service, "delete_organization_buildings")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
    }));
    describe("update_alert", function() {
        it("should set the show state to true", function() {
            // arrange

            // act
            this.scope.update_alert(true, "test message");

            // assertions
            expect(this.scope.alert.show).toBe(true);
            expect(this.scope.alert.message).toBe("test message");
        });
    });

    it("should call the delete_organization_buildings service", function() {
        // arrange

        // act
        this.scope.delete_org_buildings({org_id: 44});

        // assertions
        expect(mock_organization_service.delete_organization_buildings)
        .toHaveBeenCalledWith(44);
    });

    it("should raise an confirm window when the delete buildings button is" +
    " clicked", function() {
        // arrange
        var oldConfirm = confirm;
        confirm = jasmine.createSpy();


        // act
        this.scope.confirm_delete({org_id: 44, name: "my new org"});

        // assertions
        expect(confirm).toHaveBeenCalledWith(
            "Are you sure you want to PERMANENTLY delete '" +
            "my new org" + "'s buildings?");

        confirm = oldConfirm;
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: seed_admin_controller", function(){
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });
    beforeEach(inject(function($controller, $rootScope, user_service, organization_service, $q) {
        this.scope = $rootScope.$new();
        $controller('seed_admin_controller', {
            $scope: this.scope,
            user_service: user_service,
            organization_service: organization_service,
            user_profile_payload: {
              user: {first_name: "b", last_name: "d"}
            }
        });

        mock_organization_service = organization_service;
        spyOn(mock_organization_service, "delete_organization_buildings")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
    }));
    describe("update_alert", function() {
        it("should set the show state to true", function() {
            // arrange

            // act
            this.scope.update_alert(true, "test message");

            // assertions
            expect(this.scope.alert.show).toBe(true);
            expect(this.scope.alert.message).toBe("test message");
        });
    });

    it("should call the delete_organization_buildings service", function() {
        // arrange

        // act
        this.scope.delete_org_buildings({org_id: 44});

        // assertions
        expect(mock_organization_service.delete_organization_buildings)
        .toHaveBeenCalledWith(44);
    });

    it("should raise an confirm window when the delete buildings button is" +
    " clicked", function() {
        // arrange
        var oldConfirm = confirm;
        confirm = jasmine.createSpy();


        // act
        this.scope.confirm_delete({org_id: 44, name: "my new org"});

        // assertions
        expect(confirm).toHaveBeenCalledWith(
            "Are you sure you want to PERMANENTLY delete '" +
            "my new org" + "'s buildings?");

        confirm = oldConfirm;
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: seed_admin_controller", function(){
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });
    beforeEach(inject(function($controller, $rootScope, user_service, organization_service, $q) {
        this.scope = $rootScope.$new();
        $controller('seed_admin_controller', {
            $scope: this.scope,
            user_service: user_service,
            organization_service: organization_service,
            user_profile_payload: {
              user: {first_name: "b", last_name: "d"}
            }
        });

        mock_organization_service = organization_service;
        spyOn(mock_organization_service, "delete_organization_buildings")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
    }));
    describe("update_alert", function() {
        it("should set the show state to true", function() {
            // arrange

            // act
            this.scope.update_alert(true, "test message");

            // assertions
            expect(this.scope.alert.show).toBe(true);
            expect(this.scope.alert.message).toBe("test message");
        });
    });

    it("should call the delete_organization_buildings service", function() {
        // arrange

        // act
        this.scope.delete_org_buildings({org_id: 44});

        // assertions
        expect(mock_organization_service.delete_organization_buildings)
        .toHaveBeenCalledWith(44);
    });

    it("should raise an confirm window when the delete buildings button is" +
    " clicked", function() {
        // arrange
        var oldConfirm = confirm;
        confirm = jasmine.createSpy();


        // act
        this.scope.confirm_delete({org_id: 44, name: "my new org"});

        // assertions
        expect(confirm).toHaveBeenCalledWith(
            "Are you sure you want to PERMANENTLY delete '" +
            "my new org" + "'s buildings?");

        confirm = oldConfirm;
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: seed_admin_controller", function(){
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });
    beforeEach(inject(function($controller, $rootScope, user_service, organization_service, $q) {
        this.scope = $rootScope.$new();
        $controller('seed_admin_controller', {
            $scope: this.scope,
            user_service: user_service,
            organization_service: organization_service,
            user_profile_payload: {
              user: {first_name: "b", last_name: "d"}
            }
        });

        mock_organization_service = organization_service;
        spyOn(mock_organization_service, "delete_organization_buildings")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
    }));
    describe("update_alert", function() {
        it("should set the show state to true", function() {
            // arrange

            // act
            this.scope.update_alert(true, "test message");

            // assertions
            expect(this.scope.alert.show).toBe(true);
            expect(this.scope.alert.message).toBe("test message");
        });
    });

    it("should call the delete_organization_buildings service", function() {
        // arrange

        // act
        this.scope.delete_org_buildings({org_id: 44});

        // assertions
        expect(mock_organization_service.delete_organization_buildings)
        .toHaveBeenCalledWith(44);
    });

    it("should raise an confirm window when the delete buildings button is" +
    " clicked", function() {
        // arrange
        var oldConfirm = confirm;
        confirm = jasmine.createSpy();


        // act
        this.scope.confirm_delete({org_id: 44, name: "my new org"});

        // assertions
        expect(confirm).toHaveBeenCalledWith(
            "Are you sure you want to PERMANENTLY delete '" +
            "my new org" + "'s buildings?");

        confirm = oldConfirm;
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: seed_admin_controller", function(){
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });
    beforeEach(inject(function($controller, $rootScope, user_service, organization_service, $q) {
        this.scope = $rootScope.$new();
        $controller('seed_admin_controller', {
            $scope: this.scope,
            user_service: user_service,
            organization_service: organization_service,
            user_profile_payload: {
              user: {first_name: "b", last_name: "d"}
            }
        });

        mock_organization_service = organization_service;
        spyOn(mock_organization_service, "delete_organization_buildings")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
    }));
    describe("update_alert", function() {
        it("should set the show state to true", function() {
            // arrange

            // act
            this.scope.update_alert(true, "test message");

            // assertions
            expect(this.scope.alert.show).toBe(true);
            expect(this.scope.alert.message).toBe("test message");
        });
    });

    it("should call the delete_organization_buildings service", function() {
        // arrange

        // act
        this.scope.delete_org_buildings({org_id: 44});

        // assertions
        expect(mock_organization_service.delete_organization_buildings)
        .toHaveBeenCalledWith(44);
    });

    it("should raise an confirm window when the delete buildings button is" +
    " clicked", function() {
        // arrange
        var oldConfirm = confirm;
        confirm = jasmine.createSpy();


        // act
        this.scope.confirm_delete({org_id: 44, name: "my new org"});

        // assertions
        expect(confirm).toHaveBeenCalledWith(
            "Are you sure you want to PERMANENTLY delete '" +
            "my new org" + "'s buildings?");

        confirm = oldConfirm;
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: seed_admin_controller", function(){
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });
    beforeEach(inject(function($controller, $rootScope, user_service, organization_service, $q) {
        this.scope = $rootScope.$new();
        $controller('seed_admin_controller', {
            $scope: this.scope,
            user_service: user_service,
            organization_service: organization_service,
            user_profile_payload: {
              user: {first_name: "b", last_name: "d"}
            }
        });

        mock_organization_service = organization_service;
        spyOn(mock_organization_service, "delete_organization_buildings")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
    }));
    describe("update_alert", function() {
        it("should set the show state to true", function() {
            // arrange

            // act
            this.scope.update_alert(true, "test message");

            // assertions
            expect(this.scope.alert.show).toBe(true);
            expect(this.scope.alert.message).toBe("test message");
        });
    });

    it("should call the delete_organization_buildings service", function() {
        // arrange

        // act
        this.scope.delete_org_buildings({org_id: 44});

        // assertions
        expect(mock_organization_service.delete_organization_buildings)
        .toHaveBeenCalledWith(44);
    });

    it("should raise an confirm window when the delete buildings button is" +
    " clicked", function() {
        // arrange
        var oldConfirm = confirm;
        confirm = jasmine.createSpy();


        // act
        this.scope.confirm_delete({org_id: 44, name: "my new org"});

        // assertions
        expect(confirm).toHaveBeenCalledWith(
            "Are you sure you want to PERMANENTLY delete '" +
            "my new org" + "'s buildings?");

        confirm = oldConfirm;
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// taken from the angularjs testing page
// http://docs.angularjs.org/guide/dev_guide.unit-testing

// create dummy angularJS app to attach filter(s)
var myBELabelDirectiveApp = angular.module('myBELabelDirectiveApp', ['beLabel']);

describe("The beLabel directive", function() {
    var $compile;
    var $rootScope;
    beforeEach(module('myBELabelDirectiveApp'));
    // Store references to $rootScope and $compile
    // so they are available to all tests in this describe block
    beforeEach(inject(function(_$compile_, _$rootScope_){
      // The injector unwraps the underscores (_) from around the parameter names when matching
      $compile = _$compile_;
      $rootScope = _$rootScope_;
    }));

    it('Replaces the element with the appropriate content', function() {
        // Compile a piece of HTML containing the directive
        var element = $compile('<be-label name="compliant" color="blue"></be-label>')($rootScope);
        // fire all the watches
        $rootScope.$digest();
        // Check that the compiled element contains the templated content
        expect(element.hasClass('label-primary')).toBe(true);
        expect(element.hasClass('label')).toBe(true);
        expect(element.html()).toContain("compliant");
    });

        // 'red': 'danger',
        // 'gray': 'default',
        // 'orange': 'warning',
        // 'green': 'success',
        // 'blue': 'primary',
        // 'light blue': 'info'
    it('Maps colors to semantic bootstrap class names', function() {
        var element = $compile('<be-label name="compliant" color="red"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-danger')).toBe(true);

        element = $compile('<be-label name="compliant" color="gray"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-default')).toBe(true);

        element = $compile('<be-label name="compliant" color="orange"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-warning')).toBe(true);

        element = $compile('<be-label name="compliant" color="green"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-success')).toBe(true);

        element = $compile('<be-label name="compliant" color="blue"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-primary')).toBe(true);

        element = $compile('<be-label name="compliant" color="light blue"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-info')).toBe(true);
    });


});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// taken from the angularjs testing page
// http://docs.angularjs.org/guide/dev_guide.unit-testing

// create dummy angularJS app to attach filter(s)
var myBEUploaderDirectiveApp = angular.module('myBEUploaderDirectiveApp', ['beUploader']);

describe("The beUploader directive", function() {
    var g_message, g_file, g_progress;
    var $compile;
    var $rootScope;
    var uploader_html = '<div be-uploader sourcetype="assessor" importrecord="5" buttontext="Upload your building list .csv file" eventfunc="uploaderfunc(message, filename, progress)" ng-hide="uploader.in_progress"></div>';
    beforeEach(module('myBEUploaderDirectiveApp'));
    // Store references to $rootScope and $compile
    // so they are available to all tests in this describe block
    beforeEach(inject(function(_$compile_, _$rootScope_){
      // The injector unwraps the underscores (_) from around the parameter names when matching
      $compile = _$compile_;
      $rootScope = _$rootScope_;
      $rootScope.eventfunc = function (fine_object) {
        console.log({fin: fine_object});
        g_message = fine_object.message;
        g_file = fine_object.file;
        g_progress = fine_object.progress;
      };
      window.BE = window.BE || {};
      window.BE.FILE_UPLOAD_DESTINATION = 'S3';
    }));

    it('Creates the fineuploader element', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        
        // act
        $rootScope.$digest();

        // assert
        expect(element.html()).toContain("qq-uploader");
        expect(element.html()).toContain("qq-upload-button");
    });

    it('Contains the buttontext specified', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);

        // act
        $rootScope.$digest();

        // assert
        expect(element.html()).toContain("Upload your building list .csv file");
    });

    it('Only allows one file to be uploaded at a time', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");

        // act
        $rootScope.$digest();

        // assert
        expect(func._options.multiple).toBe(false);
    });

    it('Uses the callback function for invalid file types', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.jpeg");

        // act
        $rootScope.$digest();
        func._options.showMessage("there was an invalid extension. Valid extension(s): .csv");


        // assert
        expect(g_message).toBe("invalid_extension");
    });

    it('Uses the callback function to share its state: upload started',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';
        
        // act
        $rootScope.$digest();
        func._options.callbacks.onSubmitted(1, filename);


        // assert
        expect(g_message).toBe("upload_submitted");
        expect(g_file.filename).toBe(filename);
    });

    it('Uses the callback function to share its state: in progress',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';
        var loaded = 10;
        var total = 100;
        
        // act
        $rootScope.$digest();
        func._options.callbacks.onProgress(1, filename, loaded, total);


        // assert
        expect(g_message).toBe("upload_in_progress");
        expect(g_file.filename).toBe(filename);
        expect(g_progress.loaded).toBe(loaded);
        expect(g_progress.total).toBe(total);
    });

    it('Uses the callback function to share its state: complete',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';

        
        // act
        $rootScope.$digest();
        func._options.callbacks.onComplete(1, filename, {success: true});


        // assert        
        expect(g_message).toBe("upload_complete");
        expect(g_file.filename).toBe(filename);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: building_detail_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, ngFilter, delete_called;
    var building_detail_ctrl, building_detail_ctrl_scope, modalInstance, labels;
    var mock_building_services, mock_project_service;
    var mock_building;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          urls,
          $q,
          building_services,
          project_service,
          $filter) {
            controller = $controller;
            scope = $rootScope;
            ngFilter = $filter;
            building_detail_ctrl_scope = $rootScope.$new();
            modal_state = "";
            delete_called = false;

            // mock the building_services factory methods used in the controller
            // and return their promises
            mock_building_services = building_services;
            mock_project_service = project_service;

            spyOn(mock_project_service, "get_project")
                .andCallFake(function(project_slug){
                    return $q.when(
                        {
                            "status": "success",
                            "project": {
                                id: 33,
                                name: "test project",
                                slug: project_slug
                            }
                        }
                    );
                }
            );
            spyOn(mock_project_service, "get_labels")
                .andCallFake(function(){
                    return $q.when(
                        {
                            "status": "success",
                            "labels": [{
                                id: 44,
                                name: "bad label",
                                color: "red"
                            }]
                        }
                    );
                }
            );
            spyOn(mock_project_service, "update_project_building")
                .andCallFake(function(building_id, project, label){
                    return $q.when(
                        {
                            "status": "success",
                            "approver": "bob doe",
                            "approved_date": "01/01/2012"
                        }
                    );
                }
            );
            spyOn(mock_building_services, "update_building")
                .andCallFake(function (building, org_id){
                    mock_building = building;
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_building_detail_controller(){
        var fake_building = {
            id: 511,
            pk: 511,
            gross_floor_area: 123456,
            gross_floor_area_source: 2,
            city: "DC",
            city_source: 4,
            tax_lot_id: "11/22",
            tax_lot_id_source: 3,
            extra_data: {
                'some other key': 12344,
                'some other key that is not in a parent': 223
            },
            extra_data_sources: {
                'some other key': 2,
                'some other key that is not in a parent': 3
            },
            created: "at some point"
        };
        var fake_imported_buildings = [
            {
                id: 2,
                pk: 2,
                gross_floor_area: 123456,
                gross_floor_area_source: null,
                city: "Washington, DC",
                city_source: null,
                extra_data: {
                    'some other key': 123,
                    'some other key that is not in a child': 333,
                    'some floor area': 444
                },
                extra_data_sources: {
                    'some other key': null,
                    'some other key that is not in a child': 111,
                    'some floor area': 444
                },
                created: "test"
            },
            {
                id: 3,
                pk: 3,
                gross_floor_area: 2111111,
                gross_floor_area_source: null,
                city: "Washington",
                city_source: null,
                tax_lot_id: "11/22",
                tax_lot_id_source: null,
                extra_data: {
                    'make it four': 4
                },
                extra_data_sources: {
                    'make it four': null
                }
            },{
                id: 4,
                pk: 4,
                gross_floor_area: 2111111,
                gross_floor_area_source: null,
                city: "Washington",
                city_source: null,
                tax_lot_id: "11/22",
                tax_lot_id_source: null,
                extra_data: {
                    'make it four': 5
                },
                extra_data_sources: {
                    'make it four': null
                }
            }
        ];
        var fake_payload = {
            "status": "success",
            "building": fake_building,
            "imported_buildings": fake_imported_buildings,
            "projects": [],
            "user_org_id": 42
        };
        var fake_all_columns = [{
            "title": "PM Property ID",
            "sort_column": "pm_property_id",
            "class": "is_aligned_right",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Tax Lot ID",
            "sort_column": "tax_lot_id",
            "class": "is_aligned_right",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Custom ID 1",
            "sort_column": "custom_id_1",
            "class": "is_aligned_right whitespace",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Property Name",
            "sort_column": "property_name",
            "class": "",
            "title_class": "",
            "type": "string",
            "field_type": "building_information",
            "sortable": true,
            "checked": false
        }];
        building_detail_ctrl = controller('building_detail_controller', {
            $scope: building_detail_ctrl_scope,
            $routeParams: {
                building_id: 1,
                project_id: 2
            },
            building_payload: fake_payload,
            all_columns: {
                fields: fake_all_columns
            },
            audit_payload: {
                audit_logs: []
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should have an building payload", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.building.id).toBe(511);
        expect(building_detail_ctrl_scope.imported_buildings[0].id).toBe(2);
    });

    it("should get labels on load", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.labels[0].id).toBe(44);
        expect(building_detail_ctrl_scope.labels[0].name).toBe("bad label");
        expect(building_detail_ctrl_scope.labels[0].color).toBe("red");
    });

    it("should highlight the active project", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.is_active_project({id:33}))
        .toBe(true);
        expect(building_detail_ctrl_scope.is_active_project({id:34}))
        .toBe(false);
        building_detail_ctrl_scope.project = undefined;
        expect(building_detail_ctrl_scope.is_active_project({id:34}))
        .toBe(false);
    });

    it("should make a copy of building while making edits", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.save_building_state();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;

        // assertions
        expect(building_detail_ctrl_scope.building_copy.gross_floor_area)
        .toBe(123456);
    });
    it("should restore the copy of building if a user clicks cancel",
        function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.save_building_state();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;
        building_detail_ctrl_scope.restore_building();

        // assertions
        expect(building_detail_ctrl_scope.building.gross_floor_area)
        .toBe(123456);
        expect(building_detail_ctrl_scope.building.edit_form_showing).toBe(false);
    });
    it("should save a building when a user clicks the save button", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;
        building_detail_ctrl_scope.save_building();

        // assertions
        expect(mock_building_services.update_building)
        .toHaveBeenCalledWith(building_detail_ctrl_scope.building, 42);
        expect(mock_building.gross_floor_area).toEqual(43214);
    });
    it("should show a default label if a building doesn't have one", function() {
        // arrange
        create_building_detail_controller();
        var building_with_label = {
            label: {
                name: "hello",
                label: "success"
            }
        };
        var building_without_label = {};
        var label_with, label_without;

        // act
        building_detail_ctrl_scope.$digest();
        label_with = building_detail_ctrl_scope.get_label(building_with_label);
        label_without = building_detail_ctrl_scope.get_label(building_without_label);

        // assertions
        expect(label_with).toEqual({
                name: "hello",
                label: "success"
            });
        expect(label_without).toEqual({
                name: "Add Label",
                label: "default"
            });
    });

    it("should show a project or buildings breadcrumb", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.user.project_slug = "project_1";

        // assertions
        expect(building_detail_ctrl_scope.is_project()).toEqual(true);
        building_detail_ctrl_scope.user.project_slug = undefined;
        expect(building_detail_ctrl_scope.is_project()).toEqual(false);

    });
    it("should show the default projects table if a user has no compliance" +
        " projects", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.user.has_projects()).toEqual(false);
        building_detail_ctrl_scope.projects = [{id: 1, name: "a"}];
        expect(building_detail_ctrl_scope.user.has_projects()).toEqual(true);

    });

    it("should set only building attribute to master, not ids or children", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.is_valid_key('id')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('pk')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('pk_source')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key(' extra_data ')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('gross_floor_area'))
          .toEqual(true);
    });
    it("should update a project-building label", function() {
        // arrange
        create_building_detail_controller();
        var project = {
            id: 2,
            building: {}
        };

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.update_project_building(project,
            {
                name: "label name",
                color: "red"
            });
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(mock_project_service.update_project_building).toHaveBeenCalled();
        expect(project.building.approver).toEqual("bob doe");
        expect(project.building.approved_date).toEqual("01/01/2012");
        expect(project.building.label.name).toEqual("label name");
        expect(project.building.label.color).toEqual("red");

    });
    it("should set a field as source when clicked", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[0].is_master = true;
        expect(building_detail_ctrl_scope.building.gross_floor_area_source)
          .not.toEqual(building_detail_ctrl_scope.building.id);
        building_detail_ctrl_scope.set_self_as_source('gross_floor_area');
        building_detail_ctrl_scope.set_self_as_source('some other key', true);
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.building.gross_floor_area_source)
          .toEqual(building_detail_ctrl_scope.building.id);
        expect(building_detail_ctrl_scope.imported_buildings[0].is_master)
          .toEqual(false);
    });
    it("should set a column as the dominant source when clicked", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[1].is_master = true;
        building_detail_ctrl_scope.make_source_default(
            building_detail_ctrl_scope.imported_buildings[0]);
        building_detail_ctrl_scope.$digest();

        // assertions
        var b = building_detail_ctrl_scope.building,
            i = building_detail_ctrl_scope.imported_buildings[0],
            i_other = building_detail_ctrl_scope.imported_buildings[1];

        expect(b.gross_floor_area_source).toEqual(i.id);
        expect(b.id).not.toEqual(i.id);
        expect(b.pk).not.toEqual(i.id);
        expect(b.city).toEqual(i.city);
        expect(b.city_source).toEqual(i.id);
        expect(b.tax_lot_id).toEqual("11/22");
        expect(b.tax_lot_id_source).toEqual(i_other.id);
        expect(b.extra_data['some other key']).toEqual(123);
        expect(b.extra_data_sources['some other key']).toEqual(i.id);
        expect(b.extra_data['some other key that is not in a child']).toEqual(333);
        expect(b.extra_data_sources['some other key that is not in a child']).toEqual(i.id);
        expect(b.extra_data['some other key that is not in a parent']).toEqual(223);
        expect(b.extra_data_sources['some other key that is not in a parent']).toEqual(i_other.id);
        expect(b.created).toEqual("at some point");

        expect(i.is_master).toEqual(true);
        expect(i_other.is_master).toEqual(false);
    });
    it("should set the master building value when parent's value is clicked",
        function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[1].is_master = true;
        building_detail_ctrl_scope.set_building_attribute(
            building_detail_ctrl_scope.imported_buildings[0], 'city');
        building_detail_ctrl_scope.set_building_attribute(
            building_detail_ctrl_scope.imported_buildings[0], 'some other key', true);
        building_detail_ctrl_scope.$digest();

        // assertions
        var b = building_detail_ctrl_scope.building,
            i = building_detail_ctrl_scope.imported_buildings[0],
            i_other = building_detail_ctrl_scope.imported_buildings[1];

        expect(b.id).not.toEqual(i.id);
        expect(b.pk).not.toEqual(i.id);
        expect(b.city).toEqual(i.city);
        expect(b.city_source).toEqual(i.id);
        expect(b.tax_lot_id).toEqual("11/22");
        expect(b.tax_lot_id_source).toEqual(i_other.id);
        expect(b.extra_data['some other key']).toEqual(123);
        expect(b.extra_data_sources['some other key']).toEqual(i.id);

        expect(i.is_master).toEqual(false);
        expect(i_other.is_master).toEqual(false);
    });

    it("should display all the data within all the buildings", function() {
        // arrange
        create_building_detail_controller();
        var keys;

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        var edc = building_detail_ctrl_scope.data_columns;

        // should not duplicate keys
        expect(edc.length).toEqual(8);
        keys = edc.map(function ( d ) {
            return d.key;
        });
        expect(keys.indexOf('make it four')).toEqual(4);
    });

    it("should display Floor Areas", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.$digest();

        // assertions
        var area_fields = building_detail_ctrl_scope.floor_area_fields;
        expect(area_fields.length).toEqual(1);
    });

    it("should display Floor Areas with number", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.get_number("")).toEqual(0);
        expect(building_detail_ctrl_scope.get_number("123,123,123")).toEqual(123123123);
        expect(building_detail_ctrl_scope.get_number("123,123,123.123")).toEqual(123123123.123);
        expect(building_detail_ctrl_scope.get_number("-123,123,123")).toEqual(-123123123);
        expect(building_detail_ctrl_scope.get_number(-123123123)).toEqual(-123123123);


    });
});

describe("controller: concat_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var scope, controller, modal_state;
    var edit_ctrl, concat_modal_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label, mock_mapping_service, mock_matching_service;
    var global_step = 1;
    var global_dataset = {};

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
            $controller, $rootScope, $modal, urls, $q
        ) {
            controller = $controller;
            scope = $rootScope;
            concat_modal_ctrl_scope = $rootScope.$new();
            concat_modal_ctrl_scope.concat_columns = [];
            modal_state = "";
        }
    ));

    var mock_building_column_types = [
        'address1', 'city', 'state', 'postal_code'
    ];

    var mock_raw_columns = [
        {
            name: 'Address',
            suggestion: 'address1',
            confidence: 1,
            raw_data: [
                '234 Database way',
                '23444 Huh hwy',
                '23444 Huh hwy',
                '23444 Huh hwy',
                '1223 face pl.'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        },
        {
            name: 'City',
            suggestion: 'city',
            confidence: 1,
            raw_data: [
                'Mega City', 'Mega City', 'Mega City', 'Mega City', 'Mega City'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        },
        {
            name: 'Zip',
            suggestion: '',
            confidence: 0,
            raw_data: [
                '234233', '234233', '234233', '234233', '234233'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        }
    ];

    // this is outside the beforeEach so it can be configured by each unit test
    function create_concat_modal_controller(){
        edit_ctrl = controller('concat_modal_ctrl', {
            $scope: concat_modal_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            building_column_types: mock_building_column_types,
            raw_columns: mock_raw_columns
        });
    }

    /*
     * Test scenarios
     */

    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.close_concat_modal();
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should mangle scope appropriately during concatenation", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(3);

        // arrange
        concat_modal_ctrl_scope.concat_columns =
            concat_modal_ctrl_scope.raw_columns.slice(0);
        concat_modal_ctrl_scope.raw_columns = [];

        // act
        concat_modal_ctrl_scope.$digest();
        concat_modal_ctrl_scope.save_concat();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(1);
        expect(
            concat_modal_ctrl_scope.raw_columns[0].is_concatenated
        ).toEqual(true);
    });

    it("should modify the raw_data of our modified TCM correctly", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(3);

        // arrange
        concat_modal_ctrl_scope.concat_columns =
            concat_modal_ctrl_scope.raw_columns.slice(0);
        concat_modal_ctrl_scope.raw_columns = [];

        // act
        concat_modal_ctrl_scope.$digest();
        concat_modal_ctrl_scope.save_concat();

        var expected_raw = [
            '234 Database way Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '1223 face pl. Mega City 234233'
        ];

        // assertions
        expect(
            concat_modal_ctrl_scope.raw_columns[0].raw_data
        ).toEqual(expected_raw);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: create_organization_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_organization_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, organization_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        mock_organization_service = organization_service;
        spyOn(mock_organization_service, "create_sub_org")
            .andCallFake(function(org, sub_org){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_organization_modal_ctrl(){
        ctrl = ctrl('create_organization_modal_ctrl', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            organization: {organization_id: 1}
        });
    }

    /*
     * Test scenarios
     */

    it("should call the organization service to add a new sub_org",
        function() {
        // arrange
        create_organization_modal_ctrl();

        // act
        ctrl_scope.$digest();
        ctrl_scope.sub_org.name = "my shiny new org";
        ctrl_scope.sub_org.email = "jb.smooth@be.com";
        ctrl_scope.submit_form(true);

        // assertions
        expect(mock_organization_service.create_sub_org)
            .toHaveBeenCalledWith(
                {
                    organization_id: 1
                },
                {
                    name: "my shiny new org",
                    email: "jb.smooth@be.com"
                }
            );
    });
    
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: data_upload_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_uploader_service, scope, controller, modal_state;
    var edit_ctrl, data_upload_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label, mock_mapping_service, mock_matching_service;
    var global_step = 1;
    var global_dataset = {};
    var return_labels = [
        {
            "name": 'compliant',
            "color": 'green',
            "id": 1
        },
        {
            "name": "new label",
            "color": "blue",
            "id": 2
        }
    ];

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, uploader_service, mapping_service, matching_service) {
            controller = $controller;
            scope = $rootScope;
            data_upload_ctrl_scope = $rootScope.$new();
            modal_state = "";

            // mock the uploader_service factory methods used in the controller
            // and return their promises
            mock_uploader_service = uploader_service;
            mock_mapping_service = mapping_service;
            mock_matching_service = matching_service;
            spyOn(mock_uploader_service, "get_AWS_creds")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "AWS_CLIENT_ACCESS_KEY": "123",
                            "AWS_UPLOAD_BUCKET_NAME": "test-bucket"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "check_progress")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "progress": "25.0"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "create_dataset")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "id": 3,
                                "name": dataset_name

                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error",
                                "message": "name already in use"
                            }
                        );
                    }
                }
            );
            spyOn(mock_uploader_service, "save_raw_data")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "file_id": 3
                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error"
                            }
                        );
                    }
                }
            );
            spyOn(mock_mapping_service, "start_mapping")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "file_id": 3
                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error"
                            }
                        );
                    }
                }
            );
            spyOn(mock_matching_service, "start_system_matching")
            .andCallFake(function(file_id){
                // return $q.reject for error scenario
                return $q.when(
                    {
                        "status": "success",
                        "file_id": 3
                    }
                );
            });

        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_data_upload_modal_controller(){
        edit_ctrl = controller('data_upload_modal_ctrl', {
            $scope: data_upload_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            step: global_step,
            dataset: global_dataset
        });
    }

    /*
     * Test scenarios
     */

    it("should close the modal when the close function is called", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.close();
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel function is called", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.cancel();
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

    it("should start at the step provided", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(1);

        // arrange
        global_step = 2;
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(2);
    });

    it("should goto different steps", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var step;
        step = 2;
        data_upload_ctrl_scope.goto_step(step);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(step);
    });

    it("disables the 'Name it' button if no text is entered", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(true);
    });
    it("disables the 'Name it' button if no text is entered, then cleared",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.dataset.name = undefined;
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(true);
    });
    it("enables the 'Name it' button if text is entered", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.dataset.name = "my dataset name";
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(false);
    });
    it("should show an alert if the dataset name is already in use",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.create_dataset("fail");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.alert).toBe(true);
    });
    it("should not show an alert if the dataset name is not already in use",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.create_dataset("my shiny new dataset");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.alert).toBe(false);
    });
    it("after creating a dataset, stores the dataset id", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var ds_name = "my shiny new dataset";
        data_upload_ctrl_scope.create_dataset(ds_name);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.id).toBe(3);
        expect(data_upload_ctrl_scope.dataset.name).toBe(ds_name);
    });
    it("after uploading a file, stores the file id", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var message, filename;
        message = "upload_complete";
        filename = "file1.csv";

        // act
        data_upload_ctrl_scope.uploaderfunc(message, {
            filename: filename,
            file_id: 20140313
        });
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.import_file_id).toBe(20140313);
    });
    it("should show an invalid extension alert if a file with an invalid" +
        "extension is loaded", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.uploaderfunc("invalid_extension");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.invalid_extension_alert)
            .toBe(true);
    });
    it("should hide the upload button after the user selects a file",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename;
        message = "upload_submitted";
        filename = "file1.csv";

        // act
        data_upload_ctrl_scope.uploaderfunc(message, {filename: filename});
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.filename).toBe(filename);
        expect(data_upload_ctrl_scope.uploader.in_progress).toBe(true);
    });
    it("should show the progressbar during upload",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename, progress;
        message = "upload_in_progress";
        filename = "file1.csv";
        progress = {
            loaded: 10,
            total: 100
        };

        // act
        data_upload_ctrl_scope.uploaderfunc(message, filename, progress);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.in_progress).toBe(true);
        expect(data_upload_ctrl_scope.uploader.progress).toBe(2.5);
    });
    it("should start saving the energy data when the file has been uploaded",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename;
        message = "upload_complete";
        filename = "file1.csv";
        data_upload_ctrl_scope.step.number = 4;

        // act
        data_upload_ctrl_scope.uploaderfunc(message, filename);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.status_message)
            .toBe("saving energy data");
    });

    it("should take an dataset payload", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.name).toBe("");
        expect(data_upload_ctrl_scope.dataset.filename).toBe("");
        expect(data_upload_ctrl_scope.dataset.id).toBe(0);
    });

    it("should extend a custom dataset payload", function() {
        // arrange
        global_dataset = {
            id: 100,
            filename: "seed_data.csv",
            name: "Compliance Project"
        };
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.name).toBe("Compliance Project");
        expect(data_upload_ctrl_scope.dataset.filename).toBe("seed_data.csv");
        expect(data_upload_ctrl_scope.dataset.id).toBe(100);
        expect(data_upload_ctrl_scope.dataset.alert).toBe(false);

    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: dataset_detail_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, ngFilter, delete_called;
    var dataset_detail_ctrl, dataset_detail_ctrl_scope, modalInstance, labels;

    

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, dataset_service, $filter) {
            controller = $controller;
            scope = $rootScope;
            ngFilter = $filter;
            dataset_detail_ctrl_scope = $rootScope.$new();
            modal_state = "";
            delete_called = false;

            // mock the dataset_service factory methods used in the controller
            // and return their promises
            mock_dataset_service = dataset_service;
            spyOn(mock_dataset_service, "get_dataset")
                .andCallFake(function(dataset_id){
                    // return $q.reject for error scenario
                    var fake_importfiles = [
                        {
                            name: "DC_CoveredBuildings_50k.csv",
                            number_of_buildings: 511,
                            number_of_mappings: 511,
                            number_of_cleanings: 1349,
                            source_type: "Assessed Raw",
                            number_of_matchings: 403
                        },
                        {
                            name: "DC_ESPM_Report.csv",
                            number_of_buildings: 511,
                            number_of_matchings: 403,
                            source_type: "Portfolio Raw"
                        }
                    ];
                    var fake_dataset = {
                        name: "DC 2013 data",
                        last_modified: (new Date()).getTime(),
                        last_modified_by: "john.s@buildingenergy.com",
                        number_of_buildings: 89,
                        id: 1,
                        importfiles: fake_importfiles
                    };
                    var fake_payload = {
                        "status": "success",
                        "dataset": fake_dataset
                    };
                    if (delete_called) {
                        fake_payload.dataset.importfiles.pop();
                    }
                    console.log({delete_called: delete_called, ds: fake_payload});
                    return $q.when(fake_payload);
                }
            );

            spyOn(mock_dataset_service, "delete_file")
                .andCallFake(function(import_file){
                    delete_called = true;
                    console.log({d: "delete_called"});
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_detail_controller(){
        var fake_importfiles = [
            {
                name: "DC_CoveredBuildings_50k.csv",
                number_of_buildings: 511,
                number_of_mappings: 511,
                number_of_cleanings: 1349,
                source_type: "Assessed Raw",
                number_of_matchings: 403
            },
            {
                name: "DC_ESPM_Report.csv",
                number_of_buildings: 511,
                number_of_matchings: 403,
                source_type: "Portfolio Raw"
            }
        ];
        var fake_dataset = {
            name: "DC 2013 data",
            last_modified: (new Date()).getTime(),
            last_modified_by: "john.s@buildingenergy.com",
            number_of_buildings: 89,
            id: 1,
            importfiles: fake_importfiles
        };
        var fake_payload = {
            "status": "success",
            "dataset": fake_dataset
        };
        dataset_detail_ctrl = controller('dataset_detail_controller', {
            $scope: dataset_detail_ctrl_scope,
            dataset_payload: fake_payload
        });
    }

    /*
     * Test scenarios
     */

    it("should have an data set payload with import files", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        dataset_detail_ctrl_scope.$digest();

        // assertions
        expect(dataset_detail_ctrl_scope.dataset.importfiles.length).toBe(2);
    });

    it("should show an alert when the delete icon is clicked", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        dataset_detail_ctrl_scope.$digest();
        var importfiles = dataset_detail_ctrl_scope.dataset.importfiles;
        dataset_detail_ctrl_scope.delete_file(importfiles[0]);
        dataset_detail_ctrl_scope.$digest();

        // assertions
        expect(dataset_detail_ctrl_scope.dataset.importfiles.length).toBe(1);
    });
   
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: dataset_list_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, modal_state;
    var edit_ctrl, dataset_list_ctrl_scope, modalInstance, labels;
    var location;

    

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, uploader_service,
            $location) {
            controller = $controller;
            scope = $rootScope;
            dataset_list_ctrl_scope = $rootScope.$new();
            modal_state = "";
            location = $location;

            // mock the uploader_service factory methods used in the controller
            // and return their promises
            mock_uploader_service = uploader_service;
            spyOn(mock_uploader_service, "get_AWS_creds")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "AWS_CLIENT_ACCESS_KEY": "123",
                            "AWS_UPLOAD_BUCKET_NAME": "test-bucket"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "create_dataset")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "import_record_id": 3,
                                "import_record_name": dataset_name

                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error",
                                "message": "name already in use"
                            }
                        );
                    }
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_list_controller(){
        var fake_datasets_payload = {
            "status": "success",
            "datasets": [
                {
                    name: "DC 2013 data",
                    last_modified: (new Date()).getTime(),
                    last_modified_by: "john.s@buildingenergy.com",
                    number_of_buildings: 89
                },
                {
                    name: "DC 2014 data",
                    last_modified: (new Date()).getTime() -
                        1550 * 60 * 60 * 1000,
                    last_modified_by: "gavin.m@buildingenergy.com",
                    number_of_buildings: 70
                }
            ]
        };
        edit_ctrl = controller('dataset_list_controller', {
            $scope: dataset_list_ctrl_scope,
            datasets_payload: fake_datasets_payload
        });
    }

    /*
     * Test scenarios
     */

    it("should have a dataset_payload", function() {
        // arrange
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();

        // assertions
        expect(dataset_list_ctrl_scope.datasets.length).toEqual(2);
    });

    it("should disable the mapping button if the dataset has no" +
        " Assessor files", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Portfolio Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_assessor_files(dataset);

        // assertions
        expect(disabled).toEqual(true);
    });

    it("should enable the mapping button if the dataset has at least one" +
        " Assessor file", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_assessor_files(dataset);

        // assertions
        expect(disabled).toEqual(false);
    });
    it("should disable the matching button if the dataset has no" +
        " Portfolio Manger files", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Assessed Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_pm_files(dataset);

        // assertions
        expect(disabled).toEqual(true);
    });
    it("should enable the matching button if the dataset has at least one" +
        " Portfolio Manger file", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_pm_files(dataset);

        // assertions
        expect(disabled).toEqual(false);
    });
    it("should navigate to the mapping page of the first assessed" +
        " import file when the ``Mapping`` button is clicked", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Assessed Raw",
                    id: 3
                },
                {
                    source_type: "Assessed Raw",
                    id: 5
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        dataset_list_ctrl_scope.goto_mapping(dataset);

        // assertions
        expect(location.path()).toBe('/data/mapping/3');
    });
    it("should navigate to the matching page of the first Portfolio Manager" +
        " import file when the ``Matching`` button is clicked", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw",
                    id: 3
                },
                {
                    source_type: "Portfolio Raw",
                    id: 5
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        dataset_list_ctrl_scope.goto_matching(dataset);

        // assertions
        expect(location.path()).toBe('/data/matching/3');
    });

   
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: delete_modal_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, building_services, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        // mock the export_service factory methods used in the controller
        // and return their promises
        mock_building_services = building_services;
        spyOn(mock_building_services, "delete_buildings")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_delete_modal_controller(){
        ctrl = ctrl('delete_modal_controller', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            search: { 
                selected_buildings: [1,2],
                filter_params: {},
                select_all_checkbox: false,
                order_by: "",
                sort_reverse: false,
                number_matching_search: 1000
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should start at the delete page", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.delete_state).toEqual("delete"); 
    });
    it("should save the search paramaters",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.delete_payload;
        expect(b.selected_buildings).toEqual([1,2]);
        expect(b.filter_params).toEqual({});
        expect(b.order_by).toEqual("");
        expect(b.sort_reverse).toEqual(false);
        expect(b.select_all_checkbox).toEqual(false);
    });
    it("should delete when the delete button is clicked",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.delete_buildings();

        // assertions
        expect(ctrl_scope.delete_state).toEqual("prepare");
        expect(mock_building_services.delete_buildings).toHaveBeenCalled();
    });
    it("should show the success page when the delete is finished",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.delete_buildings();
        ctrl_scope.$digest();

        // assertions
        expect(mock_building_services.delete_buildings).toHaveBeenCalled();
        expect(ctrl_scope.delete_state).toEqual("success");
    });
    it("should show the number of buildings to be deleted",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        var number_to_delete = ctrl_scope.number_to_delete();

        // assertions
        expect(number_to_delete).toEqual(2);
    });
    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.close();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.cancel();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

  
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myDistrictApp = angular.module('myDistrictApp', ['district']);

describe("The district filter", function() {
    beforeEach(module('myDistrictApp'));
    it('replaces `district` with `County/District/Ward/Borough`',
        inject(function(districtFilter) {
            // normal cases
            expect(districtFilter('district')).toBe('County/District/Ward/Borough');
            expect(districtFilter('District')).toBe('County/District/Ward/Borough');
            expect(districtFilter('DistRict')).toBe('County/District/Ward/Borough');
            expect(districtFilter('DISTRICT')).toBe('County/District/Ward/Borough');
            expect(districtFilter('aDISTRICT')).toBe('aDISTRICT');
            expect(districtFilter('')).toBe('');
            expect(districtFilter('district ')).toBe('district ');
            expect(districtFilter('ok')).toBe('ok');
            expect(districtFilter(undefined)).toBe(undefined);
            expect(districtFilter(null)).toBe(null);
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: edit_label_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, modal_state;
    var edit_ctrl, edit_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label;
    var return_labels = [
        {
            "name": 'compliant',
            "color": 'green',
            "id": 1
        },
        {
            "name": "new label",
            "color": "blue",
            "id": 2
        }
    ];

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, urls, $q, project_service) {
        controller = $controller;
        scope = $rootScope;
        edit_ctrl_scope = $rootScope.$new();
        modal_state = "";

        // mock the project_service factory methods used in the controller
        // and return their promises
        mock_project_service = project_service;
        spyOn(mock_project_service, "get_labels")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success", "labels": return_labels});
            }
        );
        spyOn(mock_project_service, "add_label")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
        spyOn(mock_project_service, "delete_label")
            .andCallFake(function(label){
                deleted_label = label;
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
        spyOn(mock_project_service, "update_label")
            .andCallFake(function(label){
                updated_label = label;
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );

    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_edit_modal_controller(){
        var labels = [
            {
                "name": 'compliant',
                "color": 'green',
                "id": 1
            }
        ];

        edit_ctrl = controller('edit_label_modal_ctrl', {
            $scope: edit_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            labels: labels
        });
    }

    /*
     * Test scenarios
     */

    it("should initialize the default label", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.$digest();
        edit_ctrl_scope.initialize_label_modal();

        // assertions
        expect(edit_ctrl_scope.label_modal.color).toBe("gray");
        expect(edit_ctrl_scope.label_modal.label).toBe("default");
        expect(edit_ctrl_scope.label_modal.name).toBe("");
        expect(edit_ctrl_scope.modal.label.state).toBe("create");
    });

    it("should get the labels available to an organization", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.add_label({});  // calls private get_labels
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.labels.length).toBe(2);
    });

    it("should add a label in the user's organization", function() {
        // arrange
        create_edit_modal_controller();
        var label_to_add = {
            color: "blue",
            label: "primary",
            name: "new label"
        };

        // act
        edit_ctrl_scope.add_label(label_to_add);
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.labels.length).toBe(2);
        expect(edit_ctrl_scope.labels[1].color).toBe("blue");
        expect(edit_ctrl_scope.labels[1].name).toBe("new label");
    });

    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.close();
        edit_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.cancel();
        edit_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

    it("sets the label_modal to the label when its edit button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.edit_label(label);
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.label_modal.color).toBe(label.color);
        expect(edit_ctrl_scope.label_modal.name).toBe(label.name);
        expect(edit_ctrl_scope.modal.label.state).toBe("edit");

        // assert that edit_ctrl_scope.label_modal is a copy and not a reference to label
        edit_ctrl_scope.label_modal.name = "random name here";
        expect(edit_ctrl_scope.label_modal.name).not.toBe(label.name);
    });
    
    it("deletes the appropriate label when the delete button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.delete_label(label);
        edit_ctrl_scope.$digest();

        // assertions
        expect(deleted_label).toBe(label);
    });

    it("updates the appropriate label when the update label button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.edit_label(label);
        edit_ctrl_scope.$digest();
        edit_ctrl_scope.label_modal.name = "harry";
        edit_ctrl_scope.label_modal.color = "blue";
        edit_ctrl_scope.update_label(edit_ctrl_scope.label_modal);
        edit_ctrl_scope.$digest();

        // assertions
        expect(mock_project_service.update_label).toHaveBeenCalledWith(edit_ctrl_scope.label_modal);
        expect(updated_label).toBe(edit_ctrl_scope.label_modal);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: export_modal_controller", function(){
    // globals set up and used in each test scenario
    var mock_export_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, export_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        // mock the export_service factory methods used in the controller
        // and return their promises
        mock_export_service = export_service;
        spyOn(mock_export_service, "export_buildings")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success", "export_id": "123456"});
            }
        );
        spyOn(mock_export_service, "export_buildings_progress")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({
                    "status": "success",
                    "buildings_processed": 1000
                });
            }
        );
            spyOn(mock_export_service, "export_buildings_download")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({
                    "status": "success",
                    "url": "#"
                });
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_export_modal_controller(){
        ctrl = ctrl('export_modal_controller', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            search: { 
                selected_buildings: [],
                filter_params: {},
                select_all_checkbox: false,
                order_by: "",
                sort_reverse: false,
                number_matching_search: 1000
            },
            selected_fields: ['tax_lot_id', 'postal_code'],
            project: {
                id: 11
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should start at the create page", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.export_state).toEqual("create"); 
    });
    it("should start with an empty name and default file type of 'xls'",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.building_export;
        expect(b.export_name).toEqual("");
        expect(b.export_type).toEqual("xls");
    });
    it("should save the search paramaters",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.building_export;
        expect(b.selected_buildings).toEqual([]);
        expect(b.filter_params).toEqual({});
        expect(b.order_by).toEqual("");
        expect(b.sort_reverse).toEqual(false);
        expect(b.select_all_checkbox).toEqual(false);
        expect(b.selected_fields).toEqual(['tax_lot_id', 'postal_code']);
        expect(b.project_id).toEqual(11);
        expect(ctrl_scope.progress_denominator).toEqual(0);
    });
    it("should kick off the export process when the export button is clicked",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.export_buildings();

        // assertions
        expect(ctrl_scope.export_state).toEqual("prepare");
        expect(mock_export_service.export_buildings).toHaveBeenCalled();
    });
    it("should show the success page when the data is ready",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.show_success_page("123");
        ctrl_scope.$digest();

        // assertions
        expect(mock_export_service.export_buildings_download).toHaveBeenCalled();
        expect(ctrl_scope.export_state).toEqual("success");
    });
    it("should update the progress bar",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.monitor_progress("123", 1000);
        ctrl_scope.$digest();
        timeout.flush();

        // assertions
        expect(mock_export_service.export_buildings_progress).toHaveBeenCalled();
        expect(ctrl_scope.progress_percentage).toEqual(100);
        expect(ctrl_scope.progress_numerator).toEqual(1000);
        expect(ctrl_scope.progress_denominator).toEqual(1000);
    });
    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.close();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.cancel();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

  
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
/**
 * tests fromNow angularjs filter wrapper of moment.js
 * uses epoch milliseconds as that is what the back-end returns
 */

// create dummy angularJS app to attach filter(s)
var myfromNowFilterApp = angular.module('myfromNowFilterApp', ['fromNow']);

describe("The fromNow filter", function() {
    beforeEach(module('myfromNowFilterApp'));

    it('shows the present time as "a few seconds ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('a few seconds ago');
        })
    );

    it('shows 5 minutes ago as "5 minutes ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 5  * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('5 minutes ago');
        })
    );

    it('shows 4 hours ago as "4 hours ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 4 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('4 hours ago');
        })
    );

    it('shows 24 hours ago as "a day ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 24 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('a day ago');
        })
    );

    it('shows 36 hours ago as "2 days ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 36 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('2 days ago');
        })
    );

    it('shows 1550 hours ago as "2 months ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 1550 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('2 months ago');
        })
    );

    it('defaults to "a few seconds ago" for undefined values',
        inject(function(fromNowFilter) {
            // arrange

            // act

            // assert
            expect(fromNowFilter(undefined)).toBe('a few seconds ago');
            expect(fromNowFilter(null)).toBe('a few seconds ago');
            expect(fromNowFilter("some text")).toBe('a few seconds ago');
            expect(fromNowFilter({})).toBe('a few seconds ago');
            expect(fromNowFilter({time: "not time"})).toBe('a few seconds ago');
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myignoremapApp = angular.module('myignoremapApp', ['ignoremap']);

describe("The ignoremap filter", function() {
    beforeEach(module('myignoremapApp'));
    it('replaces `""` with `------ Ignore Row ------`',
        inject(function(ignoremapFilter) {
            // normal cases
            expect(ignoremapFilter('')).toBe('------ Ignore Row ------');
            expect(ignoremapFilter(' ')).toBe(' ');
            expect(ignoremapFilter('aignoremap')).toBe('aignoremap');
            expect(ignoremapFilter('ignoremap ')).toBe('ignoremap ');
            expect(ignoremapFilter('ok')).toBe('ok');
            expect(ignoremapFilter(undefined)).toBe('------ Ignore Row ------');
            expect(ignoremapFilter(null)).toBe('------ Ignore Row ------');
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: mapping_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, modal_state;
    var mapping_ctrl, mapping_ctrl_scope, modalInstance, labels;
    var timeout, mock_user_service, mock_search_service;



    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, building_services, $timeout, user_service, search_service) {
            controller = $controller;
            scope = $rootScope;
            mapping_ctrl_scope = $rootScope.$new();
            modal_state = "";
            timeout = $timeout;
            mock_user_service = user_service;
            mock_search_service = search_service;

            spyOn(mock_user_service, 'set_default_columns')
                .andCallFake(function(mapped_columns){
                    return undefined;
                });
            spyOn(mock_search_service, 'search_buildings')
                .andCallFake(function(){
                    return [1,2,3];
                });
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_mapping_controller(){
        var mock_datasets = [
            {
                name: "DC 2013 data",
                last_modified: (new Date()).getTime(),
                last_modified_by: "john.s@buildingenergy.com",
                number_of_buildings: 89,
                id: 1
            },
            {
                name: "DC 2014 data",
                last_modified: (new Date()).getTime() -
                    1550 * 60 * 60 * 1000,
                last_modified_by: "gavin.m@buildingenergy.com",
                number_of_buildings: 70,
                id: 2
            }
        ];
        var fake_import_file_payload = {
            "status": "success",
            "import_file": {
                        file_name: "assessor_fun.csv",
                        last_modified: (new Date()).getTime(),
                        last_modified_by: "john.s@buildingenergy.com",
                        source_type: 'AssessorRaw',
                        dataset: mock_datasets[0],
                        id: 1
                    }
        };

        var mock_be_building_columns = [
            'pm_property_id',
            'property_name',
            'property_notes',
            'tax_lot_id',
            'gross_floor_area',
            'My New non-BEDES field'
        ];

        var mock_be_building_types = {
            'gross_floor_area': {
                unit_type: 'float',
                schema: 'BEDES'
            }
        };

        var mock_mapping_suggestions_payload = {
            'status': 'success',
            'suggested_column_mappings': {
                // key(django model attribute): [csv_header1, ... csv_header3]
                'property id': ['pm_property_id', 89],
                'lot number': ['tax_lot_id' , 54]
            },
            "building_columns": mock_be_building_columns,
            "building_column_types": mock_be_building_types
        };

        var mock_raw_column_names = [
            'property id',
            'property_name',
            'property_notes',
            'lot number',
            'lot size'
        ];

        var mock_first_five_rows = [];
        for (var i=0; i < 4; i++) {
            mock_first_five_rows.push({
                'property id': i,
                'property_name': 'Property ' + i,
                'property_notes': 'Nup.',
                'lot number': i * 2,
                'lot size': 454 * i
            });
        }

        mock_first_five_rows.push({
            'property id': '121L',
            'property_name': 'Inconsistent Property',
            'property_notes': 'N/A',
            'lot number': 'N/A',
            'lot size': 45
        });

        var raw_columns_payload = {
            "status": "success",
            "raw_columns": mock_raw_column_names
        };
        var first_five_rows_payload = {
            "status": "success",
            "first_five_rows": mock_first_five_rows
        };
        mapping_ctrl = controller('mapping_controller', {
            $scope: mapping_ctrl_scope,
            import_file_payload: fake_import_file_payload,
            suggested_mappings_payload: mock_mapping_suggestions_payload,
            raw_columns_payload: raw_columns_payload,
            first_five_rows_payload: first_five_rows_payload,
            all_columns: {fields: []},
            building_services: mock_building_services,
            $timeout: timeout
        });
    }

    /*
     * Test scenarios
     */

    it("should have a import_file_payload", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        expect(mapping_ctrl_scope.import_file.dataset.name).toBe("DC 2013 data");
    });

    it("should show suggested mappings and confidence", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        var raw_columns = mapping_ctrl_scope.raw_columns;
        var first_column = raw_columns[0];

        expect(first_column.confidence).toBe(89);
        expect(first_column.suggestion).toBe("Pm Property Id");
    });

    it("should show 'low', 'med', 'high', or '' confidence text", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        var raw_columns = mapping_ctrl_scope.raw_columns;
        var first_column = raw_columns[0];
        expect(first_column.confidence_text()).toBe("high");
        first_column.confidence = 70;
        expect(first_column.confidence_text()).toBe("med");
        first_column.confidence = 35;
        expect(first_column.confidence_text()).toBe("low");
        delete(first_column.confidence);
        expect(first_column.confidence_text()).toBe("");
    });

    it("should validate initial data", function() {
        create_mapping_controller();
        // act
        mapping_ctrl_scope.$digest();
        // assertions
        angular.forEach(mapping_ctrl_scope.raw_columns, function(rc) {
            if (rc.suggestion !== '' && typeof(rc.suggestion) !== "undefined") {
                expect(rc.validity).toBe('valid');
            }
        });
    });

    it("should invalidate bad suggestions", function() {
        // Simulate a change on the tcm, make it fail.
        create_mapping_controller();
        // act
        mapping_ctrl_scope.$digest();
        // assertions
        //
        // We change the suggested mapping for the "property name" column
        // to "gross_floor_area" (which validates as float) to
        // purposesly cause a failing change.
        mapping_ctrl_scope.raw_columns[1].suggestion = 'gross_floor_area';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[1]);
        expect(mapping_ctrl_scope.raw_columns[1].validity).toBe('invalid');

    });

    it("should set td_class appropriately", function() {
        var tcm;

        create_mapping_controller();

        mapping_ctrl_scope.$digest();
        tcm = mapping_ctrl_scope.raw_columns[0];
        var good_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[0]
        );

        // First raw column is mapped up as pm_property_id <-> property_id
        // Any kind of string will be valid.
        expect(good_val).toBe('success');

        // Now set it to one that expects float values.
        // Only one of these will *not* validate.
        mapping_ctrl_scope.raw_columns[0].suggestion = 'gross_floor_area';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[0]);

        tcm = mapping_ctrl_scope.raw_columns[0];
        var warning_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[4]
        );

        expect(warning_val).toBe('warning');

        // We don't want the warning style to be applied to neighboring cells
        // in the same row. Check that the cell next to our invalid one is
        // unstyled (undefined).
        tcm = mapping_ctrl_scope.raw_columns[0];
        var adjacent_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[3]
        );

        expect(adjacent_val).toBe(undefined);

        // Now we're saying the suggestion is to not map.
        // Check that we don't have any class set for this row now.
        mapping_ctrl_scope.raw_columns[0].suggestion = '';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[0]);

        tcm = mapping_ctrl_scope.raw_columns[0];
        var blank_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[4]
        );

        expect(blank_val).toBe('');

    });

    it("should detect duplicates of mapped rows", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // raw_columns[0] and raw_columns[3] should be the only mapped rows
        var column = mapping_ctrl_scope.raw_columns[3];
        var test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

        // Set the property_name tcm's suggestion to the same as
        // the property_id tcm (raw_columns[0])
        column.suggestion = 'Pm Property Id';

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(true);

        // Since we mark both duplicates as duplicates, the other
        // TCM that has the 'pm_property_id' suggestion should also get
        // 'danger' as its duplicate class.
        var other_dup = mapping_ctrl_scope.is_tcm_duplicate(
            mapping_ctrl_scope.raw_columns[0]
        );
        expect(other_dup).toBe(true);

        // Shows that mapped_row is the sole determinant of
        // column ignoring
        column.mapped_row = false;

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

    });

    it("should ignore duplicates of unmapped rows", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // raw_columns[0] and raw_columns[3] should be the only mapped rows
        var column = mapping_ctrl_scope.raw_columns[1];
        var test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

        // Set the property_name tcm's suggestion to the same as
        // the property_id tcm (raw_columns[0])
        column.suggestion = 'Pm Property Id';

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);
    });

    it("should get mapped buildings", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        mapping_ctrl_scope.get_mapped_buildings();
        mapping_ctrl_scope.$digest();

        // assertions
        expect(mapping_ctrl_scope.search.search_buildings).toHaveBeenCalled();
        expect(mock_user_service.set_default_columns).toHaveBeenCalled();
    });

    it("should enbale the 'show & review buildings' button if duplicates are" +
        " not present", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        for (var i = mapping_ctrl_scope.raw_columns.length - 1; i >= 0; i--) {
            mapping_ctrl_scope.change(mapping_ctrl_scope.raw_columns[i]);
        }
        var duplicates_found = mapping_ctrl_scope.duplicates_present();

        // assertions
        expect(duplicates_found).toBe(false);
    });

    it("should disable the 'show & review buildings' button if duplicates " +
        "are present", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        for (var i = mapping_ctrl_scope.raw_columns.length - 1; i >= 0; i--) {
            mapping_ctrl_scope.raw_columns[i].suggestion = "pm_property_id";
            mapping_ctrl_scope.change(mapping_ctrl_scope.raw_columns[i]);
        }
        var duplicates_found = mapping_ctrl_scope.duplicates_present();

        // assertions
        expect(duplicates_found).toBe(true);
    });

    it("should get mappings in an API friendly way", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();
        var mappings = mapping_ctrl_scope.get_mappings();
        expect(mappings.length).toBe(5);
        expect(mappings[0]).toEqual(['Pm Property Id', 'property id']);
        // everything in between is empty since we we're using only
        // suggested mappings.
        expect(mappings[3]).toEqual(['Tax Lot Id', 'lot number']);
    });

    it("should show the 'STEP 2' tab when reviewing mappings", function() {
        // arrange
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // act
        var mappings = mapping_ctrl_scope.get_mapped_buildings();

        // assert
        expect(mapping_ctrl_scope.tabs).toEqual({
            'one_active': false,
            'two_active': true,
            'three_active': false
        });
    });

    it("should show BEDES fields with a checkbox", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assert
        expect(mapping_ctrl_scope.is_suggestion_BEDES('gross_floor_area')).toBe(true);
        expect(mapping_ctrl_scope.is_suggestion_BEDES('Gross Floor Area')).toBe(true);
        expect(mapping_ctrl_scope.is_suggestion_BEDES('My New non-BEDES field')).toBe(false);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: matching_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, delete_called;
    var matching_ctrl, matching_ctrl_scope, modalInstance, labels;


    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, building_services) {
            controller = $controller;
            scope = $rootScope;
            matching_ctrl_scope = $rootScope.$new();

            mock_building_services = building_services;
            spyOn(mock_building_services, "get_PM_filter_by_counts")
                .andCallFake(function(import_file){
                    return $q.when(
                        {
                            "status": "success",
                            "unmatched": 5,
                            "matched": 10
                        }
                    );
                }
            );
            spyOn(mock_building_services, "save_match")
                .andCallFake(function(b1, b2, create){
                    return $q.when(
                        {
                            "status": "success",
                            "child_id": 3
                        }
                    );
                }
            );
            spyOn(mock_building_services, "search_matching_buildings")
                .andCallFake(function(q, number_per_page, current_page, order_by, sort_reverse, 
                                        filter_params, file_id ){
                    
                    switch(filter_params.children__isnull){
                        case undefined:
                            var bldgs = [
                                {
                                    pm_property_id: 1
                                },
                                {
                                    pm_property_id: 2
                                }
                                ,
                                {
                                    pm_property_id: 3
                                }
                            ];
                            break;
                        case false:
                            var bldgs = [
                                {
                                    pm_property_id: 1
                                }
                            ];
                            break;
                        case true:
                            var bldgs = [
                                {
                                    pm_property_id: 3
                                },
                                {
                                    pm_property_id: 4
                                }
                            ];
                            break;
                    }

                    return $q.when(
                        {
                            status: "success",
                            number_returned: buildings_payload.length,
                            number_matching_search: buildings_payload.length,
                            buildings: bldgs;
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_detail_controller(){
        var buildings_payload = {
            buildings: [
                {
                    pm_property_id: 1,
                    tax_lot_id: null,
                    custom_id_1: 2,
                    gross_floor_area: 111,
                    matched: true,
                    id: 1,
                    children: [3],
                    coparent: {
                        pm_property_id: null,
                        tax_lot_id: 2,
                        custom_id_1: null,
                        gross_floor_area: 111,
                        id: 2,
                        children: [3]
                    }
                }
            ],
            number_matching_search: 1,
            number_returned: 1
        };
        matching_ctrl = controller('matching_controller', {
            $scope: matching_ctrl_scope,
            buildings_payload: buildings_payload,
            all_columns: {
                fields: [{sort_column: 'pm_property_id'}]
            },
            default_columns: {
                columns: ['pm_property_id']
            },
            import_file_payload: {
                import_file: {
                    id: 1,
                    dataset: {
                        importfiles: [
                            {
                                id: 1,
                                name: "file_1.csv"
                            },
                            {
                                id: 2,
                                name: "file_2.csv"
                            }
                        ]
                    }
                }
            }
        });
    }



    /*
     * Test scenarios
     */

    it("should have a buildings payload with potential matches", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();
        var b = matching_ctrl_scope.buildings[0];

        // assertions
        expect(matching_ctrl_scope.buildings.length).toBe(1);
        expect(b.coparent.children).toEqual(b.children);
    });

    it("should provide to the view scope variables representing the number matched and the number of unmatched buildings", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();

        // assertions
        expect(matching_ctrl_scope.matched_buildings).toEqual(10);
        expect(matching_ctrl_scope.unmatched_buildings).toEqual(15);
    });

    it("should jump back to the matching list when the 'Back to list' button" +
        " is clicked", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.show_building_list = false;
        matching_ctrl_scope.back_to_list();

        // assertions
        expect(matching_ctrl_scope.show_building_list).toEqual(true);
    });

    it("should present an initial state with the matching buildings table",
        function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();

        // assertions
        expect(matching_ctrl_scope.columns).toEqual([{ sort_column : 'pm_property_id' }]);
        expect(matching_ctrl_scope.number_matching_search).toEqual(1);
        expect(matching_ctrl_scope.number_returned).toEqual(1);
        expect(matching_ctrl_scope.num_pages).toEqual(1);
        expect(mock_building_services.get_PM_filter_by_counts).toHaveBeenCalled();
    });
    it("should match a building in the matching list", function() {
        // arrange
        create_dataset_detail_controller();
        var b1, b2;
        b2 = {
            id: 2,
            children: [],
            matched: false
        };
        b1 = {
            id: 1,
            children: [],
            matched: true,
            coparent: b2
        };

        // act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.toggle_match(b1);
        matching_ctrl_scope.$digest();

        // assertions
        expect(mock_building_services.save_match).toHaveBeenCalledWith(b1.id, b2.id, true);
        expect(mock_building_services.get_PM_filter_by_counts).toHaveBeenCalled();
        expect(b1.children[0]).toEqual(3);
    });
    it("Should update the list of buildings correctly when 'Show Matched' is selected", 
        function() {
        //arrange
        create_dataset_detail_controller();

        //act
        controller.update_show_filter(controller.SHOW_MATCHED)

        //assertions
        expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(1);
        expect(matching_ctrl_scope.number_returned).toEqual(1);
    });
    it("Should update the list of buildings correctly when 'Show Unmatched' is selected", 
        function() {
        //arrange
        create_dataset_detail_controller();

        //act
        controller.update_show_filter(controller.SHOW_UNMATCHED)

        //assertions
        expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(2);
        expect(matching_ctrl_scope.number_returned).toEqual(2);
    });
    it("Should update the list of buildings correctly when 'Show All' is selected", 
        function() {
        //arrange
        create_dataset_detail_controller();

        //act
        controller.update_show_filter(controller.SHOW_ALL)

        //assertions
        expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(3);
        expect(matching_ctrl_scope.number_returned).toEqual(3);
    });



});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: members_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller;
    var ctrl, ctrl_scope, modalInstance;
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          $q,
          organization_service) {
            ctrl = $controller;
            scope = $rootScope;
            ctrl_scope = $rootScope.$new();

            mock_organization_service = organization_service;
            
            spyOn(mock_organization_service, "remove_user")
                .andCallFake(function(user_id, org_id){
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
            spyOn(mock_organization_service, "get_organization_users")
                .andCallFake(function(org){
                    return $q.when(
                        {
                            "status": "success",
                            "users": [{id:1, first_name:"Bob", last_name:"D"}]
                        }
                    );
                }
            );
            spyOn(mock_organization_service, "update_role")
                .andCallFake(function(org_id, user_id, role){
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_members_controller(){
        ctrl = ctrl('members_controller', {
            $scope: ctrl_scope,
            users_payload: {users: [
                {first_name: 'J', last_name: 'S'},
                {first_name: undefined, last_name: null}
            ]},
            organization_payload: {
                organization: {name: 'my org', id: 4}
            },
            auth_payload: {
                auth: {
                    'can_invite_member': true,
                    'can_remove_member': true
                }
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should accepts its payload", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.org).toEqual({name : 'my org', id : 4});
        expect(ctrl_scope.users[0].name).toEqual("J S");
        expect(ctrl_scope.users[1].name).toEqual(" ");
    });
    it("clicking remove should remove a user", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.remove_member({user_id: 2});

        // assertions
        expect(mock_organization_service.remove_user)
            .toHaveBeenCalledWith(2, 4);
        
        ctrl_scope.$digest();
        expect(mock_organization_service.get_organization_users)
            .toHaveBeenCalledWith({org_id: 4});
    });
    it("clicking a new role should update the user's role", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.update_role({user_id: 2, role: "viewer"});

        // assertions
        expect(mock_organization_service.update_role)
            .toHaveBeenCalledWith(2, 4, 'viewer');
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: new_member_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_user_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, user_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        mock_user_service = user_service;
        spyOn(mock_user_service, "add")
            .andCallFake(function(user){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_new_member_controller(){
        ctrl = ctrl('new_member_modal_ctrl', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            organization: {organization_id: 1}
        });
    }

    /*
     * Test scenarios
     */

    it("should set the default role to 'member'", function() {
        // arrange
        create_new_member_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.user.role.value).toEqual("member"); 
    });
    it("should call the user service to add a new user to the org",
        function() {
        // arrange
        create_new_member_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.user.first_name = "JB";
        ctrl_scope.user.last_name = "Smooth";
        ctrl_scope.user.email = "jb.smooth@be.com";
        ctrl_scope.submit_form(true);

        // assertions
        expect(mock_user_service.add)
            .toHaveBeenCalledWith({
                first_name: "JB",
                last_name: "Smooth",
                email: "jb.smooth@be.com",
                role: ctrl_scope.roles[0],
                organization: {
                    organization_id: 1
                }
            });
    });
    
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
/**
 * run_jasmine.js: runs the jasmine JS test runner
 */
(function() {
    var jasmineEnv = jasmine.getEnv();
    jasmineEnv.updateInterval = 1000;

    var htmlReporter = new jasmine.HtmlReporter();

    jasmineEnv.addReporter(htmlReporter);

    jasmineEnv.specFilter = function(spec) {
        return htmlReporter.specFilter(spec);
    };

    var currentWindowOnload = window.onload;

    window.onload = function() {
        if (currentWindowOnload) {
        currentWindowOnload();
        }
        execJasmine();
    };
    function execJasmine() {
        jasmineEnv.execute();
    }
})();

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var searchTestApp = angular.module(
    'searchTestApp', ['BE.seed.service.search']
);

describe("The search_service service", function() {
    var saas, httpBackend, test_url;

    beforeEach(function () {
        module("searchTestApp");
        inject(function (search_service, $httpBackend) {
            saas = search_service;
            httpBackend = $httpBackend;
            httpBackend.when("POST", test_url).respond("ok");
        });

    });

    /**
     * sanitize_params tests
     */
    it('removes null and undefined values from filter_params', function () {
        // arrange
        saas.filter_params = {
          'National Median Site Energy Use__gte': 4,
          'National Median Site Energy Use__lte': null,
          'National Median Source EUI__gte': undefined
        };

        // act
        saas.sanitize_params();

        // assert
        expect(saas.filter_params).toEqual({'National Median Site Energy Use__gte': 4});
    });

    /**
     * search_buildings tests
     */
    it('has sane defaults', function() {
        expect(saas.url).toEqual("");
        expect(saas.error_message).toEqual("");
        expect(saas.alert).toEqual(false);
        expect(saas.buildings).toEqual([]);
        expect(saas.current_page).toEqual(1);
        expect(saas.number_per_page).toEqual(10);
        expect(saas.order_by).toEqual("");
        expect(saas.sort_column).toEqual("tax_lot_id");
        expect(saas.sort_reverse).toEqual(false);
        expect(saas.select_all_checkbox).toEqual(false);
        expect(saas.prev_page_disabled).toEqual(true);
        expect(saas.next_page_disabled).toEqual(true);
        expect(saas.num_pages).toEqual(0);
        expect(saas.query).toEqual("");
        expect(saas.showing).toEqual({
            'start': 1,
            'end': 0
        });
    });

    it('search_buildings uses the argument `query`', function() {
        saas.query = "hotels";
        saas.search_buildings("not hotels");

        expect(saas.query).toEqual("not hotels");
    });
    it('filter search resets the current page', function() {
        // arrange
        saas.current_page = 22;
        spyOn(saas, 'search_buildings');

        // act
        saas.filter_search();

        // assert
        expect(saas.current_page).toEqual(1);
        expect(saas.search_buildings).toHaveBeenCalled();
    });

    it('search_buildings function will default to its query if' +
        ' no query is passed as an argument', function() {
        saas.query = "hotels";
        saas.search_buildings();

        expect(saas.query).toEqual("hotels");
    });

    it('search_buildings hits the set url', function() {
        test_url = "/my-search-url";
        saas.url = test_url;
        saas.search_buildings();
        httpBackend.expectPOST(test_url);
        httpBackend.flush();
    });

    it('search_buildings POSTs the query data as `q`', function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.query = "hotel chains";
        saas.number_per_page = 25;
        saas.order_by = "gross_floor_area";
        saas.sort_reverse = true;
        saas.filter_params = {
            project: '2012 data'
        };

        // act
        saas.search_buildings();

        // assert
        httpBackend.expectPOST(test_url,
            {
                "q": "hotel chains",
                "number_per_page": 25,
                "order_by": "gross_floor_area",
                "sort_reverse": true,
                "filter_params": {
                    "project": "2012 data"
                },
                "page":1
            }
        ).respond(201, "");
        httpBackend.flush();
    });
    it('search_buildings updates its `buildings` model', function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.query = "hotel chains";
        saas.number_per_page = 25;
        saas.order_by = "gross_floor_area";
        saas.sort_reverse = true;
        saas.filter_params = {
            project: '2012 data'
        };

        // act
        saas.search_buildings();

        // assert
        httpBackend.expectPOST(test_url,
            {
                "q": "hotel chains",
                "number_per_page": 25,
                "order_by": "gross_floor_area",
                "sort_reverse": true,
                "filter_params": {
                    "project": "2012 data"
                },
                "page":1
            }
        ).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        expect(saas.buildings).toEqual([
            {
                name: "one",
                id: 1,
                checked: false
            },
            {
                name: "two",
                id: 2,
                checked: false
            }
        ]);
    });
    it('should clear the error and alert after a successful search',
        function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.error_message = "help";
        saas.alert = true;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {
            'buildings': [
                {
                    name: "one",
                    id: 1
                },
                {
                    name: "two",
                    id: 2
                }],
            'number_matching_search': 101
            });
        httpBackend.flush();

        // assert
        expect(saas.alert).toEqual(false);
        expect(saas.error_message).toEqual("");
    });

    /**
     * pagination tests
     */
    it('increments the page when the `next` button is clicked',
        function() {
        // arrange
        saas.num_pages = 1000;
        saas.current_page = 100;
        spyOn(saas, 'search_buildings');
        // act
        saas.next_page();

        // assert
        expect(saas.current_page).toEqual(101);
        expect(saas.search_buildings).toHaveBeenCalled();
        expect(saas.search_buildings.callCount).toEqual(1);

    });
    it('doesn\'t increment past the last page when the `next` button is' +
        ' clicked', function() {
        // arrange
        saas.num_pages = 2;
        saas.current_page = 2;
        spyOn(saas, 'search_buildings');
        // act
        saas.next_page();

        // assert
        expect(saas.current_page).toEqual(2);
        expect(saas.search_buildings).toHaveBeenCalled();
        expect(saas.search_buildings.callCount).toEqual(1);

    });
    it('decrements the page when the `previous` button is clicked',
        function() {
        // arrange
        saas.num_pages = 1000;
        saas.current_page = 100;
        spyOn(saas, 'search_buildings');
        // act
        saas.prev_page();

        // assert
        expect(saas.current_page).toEqual(99);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('does not decrement below the first page when the `previous` button' +
        ' is clicked', function() {
        // arrange
        saas.num_pages = 1;
        saas.current_page = 1;
        spyOn(saas, 'search_buildings');
        // act
        saas.prev_page();

        // assert
        expect(saas.current_page).toEqual(1);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('fetches more or less results per page when a user selects an option' +
        ' from the number per page select',
        function() {
        // arrange
        saas.number_per_page_options_model = 50;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_number_per_page();

        // assert
        expect(saas.number_per_page).toEqual(50);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('updates the number of results displayed text after a successful '+
        'search', function() {
        // standard case
        // page 2 of 3 with 10/page, so should display 11 of 20
        // arrange
        saas.current_page = 2;
        saas.num_pages = 3;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_start_end_paging();

        // assert
        expect(saas.showing.start).toEqual(11);
        expect(saas.showing.end).toEqual(20);
        expect(saas.search_buildings).not.toHaveBeenCalled();
    });
    it('displays the number matching the query if on the last page of results',
        function() {
        // standard case
        // page 3 of 3 with 10/page and 34 results, so should display 21 of 34
        // arrange
        saas.current_page = 3;
        saas.number_matching_search = 34;
        saas.num_pages = 3;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_start_end_paging();

        // assert
        expect(saas.showing.start).toEqual(21);
        expect(saas.showing.end).toEqual(34);
    });
    it('should call update_start_end_paging after a successful search',
        function() {
        // arrange
        spyOn(saas, 'update_start_end_paging');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_start_end_paging).toHaveBeenCalled();
    });
    it('should call update_buttons after a successful search',
        function() {
        // arrange
        spyOn(saas, 'update_buttons');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_buttons).toHaveBeenCalled();
    });
    it('should disable prev paging buttons at the first page',
        function() {
        // arrange
        saas.current_page = 1;
        saas.num_pages = 5;

        // act
        saas.update_buttons();

        // assert
        expect(saas.prev_page_disabled).toEqual(true);
        expect(saas.next_page_disabled).toEqual(false);
    });
    it('should disable next paging buttons at the last page',
        function() {
        // arrange
        saas.current_page = 5;
        saas.num_pages = 5;

        // act
        saas.update_buttons();

        // assert
        expect(saas.prev_page_disabled).toEqual(false);
        expect(saas.next_page_disabled).toEqual(true);
    });
    it('should calculate the number of pages after a successful search',
        function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {
            'buildings': [
                {
                    name: "one",
                    id: 1
                },
                {
                    name: "two",
                    id: 2
                }],
            'number_matching_search': 101
            });
        httpBackend.flush();

        // assert
        expect(saas.number_matching_search).toEqual(101);
        expect(saas.num_pages).toEqual(11);
    });

    /**
     * checkbox logic tests
     */
    it('should select or unselect all the viewed results when the select all' +
        ' checkbox is checked or unchecked', function() {
        // arrange
        saas.selected_buildings = [1,2,3];
        saas.select_all_checkbox = true;
        saas.buildings = [
            {
                checked: false
            },
            {
                checked: true
            }
        ];
        spyOn(saas, 'select_or_deselect_all_buildings').andCallThrough();

        // act
        saas.select_all_changed();

        // assert
        expect(saas.selected_buildings).toEqual([]);
        expect(saas.buildings).toEqual([
                {
                    checked: true
                },
                {
                    checked: true
                }
            ]);
        expect(saas.select_or_deselect_all_buildings).toHaveBeenCalled();
    });
    it('should call select_or_deselect_all_buildings after a search',
        function() {
        // arrange
        spyOn(saas, 'select_or_deselect_all_buildings');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.select_or_deselect_all_buildings).toHaveBeenCalled();
    });
    it('should add a building to the selected list when checked',
        function() {
        // arrange
        var building = {
            id: 5,
            checked: true
        };

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([5]);
    });
    it('should add a building to the selected list when unchecked and the ' +
        'select all checkbox is checked', function() {
        // arrange
        var building = {
            id: 5,
            checked: false
        };
        saas.select_all_checkbox = true;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([5]);
    });
    it('should remove a building to the selected list when unchecked',
        function() {
        // arrange
        var building = {
            id: 5,
            checked: false
        };
        saas.selected_buildings = [5,6,7];
        saas.select_all_checkbox = false;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([6,7]);
    });
    it('should remove a building to the selected list when checked if the ' +
        'select all checkbox is checked', function() {
        // arrange
        var building = {
            id: 5,
            checked: true
        };
        saas.selected_buildings = [5,6,7];
        saas.select_all_checkbox = true;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([6,7]);
    });
    it('should call load_state_from_selected_buildings after a successful ' +
        'search', function() {
        // arrange
        spyOn(saas, 'load_state_from_selected_buildings').andCallThrough();
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.load_state_from_selected_buildings).toHaveBeenCalled();
    });
    it('should call update_results after a successful ' +
        'search', function() {
        // arrange
        var select_or_deselect_all_buildings_time,
            load_state_from_selected_buildings_time;
        spyOn(saas, 'update_results').andCallThrough();
        spyOn(saas, 'select_or_deselect_all_buildings')
            .andCallFake(function() {
                select_or_deselect_all_buildings_time = new Date();
            }
        );
        spyOn(saas, 'load_state_from_selected_buildings')
            .andCallFake(function() {
                // wait for a sec, otherwise both have the same timestamp
                for(var y=0;y<100000;y++){
                    var x = new Date();
                    x = x+y;
                }
                load_state_from_selected_buildings_time = new Date();
            }
        );
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_results).toHaveBeenCalled();
        expect(select_or_deselect_all_buildings_time <
               load_state_from_selected_buildings_time).toBe(true);
    });
    it('check selected buildings successful', function() {
        // arrange
        saas.selected_buildings = [2];
        saas.buildings = [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ];

        // act
        saas.load_state_from_selected_buildings();

        // assert
        expect(saas.buildings[1]).toEqual({
            name: "two",
            id: 2,
            checked: true
        });
    });
    it('should generate columns', function() {
        // arrange
        var all_columns, column_headers, columns;
        all_columns = [
            {
                sort_column: "name"
            },
            {
                sort_column: "id"
            }
        ];
        column_headers = ["id"];
        saas.sort_column = "something else";
        saas.update_results({});
        // act
        columns = saas.generate_columns(
            all_columns, column_headers, saas.column_prototype
        );

        // assert that columns are extended off the prototype and only have
        // "id"
        expect(columns.length).toEqual(1);
        expect(columns[0].sort_column).toEqual("id");
        expect(columns[0].is_unsorted()).toEqual(true);
        saas.sort_column = "id";
        expect(columns[0].is_unsorted()).toEqual(false);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: settings_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller;
    var ctrl, ctrl_scope, modalInstance;
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          $q,
          organization_service) {
            ctrl = $controller;
            scope = $rootScope;
            ctrl_scope = $rootScope.$new();

            mock_organization_service = organization_service;
            
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_settings_controller(){
        ctrl = ctrl('settings_controller', {
            $scope: ctrl_scope,
            all_columns: {fields: [
                {checked: false, title: 'PM Property ID', sort_column: 'pm_property_id'},
                {checked: false, title: 'G', sort_column: 'g'},
                {checked: false, title: "Gross Floor Area", sort_column: 'gross_floor_area'}
            ]},
            organization_payload: {
                organization: {name: 'my org', id: 4}
            },
            query_threshold_payload: {
                query_threshold: 10
            },
            shared_fields_payload: {
                shared_fields: [
                    {
                        title: "PM Property Id",
                        sort_column: "pm_property_id"
                    }
                ],
                public_fields: [
                {
                    title: "Gross Floor Area",
                    sort_column: "gross_floor_area"
                }]
            },
            auth_payload: {
                auth: {
                    'is_owner': true,
                    'is_parent_org_owner': false
                }
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should accepts its payload", function() {
        // arrange
        create_settings_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.org).toEqual({
            name : 'my org',
            id : 4,
            query_threshold: 10
        });
        expect(ctrl_scope.fields[0].checked).toEqual(true);
        expect(ctrl_scope.fields[1].checked).toEqual(false);
        expect(ctrl_scope.fields[0].title).toEqual('PM Property ID');
    });
    it("should select all", function() {
        // arrange
        create_settings_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.controls.select_all = true;
        ctrl_scope.select_all_clicked();
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.infinite_fields[0].checked).toEqual(true);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myStripFilterApp = angular.module('myStripFilterApp', ['stripImportPrefix']);

describe("The stripImportPrefix filter", function() {
    beforeEach(module('myStripFilterApp'));
    it('Strips out the import prefix from building ids',
        // e.g. remove the 'IMP12-' from the id 'IMP12-1321/123'
        inject(function(stripImportPrefixFilter) {
            // normal cases
            expect(stripImportPrefixFilter('IMP134-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP134555-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP1-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP0-134')).toBe('134');
            // deals with `-`
            expect(stripImportPrefixFilter('IMP134-abc-dev')).toBe('abc-dev');
            // deals with `/`
            expect(stripImportPrefixFilter('IMP134-00/11')).toBe('00/11');
            // only strips first prefix
            expect(stripImportPrefixFilter('IMP134-IMP134-123')).toBe('IMP134-123');
        })
    );
    it("Does not strip out anything if there is not a prefix",
        inject(function(stripImportPrefixFilter) {
            // normal cases
            expect(stripImportPrefixFilter('123-123')).toBe('123-123');
            expect(stripImportPrefixFilter('0123/123')).toBe('0123/123');
        })
    );
    it("Is case sensitive to the import prefix",
        inject(function(stripImportPrefixFilter) {
            expect(stripImportPrefixFilter('imp123-abc')).toBe('imp123-abc');
            expect(stripImportPrefixFilter('iMp123-abc')).toBe('iMp123-abc');
            expect(stripImportPrefixFilter('iMP123-abc')).toBe('iMP123-abc');
        })
    );
    it("Handles undefined or null inputs",
        inject(function(stripImportPrefixFilter) {
            expect(stripImportPrefixFilter(undefined)).toBe(undefined);
            expect(stripImportPrefixFilter(null)).toBe(null);
        })
    );
    it("Only strips out the prefix if it has at least one digit and a hyphen",
        inject(function(stripImportPrefixFilter) {
            // must have the 'IMP' folowed by a digit then a hyphen
            expect(stripImportPrefixFilter('IMP-123')).toBe('IMP-123');
            expect(stripImportPrefixFilter('IMP1123')).toBe('IMP1123');
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myTitleCaseApp = angular.module('myTitleCaseApp', ['titleCase']);

describe("The TitleCase filter", function() {
    beforeEach(module('myTitleCaseApp'));
    it('Strips out ``_`` characters from strings and capitalizes the rest',
        inject(function(titleCaseFilter) {
            // normal cases
            expect(titleCaseFilter('super_data')).toBe('Super Data');
            expect(titleCaseFilter('super_data_45')).toBe('Super Data 45');
            expect(titleCaseFilter(undefined)).toBe(undefined);
            expect(titleCaseFilter(null)).toBe(null);
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myTypedNumberFilterApp = angular.module('myTypedNumberFilterApp', ['typedNumber']);

describe("The typedNumber filter", function() {
    beforeEach(module('myTypedNumberFilterApp'));
    it('should parse strings as strings and return them',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('tester')).toBe('tester');
        })
    );
    it('should parse strings as strings and return them, even if they look like numbers',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.1456')).toBe('123.1456');
        })
    );

    it('should parse numbers as numbers and return them',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.00001', 'number')).toBe("123");
        })
    );

    it('should allow the user to set the number of sig digits',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.321', 'number', 'not_year', 1)).toBe("123.3");
        })
    );

    it('should add commas to number greater than 999',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123456789', 'number', 'not_year', 0)).toBe("123,456,789");
        })
    );

    it('should parse year_built and not add commas',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('1946', 'number', 'year_built', 1)).toBe("1946");
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var validationTestApp = angular.module(
    'validationTestApp', ['mappingValidatorService']
);

describe("The MappingValidatorService", function() {
    var mvs;

    beforeEach(function () {
        module("validationTestApp");
        inject(function (mappingValidatorService) {
            mvs = mappingValidatorService;

        });

    });

    it('validates good string, float and date data', function() {
        // normal cases
        // Here ``type`` is undefined. Should still work.
        var str_data = ['Fun', 'fun2', 'fun3', 'fun4'];
        var float_data = ['12.34', '144.5', '234'];
        var date_data = ['2014/02/02', '03/13/2013', '03-14-2004'];

        expect(mvs.validate(str_data)).toEqual([]);
        expect(mvs.validate(float_data, 'float')).toEqual([]);
        expect(mvs.validate(date_data, 'date')).toEqual([]);
    });

    it('recognizes semivalid data', function() {
        // Cases where the data is /almost/ right.
        var float_data = ['12.34', '144.5', 'NaN'];
        var date_data = ['2014/02/02', 'huh?', '03-14-2004'];
        expect(mvs.validate(float_data, 'float')).toEqual(['NaN']);
        expect(mvs.validate(date_data, 'date')).toEqual(['huh?']);
    });

    it('recognizes invalid data', function() {
        // Cases where the data is *all* wrong.
        var float_data = ['', 'not a float', 'NaN'];
        var date_data = ['', 'huh?', 'what?'];
        // Cases where the data are correct.
        var good_float_data = ['12.34', '144.5', '234'];
        var good_date_data = ['2014/02/02', '03/13/2013', '03-14-2004'];

        // Data is wrong
        expect(mvs.validate(float_data, 'float')).toEqual(float_data);
        expect(mvs.validate(date_data, 'date')).toEqual(date_data);

        // Type is wrong
        // N.B. we use semivalid here, because Date is pretty forgiving w/ nums.
        expect(mvs.validate(good_float_data, 'date')).toEqual(['12.34']);
        expect(mvs.validate(good_date_data, 'float')).toEqual(good_date_data);


    });

});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// taken from the angularjs testing page
// http://docs.angularjs.org/guide/dev_guide.unit-testing

// create dummy angularJS app to attach filter(s)
var myBELabelDirectiveApp = angular.module('myBELabelDirectiveApp', ['beLabel']);

describe("The beLabel directive", function() {
    var $compile;
    var $rootScope;
    beforeEach(module('myBELabelDirectiveApp'));
    // Store references to $rootScope and $compile
    // so they are available to all tests in this describe block
    beforeEach(inject(function(_$compile_, _$rootScope_){
      // The injector unwraps the underscores (_) from around the parameter names when matching
      $compile = _$compile_;
      $rootScope = _$rootScope_;
    }));

    it('Replaces the element with the appropriate content', function() {
        // Compile a piece of HTML containing the directive
        var element = $compile('<be-label name="compliant" color="blue"></be-label>')($rootScope);
        // fire all the watches
        $rootScope.$digest();
        // Check that the compiled element contains the templated content
        expect(element.hasClass('label-primary')).toBe(true);
        expect(element.hasClass('label')).toBe(true);
        expect(element.html()).toContain("compliant");
    });

        // 'red': 'danger',
        // 'gray': 'default',
        // 'orange': 'warning',
        // 'green': 'success',
        // 'blue': 'primary',
        // 'light blue': 'info'
    it('Maps colors to semantic bootstrap class names', function() {
        var element = $compile('<be-label name="compliant" color="red"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-danger')).toBe(true);

        element = $compile('<be-label name="compliant" color="gray"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-default')).toBe(true);

        element = $compile('<be-label name="compliant" color="orange"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-warning')).toBe(true);

        element = $compile('<be-label name="compliant" color="green"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-success')).toBe(true);

        element = $compile('<be-label name="compliant" color="blue"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-primary')).toBe(true);

        element = $compile('<be-label name="compliant" color="light blue"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-info')).toBe(true);
    });


});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// taken from the angularjs testing page
// http://docs.angularjs.org/guide/dev_guide.unit-testing

// create dummy angularJS app to attach filter(s)
var myBEUploaderDirectiveApp = angular.module('myBEUploaderDirectiveApp', ['beUploader']);

describe("The beUploader directive", function() {
    var g_message, g_file, g_progress;
    var $compile;
    var $rootScope;
    var uploader_html = '<div be-uploader sourcetype="assessor" importrecord="5" buttontext="Upload your building list .csv file" eventfunc="uploaderfunc(message, filename, progress)" ng-hide="uploader.in_progress"></div>';
    beforeEach(module('myBEUploaderDirectiveApp'));
    // Store references to $rootScope and $compile
    // so they are available to all tests in this describe block
    beforeEach(inject(function(_$compile_, _$rootScope_){
      // The injector unwraps the underscores (_) from around the parameter names when matching
      $compile = _$compile_;
      $rootScope = _$rootScope_;
      $rootScope.eventfunc = function (fine_object) {
        console.log({fin: fine_object});
        g_message = fine_object.message;
        g_file = fine_object.file;
        g_progress = fine_object.progress;
      };
      window.BE = window.BE || {};
      window.BE.FILE_UPLOAD_DESTINATION = 'S3';
    }));

    it('Creates the fineuploader element', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        
        // act
        $rootScope.$digest();

        // assert
        expect(element.html()).toContain("qq-uploader");
        expect(element.html()).toContain("qq-upload-button");
    });

    it('Contains the buttontext specified', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);

        // act
        $rootScope.$digest();

        // assert
        expect(element.html()).toContain("Upload your building list .csv file");
    });

    it('Only allows one file to be uploaded at a time', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");

        // act
        $rootScope.$digest();

        // assert
        expect(func._options.multiple).toBe(false);
    });

    it('Uses the callback function for invalid file types', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.jpeg");

        // act
        $rootScope.$digest();
        func._options.showMessage("there was an invalid extension. Valid extension(s): .csv");


        // assert
        expect(g_message).toBe("invalid_extension");
    });

    it('Uses the callback function to share its state: upload started',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';
        
        // act
        $rootScope.$digest();
        func._options.callbacks.onSubmitted(1, filename);


        // assert
        expect(g_message).toBe("upload_submitted");
        expect(g_file.filename).toBe(filename);
    });

    it('Uses the callback function to share its state: in progress',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';
        var loaded = 10;
        var total = 100;
        
        // act
        $rootScope.$digest();
        func._options.callbacks.onProgress(1, filename, loaded, total);


        // assert
        expect(g_message).toBe("upload_in_progress");
        expect(g_file.filename).toBe(filename);
        expect(g_progress.loaded).toBe(loaded);
        expect(g_progress.total).toBe(total);
    });

    it('Uses the callback function to share its state: complete',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';

        
        // act
        $rootScope.$digest();
        func._options.callbacks.onComplete(1, filename, {success: true});


        // assert        
        expect(g_message).toBe("upload_complete");
        expect(g_file.filename).toBe(filename);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: building_detail_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, ngFilter, delete_called;
    var building_detail_ctrl, building_detail_ctrl_scope, modalInstance, labels;
    var mock_building_services, mock_project_service;
    var mock_building;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          urls,
          $q,
          building_services,
          project_service,
          $filter) {
            controller = $controller;
            scope = $rootScope;
            ngFilter = $filter;
            building_detail_ctrl_scope = $rootScope.$new();
            modal_state = "";
            delete_called = false;

            // mock the building_services factory methods used in the controller
            // and return their promises
            mock_building_services = building_services;
            mock_project_service = project_service;

            spyOn(mock_project_service, "get_project")
                .andCallFake(function(project_slug){
                    return $q.when(
                        {
                            "status": "success",
                            "project": {
                                id: 33,
                                name: "test project",
                                slug: project_slug
                            }
                        }
                    );
                }
            );
            spyOn(mock_project_service, "get_labels")
                .andCallFake(function(){
                    return $q.when(
                        {
                            "status": "success",
                            "labels": [{
                                id: 44,
                                name: "bad label",
                                color: "red"
                            }]
                        }
                    );
                }
            );
            spyOn(mock_project_service, "update_project_building")
                .andCallFake(function(building_id, project, label){
                    return $q.when(
                        {
                            "status": "success",
                            "approver": "bob doe",
                            "approved_date": "01/01/2012"
                        }
                    );
                }
            );
            spyOn(mock_building_services, "update_building")
                .andCallFake(function (building, org_id){
                    mock_building = building;
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_building_detail_controller(){
        var fake_building = {
            id: 511,
            pk: 511,
            gross_floor_area: 123456,
            gross_floor_area_source: 2,
            city: "DC",
            city_source: 4,
            tax_lot_id: "11/22",
            tax_lot_id_source: 3,
            extra_data: {
                'some other key': 12344,
                'some other key that is not in a parent': 223
            },
            extra_data_sources: {
                'some other key': 2,
                'some other key that is not in a parent': 3
            },
            created: "at some point"
        };
        var fake_imported_buildings = [
            {
                id: 2,
                pk: 2,
                gross_floor_area: 123456,
                gross_floor_area_source: null,
                city: "Washington, DC",
                city_source: null,
                extra_data: {
                    'some other key': 123,
                    'some other key that is not in a child': 333,
                    'some floor area': 444
                },
                extra_data_sources: {
                    'some other key': null,
                    'some other key that is not in a child': 111,
                    'some floor area': 444
                },
                created: "test"
            },
            {
                id: 3,
                pk: 3,
                gross_floor_area: 2111111,
                gross_floor_area_source: null,
                city: "Washington",
                city_source: null,
                tax_lot_id: "11/22",
                tax_lot_id_source: null,
                extra_data: {
                    'make it four': 4
                },
                extra_data_sources: {
                    'make it four': null
                }
            },{
                id: 4,
                pk: 4,
                gross_floor_area: 2111111,
                gross_floor_area_source: null,
                city: "Washington",
                city_source: null,
                tax_lot_id: "11/22",
                tax_lot_id_source: null,
                extra_data: {
                    'make it four': 5
                },
                extra_data_sources: {
                    'make it four': null
                }
            }
        ];
        var fake_payload = {
            "status": "success",
            "building": fake_building,
            "imported_buildings": fake_imported_buildings,
            "projects": [],
            "user_org_id": 42
        };
        var fake_all_columns = [{
            "title": "PM Property ID",
            "sort_column": "pm_property_id",
            "class": "is_aligned_right",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Tax Lot ID",
            "sort_column": "tax_lot_id",
            "class": "is_aligned_right",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Custom ID 1",
            "sort_column": "custom_id_1",
            "class": "is_aligned_right whitespace",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Property Name",
            "sort_column": "property_name",
            "class": "",
            "title_class": "",
            "type": "string",
            "field_type": "building_information",
            "sortable": true,
            "checked": false
        }];
        building_detail_ctrl = controller('building_detail_controller', {
            $scope: building_detail_ctrl_scope,
            $routeParams: {
                building_id: 1,
                project_id: 2
            },
            building_payload: fake_payload,
            all_columns: {
                fields: fake_all_columns
            },
            audit_payload: {
                audit_logs: []
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should have an building payload", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.building.id).toBe(511);
        expect(building_detail_ctrl_scope.imported_buildings[0].id).toBe(2);
    });

    it("should get labels on load", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.labels[0].id).toBe(44);
        expect(building_detail_ctrl_scope.labels[0].name).toBe("bad label");
        expect(building_detail_ctrl_scope.labels[0].color).toBe("red");
    });

    it("should highlight the active project", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.is_active_project({id:33}))
        .toBe(true);
        expect(building_detail_ctrl_scope.is_active_project({id:34}))
        .toBe(false);
        building_detail_ctrl_scope.project = undefined;
        expect(building_detail_ctrl_scope.is_active_project({id:34}))
        .toBe(false);
    });

    it("should make a copy of building while making edits", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.save_building_state();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;

        // assertions
        expect(building_detail_ctrl_scope.building_copy.gross_floor_area)
        .toBe(123456);
    });
    it("should restore the copy of building if a user clicks cancel",
        function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.save_building_state();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;
        building_detail_ctrl_scope.restore_building();

        // assertions
        expect(building_detail_ctrl_scope.building.gross_floor_area)
        .toBe(123456);
        expect(building_detail_ctrl_scope.building.edit_form_showing).toBe(false);
    });
    it("should save a building when a user clicks the save button", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;
        building_detail_ctrl_scope.save_building();

        // assertions
        expect(mock_building_services.update_building)
        .toHaveBeenCalledWith(building_detail_ctrl_scope.building, 42);
        expect(mock_building.gross_floor_area).toEqual(43214);
    });
    it("should show a default label if a building doesn't have one", function() {
        // arrange
        create_building_detail_controller();
        var building_with_label = {
            label: {
                name: "hello",
                label: "success"
            }
        };
        var building_without_label = {};
        var label_with, label_without;

        // act
        building_detail_ctrl_scope.$digest();
        label_with = building_detail_ctrl_scope.get_label(building_with_label);
        label_without = building_detail_ctrl_scope.get_label(building_without_label);

        // assertions
        expect(label_with).toEqual({
                name: "hello",
                label: "success"
            });
        expect(label_without).toEqual({
                name: "Add Label",
                label: "default"
            });
    });

    it("should show a project or buildings breadcrumb", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.user.project_slug = "project_1";

        // assertions
        expect(building_detail_ctrl_scope.is_project()).toEqual(true);
        building_detail_ctrl_scope.user.project_slug = undefined;
        expect(building_detail_ctrl_scope.is_project()).toEqual(false);

    });
    it("should show the default projects table if a user has no compliance" +
        " projects", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.user.has_projects()).toEqual(false);
        building_detail_ctrl_scope.projects = [{id: 1, name: "a"}];
        expect(building_detail_ctrl_scope.user.has_projects()).toEqual(true);

    });

    it("should set only building attribute to master, not ids or children", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.is_valid_key('id')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('pk')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('pk_source')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key(' extra_data ')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('gross_floor_area'))
          .toEqual(true);
    });
    it("should update a project-building label", function() {
        // arrange
        create_building_detail_controller();
        var project = {
            id: 2,
            building: {}
        };

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.update_project_building(project,
            {
                name: "label name",
                color: "red"
            });
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(mock_project_service.update_project_building).toHaveBeenCalled();
        expect(project.building.approver).toEqual("bob doe");
        expect(project.building.approved_date).toEqual("01/01/2012");
        expect(project.building.label.name).toEqual("label name");
        expect(project.building.label.color).toEqual("red");

    });
    it("should set a field as source when clicked", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[0].is_master = true;
        expect(building_detail_ctrl_scope.building.gross_floor_area_source)
          .not.toEqual(building_detail_ctrl_scope.building.id);
        building_detail_ctrl_scope.set_self_as_source('gross_floor_area');
        building_detail_ctrl_scope.set_self_as_source('some other key', true);
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.building.gross_floor_area_source)
          .toEqual(building_detail_ctrl_scope.building.id);
        expect(building_detail_ctrl_scope.imported_buildings[0].is_master)
          .toEqual(false);
    });
    it("should set a column as the dominant source when clicked", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[1].is_master = true;
        building_detail_ctrl_scope.make_source_default(
            building_detail_ctrl_scope.imported_buildings[0]);
        building_detail_ctrl_scope.$digest();

        // assertions
        var b = building_detail_ctrl_scope.building,
            i = building_detail_ctrl_scope.imported_buildings[0],
            i_other = building_detail_ctrl_scope.imported_buildings[1];

        expect(b.gross_floor_area_source).toEqual(i.id);
        expect(b.id).not.toEqual(i.id);
        expect(b.pk).not.toEqual(i.id);
        expect(b.city).toEqual(i.city);
        expect(b.city_source).toEqual(i.id);
        expect(b.tax_lot_id).toEqual("11/22");
        expect(b.tax_lot_id_source).toEqual(i_other.id);
        expect(b.extra_data['some other key']).toEqual(123);
        expect(b.extra_data_sources['some other key']).toEqual(i.id);
        expect(b.extra_data['some other key that is not in a child']).toEqual(333);
        expect(b.extra_data_sources['some other key that is not in a child']).toEqual(i.id);
        expect(b.extra_data['some other key that is not in a parent']).toEqual(223);
        expect(b.extra_data_sources['some other key that is not in a parent']).toEqual(i_other.id);
        expect(b.created).toEqual("at some point");

        expect(i.is_master).toEqual(true);
        expect(i_other.is_master).toEqual(false);
    });
    it("should set the master building value when parent's value is clicked",
        function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[1].is_master = true;
        building_detail_ctrl_scope.set_building_attribute(
            building_detail_ctrl_scope.imported_buildings[0], 'city');
        building_detail_ctrl_scope.set_building_attribute(
            building_detail_ctrl_scope.imported_buildings[0], 'some other key', true);
        building_detail_ctrl_scope.$digest();

        // assertions
        var b = building_detail_ctrl_scope.building,
            i = building_detail_ctrl_scope.imported_buildings[0],
            i_other = building_detail_ctrl_scope.imported_buildings[1];

        expect(b.id).not.toEqual(i.id);
        expect(b.pk).not.toEqual(i.id);
        expect(b.city).toEqual(i.city);
        expect(b.city_source).toEqual(i.id);
        expect(b.tax_lot_id).toEqual("11/22");
        expect(b.tax_lot_id_source).toEqual(i_other.id);
        expect(b.extra_data['some other key']).toEqual(123);
        expect(b.extra_data_sources['some other key']).toEqual(i.id);

        expect(i.is_master).toEqual(false);
        expect(i_other.is_master).toEqual(false);
    });

    it("should display all the data within all the buildings", function() {
        // arrange
        create_building_detail_controller();
        var keys;

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        var edc = building_detail_ctrl_scope.data_columns;

        // should not duplicate keys
        expect(edc.length).toEqual(8);
        keys = edc.map(function ( d ) {
            return d.key;
        });
        expect(keys.indexOf('make it four')).toEqual(4);
    });

    it("should display Floor Areas", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.$digest();

        // assertions
        var area_fields = building_detail_ctrl_scope.floor_area_fields;
        expect(area_fields.length).toEqual(1);
    });

    it("should display Floor Areas with number", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.get_number("")).toEqual(0);
        expect(building_detail_ctrl_scope.get_number("123,123,123")).toEqual(123123123);
        expect(building_detail_ctrl_scope.get_number("123,123,123.123")).toEqual(123123123.123);
        expect(building_detail_ctrl_scope.get_number("-123,123,123")).toEqual(-123123123);
        expect(building_detail_ctrl_scope.get_number(-123123123)).toEqual(-123123123);


    });
});

describe("controller: concat_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var scope, controller, modal_state;
    var edit_ctrl, concat_modal_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label, mock_mapping_service, mock_matching_service;
    var global_step = 1;
    var global_dataset = {};

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
            $controller, $rootScope, $modal, urls, $q
        ) {
            controller = $controller;
            scope = $rootScope;
            concat_modal_ctrl_scope = $rootScope.$new();
            concat_modal_ctrl_scope.concat_columns = [];
            modal_state = "";
        }
    ));

    var mock_building_column_types = [
        'address1', 'city', 'state', 'postal_code'
    ];

    var mock_raw_columns = [
        {
            name: 'Address',
            suggestion: 'address1',
            confidence: 1,
            raw_data: [
                '234 Database way',
                '23444 Huh hwy',
                '23444 Huh hwy',
                '23444 Huh hwy',
                '1223 face pl.'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        },
        {
            name: 'City',
            suggestion: 'city',
            confidence: 1,
            raw_data: [
                'Mega City', 'Mega City', 'Mega City', 'Mega City', 'Mega City'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        },
        {
            name: 'Zip',
            suggestion: '',
            confidence: 0,
            raw_data: [
                '234233', '234233', '234233', '234233', '234233'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        }
    ];

    // this is outside the beforeEach so it can be configured by each unit test
    function create_concat_modal_controller(){
        edit_ctrl = controller('concat_modal_ctrl', {
            $scope: concat_modal_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            building_column_types: mock_building_column_types,
            raw_columns: mock_raw_columns
        });
    }

    /*
     * Test scenarios
     */

    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.close_concat_modal();
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should mangle scope appropriately during concatenation", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(3);

        // arrange
        concat_modal_ctrl_scope.concat_columns =
            concat_modal_ctrl_scope.raw_columns.slice(0);
        concat_modal_ctrl_scope.raw_columns = [];

        // act
        concat_modal_ctrl_scope.$digest();
        concat_modal_ctrl_scope.save_concat();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(1);
        expect(
            concat_modal_ctrl_scope.raw_columns[0].is_concatenated
        ).toEqual(true);
    });

    it("should modify the raw_data of our modified TCM correctly", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(3);

        // arrange
        concat_modal_ctrl_scope.concat_columns =
            concat_modal_ctrl_scope.raw_columns.slice(0);
        concat_modal_ctrl_scope.raw_columns = [];

        // act
        concat_modal_ctrl_scope.$digest();
        concat_modal_ctrl_scope.save_concat();

        var expected_raw = [
            '234 Database way Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '1223 face pl. Mega City 234233'
        ];

        // assertions
        expect(
            concat_modal_ctrl_scope.raw_columns[0].raw_data
        ).toEqual(expected_raw);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: create_organization_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_organization_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, organization_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        mock_organization_service = organization_service;
        spyOn(mock_organization_service, "create_sub_org")
            .andCallFake(function(org, sub_org){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_organization_modal_ctrl(){
        ctrl = ctrl('create_organization_modal_ctrl', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            organization: {organization_id: 1}
        });
    }

    /*
     * Test scenarios
     */

    it("should call the organization service to add a new sub_org",
        function() {
        // arrange
        create_organization_modal_ctrl();

        // act
        ctrl_scope.$digest();
        ctrl_scope.sub_org.name = "my shiny new org";
        ctrl_scope.sub_org.email = "jb.smooth@be.com";
        ctrl_scope.submit_form(true);

        // assertions
        expect(mock_organization_service.create_sub_org)
            .toHaveBeenCalledWith(
                {
                    organization_id: 1
                },
                {
                    name: "my shiny new org",
                    email: "jb.smooth@be.com"
                }
            );
    });
    
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: data_upload_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_uploader_service, scope, controller, modal_state;
    var edit_ctrl, data_upload_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label, mock_mapping_service, mock_matching_service;
    var global_step = 1;
    var global_dataset = {};
    var return_labels = [
        {
            "name": 'compliant',
            "color": 'green',
            "id": 1
        },
        {
            "name": "new label",
            "color": "blue",
            "id": 2
        }
    ];

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, uploader_service, mapping_service, matching_service) {
            controller = $controller;
            scope = $rootScope;
            data_upload_ctrl_scope = $rootScope.$new();
            modal_state = "";

            // mock the uploader_service factory methods used in the controller
            // and return their promises
            mock_uploader_service = uploader_service;
            mock_mapping_service = mapping_service;
            mock_matching_service = matching_service;
            spyOn(mock_uploader_service, "get_AWS_creds")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "AWS_CLIENT_ACCESS_KEY": "123",
                            "AWS_UPLOAD_BUCKET_NAME": "test-bucket"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "check_progress")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "progress": "25.0"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "create_dataset")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "id": 3,
                                "name": dataset_name

                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error",
                                "message": "name already in use"
                            }
                        );
                    }
                }
            );
            spyOn(mock_uploader_service, "save_raw_data")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "file_id": 3
                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error"
                            }
                        );
                    }
                }
            );
            spyOn(mock_mapping_service, "start_mapping")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "file_id": 3
                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error"
                            }
                        );
                    }
                }
            );
            spyOn(mock_matching_service, "start_system_matching")
            .andCallFake(function(file_id){
                // return $q.reject for error scenario
                return $q.when(
                    {
                        "status": "success",
                        "file_id": 3
                    }
                );
            });

        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_data_upload_modal_controller(){
        edit_ctrl = controller('data_upload_modal_ctrl', {
            $scope: data_upload_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            step: global_step,
            dataset: global_dataset
        });
    }

    /*
     * Test scenarios
     */

    it("should close the modal when the close function is called", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.close();
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel function is called", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.cancel();
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

    it("should start at the step provided", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(1);

        // arrange
        global_step = 2;
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(2);
    });

    it("should goto different steps", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var step;
        step = 2;
        data_upload_ctrl_scope.goto_step(step);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(step);
    });

    it("disables the 'Name it' button if no text is entered", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(true);
    });
    it("disables the 'Name it' button if no text is entered, then cleared",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.dataset.name = undefined;
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(true);
    });
    it("enables the 'Name it' button if text is entered", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.dataset.name = "my dataset name";
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(false);
    });
    it("should show an alert if the dataset name is already in use",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.create_dataset("fail");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.alert).toBe(true);
    });
    it("should not show an alert if the dataset name is not already in use",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.create_dataset("my shiny new dataset");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.alert).toBe(false);
    });
    it("after creating a dataset, stores the dataset id", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var ds_name = "my shiny new dataset";
        data_upload_ctrl_scope.create_dataset(ds_name);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.id).toBe(3);
        expect(data_upload_ctrl_scope.dataset.name).toBe(ds_name);
    });
    it("after uploading a file, stores the file id", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var message, filename;
        message = "upload_complete";
        filename = "file1.csv";

        // act
        data_upload_ctrl_scope.uploaderfunc(message, {
            filename: filename,
            file_id: 20140313
        });
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.import_file_id).toBe(20140313);
    });
    it("should show an invalid extension alert if a file with an invalid" +
        "extension is loaded", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.uploaderfunc("invalid_extension");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.invalid_extension_alert)
            .toBe(true);
    });
    it("should hide the upload button after the user selects a file",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename;
        message = "upload_submitted";
        filename = "file1.csv";

        // act
        data_upload_ctrl_scope.uploaderfunc(message, {filename: filename});
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.filename).toBe(filename);
        expect(data_upload_ctrl_scope.uploader.in_progress).toBe(true);
    });
    it("should show the progressbar during upload",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename, progress;
        message = "upload_in_progress";
        filename = "file1.csv";
        progress = {
            loaded: 10,
            total: 100
        };

        // act
        data_upload_ctrl_scope.uploaderfunc(message, filename, progress);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.in_progress).toBe(true);
        expect(data_upload_ctrl_scope.uploader.progress).toBe(2.5);
    });
    it("should start saving the energy data when the file has been uploaded",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename;
        message = "upload_complete";
        filename = "file1.csv";
        data_upload_ctrl_scope.step.number = 4;

        // act
        data_upload_ctrl_scope.uploaderfunc(message, filename);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.status_message)
            .toBe("saving energy data");
    });

    it("should take an dataset payload", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.name).toBe("");
        expect(data_upload_ctrl_scope.dataset.filename).toBe("");
        expect(data_upload_ctrl_scope.dataset.id).toBe(0);
    });

    it("should extend a custom dataset payload", function() {
        // arrange
        global_dataset = {
            id: 100,
            filename: "seed_data.csv",
            name: "Compliance Project"
        };
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.name).toBe("Compliance Project");
        expect(data_upload_ctrl_scope.dataset.filename).toBe("seed_data.csv");
        expect(data_upload_ctrl_scope.dataset.id).toBe(100);
        expect(data_upload_ctrl_scope.dataset.alert).toBe(false);

    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: dataset_detail_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, ngFilter, delete_called;
    var dataset_detail_ctrl, dataset_detail_ctrl_scope, modalInstance, labels;

    

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, dataset_service, $filter) {
            controller = $controller;
            scope = $rootScope;
            ngFilter = $filter;
            dataset_detail_ctrl_scope = $rootScope.$new();
            modal_state = "";
            delete_called = false;

            // mock the dataset_service factory methods used in the controller
            // and return their promises
            mock_dataset_service = dataset_service;
            spyOn(mock_dataset_service, "get_dataset")
                .andCallFake(function(dataset_id){
                    // return $q.reject for error scenario
                    var fake_importfiles = [
                        {
                            name: "DC_CoveredBuildings_50k.csv",
                            number_of_buildings: 511,
                            number_of_mappings: 511,
                            number_of_cleanings: 1349,
                            source_type: "Assessed Raw",
                            number_of_matchings: 403
                        },
                        {
                            name: "DC_ESPM_Report.csv",
                            number_of_buildings: 511,
                            number_of_matchings: 403,
                            source_type: "Portfolio Raw"
                        }
                    ];
                    var fake_dataset = {
                        name: "DC 2013 data",
                        last_modified: (new Date()).getTime(),
                        last_modified_by: "john.s@buildingenergy.com",
                        number_of_buildings: 89,
                        id: 1,
                        importfiles: fake_importfiles
                    };
                    var fake_payload = {
                        "status": "success",
                        "dataset": fake_dataset
                    };
                    if (delete_called) {
                        fake_payload.dataset.importfiles.pop();
                    }
                    console.log({delete_called: delete_called, ds: fake_payload});
                    return $q.when(fake_payload);
                }
            );

            spyOn(mock_dataset_service, "delete_file")
                .andCallFake(function(import_file){
                    delete_called = true;
                    console.log({d: "delete_called"});
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_detail_controller(){
        var fake_importfiles = [
            {
                name: "DC_CoveredBuildings_50k.csv",
                number_of_buildings: 511,
                number_of_mappings: 511,
                number_of_cleanings: 1349,
                source_type: "Assessed Raw",
                number_of_matchings: 403
            },
            {
                name: "DC_ESPM_Report.csv",
                number_of_buildings: 511,
                number_of_matchings: 403,
                source_type: "Portfolio Raw"
            }
        ];
        var fake_dataset = {
            name: "DC 2013 data",
            last_modified: (new Date()).getTime(),
            last_modified_by: "john.s@buildingenergy.com",
            number_of_buildings: 89,
            id: 1,
            importfiles: fake_importfiles
        };
        var fake_payload = {
            "status": "success",
            "dataset": fake_dataset
        };
        dataset_detail_ctrl = controller('dataset_detail_controller', {
            $scope: dataset_detail_ctrl_scope,
            dataset_payload: fake_payload
        });
    }

    /*
     * Test scenarios
     */

    it("should have an data set payload with import files", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        dataset_detail_ctrl_scope.$digest();

        // assertions
        expect(dataset_detail_ctrl_scope.dataset.importfiles.length).toBe(2);
    });

    it("should show an alert when the delete icon is clicked", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        dataset_detail_ctrl_scope.$digest();
        var importfiles = dataset_detail_ctrl_scope.dataset.importfiles;
        dataset_detail_ctrl_scope.delete_file(importfiles[0]);
        dataset_detail_ctrl_scope.$digest();

        // assertions
        expect(dataset_detail_ctrl_scope.dataset.importfiles.length).toBe(1);
    });
   
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: dataset_list_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, modal_state;
    var edit_ctrl, dataset_list_ctrl_scope, modalInstance, labels;
    var location;

    

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, uploader_service,
            $location) {
            controller = $controller;
            scope = $rootScope;
            dataset_list_ctrl_scope = $rootScope.$new();
            modal_state = "";
            location = $location;

            // mock the uploader_service factory methods used in the controller
            // and return their promises
            mock_uploader_service = uploader_service;
            spyOn(mock_uploader_service, "get_AWS_creds")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "AWS_CLIENT_ACCESS_KEY": "123",
                            "AWS_UPLOAD_BUCKET_NAME": "test-bucket"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "create_dataset")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "import_record_id": 3,
                                "import_record_name": dataset_name

                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error",
                                "message": "name already in use"
                            }
                        );
                    }
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_list_controller(){
        var fake_datasets_payload = {
            "status": "success",
            "datasets": [
                {
                    name: "DC 2013 data",
                    last_modified: (new Date()).getTime(),
                    last_modified_by: "john.s@buildingenergy.com",
                    number_of_buildings: 89
                },
                {
                    name: "DC 2014 data",
                    last_modified: (new Date()).getTime() -
                        1550 * 60 * 60 * 1000,
                    last_modified_by: "gavin.m@buildingenergy.com",
                    number_of_buildings: 70
                }
            ]
        };
        edit_ctrl = controller('dataset_list_controller', {
            $scope: dataset_list_ctrl_scope,
            datasets_payload: fake_datasets_payload
        });
    }

    /*
     * Test scenarios
     */

    it("should have a dataset_payload", function() {
        // arrange
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();

        // assertions
        expect(dataset_list_ctrl_scope.datasets.length).toEqual(2);
    });

    it("should disable the mapping button if the dataset has no" +
        " Assessor files", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Portfolio Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_assessor_files(dataset);

        // assertions
        expect(disabled).toEqual(true);
    });

    it("should enable the mapping button if the dataset has at least one" +
        " Assessor file", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_assessor_files(dataset);

        // assertions
        expect(disabled).toEqual(false);
    });
    it("should disable the matching button if the dataset has no" +
        " Portfolio Manger files", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Assessed Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_pm_files(dataset);

        // assertions
        expect(disabled).toEqual(true);
    });
    it("should enable the matching button if the dataset has at least one" +
        " Portfolio Manger file", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_pm_files(dataset);

        // assertions
        expect(disabled).toEqual(false);
    });
    it("should navigate to the mapping page of the first assessed" +
        " import file when the ``Mapping`` button is clicked", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Assessed Raw",
                    id: 3
                },
                {
                    source_type: "Assessed Raw",
                    id: 5
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        dataset_list_ctrl_scope.goto_mapping(dataset);

        // assertions
        expect(location.path()).toBe('/data/mapping/3');
    });
    it("should navigate to the matching page of the first Portfolio Manager" +
        " import file when the ``Matching`` button is clicked", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw",
                    id: 3
                },
                {
                    source_type: "Portfolio Raw",
                    id: 5
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        dataset_list_ctrl_scope.goto_matching(dataset);

        // assertions
        expect(location.path()).toBe('/data/matching/3');
    });

   
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: delete_modal_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, building_services, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        // mock the export_service factory methods used in the controller
        // and return their promises
        mock_building_services = building_services;
        spyOn(mock_building_services, "delete_buildings")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_delete_modal_controller(){
        ctrl = ctrl('delete_modal_controller', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            search: { 
                selected_buildings: [1,2],
                filter_params: {},
                select_all_checkbox: false,
                order_by: "",
                sort_reverse: false,
                number_matching_search: 1000
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should start at the delete page", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.delete_state).toEqual("delete"); 
    });
    it("should save the search paramaters",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.delete_payload;
        expect(b.selected_buildings).toEqual([1,2]);
        expect(b.filter_params).toEqual({});
        expect(b.order_by).toEqual("");
        expect(b.sort_reverse).toEqual(false);
        expect(b.select_all_checkbox).toEqual(false);
    });
    it("should delete when the delete button is clicked",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.delete_buildings();

        // assertions
        expect(ctrl_scope.delete_state).toEqual("prepare");
        expect(mock_building_services.delete_buildings).toHaveBeenCalled();
    });
    it("should show the success page when the delete is finished",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.delete_buildings();
        ctrl_scope.$digest();

        // assertions
        expect(mock_building_services.delete_buildings).toHaveBeenCalled();
        expect(ctrl_scope.delete_state).toEqual("success");
    });
    it("should show the number of buildings to be deleted",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        var number_to_delete = ctrl_scope.number_to_delete();

        // assertions
        expect(number_to_delete).toEqual(2);
    });
    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.close();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.cancel();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

  
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myDistrictApp = angular.module('myDistrictApp', ['district']);

describe("The district filter", function() {
    beforeEach(module('myDistrictApp'));
    it('replaces `district` with `County/District/Ward/Borough`',
        inject(function(districtFilter) {
            // normal cases
            expect(districtFilter('district')).toBe('County/District/Ward/Borough');
            expect(districtFilter('District')).toBe('County/District/Ward/Borough');
            expect(districtFilter('DistRict')).toBe('County/District/Ward/Borough');
            expect(districtFilter('DISTRICT')).toBe('County/District/Ward/Borough');
            expect(districtFilter('aDISTRICT')).toBe('aDISTRICT');
            expect(districtFilter('')).toBe('');
            expect(districtFilter('district ')).toBe('district ');
            expect(districtFilter('ok')).toBe('ok');
            expect(districtFilter(undefined)).toBe(undefined);
            expect(districtFilter(null)).toBe(null);
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: edit_label_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, modal_state;
    var edit_ctrl, edit_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label;
    var return_labels = [
        {
            "name": 'compliant',
            "color": 'green',
            "id": 1
        },
        {
            "name": "new label",
            "color": "blue",
            "id": 2
        }
    ];

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, urls, $q, project_service) {
        controller = $controller;
        scope = $rootScope;
        edit_ctrl_scope = $rootScope.$new();
        modal_state = "";

        // mock the project_service factory methods used in the controller
        // and return their promises
        mock_project_service = project_service;
        spyOn(mock_project_service, "get_labels")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success", "labels": return_labels});
            }
        );
        spyOn(mock_project_service, "add_label")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
        spyOn(mock_project_service, "delete_label")
            .andCallFake(function(label){
                deleted_label = label;
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
        spyOn(mock_project_service, "update_label")
            .andCallFake(function(label){
                updated_label = label;
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );

    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_edit_modal_controller(){
        var labels = [
            {
                "name": 'compliant',
                "color": 'green',
                "id": 1
            }
        ];

        edit_ctrl = controller('edit_label_modal_ctrl', {
            $scope: edit_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            labels: labels
        });
    }

    /*
     * Test scenarios
     */

    it("should initialize the default label", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.$digest();
        edit_ctrl_scope.initialize_label_modal();

        // assertions
        expect(edit_ctrl_scope.label_modal.color).toBe("gray");
        expect(edit_ctrl_scope.label_modal.label).toBe("default");
        expect(edit_ctrl_scope.label_modal.name).toBe("");
        expect(edit_ctrl_scope.modal.label.state).toBe("create");
    });

    it("should get the labels available to an organization", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.add_label({});  // calls private get_labels
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.labels.length).toBe(2);
    });

    it("should add a label in the user's organization", function() {
        // arrange
        create_edit_modal_controller();
        var label_to_add = {
            color: "blue",
            label: "primary",
            name: "new label"
        };

        // act
        edit_ctrl_scope.add_label(label_to_add);
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.labels.length).toBe(2);
        expect(edit_ctrl_scope.labels[1].color).toBe("blue");
        expect(edit_ctrl_scope.labels[1].name).toBe("new label");
    });

    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.close();
        edit_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.cancel();
        edit_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

    it("sets the label_modal to the label when its edit button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.edit_label(label);
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.label_modal.color).toBe(label.color);
        expect(edit_ctrl_scope.label_modal.name).toBe(label.name);
        expect(edit_ctrl_scope.modal.label.state).toBe("edit");

        // assert that edit_ctrl_scope.label_modal is a copy and not a reference to label
        edit_ctrl_scope.label_modal.name = "random name here";
        expect(edit_ctrl_scope.label_modal.name).not.toBe(label.name);
    });
    
    it("deletes the appropriate label when the delete button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.delete_label(label);
        edit_ctrl_scope.$digest();

        // assertions
        expect(deleted_label).toBe(label);
    });

    it("updates the appropriate label when the update label button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.edit_label(label);
        edit_ctrl_scope.$digest();
        edit_ctrl_scope.label_modal.name = "harry";
        edit_ctrl_scope.label_modal.color = "blue";
        edit_ctrl_scope.update_label(edit_ctrl_scope.label_modal);
        edit_ctrl_scope.$digest();

        // assertions
        expect(mock_project_service.update_label).toHaveBeenCalledWith(edit_ctrl_scope.label_modal);
        expect(updated_label).toBe(edit_ctrl_scope.label_modal);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: export_modal_controller", function(){
    // globals set up and used in each test scenario
    var mock_export_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, export_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        // mock the export_service factory methods used in the controller
        // and return their promises
        mock_export_service = export_service;
        spyOn(mock_export_service, "export_buildings")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success", "export_id": "123456"});
            }
        );
        spyOn(mock_export_service, "export_buildings_progress")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({
                    "status": "success",
                    "buildings_processed": 1000
                });
            }
        );
            spyOn(mock_export_service, "export_buildings_download")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({
                    "status": "success",
                    "url": "#"
                });
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_export_modal_controller(){
        ctrl = ctrl('export_modal_controller', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            search: { 
                selected_buildings: [],
                filter_params: {},
                select_all_checkbox: false,
                order_by: "",
                sort_reverse: false,
                number_matching_search: 1000
            },
            selected_fields: ['tax_lot_id', 'postal_code'],
            project: {
                id: 11
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should start at the create page", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.export_state).toEqual("create"); 
    });
    it("should start with an empty name and default file type of 'xls'",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.building_export;
        expect(b.export_name).toEqual("");
        expect(b.export_type).toEqual("xls");
    });
    it("should save the search paramaters",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.building_export;
        expect(b.selected_buildings).toEqual([]);
        expect(b.filter_params).toEqual({});
        expect(b.order_by).toEqual("");
        expect(b.sort_reverse).toEqual(false);
        expect(b.select_all_checkbox).toEqual(false);
        expect(b.selected_fields).toEqual(['tax_lot_id', 'postal_code']);
        expect(b.project_id).toEqual(11);
        expect(ctrl_scope.progress_denominator).toEqual(0);
    });
    it("should kick off the export process when the export button is clicked",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.export_buildings();

        // assertions
        expect(ctrl_scope.export_state).toEqual("prepare");
        expect(mock_export_service.export_buildings).toHaveBeenCalled();
    });
    it("should show the success page when the data is ready",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.show_success_page("123");
        ctrl_scope.$digest();

        // assertions
        expect(mock_export_service.export_buildings_download).toHaveBeenCalled();
        expect(ctrl_scope.export_state).toEqual("success");
    });
    it("should update the progress bar",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.monitor_progress("123", 1000);
        ctrl_scope.$digest();
        timeout.flush();

        // assertions
        expect(mock_export_service.export_buildings_progress).toHaveBeenCalled();
        expect(ctrl_scope.progress_percentage).toEqual(100);
        expect(ctrl_scope.progress_numerator).toEqual(1000);
        expect(ctrl_scope.progress_denominator).toEqual(1000);
    });
    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.close();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.cancel();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

  
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
/**
 * tests fromNow angularjs filter wrapper of moment.js
 * uses epoch milliseconds as that is what the back-end returns
 */

// create dummy angularJS app to attach filter(s)
var myfromNowFilterApp = angular.module('myfromNowFilterApp', ['fromNow']);

describe("The fromNow filter", function() {
    beforeEach(module('myfromNowFilterApp'));

    it('shows the present time as "a few seconds ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('a few seconds ago');
        })
    );

    it('shows 5 minutes ago as "5 minutes ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 5  * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('5 minutes ago');
        })
    );

    it('shows 4 hours ago as "4 hours ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 4 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('4 hours ago');
        })
    );

    it('shows 24 hours ago as "a day ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 24 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('a day ago');
        })
    );

    it('shows 36 hours ago as "2 days ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 36 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('2 days ago');
        })
    );

    it('shows 1550 hours ago as "2 months ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 1550 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('2 months ago');
        })
    );

    it('defaults to "a few seconds ago" for undefined values',
        inject(function(fromNowFilter) {
            // arrange

            // act

            // assert
            expect(fromNowFilter(undefined)).toBe('a few seconds ago');
            expect(fromNowFilter(null)).toBe('a few seconds ago');
            expect(fromNowFilter("some text")).toBe('a few seconds ago');
            expect(fromNowFilter({})).toBe('a few seconds ago');
            expect(fromNowFilter({time: "not time"})).toBe('a few seconds ago');
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myignoremapApp = angular.module('myignoremapApp', ['ignoremap']);

describe("The ignoremap filter", function() {
    beforeEach(module('myignoremapApp'));
    it('replaces `""` with `------ Ignore Row ------`',
        inject(function(ignoremapFilter) {
            // normal cases
            expect(ignoremapFilter('')).toBe('------ Ignore Row ------');
            expect(ignoremapFilter(' ')).toBe(' ');
            expect(ignoremapFilter('aignoremap')).toBe('aignoremap');
            expect(ignoremapFilter('ignoremap ')).toBe('ignoremap ');
            expect(ignoremapFilter('ok')).toBe('ok');
            expect(ignoremapFilter(undefined)).toBe('------ Ignore Row ------');
            expect(ignoremapFilter(null)).toBe('------ Ignore Row ------');
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: mapping_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, modal_state;
    var mapping_ctrl, mapping_ctrl_scope, modalInstance, labels;
    var timeout, mock_user_service, mock_search_service;



    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, building_services, $timeout, user_service, search_service) {
            controller = $controller;
            scope = $rootScope;
            mapping_ctrl_scope = $rootScope.$new();
            modal_state = "";
            timeout = $timeout;
            mock_user_service = user_service;
            mock_search_service = search_service;

            spyOn(mock_user_service, 'set_default_columns')
                .andCallFake(function(mapped_columns){
                    return undefined;
                });
            spyOn(mock_search_service, 'search_buildings')
                .andCallFake(function(){
                    return [1,2,3];
                });
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_mapping_controller(){
        var mock_datasets = [
            {
                name: "DC 2013 data",
                last_modified: (new Date()).getTime(),
                last_modified_by: "john.s@buildingenergy.com",
                number_of_buildings: 89,
                id: 1
            },
            {
                name: "DC 2014 data",
                last_modified: (new Date()).getTime() -
                    1550 * 60 * 60 * 1000,
                last_modified_by: "gavin.m@buildingenergy.com",
                number_of_buildings: 70,
                id: 2
            }
        ];
        var fake_import_file_payload = {
            "status": "success",
            "import_file": {
                        file_name: "assessor_fun.csv",
                        last_modified: (new Date()).getTime(),
                        last_modified_by: "john.s@buildingenergy.com",
                        source_type: 'AssessorRaw',
                        dataset: mock_datasets[0],
                        id: 1
                    }
        };

        var mock_be_building_columns = [
            'pm_property_id',
            'property_name',
            'property_notes',
            'tax_lot_id',
            'gross_floor_area',
            'My New non-BEDES field'
        ];

        var mock_be_building_types = {
            'gross_floor_area': {
                unit_type: 'float',
                schema: 'BEDES'
            }
        };

        var mock_mapping_suggestions_payload = {
            'status': 'success',
            'suggested_column_mappings': {
                // key(django model attribute): [csv_header1, ... csv_header3]
                'property id': ['pm_property_id', 89],
                'lot number': ['tax_lot_id' , 54]
            },
            "building_columns": mock_be_building_columns,
            "building_column_types": mock_be_building_types
        };

        var mock_raw_column_names = [
            'property id',
            'property_name',
            'property_notes',
            'lot number',
            'lot size'
        ];

        var mock_first_five_rows = [];
        for (var i=0; i < 4; i++) {
            mock_first_five_rows.push({
                'property id': i,
                'property_name': 'Property ' + i,
                'property_notes': 'Nup.',
                'lot number': i * 2,
                'lot size': 454 * i
            });
        }

        mock_first_five_rows.push({
            'property id': '121L',
            'property_name': 'Inconsistent Property',
            'property_notes': 'N/A',
            'lot number': 'N/A',
            'lot size': 45
        });

        var raw_columns_payload = {
            "status": "success",
            "raw_columns": mock_raw_column_names
        };
        var first_five_rows_payload = {
            "status": "success",
            "first_five_rows": mock_first_five_rows
        };
        mapping_ctrl = controller('mapping_controller', {
            $scope: mapping_ctrl_scope,
            import_file_payload: fake_import_file_payload,
            suggested_mappings_payload: mock_mapping_suggestions_payload,
            raw_columns_payload: raw_columns_payload,
            first_five_rows_payload: first_five_rows_payload,
            all_columns: {fields: []},
            building_services: mock_building_services,
            $timeout: timeout
        });
    }

    /*
     * Test scenarios
     */

    it("should have a import_file_payload", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        expect(mapping_ctrl_scope.import_file.dataset.name).toBe("DC 2013 data");
    });

    it("should show suggested mappings and confidence", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        var raw_columns = mapping_ctrl_scope.raw_columns;
        var first_column = raw_columns[0];

        expect(first_column.confidence).toBe(89);
        expect(first_column.suggestion).toBe("Pm Property Id");
    });

    it("should show 'low', 'med', 'high', or '' confidence text", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        var raw_columns = mapping_ctrl_scope.raw_columns;
        var first_column = raw_columns[0];
        expect(first_column.confidence_text()).toBe("high");
        first_column.confidence = 70;
        expect(first_column.confidence_text()).toBe("med");
        first_column.confidence = 35;
        expect(first_column.confidence_text()).toBe("low");
        delete(first_column.confidence);
        expect(first_column.confidence_text()).toBe("");
    });

    it("should validate initial data", function() {
        create_mapping_controller();
        // act
        mapping_ctrl_scope.$digest();
        // assertions
        angular.forEach(mapping_ctrl_scope.raw_columns, function(rc) {
            if (rc.suggestion !== '' && typeof(rc.suggestion) !== "undefined") {
                expect(rc.validity).toBe('valid');
            }
        });
    });

    it("should invalidate bad suggestions", function() {
        // Simulate a change on the tcm, make it fail.
        create_mapping_controller();
        // act
        mapping_ctrl_scope.$digest();
        // assertions
        //
        // We change the suggested mapping for the "property name" column
        // to "gross_floor_area" (which validates as float) to
        // purposesly cause a failing change.
        mapping_ctrl_scope.raw_columns[1].suggestion = 'gross_floor_area';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[1]);
        expect(mapping_ctrl_scope.raw_columns[1].validity).toBe('invalid');

    });

    it("should set td_class appropriately", function() {
        var tcm;

        create_mapping_controller();

        mapping_ctrl_scope.$digest();
        tcm = mapping_ctrl_scope.raw_columns[0];
        var good_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[0]
        );

        // First raw column is mapped up as pm_property_id <-> property_id
        // Any kind of string will be valid.
        expect(good_val).toBe('success');

        // Now set it to one that expects float values.
        // Only one of these will *not* validate.
        mapping_ctrl_scope.raw_columns[0].suggestion = 'gross_floor_area';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[0]);

        tcm = mapping_ctrl_scope.raw_columns[0];
        var warning_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[4]
        );

        expect(warning_val).toBe('warning');

        // We don't want the warning style to be applied to neighboring cells
        // in the same row. Check that the cell next to our invalid one is
        // unstyled (undefined).
        tcm = mapping_ctrl_scope.raw_columns[0];
        var adjacent_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[3]
        );

        expect(adjacent_val).toBe(undefined);

        // Now we're saying the suggestion is to not map.
        // Check that we don't have any class set for this row now.
        mapping_ctrl_scope.raw_columns[0].suggestion = '';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[0]);

        tcm = mapping_ctrl_scope.raw_columns[0];
        var blank_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[4]
        );

        expect(blank_val).toBe('');

    });

    it("should detect duplicates of mapped rows", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // raw_columns[0] and raw_columns[3] should be the only mapped rows
        var column = mapping_ctrl_scope.raw_columns[3];
        var test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

        // Set the property_name tcm's suggestion to the same as
        // the property_id tcm (raw_columns[0])
        column.suggestion = 'Pm Property Id';

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(true);

        // Since we mark both duplicates as duplicates, the other
        // TCM that has the 'pm_property_id' suggestion should also get
        // 'danger' as its duplicate class.
        var other_dup = mapping_ctrl_scope.is_tcm_duplicate(
            mapping_ctrl_scope.raw_columns[0]
        );
        expect(other_dup).toBe(true);

        // Shows that mapped_row is the sole determinant of
        // column ignoring
        column.mapped_row = false;

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

    });

    it("should ignore duplicates of unmapped rows", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // raw_columns[0] and raw_columns[3] should be the only mapped rows
        var column = mapping_ctrl_scope.raw_columns[1];
        var test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

        // Set the property_name tcm's suggestion to the same as
        // the property_id tcm (raw_columns[0])
        column.suggestion = 'Pm Property Id';

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);
    });

    it("should get mapped buildings", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        mapping_ctrl_scope.get_mapped_buildings();
        mapping_ctrl_scope.$digest();

        // assertions
        expect(mapping_ctrl_scope.search.search_buildings).toHaveBeenCalled();
        expect(mock_user_service.set_default_columns).toHaveBeenCalled();
    });

    it("should enbale the 'show & review buildings' button if duplicates are" +
        " not present", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        for (var i = mapping_ctrl_scope.raw_columns.length - 1; i >= 0; i--) {
            mapping_ctrl_scope.change(mapping_ctrl_scope.raw_columns[i]);
        }
        var duplicates_found = mapping_ctrl_scope.duplicates_present();

        // assertions
        expect(duplicates_found).toBe(false);
    });

    it("should disable the 'show & review buildings' button if duplicates " +
        "are present", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        for (var i = mapping_ctrl_scope.raw_columns.length - 1; i >= 0; i--) {
            mapping_ctrl_scope.raw_columns[i].suggestion = "pm_property_id";
            mapping_ctrl_scope.change(mapping_ctrl_scope.raw_columns[i]);
        }
        var duplicates_found = mapping_ctrl_scope.duplicates_present();

        // assertions
        expect(duplicates_found).toBe(true);
    });

    it("should get mappings in an API friendly way", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();
        var mappings = mapping_ctrl_scope.get_mappings();
        expect(mappings.length).toBe(5);
        expect(mappings[0]).toEqual(['Pm Property Id', 'property id']);
        // everything in between is empty since we we're using only
        // suggested mappings.
        expect(mappings[3]).toEqual(['Tax Lot Id', 'lot number']);
    });

    it("should show the 'STEP 2' tab when reviewing mappings", function() {
        // arrange
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // act
        var mappings = mapping_ctrl_scope.get_mapped_buildings();

        // assert
        expect(mapping_ctrl_scope.tabs).toEqual({
            'one_active': false,
            'two_active': true,
            'three_active': false
        });
    });

    it("should show BEDES fields with a checkbox", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assert
        expect(mapping_ctrl_scope.is_suggestion_BEDES('gross_floor_area')).toBe(true);
        expect(mapping_ctrl_scope.is_suggestion_BEDES('Gross Floor Area')).toBe(true);
        expect(mapping_ctrl_scope.is_suggestion_BEDES('My New non-BEDES field')).toBe(false);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: matching_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, delete_called;
    var matching_ctrl, matching_ctrl_scope, modalInstance, labels;


    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, building_services) {
            controller = $controller;
            scope = $rootScope;
            matching_ctrl_scope = $rootScope.$new();

            mock_building_services = building_services;
            spyOn(mock_building_services, "get_PM_filter_by_counts")
                .andCallFake(function(import_file){
                    return $q.when(
                        {
                            "status": "success",
                            "unmatched": 5,
                            "matched": 10
                        }
                    );
                }
            );
            spyOn(mock_building_services, "save_match")
                .andCallFake(function(b1, b2, create){
                    return $q.when(
                        {
                            "status": "success",
                            "child_id": 3
                        }
                    );
                }
            );
            spyOn(mock_building_services, "search_matching_buildings")
                .andCallFake(function(q, number_per_page, current_page, order_by, sort_reverse, 
                                        filter_params, file_id ){
                    
                    switch(filter_params.children__isnull){
                        case undefined:
                            var bldgs = [
                                {
                                    pm_property_id: 1
                                },
                                {
                                    pm_property_id: 2
                                }
                                ,
                                {
                                    pm_property_id: 3
                                }
                            ];
                            break;
                        case false:
                            var bldgs = [
                                {
                                    pm_property_id: 1
                                }
                            ];
                            break;
                        case true:
                            var bldgs = [
                                {
                                    pm_property_id: 3
                                },
                                {
                                    pm_property_id: 4
                                }
                            ];
                            break;
                    }

                    return $q.when(
                        {
                            status: "success",
                            number_returned: buildings_payload.length,
                            number_matching_search: buildings_payload.length,
                            buildings: bldgs;
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_detail_controller(){
        var buildings_payload = {
            buildings: [
                {
                    pm_property_id: 1,
                    tax_lot_id: null,
                    custom_id_1: 2,
                    gross_floor_area: 111,
                    matched: true,
                    id: 1,
                    children: [3],
                    coparent: {
                        pm_property_id: null,
                        tax_lot_id: 2,
                        custom_id_1: null,
                        gross_floor_area: 111,
                        id: 2,
                        children: [3]
                    }
                }
            ],
            number_matching_search: 1,
            number_returned: 1
        };
        matching_ctrl = controller('matching_controller', {
            $scope: matching_ctrl_scope,
            buildings_payload: buildings_payload,
            all_columns: {
                fields: [{sort_column: 'pm_property_id'}]
            },
            default_columns: {
                columns: ['pm_property_id']
            },
            import_file_payload: {
                import_file: {
                    id: 1,
                    dataset: {
                        importfiles: [
                            {
                                id: 1,
                                name: "file_1.csv"
                            },
                            {
                                id: 2,
                                name: "file_2.csv"
                            }
                        ]
                    }
                }
            }
        });
    }



    /*
     * Test scenarios
     */

    it("should have a buildings payload with potential matches", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();
        var b = matching_ctrl_scope.buildings[0];

        // assertions
        expect(matching_ctrl_scope.buildings.length).toBe(1);
        expect(b.coparent.children).toEqual(b.children);
    });

    it("should provide to the view scope variables representing the number matched and the number of unmatched buildings", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();

        // assertions
        expect(matching_ctrl_scope.matched_buildings).toEqual(10);
        expect(matching_ctrl_scope.unmatched_buildings).toEqual(5);
    });

    it("should jump back to the matching list when the 'Back to list' button" +
        " is clicked", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.show_building_list = false;
        matching_ctrl_scope.back_to_list();

        // assertions
        expect(matching_ctrl_scope.show_building_list).toEqual(true);
    });

    it("should present an initial state with the matching buildings table",
        function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();

        // assertions
        expect(matching_ctrl_scope.columns).toEqual([{ sort_column : 'pm_property_id' }]);
        expect(matching_ctrl_scope.number_matching_search).toEqual(1);
        expect(matching_ctrl_scope.number_returned).toEqual(1);
        expect(matching_ctrl_scope.num_pages).toEqual(1);
        expect(mock_building_services.get_PM_filter_by_counts).toHaveBeenCalled();
    });
    it("should match a building in the matching list", function() {
        // arrange
        create_dataset_detail_controller();
        var b1, b2;
        b2 = {
            id: 2,
            children: [],
            matched: false
        };
        b1 = {
            id: 1,
            children: [],
            matched: true,
            coparent: b2
        };

        // act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.toggle_match(b1);
        matching_ctrl_scope.$digest();

        // assertions
        expect(mock_building_services.save_match).toHaveBeenCalledWith(b1.id, b2.id, true);
        expect(mock_building_services.get_PM_filter_by_counts).toHaveBeenCalled();
        expect(b1.children[0]).toEqual(3);
    });
    it("Should update the list of buildings correctly when 'Show Matched' is selected", 
        function() {
        //arrange
        create_dataset_detail_controller();

        //act
        controller.update_show_filter(controller.SHOW_MATCHED)

        //assertions
        expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(1);
        expect(matching_ctrl_scope.number_returned).toEqual(1);
    });
    it("Should update the list of buildings correctly when 'Show Unmatched' is selected", 
        function() {
        //arrange
        create_dataset_detail_controller();

        //act
        controller.update_show_filter(controller.SHOW_UNMATCHED)

        //assertions
        expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(2);
        expect(matching_ctrl_scope.number_returned).toEqual(2);
    });
    it("Should update the list of buildings correctly when 'Show All' is selected", 
        function() {
        //arrange
        create_dataset_detail_controller();

        //act
        controller.update_show_filter(controller.SHOW_ALL)

        //assertions
        expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(3);
        expect(matching_ctrl_scope.number_returned).toEqual(3);
    });



});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: members_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller;
    var ctrl, ctrl_scope, modalInstance;
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          $q,
          organization_service) {
            ctrl = $controller;
            scope = $rootScope;
            ctrl_scope = $rootScope.$new();

            mock_organization_service = organization_service;
            
            spyOn(mock_organization_service, "remove_user")
                .andCallFake(function(user_id, org_id){
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
            spyOn(mock_organization_service, "get_organization_users")
                .andCallFake(function(org){
                    return $q.when(
                        {
                            "status": "success",
                            "users": [{id:1, first_name:"Bob", last_name:"D"}]
                        }
                    );
                }
            );
            spyOn(mock_organization_service, "update_role")
                .andCallFake(function(org_id, user_id, role){
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_members_controller(){
        ctrl = ctrl('members_controller', {
            $scope: ctrl_scope,
            users_payload: {users: [
                {first_name: 'J', last_name: 'S'},
                {first_name: undefined, last_name: null}
            ]},
            organization_payload: {
                organization: {name: 'my org', id: 4}
            },
            auth_payload: {
                auth: {
                    'can_invite_member': true,
                    'can_remove_member': true
                }
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should accepts its payload", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.org).toEqual({name : 'my org', id : 4});
        expect(ctrl_scope.users[0].name).toEqual("J S");
        expect(ctrl_scope.users[1].name).toEqual(" ");
    });
    it("clicking remove should remove a user", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.remove_member({user_id: 2});

        // assertions
        expect(mock_organization_service.remove_user)
            .toHaveBeenCalledWith(2, 4);
        
        ctrl_scope.$digest();
        expect(mock_organization_service.get_organization_users)
            .toHaveBeenCalledWith({org_id: 4});
    });
    it("clicking a new role should update the user's role", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.update_role({user_id: 2, role: "viewer"});

        // assertions
        expect(mock_organization_service.update_role)
            .toHaveBeenCalledWith(2, 4, 'viewer');
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: new_member_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_user_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, user_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        mock_user_service = user_service;
        spyOn(mock_user_service, "add")
            .andCallFake(function(user){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_new_member_controller(){
        ctrl = ctrl('new_member_modal_ctrl', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            organization: {organization_id: 1}
        });
    }

    /*
     * Test scenarios
     */

    it("should set the default role to 'member'", function() {
        // arrange
        create_new_member_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.user.role.value).toEqual("member"); 
    });
    it("should call the user service to add a new user to the org",
        function() {
        // arrange
        create_new_member_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.user.first_name = "JB";
        ctrl_scope.user.last_name = "Smooth";
        ctrl_scope.user.email = "jb.smooth@be.com";
        ctrl_scope.submit_form(true);

        // assertions
        expect(mock_user_service.add)
            .toHaveBeenCalledWith({
                first_name: "JB",
                last_name: "Smooth",
                email: "jb.smooth@be.com",
                role: ctrl_scope.roles[0],
                organization: {
                    organization_id: 1
                }
            });
    });
    
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
/**
 * run_jasmine.js: runs the jasmine JS test runner
 */
(function() {
    var jasmineEnv = jasmine.getEnv();
    jasmineEnv.updateInterval = 1000;

    var htmlReporter = new jasmine.HtmlReporter();

    jasmineEnv.addReporter(htmlReporter);

    jasmineEnv.specFilter = function(spec) {
        return htmlReporter.specFilter(spec);
    };

    var currentWindowOnload = window.onload;

    window.onload = function() {
        if (currentWindowOnload) {
        currentWindowOnload();
        }
        execJasmine();
    };
    function execJasmine() {
        jasmineEnv.execute();
    }
})();

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var searchTestApp = angular.module(
    'searchTestApp', ['BE.seed.service.search']
);

describe("The search_service service", function() {
    var saas, httpBackend, test_url;

    beforeEach(function () {
        module("searchTestApp");
        inject(function (search_service, $httpBackend) {
            saas = search_service;
            httpBackend = $httpBackend;
            httpBackend.when("POST", test_url).respond("ok");
        });

    });

    /**
     * sanitize_params tests
     */
    it('removes null and undefined values from filter_params', function () {
        // arrange
        saas.filter_params = {
          'National Median Site Energy Use__gte': 4,
          'National Median Site Energy Use__lte': null,
          'National Median Source EUI__gte': undefined
        };

        // act
        saas.sanitize_params();

        // assert
        expect(saas.filter_params).toEqual({'National Median Site Energy Use__gte': 4});
    });

    /**
     * search_buildings tests
     */
    it('has sane defaults', function() {
        expect(saas.url).toEqual("");
        expect(saas.error_message).toEqual("");
        expect(saas.alert).toEqual(false);
        expect(saas.buildings).toEqual([]);
        expect(saas.current_page).toEqual(1);
        expect(saas.number_per_page).toEqual(10);
        expect(saas.order_by).toEqual("");
        expect(saas.sort_column).toEqual("tax_lot_id");
        expect(saas.sort_reverse).toEqual(false);
        expect(saas.select_all_checkbox).toEqual(false);
        expect(saas.prev_page_disabled).toEqual(true);
        expect(saas.next_page_disabled).toEqual(true);
        expect(saas.num_pages).toEqual(0);
        expect(saas.query).toEqual("");
        expect(saas.showing).toEqual({
            'start': 1,
            'end': 0
        });
    });

    it('search_buildings uses the argument `query`', function() {
        saas.query = "hotels";
        saas.search_buildings("not hotels");

        expect(saas.query).toEqual("not hotels");
    });
    it('filter search resets the current page', function() {
        // arrange
        saas.current_page = 22;
        spyOn(saas, 'search_buildings');

        // act
        saas.filter_search();

        // assert
        expect(saas.current_page).toEqual(1);
        expect(saas.search_buildings).toHaveBeenCalled();
    });

    it('search_buildings function will default to its query if' +
        ' no query is passed as an argument', function() {
        saas.query = "hotels";
        saas.search_buildings();

        expect(saas.query).toEqual("hotels");
    });

    it('search_buildings hits the set url', function() {
        test_url = "/my-search-url";
        saas.url = test_url;
        saas.search_buildings();
        httpBackend.expectPOST(test_url);
        httpBackend.flush();
    });

    it('search_buildings POSTs the query data as `q`', function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.query = "hotel chains";
        saas.number_per_page = 25;
        saas.order_by = "gross_floor_area";
        saas.sort_reverse = true;
        saas.filter_params = {
            project: '2012 data'
        };

        // act
        saas.search_buildings();

        // assert
        httpBackend.expectPOST(test_url,
            {
                "q": "hotel chains",
                "number_per_page": 25,
                "order_by": "gross_floor_area",
                "sort_reverse": true,
                "filter_params": {
                    "project": "2012 data"
                },
                "page":1
            }
        ).respond(201, "");
        httpBackend.flush();
    });
    it('search_buildings updates its `buildings` model', function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.query = "hotel chains";
        saas.number_per_page = 25;
        saas.order_by = "gross_floor_area";
        saas.sort_reverse = true;
        saas.filter_params = {
            project: '2012 data'
        };

        // act
        saas.search_buildings();

        // assert
        httpBackend.expectPOST(test_url,
            {
                "q": "hotel chains",
                "number_per_page": 25,
                "order_by": "gross_floor_area",
                "sort_reverse": true,
                "filter_params": {
                    "project": "2012 data"
                },
                "page":1
            }
        ).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        expect(saas.buildings).toEqual([
            {
                name: "one",
                id: 1,
                checked: false
            },
            {
                name: "two",
                id: 2,
                checked: false
            }
        ]);
    });
    it('should clear the error and alert after a successful search',
        function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.error_message = "help";
        saas.alert = true;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {
            'buildings': [
                {
                    name: "one",
                    id: 1
                },
                {
                    name: "two",
                    id: 2
                }],
            'number_matching_search': 101
            });
        httpBackend.flush();

        // assert
        expect(saas.alert).toEqual(false);
        expect(saas.error_message).toEqual("");
    });

    /**
     * pagination tests
     */
    it('increments the page when the `next` button is clicked',
        function() {
        // arrange
        saas.num_pages = 1000;
        saas.current_page = 100;
        spyOn(saas, 'search_buildings');
        // act
        saas.next_page();

        // assert
        expect(saas.current_page).toEqual(101);
        expect(saas.search_buildings).toHaveBeenCalled();
        expect(saas.search_buildings.callCount).toEqual(1);

    });
    it('doesn\'t increment past the last page when the `next` button is' +
        ' clicked', function() {
        // arrange
        saas.num_pages = 2;
        saas.current_page = 2;
        spyOn(saas, 'search_buildings');
        // act
        saas.next_page();

        // assert
        expect(saas.current_page).toEqual(2);
        expect(saas.search_buildings).toHaveBeenCalled();
        expect(saas.search_buildings.callCount).toEqual(1);

    });
    it('decrements the page when the `previous` button is clicked',
        function() {
        // arrange
        saas.num_pages = 1000;
        saas.current_page = 100;
        spyOn(saas, 'search_buildings');
        // act
        saas.prev_page();

        // assert
        expect(saas.current_page).toEqual(99);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('does not decrement below the first page when the `previous` button' +
        ' is clicked', function() {
        // arrange
        saas.num_pages = 1;
        saas.current_page = 1;
        spyOn(saas, 'search_buildings');
        // act
        saas.prev_page();

        // assert
        expect(saas.current_page).toEqual(1);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('fetches more or less results per page when a user selects an option' +
        ' from the number per page select',
        function() {
        // arrange
        saas.number_per_page_options_model = 50;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_number_per_page();

        // assert
        expect(saas.number_per_page).toEqual(50);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('updates the number of results displayed text after a successful '+
        'search', function() {
        // standard case
        // page 2 of 3 with 10/page, so should display 11 of 20
        // arrange
        saas.current_page = 2;
        saas.num_pages = 3;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_start_end_paging();

        // assert
        expect(saas.showing.start).toEqual(11);
        expect(saas.showing.end).toEqual(20);
        expect(saas.search_buildings).not.toHaveBeenCalled();
    });
    it('displays the number matching the query if on the last page of results',
        function() {
        // standard case
        // page 3 of 3 with 10/page and 34 results, so should display 21 of 34
        // arrange
        saas.current_page = 3;
        saas.number_matching_search = 34;
        saas.num_pages = 3;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_start_end_paging();

        // assert
        expect(saas.showing.start).toEqual(21);
        expect(saas.showing.end).toEqual(34);
    });
    it('should call update_start_end_paging after a successful search',
        function() {
        // arrange
        spyOn(saas, 'update_start_end_paging');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_start_end_paging).toHaveBeenCalled();
    });
    it('should call update_buttons after a successful search',
        function() {
        // arrange
        spyOn(saas, 'update_buttons');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_buttons).toHaveBeenCalled();
    });
    it('should disable prev paging buttons at the first page',
        function() {
        // arrange
        saas.current_page = 1;
        saas.num_pages = 5;

        // act
        saas.update_buttons();

        // assert
        expect(saas.prev_page_disabled).toEqual(true);
        expect(saas.next_page_disabled).toEqual(false);
    });
    it('should disable next paging buttons at the last page',
        function() {
        // arrange
        saas.current_page = 5;
        saas.num_pages = 5;

        // act
        saas.update_buttons();

        // assert
        expect(saas.prev_page_disabled).toEqual(false);
        expect(saas.next_page_disabled).toEqual(true);
    });
    it('should calculate the number of pages after a successful search',
        function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {
            'buildings': [
                {
                    name: "one",
                    id: 1
                },
                {
                    name: "two",
                    id: 2
                }],
            'number_matching_search': 101
            });
        httpBackend.flush();

        // assert
        expect(saas.number_matching_search).toEqual(101);
        expect(saas.num_pages).toEqual(11);
    });

    /**
     * checkbox logic tests
     */
    it('should select or unselect all the viewed results when the select all' +
        ' checkbox is checked or unchecked', function() {
        // arrange
        saas.selected_buildings = [1,2,3];
        saas.select_all_checkbox = true;
        saas.buildings = [
            {
                checked: false
            },
            {
                checked: true
            }
        ];
        spyOn(saas, 'select_or_deselect_all_buildings').andCallThrough();

        // act
        saas.select_all_changed();

        // assert
        expect(saas.selected_buildings).toEqual([]);
        expect(saas.buildings).toEqual([
                {
                    checked: true
                },
                {
                    checked: true
                }
            ]);
        expect(saas.select_or_deselect_all_buildings).toHaveBeenCalled();
    });
    it('should call select_or_deselect_all_buildings after a search',
        function() {
        // arrange
        spyOn(saas, 'select_or_deselect_all_buildings');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.select_or_deselect_all_buildings).toHaveBeenCalled();
    });
    it('should add a building to the selected list when checked',
        function() {
        // arrange
        var building = {
            id: 5,
            checked: true
        };

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([5]);
    });
    it('should add a building to the selected list when unchecked and the ' +
        'select all checkbox is checked', function() {
        // arrange
        var building = {
            id: 5,
            checked: false
        };
        saas.select_all_checkbox = true;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([5]);
    });
    it('should remove a building to the selected list when unchecked',
        function() {
        // arrange
        var building = {
            id: 5,
            checked: false
        };
        saas.selected_buildings = [5,6,7];
        saas.select_all_checkbox = false;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([6,7]);
    });
    it('should remove a building to the selected list when checked if the ' +
        'select all checkbox is checked', function() {
        // arrange
        var building = {
            id: 5,
            checked: true
        };
        saas.selected_buildings = [5,6,7];
        saas.select_all_checkbox = true;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([6,7]);
    });
    it('should call load_state_from_selected_buildings after a successful ' +
        'search', function() {
        // arrange
        spyOn(saas, 'load_state_from_selected_buildings').andCallThrough();
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.load_state_from_selected_buildings).toHaveBeenCalled();
    });
    it('should call update_results after a successful ' +
        'search', function() {
        // arrange
        var select_or_deselect_all_buildings_time,
            load_state_from_selected_buildings_time;
        spyOn(saas, 'update_results').andCallThrough();
        spyOn(saas, 'select_or_deselect_all_buildings')
            .andCallFake(function() {
                select_or_deselect_all_buildings_time = new Date();
            }
        );
        spyOn(saas, 'load_state_from_selected_buildings')
            .andCallFake(function() {
                // wait for a sec, otherwise both have the same timestamp
                for(var y=0;y<100000;y++){
                    var x = new Date();
                    x = x+y;
                }
                load_state_from_selected_buildings_time = new Date();
            }
        );
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_results).toHaveBeenCalled();
        expect(select_or_deselect_all_buildings_time <
               load_state_from_selected_buildings_time).toBe(true);
    });
    it('check selected buildings successful', function() {
        // arrange
        saas.selected_buildings = [2];
        saas.buildings = [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ];

        // act
        saas.load_state_from_selected_buildings();

        // assert
        expect(saas.buildings[1]).toEqual({
            name: "two",
            id: 2,
            checked: true
        });
    });
    it('should generate columns', function() {
        // arrange
        var all_columns, column_headers, columns;
        all_columns = [
            {
                sort_column: "name"
            },
            {
                sort_column: "id"
            }
        ];
        column_headers = ["id"];
        saas.sort_column = "something else";
        saas.update_results({});
        // act
        columns = saas.generate_columns(
            all_columns, column_headers, saas.column_prototype
        );

        // assert that columns are extended off the prototype and only have
        // "id"
        expect(columns.length).toEqual(1);
        expect(columns[0].sort_column).toEqual("id");
        expect(columns[0].is_unsorted()).toEqual(true);
        saas.sort_column = "id";
        expect(columns[0].is_unsorted()).toEqual(false);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: settings_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller;
    var ctrl, ctrl_scope, modalInstance;
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          $q,
          organization_service) {
            ctrl = $controller;
            scope = $rootScope;
            ctrl_scope = $rootScope.$new();

            mock_organization_service = organization_service;
            
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_settings_controller(){
        ctrl = ctrl('settings_controller', {
            $scope: ctrl_scope,
            all_columns: {fields: [
                {checked: false, title: 'PM Property ID', sort_column: 'pm_property_id'},
                {checked: false, title: 'G', sort_column: 'g'},
                {checked: false, title: "Gross Floor Area", sort_column: 'gross_floor_area'}
            ]},
            organization_payload: {
                organization: {name: 'my org', id: 4}
            },
            query_threshold_payload: {
                query_threshold: 10
            },
            shared_fields_payload: {
                shared_fields: [
                    {
                        title: "PM Property Id",
                        sort_column: "pm_property_id"
                    }
                ],
                public_fields: [
                {
                    title: "Gross Floor Area",
                    sort_column: "gross_floor_area"
                }]
            },
            auth_payload: {
                auth: {
                    'is_owner': true,
                    'is_parent_org_owner': false
                }
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should accepts its payload", function() {
        // arrange
        create_settings_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.org).toEqual({
            name : 'my org',
            id : 4,
            query_threshold: 10
        });
        expect(ctrl_scope.fields[0].checked).toEqual(true);
        expect(ctrl_scope.fields[1].checked).toEqual(false);
        expect(ctrl_scope.fields[0].title).toEqual('PM Property ID');
    });
    it("should select all", function() {
        // arrange
        create_settings_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.controls.select_all = true;
        ctrl_scope.select_all_clicked();
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.infinite_fields[0].checked).toEqual(true);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myStripFilterApp = angular.module('myStripFilterApp', ['stripImportPrefix']);

describe("The stripImportPrefix filter", function() {
    beforeEach(module('myStripFilterApp'));
    it('Strips out the import prefix from building ids',
        // e.g. remove the 'IMP12-' from the id 'IMP12-1321/123'
        inject(function(stripImportPrefixFilter) {
            // normal cases
            expect(stripImportPrefixFilter('IMP134-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP134555-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP1-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP0-134')).toBe('134');
            // deals with `-`
            expect(stripImportPrefixFilter('IMP134-abc-dev')).toBe('abc-dev');
            // deals with `/`
            expect(stripImportPrefixFilter('IMP134-00/11')).toBe('00/11');
            // only strips first prefix
            expect(stripImportPrefixFilter('IMP134-IMP134-123')).toBe('IMP134-123');
        })
    );
    it("Does not strip out anything if there is not a prefix",
        inject(function(stripImportPrefixFilter) {
            // normal cases
            expect(stripImportPrefixFilter('123-123')).toBe('123-123');
            expect(stripImportPrefixFilter('0123/123')).toBe('0123/123');
        })
    );
    it("Is case sensitive to the import prefix",
        inject(function(stripImportPrefixFilter) {
            expect(stripImportPrefixFilter('imp123-abc')).toBe('imp123-abc');
            expect(stripImportPrefixFilter('iMp123-abc')).toBe('iMp123-abc');
            expect(stripImportPrefixFilter('iMP123-abc')).toBe('iMP123-abc');
        })
    );
    it("Handles undefined or null inputs",
        inject(function(stripImportPrefixFilter) {
            expect(stripImportPrefixFilter(undefined)).toBe(undefined);
            expect(stripImportPrefixFilter(null)).toBe(null);
        })
    );
    it("Only strips out the prefix if it has at least one digit and a hyphen",
        inject(function(stripImportPrefixFilter) {
            // must have the 'IMP' folowed by a digit then a hyphen
            expect(stripImportPrefixFilter('IMP-123')).toBe('IMP-123');
            expect(stripImportPrefixFilter('IMP1123')).toBe('IMP1123');
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myTitleCaseApp = angular.module('myTitleCaseApp', ['titleCase']);

describe("The TitleCase filter", function() {
    beforeEach(module('myTitleCaseApp'));
    it('Strips out ``_`` characters from strings and capitalizes the rest',
        inject(function(titleCaseFilter) {
            // normal cases
            expect(titleCaseFilter('super_data')).toBe('Super Data');
            expect(titleCaseFilter('super_data_45')).toBe('Super Data 45');
            expect(titleCaseFilter(undefined)).toBe(undefined);
            expect(titleCaseFilter(null)).toBe(null);
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myTypedNumberFilterApp = angular.module('myTypedNumberFilterApp', ['typedNumber']);

describe("The typedNumber filter", function() {
    beforeEach(module('myTypedNumberFilterApp'));
    it('should parse strings as strings and return them',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('tester')).toBe('tester');
        })
    );
    it('should parse strings as strings and return them, even if they look like numbers',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.1456')).toBe('123.1456');
        })
    );

    it('should parse numbers as numbers and return them',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.00001', 'number')).toBe("123");
        })
    );

    it('should allow the user to set the number of sig digits',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.321', 'number', 'not_year', 1)).toBe("123.3");
        })
    );

    it('should add commas to number greater than 999',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123456789', 'number', 'not_year', 0)).toBe("123,456,789");
        })
    );

    it('should parse year_built and not add commas',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('1946', 'number', 'year_built', 1)).toBe("1946");
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var validationTestApp = angular.module(
    'validationTestApp', ['mappingValidatorService']
);

describe("The MappingValidatorService", function() {
    var mvs;

    beforeEach(function () {
        module("validationTestApp");
        inject(function (mappingValidatorService) {
            mvs = mappingValidatorService;

        });

    });

    it('validates good string, float and date data', function() {
        // normal cases
        // Here ``type`` is undefined. Should still work.
        var str_data = ['Fun', 'fun2', 'fun3', 'fun4'];
        var float_data = ['12.34', '144.5', '234'];
        var date_data = ['2014/02/02', '03/13/2013', '03-14-2004'];

        expect(mvs.validate(str_data)).toEqual([]);
        expect(mvs.validate(float_data, 'float')).toEqual([]);
        expect(mvs.validate(date_data, 'date')).toEqual([]);
    });

    it('recognizes semivalid data', function() {
        // Cases where the data is /almost/ right.
        var float_data = ['12.34', '144.5', 'NaN'];
        var date_data = ['2014/02/02', 'huh?', '03-14-2004'];
        expect(mvs.validate(float_data, 'float')).toEqual(['NaN']);
        expect(mvs.validate(date_data, 'date')).toEqual(['huh?']);
    });

    it('recognizes invalid data', function() {
        // Cases where the data is *all* wrong.
        var float_data = ['', 'not a float', 'NaN'];
        var date_data = ['', 'huh?', 'what?'];
        // Cases where the data are correct.
        var good_float_data = ['12.34', '144.5', '234'];
        var good_date_data = ['2014/02/02', '03/13/2013', '03-14-2004'];

        // Data is wrong
        expect(mvs.validate(float_data, 'float')).toEqual(float_data);
        expect(mvs.validate(date_data, 'date')).toEqual(date_data);

        // Type is wrong
        // N.B. we use semivalid here, because Date is pretty forgiving w/ nums.
        expect(mvs.validate(good_float_data, 'date')).toEqual(['12.34']);
        expect(mvs.validate(good_date_data, 'float')).toEqual(good_date_data);


    });

});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// taken from the angularjs testing page
// http://docs.angularjs.org/guide/dev_guide.unit-testing

// create dummy angularJS app to attach filter(s)
var myBELabelDirectiveApp = angular.module('myBELabelDirectiveApp', ['beLabel']);

describe("The beLabel directive", function() {
    var $compile;
    var $rootScope;
    beforeEach(module('myBELabelDirectiveApp'));
    // Store references to $rootScope and $compile
    // so they are available to all tests in this describe block
    beforeEach(inject(function(_$compile_, _$rootScope_){
      // The injector unwraps the underscores (_) from around the parameter names when matching
      $compile = _$compile_;
      $rootScope = _$rootScope_;
    }));

    it('Replaces the element with the appropriate content', function() {
        // Compile a piece of HTML containing the directive
        var element = $compile('<be-label name="compliant" color="blue"></be-label>')($rootScope);
        // fire all the watches
        $rootScope.$digest();
        // Check that the compiled element contains the templated content
        expect(element.hasClass('label-primary')).toBe(true);
        expect(element.hasClass('label')).toBe(true);
        expect(element.html()).toContain("compliant");
    });

        // 'red': 'danger',
        // 'gray': 'default',
        // 'orange': 'warning',
        // 'green': 'success',
        // 'blue': 'primary',
        // 'light blue': 'info'
    it('Maps colors to semantic bootstrap class names', function() {
        var element = $compile('<be-label name="compliant" color="red"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-danger')).toBe(true);

        element = $compile('<be-label name="compliant" color="gray"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-default')).toBe(true);

        element = $compile('<be-label name="compliant" color="orange"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-warning')).toBe(true);

        element = $compile('<be-label name="compliant" color="green"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-success')).toBe(true);

        element = $compile('<be-label name="compliant" color="blue"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-primary')).toBe(true);

        element = $compile('<be-label name="compliant" color="light blue"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-info')).toBe(true);
    });


});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// taken from the angularjs testing page
// http://docs.angularjs.org/guide/dev_guide.unit-testing

// create dummy angularJS app to attach filter(s)
var myBEUploaderDirectiveApp = angular.module('myBEUploaderDirectiveApp', ['beUploader']);

describe("The beUploader directive", function() {
    var g_message, g_file, g_progress;
    var $compile;
    var $rootScope;
    var uploader_html = '<div be-uploader sourcetype="assessor" importrecord="5" buttontext="Upload your building list .csv file" eventfunc="uploaderfunc(message, filename, progress)" ng-hide="uploader.in_progress"></div>';
    beforeEach(module('myBEUploaderDirectiveApp'));
    // Store references to $rootScope and $compile
    // so they are available to all tests in this describe block
    beforeEach(inject(function(_$compile_, _$rootScope_){
      // The injector unwraps the underscores (_) from around the parameter names when matching
      $compile = _$compile_;
      $rootScope = _$rootScope_;
      $rootScope.eventfunc = function (fine_object) {
        console.log({fin: fine_object});
        g_message = fine_object.message;
        g_file = fine_object.file;
        g_progress = fine_object.progress;
      };
      window.BE = window.BE || {};
      window.BE.FILE_UPLOAD_DESTINATION = 'S3';
    }));

    it('Creates the fineuploader element', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        
        // act
        $rootScope.$digest();

        // assert
        expect(element.html()).toContain("qq-uploader");
        expect(element.html()).toContain("qq-upload-button");
    });

    it('Contains the buttontext specified', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);

        // act
        $rootScope.$digest();

        // assert
        expect(element.html()).toContain("Upload your building list .csv file");
    });

    it('Only allows one file to be uploaded at a time', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");

        // act
        $rootScope.$digest();

        // assert
        expect(func._options.multiple).toBe(false);
    });

    it('Uses the callback function for invalid file types', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.jpeg");

        // act
        $rootScope.$digest();
        func._options.showMessage("there was an invalid extension. Valid extension(s): .csv");


        // assert
        expect(g_message).toBe("invalid_extension");
    });

    it('Uses the callback function to share its state: upload started',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';
        
        // act
        $rootScope.$digest();
        func._options.callbacks.onSubmitted(1, filename);


        // assert
        expect(g_message).toBe("upload_submitted");
        expect(g_file.filename).toBe(filename);
    });

    it('Uses the callback function to share its state: in progress',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';
        var loaded = 10;
        var total = 100;
        
        // act
        $rootScope.$digest();
        func._options.callbacks.onProgress(1, filename, loaded, total);


        // assert
        expect(g_message).toBe("upload_in_progress");
        expect(g_file.filename).toBe(filename);
        expect(g_progress.loaded).toBe(loaded);
        expect(g_progress.total).toBe(total);
    });

    it('Uses the callback function to share its state: complete',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';

        
        // act
        $rootScope.$digest();
        func._options.callbacks.onComplete(1, filename, {success: true});


        // assert        
        expect(g_message).toBe("upload_complete");
        expect(g_file.filename).toBe(filename);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: building_detail_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, ngFilter, delete_called;
    var building_detail_ctrl, building_detail_ctrl_scope, modalInstance, labels;
    var mock_building_services, mock_project_service;
    var mock_building;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          urls,
          $q,
          building_services,
          project_service,
          $filter) {
            controller = $controller;
            scope = $rootScope;
            ngFilter = $filter;
            building_detail_ctrl_scope = $rootScope.$new();
            modal_state = "";
            delete_called = false;

            // mock the building_services factory methods used in the controller
            // and return their promises
            mock_building_services = building_services;
            mock_project_service = project_service;

            spyOn(mock_project_service, "get_project")
                .andCallFake(function(project_slug){
                    return $q.when(
                        {
                            "status": "success",
                            "project": {
                                id: 33,
                                name: "test project",
                                slug: project_slug
                            }
                        }
                    );
                }
            );
            spyOn(mock_project_service, "get_labels")
                .andCallFake(function(){
                    return $q.when(
                        {
                            "status": "success",
                            "labels": [{
                                id: 44,
                                name: "bad label",
                                color: "red"
                            }]
                        }
                    );
                }
            );
            spyOn(mock_project_service, "update_project_building")
                .andCallFake(function(building_id, project, label){
                    return $q.when(
                        {
                            "status": "success",
                            "approver": "bob doe",
                            "approved_date": "01/01/2012"
                        }
                    );
                }
            );
            spyOn(mock_building_services, "update_building")
                .andCallFake(function (building, org_id){
                    mock_building = building;
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_building_detail_controller(){
        var fake_building = {
            id: 511,
            pk: 511,
            gross_floor_area: 123456,
            gross_floor_area_source: 2,
            city: "DC",
            city_source: 4,
            tax_lot_id: "11/22",
            tax_lot_id_source: 3,
            extra_data: {
                'some other key': 12344,
                'some other key that is not in a parent': 223
            },
            extra_data_sources: {
                'some other key': 2,
                'some other key that is not in a parent': 3
            },
            created: "at some point"
        };
        var fake_imported_buildings = [
            {
                id: 2,
                pk: 2,
                gross_floor_area: 123456,
                gross_floor_area_source: null,
                city: "Washington, DC",
                city_source: null,
                extra_data: {
                    'some other key': 123,
                    'some other key that is not in a child': 333,
                    'some floor area': 444
                },
                extra_data_sources: {
                    'some other key': null,
                    'some other key that is not in a child': 111,
                    'some floor area': 444
                },
                created: "test"
            },
            {
                id: 3,
                pk: 3,
                gross_floor_area: 2111111,
                gross_floor_area_source: null,
                city: "Washington",
                city_source: null,
                tax_lot_id: "11/22",
                tax_lot_id_source: null,
                extra_data: {
                    'make it four': 4
                },
                extra_data_sources: {
                    'make it four': null
                }
            },{
                id: 4,
                pk: 4,
                gross_floor_area: 2111111,
                gross_floor_area_source: null,
                city: "Washington",
                city_source: null,
                tax_lot_id: "11/22",
                tax_lot_id_source: null,
                extra_data: {
                    'make it four': 5
                },
                extra_data_sources: {
                    'make it four': null
                }
            }
        ];
        var fake_payload = {
            "status": "success",
            "building": fake_building,
            "imported_buildings": fake_imported_buildings,
            "projects": [],
            "user_org_id": 42
        };
        var fake_all_columns = [{
            "title": "PM Property ID",
            "sort_column": "pm_property_id",
            "class": "is_aligned_right",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Tax Lot ID",
            "sort_column": "tax_lot_id",
            "class": "is_aligned_right",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Custom ID 1",
            "sort_column": "custom_id_1",
            "class": "is_aligned_right whitespace",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Property Name",
            "sort_column": "property_name",
            "class": "",
            "title_class": "",
            "type": "string",
            "field_type": "building_information",
            "sortable": true,
            "checked": false
        }];
        building_detail_ctrl = controller('building_detail_controller', {
            $scope: building_detail_ctrl_scope,
            $routeParams: {
                building_id: 1,
                project_id: 2
            },
            building_payload: fake_payload,
            all_columns: {
                fields: fake_all_columns
            },
            audit_payload: {
                audit_logs: []
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should have an building payload", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.building.id).toBe(511);
        expect(building_detail_ctrl_scope.imported_buildings[0].id).toBe(2);
    });

    it("should get labels on load", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.labels[0].id).toBe(44);
        expect(building_detail_ctrl_scope.labels[0].name).toBe("bad label");
        expect(building_detail_ctrl_scope.labels[0].color).toBe("red");
    });

    it("should highlight the active project", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.is_active_project({id:33}))
        .toBe(true);
        expect(building_detail_ctrl_scope.is_active_project({id:34}))
        .toBe(false);
        building_detail_ctrl_scope.project = undefined;
        expect(building_detail_ctrl_scope.is_active_project({id:34}))
        .toBe(false);
    });

    it("should make a copy of building while making edits", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.save_building_state();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;

        // assertions
        expect(building_detail_ctrl_scope.building_copy.gross_floor_area)
        .toBe(123456);
    });
    it("should restore the copy of building if a user clicks cancel",
        function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.save_building_state();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;
        building_detail_ctrl_scope.restore_building();

        // assertions
        expect(building_detail_ctrl_scope.building.gross_floor_area)
        .toBe(123456);
        expect(building_detail_ctrl_scope.building.edit_form_showing).toBe(false);
    });
    it("should save a building when a user clicks the save button", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;
        building_detail_ctrl_scope.save_building();

        // assertions
        expect(mock_building_services.update_building)
        .toHaveBeenCalledWith(building_detail_ctrl_scope.building, 42);
        expect(mock_building.gross_floor_area).toEqual(43214);
    });
    it("should show a default label if a building doesn't have one", function() {
        // arrange
        create_building_detail_controller();
        var building_with_label = {
            label: {
                name: "hello",
                label: "success"
            }
        };
        var building_without_label = {};
        var label_with, label_without;

        // act
        building_detail_ctrl_scope.$digest();
        label_with = building_detail_ctrl_scope.get_label(building_with_label);
        label_without = building_detail_ctrl_scope.get_label(building_without_label);

        // assertions
        expect(label_with).toEqual({
                name: "hello",
                label: "success"
            });
        expect(label_without).toEqual({
                name: "Add Label",
                label: "default"
            });
    });

    it("should show a project or buildings breadcrumb", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.user.project_slug = "project_1";

        // assertions
        expect(building_detail_ctrl_scope.is_project()).toEqual(true);
        building_detail_ctrl_scope.user.project_slug = undefined;
        expect(building_detail_ctrl_scope.is_project()).toEqual(false);

    });
    it("should show the default projects table if a user has no compliance" +
        " projects", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.user.has_projects()).toEqual(false);
        building_detail_ctrl_scope.projects = [{id: 1, name: "a"}];
        expect(building_detail_ctrl_scope.user.has_projects()).toEqual(true);

    });

    it("should set only building attribute to master, not ids or children", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.is_valid_key('id')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('pk')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('pk_source')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key(' extra_data ')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('gross_floor_area'))
          .toEqual(true);
    });
    it("should update a project-building label", function() {
        // arrange
        create_building_detail_controller();
        var project = {
            id: 2,
            building: {}
        };

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.update_project_building(project,
            {
                name: "label name",
                color: "red"
            });
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(mock_project_service.update_project_building).toHaveBeenCalled();
        expect(project.building.approver).toEqual("bob doe");
        expect(project.building.approved_date).toEqual("01/01/2012");
        expect(project.building.label.name).toEqual("label name");
        expect(project.building.label.color).toEqual("red");

    });
    it("should set a field as source when clicked", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[0].is_master = true;
        expect(building_detail_ctrl_scope.building.gross_floor_area_source)
          .not.toEqual(building_detail_ctrl_scope.building.id);
        building_detail_ctrl_scope.set_self_as_source('gross_floor_area');
        building_detail_ctrl_scope.set_self_as_source('some other key', true);
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.building.gross_floor_area_source)
          .toEqual(building_detail_ctrl_scope.building.id);
        expect(building_detail_ctrl_scope.imported_buildings[0].is_master)
          .toEqual(false);
    });
    it("should set a column as the dominant source when clicked", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[1].is_master = true;
        building_detail_ctrl_scope.make_source_default(
            building_detail_ctrl_scope.imported_buildings[0]);
        building_detail_ctrl_scope.$digest();

        // assertions
        var b = building_detail_ctrl_scope.building,
            i = building_detail_ctrl_scope.imported_buildings[0],
            i_other = building_detail_ctrl_scope.imported_buildings[1];

        expect(b.gross_floor_area_source).toEqual(i.id);
        expect(b.id).not.toEqual(i.id);
        expect(b.pk).not.toEqual(i.id);
        expect(b.city).toEqual(i.city);
        expect(b.city_source).toEqual(i.id);
        expect(b.tax_lot_id).toEqual("11/22");
        expect(b.tax_lot_id_source).toEqual(i_other.id);
        expect(b.extra_data['some other key']).toEqual(123);
        expect(b.extra_data_sources['some other key']).toEqual(i.id);
        expect(b.extra_data['some other key that is not in a child']).toEqual(333);
        expect(b.extra_data_sources['some other key that is not in a child']).toEqual(i.id);
        expect(b.extra_data['some other key that is not in a parent']).toEqual(223);
        expect(b.extra_data_sources['some other key that is not in a parent']).toEqual(i_other.id);
        expect(b.created).toEqual("at some point");

        expect(i.is_master).toEqual(true);
        expect(i_other.is_master).toEqual(false);
    });
    it("should set the master building value when parent's value is clicked",
        function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[1].is_master = true;
        building_detail_ctrl_scope.set_building_attribute(
            building_detail_ctrl_scope.imported_buildings[0], 'city');
        building_detail_ctrl_scope.set_building_attribute(
            building_detail_ctrl_scope.imported_buildings[0], 'some other key', true);
        building_detail_ctrl_scope.$digest();

        // assertions
        var b = building_detail_ctrl_scope.building,
            i = building_detail_ctrl_scope.imported_buildings[0],
            i_other = building_detail_ctrl_scope.imported_buildings[1];

        expect(b.id).not.toEqual(i.id);
        expect(b.pk).not.toEqual(i.id);
        expect(b.city).toEqual(i.city);
        expect(b.city_source).toEqual(i.id);
        expect(b.tax_lot_id).toEqual("11/22");
        expect(b.tax_lot_id_source).toEqual(i_other.id);
        expect(b.extra_data['some other key']).toEqual(123);
        expect(b.extra_data_sources['some other key']).toEqual(i.id);

        expect(i.is_master).toEqual(false);
        expect(i_other.is_master).toEqual(false);
    });

    it("should display all the data within all the buildings", function() {
        // arrange
        create_building_detail_controller();
        var keys;

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        var edc = building_detail_ctrl_scope.data_columns;

        // should not duplicate keys
        expect(edc.length).toEqual(8);
        keys = edc.map(function ( d ) {
            return d.key;
        });
        expect(keys.indexOf('make it four')).toEqual(4);
    });

    it("should display Floor Areas", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.$digest();

        // assertions
        var area_fields = building_detail_ctrl_scope.floor_area_fields;
        expect(area_fields.length).toEqual(1);
    });

    it("should display Floor Areas with number", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.get_number("")).toEqual(0);
        expect(building_detail_ctrl_scope.get_number("123,123,123")).toEqual(123123123);
        expect(building_detail_ctrl_scope.get_number("123,123,123.123")).toEqual(123123123.123);
        expect(building_detail_ctrl_scope.get_number("-123,123,123")).toEqual(-123123123);
        expect(building_detail_ctrl_scope.get_number(-123123123)).toEqual(-123123123);


    });
});

describe("controller: concat_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var scope, controller, modal_state;
    var edit_ctrl, concat_modal_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label, mock_mapping_service, mock_matching_service;
    var global_step = 1;
    var global_dataset = {};

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
            $controller, $rootScope, $modal, urls, $q
        ) {
            controller = $controller;
            scope = $rootScope;
            concat_modal_ctrl_scope = $rootScope.$new();
            concat_modal_ctrl_scope.concat_columns = [];
            modal_state = "";
        }
    ));

    var mock_building_column_types = [
        'address1', 'city', 'state', 'postal_code'
    ];

    var mock_raw_columns = [
        {
            name: 'Address',
            suggestion: 'address1',
            confidence: 1,
            raw_data: [
                '234 Database way',
                '23444 Huh hwy',
                '23444 Huh hwy',
                '23444 Huh hwy',
                '1223 face pl.'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        },
        {
            name: 'City',
            suggestion: 'city',
            confidence: 1,
            raw_data: [
                'Mega City', 'Mega City', 'Mega City', 'Mega City', 'Mega City'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        },
        {
            name: 'Zip',
            suggestion: '',
            confidence: 0,
            raw_data: [
                '234233', '234233', '234233', '234233', '234233'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        }
    ];

    // this is outside the beforeEach so it can be configured by each unit test
    function create_concat_modal_controller(){
        edit_ctrl = controller('concat_modal_ctrl', {
            $scope: concat_modal_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            building_column_types: mock_building_column_types,
            raw_columns: mock_raw_columns
        });
    }

    /*
     * Test scenarios
     */

    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.close_concat_modal();
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should mangle scope appropriately during concatenation", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(3);

        // arrange
        concat_modal_ctrl_scope.concat_columns =
            concat_modal_ctrl_scope.raw_columns.slice(0);
        concat_modal_ctrl_scope.raw_columns = [];

        // act
        concat_modal_ctrl_scope.$digest();
        concat_modal_ctrl_scope.save_concat();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(1);
        expect(
            concat_modal_ctrl_scope.raw_columns[0].is_concatenated
        ).toEqual(true);
    });

    it("should modify the raw_data of our modified TCM correctly", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(3);

        // arrange
        concat_modal_ctrl_scope.concat_columns =
            concat_modal_ctrl_scope.raw_columns.slice(0);
        concat_modal_ctrl_scope.raw_columns = [];

        // act
        concat_modal_ctrl_scope.$digest();
        concat_modal_ctrl_scope.save_concat();

        var expected_raw = [
            '234 Database way Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '1223 face pl. Mega City 234233'
        ];

        // assertions
        expect(
            concat_modal_ctrl_scope.raw_columns[0].raw_data
        ).toEqual(expected_raw);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: create_organization_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_organization_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, organization_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        mock_organization_service = organization_service;
        spyOn(mock_organization_service, "create_sub_org")
            .andCallFake(function(org, sub_org){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_organization_modal_ctrl(){
        ctrl = ctrl('create_organization_modal_ctrl', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            organization: {organization_id: 1}
        });
    }

    /*
     * Test scenarios
     */

    it("should call the organization service to add a new sub_org",
        function() {
        // arrange
        create_organization_modal_ctrl();

        // act
        ctrl_scope.$digest();
        ctrl_scope.sub_org.name = "my shiny new org";
        ctrl_scope.sub_org.email = "jb.smooth@be.com";
        ctrl_scope.submit_form(true);

        // assertions
        expect(mock_organization_service.create_sub_org)
            .toHaveBeenCalledWith(
                {
                    organization_id: 1
                },
                {
                    name: "my shiny new org",
                    email: "jb.smooth@be.com"
                }
            );
    });
    
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: data_upload_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_uploader_service, scope, controller, modal_state;
    var edit_ctrl, data_upload_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label, mock_mapping_service, mock_matching_service;
    var global_step = 1;
    var global_dataset = {};
    var return_labels = [
        {
            "name": 'compliant',
            "color": 'green',
            "id": 1
        },
        {
            "name": "new label",
            "color": "blue",
            "id": 2
        }
    ];

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, uploader_service, mapping_service, matching_service) {
            controller = $controller;
            scope = $rootScope;
            data_upload_ctrl_scope = $rootScope.$new();
            modal_state = "";

            // mock the uploader_service factory methods used in the controller
            // and return their promises
            mock_uploader_service = uploader_service;
            mock_mapping_service = mapping_service;
            mock_matching_service = matching_service;
            spyOn(mock_uploader_service, "get_AWS_creds")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "AWS_CLIENT_ACCESS_KEY": "123",
                            "AWS_UPLOAD_BUCKET_NAME": "test-bucket"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "check_progress")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "progress": "25.0"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "create_dataset")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "id": 3,
                                "name": dataset_name

                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error",
                                "message": "name already in use"
                            }
                        );
                    }
                }
            );
            spyOn(mock_uploader_service, "save_raw_data")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "file_id": 3
                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error"
                            }
                        );
                    }
                }
            );
            spyOn(mock_mapping_service, "start_mapping")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "file_id": 3
                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error"
                            }
                        );
                    }
                }
            );
            spyOn(mock_matching_service, "start_system_matching")
            .andCallFake(function(file_id){
                // return $q.reject for error scenario
                return $q.when(
                    {
                        "status": "success",
                        "file_id": 3
                    }
                );
            });

        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_data_upload_modal_controller(){
        edit_ctrl = controller('data_upload_modal_ctrl', {
            $scope: data_upload_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            step: global_step,
            dataset: global_dataset
        });
    }

    /*
     * Test scenarios
     */

    it("should close the modal when the close function is called", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.close();
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel function is called", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.cancel();
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

    it("should start at the step provided", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(1);

        // arrange
        global_step = 2;
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(2);
    });

    it("should goto different steps", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var step;
        step = 2;
        data_upload_ctrl_scope.goto_step(step);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(step);
    });

    it("disables the 'Name it' button if no text is entered", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(true);
    });
    it("disables the 'Name it' button if no text is entered, then cleared",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.dataset.name = undefined;
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(true);
    });
    it("enables the 'Name it' button if text is entered", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.dataset.name = "my dataset name";
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(false);
    });
    it("should show an alert if the dataset name is already in use",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.create_dataset("fail");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.alert).toBe(true);
    });
    it("should not show an alert if the dataset name is not already in use",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.create_dataset("my shiny new dataset");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.alert).toBe(false);
    });
    it("after creating a dataset, stores the dataset id", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var ds_name = "my shiny new dataset";
        data_upload_ctrl_scope.create_dataset(ds_name);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.id).toBe(3);
        expect(data_upload_ctrl_scope.dataset.name).toBe(ds_name);
    });
    it("after uploading a file, stores the file id", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var message, filename;
        message = "upload_complete";
        filename = "file1.csv";

        // act
        data_upload_ctrl_scope.uploaderfunc(message, {
            filename: filename,
            file_id: 20140313
        });
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.import_file_id).toBe(20140313);
    });
    it("should show an invalid extension alert if a file with an invalid" +
        "extension is loaded", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.uploaderfunc("invalid_extension");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.invalid_extension_alert)
            .toBe(true);
    });
    it("should hide the upload button after the user selects a file",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename;
        message = "upload_submitted";
        filename = "file1.csv";

        // act
        data_upload_ctrl_scope.uploaderfunc(message, {filename: filename});
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.filename).toBe(filename);
        expect(data_upload_ctrl_scope.uploader.in_progress).toBe(true);
    });
    it("should show the progressbar during upload",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename, progress;
        message = "upload_in_progress";
        filename = "file1.csv";
        progress = {
            loaded: 10,
            total: 100
        };

        // act
        data_upload_ctrl_scope.uploaderfunc(message, filename, progress);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.in_progress).toBe(true);
        expect(data_upload_ctrl_scope.uploader.progress).toBe(2.5);
    });
    it("should start saving the energy data when the file has been uploaded",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename;
        message = "upload_complete";
        filename = "file1.csv";
        data_upload_ctrl_scope.step.number = 4;

        // act
        data_upload_ctrl_scope.uploaderfunc(message, filename);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.status_message)
            .toBe("saving energy data");
    });

    it("should take an dataset payload", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.name).toBe("");
        expect(data_upload_ctrl_scope.dataset.filename).toBe("");
        expect(data_upload_ctrl_scope.dataset.id).toBe(0);
    });

    it("should extend a custom dataset payload", function() {
        // arrange
        global_dataset = {
            id: 100,
            filename: "seed_data.csv",
            name: "Compliance Project"
        };
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.name).toBe("Compliance Project");
        expect(data_upload_ctrl_scope.dataset.filename).toBe("seed_data.csv");
        expect(data_upload_ctrl_scope.dataset.id).toBe(100);
        expect(data_upload_ctrl_scope.dataset.alert).toBe(false);

    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: dataset_detail_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, ngFilter, delete_called;
    var dataset_detail_ctrl, dataset_detail_ctrl_scope, modalInstance, labels;

    

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, dataset_service, $filter) {
            controller = $controller;
            scope = $rootScope;
            ngFilter = $filter;
            dataset_detail_ctrl_scope = $rootScope.$new();
            modal_state = "";
            delete_called = false;

            // mock the dataset_service factory methods used in the controller
            // and return their promises
            mock_dataset_service = dataset_service;
            spyOn(mock_dataset_service, "get_dataset")
                .andCallFake(function(dataset_id){
                    // return $q.reject for error scenario
                    var fake_importfiles = [
                        {
                            name: "DC_CoveredBuildings_50k.csv",
                            number_of_buildings: 511,
                            number_of_mappings: 511,
                            number_of_cleanings: 1349,
                            source_type: "Assessed Raw",
                            number_of_matchings: 403
                        },
                        {
                            name: "DC_ESPM_Report.csv",
                            number_of_buildings: 511,
                            number_of_matchings: 403,
                            source_type: "Portfolio Raw"
                        }
                    ];
                    var fake_dataset = {
                        name: "DC 2013 data",
                        last_modified: (new Date()).getTime(),
                        last_modified_by: "john.s@buildingenergy.com",
                        number_of_buildings: 89,
                        id: 1,
                        importfiles: fake_importfiles
                    };
                    var fake_payload = {
                        "status": "success",
                        "dataset": fake_dataset
                    };
                    if (delete_called) {
                        fake_payload.dataset.importfiles.pop();
                    }
                    console.log({delete_called: delete_called, ds: fake_payload});
                    return $q.when(fake_payload);
                }
            );

            spyOn(mock_dataset_service, "delete_file")
                .andCallFake(function(import_file){
                    delete_called = true;
                    console.log({d: "delete_called"});
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_detail_controller(){
        var fake_importfiles = [
            {
                name: "DC_CoveredBuildings_50k.csv",
                number_of_buildings: 511,
                number_of_mappings: 511,
                number_of_cleanings: 1349,
                source_type: "Assessed Raw",
                number_of_matchings: 403
            },
            {
                name: "DC_ESPM_Report.csv",
                number_of_buildings: 511,
                number_of_matchings: 403,
                source_type: "Portfolio Raw"
            }
        ];
        var fake_dataset = {
            name: "DC 2013 data",
            last_modified: (new Date()).getTime(),
            last_modified_by: "john.s@buildingenergy.com",
            number_of_buildings: 89,
            id: 1,
            importfiles: fake_importfiles
        };
        var fake_payload = {
            "status": "success",
            "dataset": fake_dataset
        };
        dataset_detail_ctrl = controller('dataset_detail_controller', {
            $scope: dataset_detail_ctrl_scope,
            dataset_payload: fake_payload
        });
    }

    /*
     * Test scenarios
     */

    it("should have an data set payload with import files", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        dataset_detail_ctrl_scope.$digest();

        // assertions
        expect(dataset_detail_ctrl_scope.dataset.importfiles.length).toBe(2);
    });

    it("should show an alert when the delete icon is clicked", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        dataset_detail_ctrl_scope.$digest();
        var importfiles = dataset_detail_ctrl_scope.dataset.importfiles;
        dataset_detail_ctrl_scope.delete_file(importfiles[0]);
        dataset_detail_ctrl_scope.$digest();

        // assertions
        expect(dataset_detail_ctrl_scope.dataset.importfiles.length).toBe(1);
    });
   
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: dataset_list_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, modal_state;
    var edit_ctrl, dataset_list_ctrl_scope, modalInstance, labels;
    var location;

    

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, uploader_service,
            $location) {
            controller = $controller;
            scope = $rootScope;
            dataset_list_ctrl_scope = $rootScope.$new();
            modal_state = "";
            location = $location;

            // mock the uploader_service factory methods used in the controller
            // and return their promises
            mock_uploader_service = uploader_service;
            spyOn(mock_uploader_service, "get_AWS_creds")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "AWS_CLIENT_ACCESS_KEY": "123",
                            "AWS_UPLOAD_BUCKET_NAME": "test-bucket"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "create_dataset")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "import_record_id": 3,
                                "import_record_name": dataset_name

                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error",
                                "message": "name already in use"
                            }
                        );
                    }
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_list_controller(){
        var fake_datasets_payload = {
            "status": "success",
            "datasets": [
                {
                    name: "DC 2013 data",
                    last_modified: (new Date()).getTime(),
                    last_modified_by: "john.s@buildingenergy.com",
                    number_of_buildings: 89
                },
                {
                    name: "DC 2014 data",
                    last_modified: (new Date()).getTime() -
                        1550 * 60 * 60 * 1000,
                    last_modified_by: "gavin.m@buildingenergy.com",
                    number_of_buildings: 70
                }
            ]
        };
        edit_ctrl = controller('dataset_list_controller', {
            $scope: dataset_list_ctrl_scope,
            datasets_payload: fake_datasets_payload
        });
    }

    /*
     * Test scenarios
     */

    it("should have a dataset_payload", function() {
        // arrange
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();

        // assertions
        expect(dataset_list_ctrl_scope.datasets.length).toEqual(2);
    });

    it("should disable the mapping button if the dataset has no" +
        " Assessor files", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Portfolio Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_assessor_files(dataset);

        // assertions
        expect(disabled).toEqual(true);
    });

    it("should enable the mapping button if the dataset has at least one" +
        " Assessor file", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_assessor_files(dataset);

        // assertions
        expect(disabled).toEqual(false);
    });
    it("should disable the matching button if the dataset has no" +
        " Portfolio Manger files", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Assessed Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_pm_files(dataset);

        // assertions
        expect(disabled).toEqual(true);
    });
    it("should enable the matching button if the dataset has at least one" +
        " Portfolio Manger file", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_pm_files(dataset);

        // assertions
        expect(disabled).toEqual(false);
    });
    it("should navigate to the mapping page of the first assessed" +
        " import file when the ``Mapping`` button is clicked", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Assessed Raw",
                    id: 3
                },
                {
                    source_type: "Assessed Raw",
                    id: 5
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        dataset_list_ctrl_scope.goto_mapping(dataset);

        // assertions
        expect(location.path()).toBe('/data/mapping/3');
    });
    it("should navigate to the matching page of the first Portfolio Manager" +
        " import file when the ``Matching`` button is clicked", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw",
                    id: 3
                },
                {
                    source_type: "Portfolio Raw",
                    id: 5
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        dataset_list_ctrl_scope.goto_matching(dataset);

        // assertions
        expect(location.path()).toBe('/data/matching/3');
    });

   
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: delete_modal_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, building_services, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        // mock the export_service factory methods used in the controller
        // and return their promises
        mock_building_services = building_services;
        spyOn(mock_building_services, "delete_buildings")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_delete_modal_controller(){
        ctrl = ctrl('delete_modal_controller', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            search: { 
                selected_buildings: [1,2],
                filter_params: {},
                select_all_checkbox: false,
                order_by: "",
                sort_reverse: false,
                number_matching_search: 1000
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should start at the delete page", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.delete_state).toEqual("delete"); 
    });
    it("should save the search paramaters",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.delete_payload;
        expect(b.selected_buildings).toEqual([1,2]);
        expect(b.filter_params).toEqual({});
        expect(b.order_by).toEqual("");
        expect(b.sort_reverse).toEqual(false);
        expect(b.select_all_checkbox).toEqual(false);
    });
    it("should delete when the delete button is clicked",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.delete_buildings();

        // assertions
        expect(ctrl_scope.delete_state).toEqual("prepare");
        expect(mock_building_services.delete_buildings).toHaveBeenCalled();
    });
    it("should show the success page when the delete is finished",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.delete_buildings();
        ctrl_scope.$digest();

        // assertions
        expect(mock_building_services.delete_buildings).toHaveBeenCalled();
        expect(ctrl_scope.delete_state).toEqual("success");
    });
    it("should show the number of buildings to be deleted",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        var number_to_delete = ctrl_scope.number_to_delete();

        // assertions
        expect(number_to_delete).toEqual(2);
    });
    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.close();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.cancel();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

  
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myDistrictApp = angular.module('myDistrictApp', ['district']);

describe("The district filter", function() {
    beforeEach(module('myDistrictApp'));
    it('replaces `district` with `County/District/Ward/Borough`',
        inject(function(districtFilter) {
            // normal cases
            expect(districtFilter('district')).toBe('County/District/Ward/Borough');
            expect(districtFilter('District')).toBe('County/District/Ward/Borough');
            expect(districtFilter('DistRict')).toBe('County/District/Ward/Borough');
            expect(districtFilter('DISTRICT')).toBe('County/District/Ward/Borough');
            expect(districtFilter('aDISTRICT')).toBe('aDISTRICT');
            expect(districtFilter('')).toBe('');
            expect(districtFilter('district ')).toBe('district ');
            expect(districtFilter('ok')).toBe('ok');
            expect(districtFilter(undefined)).toBe(undefined);
            expect(districtFilter(null)).toBe(null);
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: edit_label_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, modal_state;
    var edit_ctrl, edit_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label;
    var return_labels = [
        {
            "name": 'compliant',
            "color": 'green',
            "id": 1
        },
        {
            "name": "new label",
            "color": "blue",
            "id": 2
        }
    ];

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, urls, $q, project_service) {
        controller = $controller;
        scope = $rootScope;
        edit_ctrl_scope = $rootScope.$new();
        modal_state = "";

        // mock the project_service factory methods used in the controller
        // and return their promises
        mock_project_service = project_service;
        spyOn(mock_project_service, "get_labels")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success", "labels": return_labels});
            }
        );
        spyOn(mock_project_service, "add_label")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
        spyOn(mock_project_service, "delete_label")
            .andCallFake(function(label){
                deleted_label = label;
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
        spyOn(mock_project_service, "update_label")
            .andCallFake(function(label){
                updated_label = label;
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );

    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_edit_modal_controller(){
        var labels = [
            {
                "name": 'compliant',
                "color": 'green',
                "id": 1
            }
        ];

        edit_ctrl = controller('edit_label_modal_ctrl', {
            $scope: edit_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            labels: labels
        });
    }

    /*
     * Test scenarios
     */

    it("should initialize the default label", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.$digest();
        edit_ctrl_scope.initialize_label_modal();

        // assertions
        expect(edit_ctrl_scope.label_modal.color).toBe("gray");
        expect(edit_ctrl_scope.label_modal.label).toBe("default");
        expect(edit_ctrl_scope.label_modal.name).toBe("");
        expect(edit_ctrl_scope.modal.label.state).toBe("create");
    });

    it("should get the labels available to an organization", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.add_label({});  // calls private get_labels
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.labels.length).toBe(2);
    });

    it("should add a label in the user's organization", function() {
        // arrange
        create_edit_modal_controller();
        var label_to_add = {
            color: "blue",
            label: "primary",
            name: "new label"
        };

        // act
        edit_ctrl_scope.add_label(label_to_add);
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.labels.length).toBe(2);
        expect(edit_ctrl_scope.labels[1].color).toBe("blue");
        expect(edit_ctrl_scope.labels[1].name).toBe("new label");
    });

    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.close();
        edit_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.cancel();
        edit_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

    it("sets the label_modal to the label when its edit button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.edit_label(label);
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.label_modal.color).toBe(label.color);
        expect(edit_ctrl_scope.label_modal.name).toBe(label.name);
        expect(edit_ctrl_scope.modal.label.state).toBe("edit");

        // assert that edit_ctrl_scope.label_modal is a copy and not a reference to label
        edit_ctrl_scope.label_modal.name = "random name here";
        expect(edit_ctrl_scope.label_modal.name).not.toBe(label.name);
    });
    
    it("deletes the appropriate label when the delete button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.delete_label(label);
        edit_ctrl_scope.$digest();

        // assertions
        expect(deleted_label).toBe(label);
    });

    it("updates the appropriate label when the update label button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.edit_label(label);
        edit_ctrl_scope.$digest();
        edit_ctrl_scope.label_modal.name = "harry";
        edit_ctrl_scope.label_modal.color = "blue";
        edit_ctrl_scope.update_label(edit_ctrl_scope.label_modal);
        edit_ctrl_scope.$digest();

        // assertions
        expect(mock_project_service.update_label).toHaveBeenCalledWith(edit_ctrl_scope.label_modal);
        expect(updated_label).toBe(edit_ctrl_scope.label_modal);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: export_modal_controller", function(){
    // globals set up and used in each test scenario
    var mock_export_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, export_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        // mock the export_service factory methods used in the controller
        // and return their promises
        mock_export_service = export_service;
        spyOn(mock_export_service, "export_buildings")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success", "export_id": "123456"});
            }
        );
        spyOn(mock_export_service, "export_buildings_progress")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({
                    "status": "success",
                    "buildings_processed": 1000
                });
            }
        );
            spyOn(mock_export_service, "export_buildings_download")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({
                    "status": "success",
                    "url": "#"
                });
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_export_modal_controller(){
        ctrl = ctrl('export_modal_controller', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            search: { 
                selected_buildings: [],
                filter_params: {},
                select_all_checkbox: false,
                order_by: "",
                sort_reverse: false,
                number_matching_search: 1000
            },
            selected_fields: ['tax_lot_id', 'postal_code'],
            project: {
                id: 11
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should start at the create page", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.export_state).toEqual("create"); 
    });
    it("should start with an empty name and default file type of 'xls'",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.building_export;
        expect(b.export_name).toEqual("");
        expect(b.export_type).toEqual("xls");
    });
    it("should save the search paramaters",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.building_export;
        expect(b.selected_buildings).toEqual([]);
        expect(b.filter_params).toEqual({});
        expect(b.order_by).toEqual("");
        expect(b.sort_reverse).toEqual(false);
        expect(b.select_all_checkbox).toEqual(false);
        expect(b.selected_fields).toEqual(['tax_lot_id', 'postal_code']);
        expect(b.project_id).toEqual(11);
        expect(ctrl_scope.progress_denominator).toEqual(0);
    });
    it("should kick off the export process when the export button is clicked",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.export_buildings();

        // assertions
        expect(ctrl_scope.export_state).toEqual("prepare");
        expect(mock_export_service.export_buildings).toHaveBeenCalled();
    });
    it("should show the success page when the data is ready",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.show_success_page("123");
        ctrl_scope.$digest();

        // assertions
        expect(mock_export_service.export_buildings_download).toHaveBeenCalled();
        expect(ctrl_scope.export_state).toEqual("success");
    });
    it("should update the progress bar",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.monitor_progress("123", 1000);
        ctrl_scope.$digest();
        timeout.flush();

        // assertions
        expect(mock_export_service.export_buildings_progress).toHaveBeenCalled();
        expect(ctrl_scope.progress_percentage).toEqual(100);
        expect(ctrl_scope.progress_numerator).toEqual(1000);
        expect(ctrl_scope.progress_denominator).toEqual(1000);
    });
    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.close();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.cancel();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

  
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
/**
 * tests fromNow angularjs filter wrapper of moment.js
 * uses epoch milliseconds as that is what the back-end returns
 */

// create dummy angularJS app to attach filter(s)
var myfromNowFilterApp = angular.module('myfromNowFilterApp', ['fromNow']);

describe("The fromNow filter", function() {
    beforeEach(module('myfromNowFilterApp'));

    it('shows the present time as "a few seconds ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('a few seconds ago');
        })
    );

    it('shows 5 minutes ago as "5 minutes ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 5  * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('5 minutes ago');
        })
    );

    it('shows 4 hours ago as "4 hours ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 4 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('4 hours ago');
        })
    );

    it('shows 24 hours ago as "a day ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 24 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('a day ago');
        })
    );

    it('shows 36 hours ago as "2 days ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 36 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('2 days ago');
        })
    );

    it('shows 1550 hours ago as "2 months ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 1550 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('2 months ago');
        })
    );

    it('defaults to "a few seconds ago" for undefined values',
        inject(function(fromNowFilter) {
            // arrange

            // act

            // assert
            expect(fromNowFilter(undefined)).toBe('a few seconds ago');
            expect(fromNowFilter(null)).toBe('a few seconds ago');
            expect(fromNowFilter("some text")).toBe('a few seconds ago');
            expect(fromNowFilter({})).toBe('a few seconds ago');
            expect(fromNowFilter({time: "not time"})).toBe('a few seconds ago');
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myignoremapApp = angular.module('myignoremapApp', ['ignoremap']);

describe("The ignoremap filter", function() {
    beforeEach(module('myignoremapApp'));
    it('replaces `""` with `------ Ignore Row ------`',
        inject(function(ignoremapFilter) {
            // normal cases
            expect(ignoremapFilter('')).toBe('------ Ignore Row ------');
            expect(ignoremapFilter(' ')).toBe(' ');
            expect(ignoremapFilter('aignoremap')).toBe('aignoremap');
            expect(ignoremapFilter('ignoremap ')).toBe('ignoremap ');
            expect(ignoremapFilter('ok')).toBe('ok');
            expect(ignoremapFilter(undefined)).toBe('------ Ignore Row ------');
            expect(ignoremapFilter(null)).toBe('------ Ignore Row ------');
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: mapping_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, modal_state;
    var mapping_ctrl, mapping_ctrl_scope, modalInstance, labels;
    var timeout, mock_user_service, mock_search_service;



    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, building_services, $timeout, user_service, search_service) {
            controller = $controller;
            scope = $rootScope;
            mapping_ctrl_scope = $rootScope.$new();
            modal_state = "";
            timeout = $timeout;
            mock_user_service = user_service;
            mock_search_service = search_service;

            spyOn(mock_user_service, 'set_default_columns')
                .andCallFake(function(mapped_columns){
                    return undefined;
                });
            spyOn(mock_search_service, 'search_buildings')
                .andCallFake(function(){
                    return [1,2,3];
                });
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_mapping_controller(){
        var mock_datasets = [
            {
                name: "DC 2013 data",
                last_modified: (new Date()).getTime(),
                last_modified_by: "john.s@buildingenergy.com",
                number_of_buildings: 89,
                id: 1
            },
            {
                name: "DC 2014 data",
                last_modified: (new Date()).getTime() -
                    1550 * 60 * 60 * 1000,
                last_modified_by: "gavin.m@buildingenergy.com",
                number_of_buildings: 70,
                id: 2
            }
        ];
        var fake_import_file_payload = {
            "status": "success",
            "import_file": {
                        file_name: "assessor_fun.csv",
                        last_modified: (new Date()).getTime(),
                        last_modified_by: "john.s@buildingenergy.com",
                        source_type: 'AssessorRaw',
                        dataset: mock_datasets[0],
                        id: 1
                    }
        };

        var mock_be_building_columns = [
            'pm_property_id',
            'property_name',
            'property_notes',
            'tax_lot_id',
            'gross_floor_area',
            'My New non-BEDES field'
        ];

        var mock_be_building_types = {
            'gross_floor_area': {
                unit_type: 'float',
                schema: 'BEDES'
            }
        };

        var mock_mapping_suggestions_payload = {
            'status': 'success',
            'suggested_column_mappings': {
                // key(django model attribute): [csv_header1, ... csv_header3]
                'property id': ['pm_property_id', 89],
                'lot number': ['tax_lot_id' , 54]
            },
            "building_columns": mock_be_building_columns,
            "building_column_types": mock_be_building_types
        };

        var mock_raw_column_names = [
            'property id',
            'property_name',
            'property_notes',
            'lot number',
            'lot size'
        ];

        var mock_first_five_rows = [];
        for (var i=0; i < 4; i++) {
            mock_first_five_rows.push({
                'property id': i,
                'property_name': 'Property ' + i,
                'property_notes': 'Nup.',
                'lot number': i * 2,
                'lot size': 454 * i
            });
        }

        mock_first_five_rows.push({
            'property id': '121L',
            'property_name': 'Inconsistent Property',
            'property_notes': 'N/A',
            'lot number': 'N/A',
            'lot size': 45
        });

        var raw_columns_payload = {
            "status": "success",
            "raw_columns": mock_raw_column_names
        };
        var first_five_rows_payload = {
            "status": "success",
            "first_five_rows": mock_first_five_rows
        };
        mapping_ctrl = controller('mapping_controller', {
            $scope: mapping_ctrl_scope,
            import_file_payload: fake_import_file_payload,
            suggested_mappings_payload: mock_mapping_suggestions_payload,
            raw_columns_payload: raw_columns_payload,
            first_five_rows_payload: first_five_rows_payload,
            all_columns: {fields: []},
            building_services: mock_building_services,
            $timeout: timeout
        });
    }

    /*
     * Test scenarios
     */

    it("should have a import_file_payload", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        expect(mapping_ctrl_scope.import_file.dataset.name).toBe("DC 2013 data");
    });

    it("should show suggested mappings and confidence", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        var raw_columns = mapping_ctrl_scope.raw_columns;
        var first_column = raw_columns[0];

        expect(first_column.confidence).toBe(89);
        expect(first_column.suggestion).toBe("Pm Property Id");
    });

    it("should show 'low', 'med', 'high', or '' confidence text", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        var raw_columns = mapping_ctrl_scope.raw_columns;
        var first_column = raw_columns[0];
        expect(first_column.confidence_text()).toBe("high");
        first_column.confidence = 70;
        expect(first_column.confidence_text()).toBe("med");
        first_column.confidence = 35;
        expect(first_column.confidence_text()).toBe("low");
        delete(first_column.confidence);
        expect(first_column.confidence_text()).toBe("");
    });

    it("should validate initial data", function() {
        create_mapping_controller();
        // act
        mapping_ctrl_scope.$digest();
        // assertions
        angular.forEach(mapping_ctrl_scope.raw_columns, function(rc) {
            if (rc.suggestion !== '' && typeof(rc.suggestion) !== "undefined") {
                expect(rc.validity).toBe('valid');
            }
        });
    });

    it("should invalidate bad suggestions", function() {
        // Simulate a change on the tcm, make it fail.
        create_mapping_controller();
        // act
        mapping_ctrl_scope.$digest();
        // assertions
        //
        // We change the suggested mapping for the "property name" column
        // to "gross_floor_area" (which validates as float) to
        // purposesly cause a failing change.
        mapping_ctrl_scope.raw_columns[1].suggestion = 'gross_floor_area';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[1]);
        expect(mapping_ctrl_scope.raw_columns[1].validity).toBe('invalid');

    });

    it("should set td_class appropriately", function() {
        var tcm;

        create_mapping_controller();

        mapping_ctrl_scope.$digest();
        tcm = mapping_ctrl_scope.raw_columns[0];
        var good_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[0]
        );

        // First raw column is mapped up as pm_property_id <-> property_id
        // Any kind of string will be valid.
        expect(good_val).toBe('success');

        // Now set it to one that expects float values.
        // Only one of these will *not* validate.
        mapping_ctrl_scope.raw_columns[0].suggestion = 'gross_floor_area';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[0]);

        tcm = mapping_ctrl_scope.raw_columns[0];
        var warning_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[4]
        );

        expect(warning_val).toBe('warning');

        // We don't want the warning style to be applied to neighboring cells
        // in the same row. Check that the cell next to our invalid one is
        // unstyled (undefined).
        tcm = mapping_ctrl_scope.raw_columns[0];
        var adjacent_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[3]
        );

        expect(adjacent_val).toBe(undefined);

        // Now we're saying the suggestion is to not map.
        // Check that we don't have any class set for this row now.
        mapping_ctrl_scope.raw_columns[0].suggestion = '';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[0]);

        tcm = mapping_ctrl_scope.raw_columns[0];
        var blank_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[4]
        );

        expect(blank_val).toBe('');

    });

    it("should detect duplicates of mapped rows", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // raw_columns[0] and raw_columns[3] should be the only mapped rows
        var column = mapping_ctrl_scope.raw_columns[3];
        var test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

        // Set the property_name tcm's suggestion to the same as
        // the property_id tcm (raw_columns[0])
        column.suggestion = 'Pm Property Id';

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(true);

        // Since we mark both duplicates as duplicates, the other
        // TCM that has the 'pm_property_id' suggestion should also get
        // 'danger' as its duplicate class.
        var other_dup = mapping_ctrl_scope.is_tcm_duplicate(
            mapping_ctrl_scope.raw_columns[0]
        );
        expect(other_dup).toBe(true);

        // Shows that mapped_row is the sole determinant of
        // column ignoring
        column.mapped_row = false;

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

    });

    it("should ignore duplicates of unmapped rows", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // raw_columns[0] and raw_columns[3] should be the only mapped rows
        var column = mapping_ctrl_scope.raw_columns[1];
        var test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

        // Set the property_name tcm's suggestion to the same as
        // the property_id tcm (raw_columns[0])
        column.suggestion = 'Pm Property Id';

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);
    });

    it("should get mapped buildings", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        mapping_ctrl_scope.get_mapped_buildings();
        mapping_ctrl_scope.$digest();

        // assertions
        expect(mapping_ctrl_scope.search.search_buildings).toHaveBeenCalled();
        expect(mock_user_service.set_default_columns).toHaveBeenCalled();
    });

    it("should enbale the 'show & review buildings' button if duplicates are" +
        " not present", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        for (var i = mapping_ctrl_scope.raw_columns.length - 1; i >= 0; i--) {
            mapping_ctrl_scope.change(mapping_ctrl_scope.raw_columns[i]);
        }
        var duplicates_found = mapping_ctrl_scope.duplicates_present();

        // assertions
        expect(duplicates_found).toBe(false);
    });

    it("should disable the 'show & review buildings' button if duplicates " +
        "are present", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        for (var i = mapping_ctrl_scope.raw_columns.length - 1; i >= 0; i--) {
            mapping_ctrl_scope.raw_columns[i].suggestion = "pm_property_id";
            mapping_ctrl_scope.change(mapping_ctrl_scope.raw_columns[i]);
        }
        var duplicates_found = mapping_ctrl_scope.duplicates_present();

        // assertions
        expect(duplicates_found).toBe(true);
    });

    it("should get mappings in an API friendly way", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();
        var mappings = mapping_ctrl_scope.get_mappings();
        expect(mappings.length).toBe(5);
        expect(mappings[0]).toEqual(['Pm Property Id', 'property id']);
        // everything in between is empty since we we're using only
        // suggested mappings.
        expect(mappings[3]).toEqual(['Tax Lot Id', 'lot number']);
    });

    it("should show the 'STEP 2' tab when reviewing mappings", function() {
        // arrange
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // act
        var mappings = mapping_ctrl_scope.get_mapped_buildings();

        // assert
        expect(mapping_ctrl_scope.tabs).toEqual({
            'one_active': false,
            'two_active': true,
            'three_active': false
        });
    });

    it("should show BEDES fields with a checkbox", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assert
        expect(mapping_ctrl_scope.is_suggestion_BEDES('gross_floor_area')).toBe(true);
        expect(mapping_ctrl_scope.is_suggestion_BEDES('Gross Floor Area')).toBe(true);
        expect(mapping_ctrl_scope.is_suggestion_BEDES('My New non-BEDES field')).toBe(false);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: matching_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, delete_called;
    var matching_ctrl, matching_ctrl_scope, modalInstance, labels;


    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, building_services) {
            controller = $controller;
            scope = $rootScope;
            matching_ctrl_scope = $rootScope.$new();

            mock_building_services = building_services;
            spyOn(mock_building_services, "get_PM_filter_by_counts")
                .andCallFake(function(import_file){
                    return $q.when(
                        {
                            "status": "success",
                            "unmatched": 5,
                            "matched": 10
                        }
                    );
                }
            );
            spyOn(mock_building_services, "save_match")
                .andCallFake(function(b1, b2, create){
                    return $q.when(
                        {
                            "status": "success",
                            "child_id": 3
                        }
                    );
                }
            );
            spyOn(mock_building_services, "search_matching_buildings")
                .andCallFake(function(q, number_per_page, current_page, order_by, sort_reverse, 
                                        filter_params, file_id ){
                    
                    switch(filter_params.children__isnull){
                        case undefined:
                            var bldgs = ;
                            break;
                        case false:
                            var bldgs = [
                                {
                                    pm_property_id: 1
                                }
                            ];
                            break;
                        case true:
                            var bldgs = [
                                {
                                    pm_property_id: 3
                                },
                                {
                                    pm_property_id: 4
                                }
                            ];
                            break;
                    }

                    return $q.when(
                        {
                            status: "success",
                            number_returned: buildings_payload.length,
                            number_matching_search: buildings_payload.length,
                            buildings: [
                                {
                                    pm_property_id: 1
                                },
                                {
                                    pm_property_id: 2
                                }
                                ,
                                {
                                    pm_property_id: 3
                                }
                            ];
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_detail_controller(){
        var buildings_payload = {
            buildings: [
                {
                    pm_property_id: 1,
                    tax_lot_id: null,
                    custom_id_1: 2,
                    gross_floor_area: 111,
                    matched: true,
                    id: 1,
                    children: [3],
                    coparent: {
                        pm_property_id: null,
                        tax_lot_id: 2,
                        custom_id_1: null,
                        gross_floor_area: 111,
                        id: 2,
                        children: [3]
                    }
                }
            ],
            number_matching_search: 1,
            number_returned: 1
        };
        matching_ctrl = controller('matching_controller', {
            $scope: matching_ctrl_scope,
            buildings_payload: buildings_payload,
            all_columns: {
                fields: [{sort_column: 'pm_property_id'}]
            },
            default_columns: {
                columns: ['pm_property_id']
            },
            import_file_payload: {
                import_file: {
                    id: 1,
                    dataset: {
                        importfiles: [
                            {
                                id: 1,
                                name: "file_1.csv"
                            },
                            {
                                id: 2,
                                name: "file_2.csv"
                            }
                        ]
                    }
                }
            }
        });
    }



    /*
     * Test scenarios
     */

    it("should have a buildings payload with potential matches", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();
        var b = matching_ctrl_scope.buildings[0];

        // assertions
        expect(matching_ctrl_scope.buildings.length).toBe(1);
        expect(b.coparent.children).toEqual(b.children);
    });

    it("should provide to the view scope variables representing the number matched and the number of unmatched buildings", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();

        // assertions
        expect(matching_ctrl_scope.matched_buildings).toEqual(10);
        expect(matching_ctrl_scope.unmatched_buildings).toEqual(5);
    });

    it("should jump back to the matching list when the 'Back to list' button" +
        " is clicked", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.show_building_list = false;
        matching_ctrl_scope.back_to_list();

        // assertions
        expect(matching_ctrl_scope.show_building_list).toEqual(true);
    });

    it("should present an initial state with the matching buildings table",
        function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();

        // assertions
        expect(matching_ctrl_scope.columns).toEqual([{ sort_column : 'pm_property_id' }]);
        expect(matching_ctrl_scope.number_matching_search).toEqual(1);
        expect(matching_ctrl_scope.number_returned).toEqual(1);
        expect(matching_ctrl_scope.num_pages).toEqual(1);
        expect(mock_building_services.get_PM_filter_by_counts).toHaveBeenCalled();
    });
    it("should match a building in the matching list", function() {
        // arrange
        create_dataset_detail_controller();
        var b1, b2;
        b2 = {
            id: 2,
            children: [],
            matched: false
        };
        b1 = {
            id: 1,
            children: [],
            matched: true,
            coparent: b2
        };

        // act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.toggle_match(b1);
        matching_ctrl_scope.$digest();

        // assertions
        expect(mock_building_services.save_match).toHaveBeenCalledWith(b1.id, b2.id, true);
        expect(mock_building_services.get_PM_filter_by_counts).toHaveBeenCalled();
        expect(b1.children[0]).toEqual(3);
    });
    it("Should update the list of buildings correctly when 'Show Matched' is selected", 
        function() {
        //arrange
        create_dataset_detail_controller();

        //act
        controller.update_show_filter(controller.SHOW_MATCHED)

        //assertions
        expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(1);
        expect(matching_ctrl_scope.number_returned).toEqual(1);
    });
    it("Should update the list of buildings correctly when 'Show Unmatched' is selected", 
        function() {
        //arrange
        create_dataset_detail_controller();

        //act
        controller.update_show_filter(controller.SHOW_UNMATCHED)

        //assertions
        expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(2);
        expect(matching_ctrl_scope.number_returned).toEqual(2);
    });
    it("Should update the list of buildings correctly when 'Show All' is selected", 
        function() {
        //arrange
        create_dataset_detail_controller();

        //act
        controller.update_show_filter(controller.SHOW_ALL)

        //assertions
        expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(3);
        expect(matching_ctrl_scope.number_returned).toEqual(3);
    });



});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: members_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller;
    var ctrl, ctrl_scope, modalInstance;
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          $q,
          organization_service) {
            ctrl = $controller;
            scope = $rootScope;
            ctrl_scope = $rootScope.$new();

            mock_organization_service = organization_service;
            
            spyOn(mock_organization_service, "remove_user")
                .andCallFake(function(user_id, org_id){
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
            spyOn(mock_organization_service, "get_organization_users")
                .andCallFake(function(org){
                    return $q.when(
                        {
                            "status": "success",
                            "users": [{id:1, first_name:"Bob", last_name:"D"}]
                        }
                    );
                }
            );
            spyOn(mock_organization_service, "update_role")
                .andCallFake(function(org_id, user_id, role){
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_members_controller(){
        ctrl = ctrl('members_controller', {
            $scope: ctrl_scope,
            users_payload: {users: [
                {first_name: 'J', last_name: 'S'},
                {first_name: undefined, last_name: null}
            ]},
            organization_payload: {
                organization: {name: 'my org', id: 4}
            },
            auth_payload: {
                auth: {
                    'can_invite_member': true,
                    'can_remove_member': true
                }
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should accepts its payload", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.org).toEqual({name : 'my org', id : 4});
        expect(ctrl_scope.users[0].name).toEqual("J S");
        expect(ctrl_scope.users[1].name).toEqual(" ");
    });
    it("clicking remove should remove a user", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.remove_member({user_id: 2});

        // assertions
        expect(mock_organization_service.remove_user)
            .toHaveBeenCalledWith(2, 4);
        
        ctrl_scope.$digest();
        expect(mock_organization_service.get_organization_users)
            .toHaveBeenCalledWith({org_id: 4});
    });
    it("clicking a new role should update the user's role", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.update_role({user_id: 2, role: "viewer"});

        // assertions
        expect(mock_organization_service.update_role)
            .toHaveBeenCalledWith(2, 4, 'viewer');
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: new_member_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_user_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, user_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        mock_user_service = user_service;
        spyOn(mock_user_service, "add")
            .andCallFake(function(user){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_new_member_controller(){
        ctrl = ctrl('new_member_modal_ctrl', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            organization: {organization_id: 1}
        });
    }

    /*
     * Test scenarios
     */

    it("should set the default role to 'member'", function() {
        // arrange
        create_new_member_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.user.role.value).toEqual("member"); 
    });
    it("should call the user service to add a new user to the org",
        function() {
        // arrange
        create_new_member_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.user.first_name = "JB";
        ctrl_scope.user.last_name = "Smooth";
        ctrl_scope.user.email = "jb.smooth@be.com";
        ctrl_scope.submit_form(true);

        // assertions
        expect(mock_user_service.add)
            .toHaveBeenCalledWith({
                first_name: "JB",
                last_name: "Smooth",
                email: "jb.smooth@be.com",
                role: ctrl_scope.roles[0],
                organization: {
                    organization_id: 1
                }
            });
    });
    
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
/**
 * run_jasmine.js: runs the jasmine JS test runner
 */
(function() {
    var jasmineEnv = jasmine.getEnv();
    jasmineEnv.updateInterval = 1000;

    var htmlReporter = new jasmine.HtmlReporter();

    jasmineEnv.addReporter(htmlReporter);

    jasmineEnv.specFilter = function(spec) {
        return htmlReporter.specFilter(spec);
    };

    var currentWindowOnload = window.onload;

    window.onload = function() {
        if (currentWindowOnload) {
        currentWindowOnload();
        }
        execJasmine();
    };
    function execJasmine() {
        jasmineEnv.execute();
    }
})();

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var searchTestApp = angular.module(
    'searchTestApp', ['BE.seed.service.search']
);

describe("The search_service service", function() {
    var saas, httpBackend, test_url;

    beforeEach(function () {
        module("searchTestApp");
        inject(function (search_service, $httpBackend) {
            saas = search_service;
            httpBackend = $httpBackend;
            httpBackend.when("POST", test_url).respond("ok");
        });

    });

    /**
     * sanitize_params tests
     */
    it('removes null and undefined values from filter_params', function () {
        // arrange
        saas.filter_params = {
          'National Median Site Energy Use__gte': 4,
          'National Median Site Energy Use__lte': null,
          'National Median Source EUI__gte': undefined
        };

        // act
        saas.sanitize_params();

        // assert
        expect(saas.filter_params).toEqual({'National Median Site Energy Use__gte': 4});
    });

    /**
     * search_buildings tests
     */
    it('has sane defaults', function() {
        expect(saas.url).toEqual("");
        expect(saas.error_message).toEqual("");
        expect(saas.alert).toEqual(false);
        expect(saas.buildings).toEqual([]);
        expect(saas.current_page).toEqual(1);
        expect(saas.number_per_page).toEqual(10);
        expect(saas.order_by).toEqual("");
        expect(saas.sort_column).toEqual("tax_lot_id");
        expect(saas.sort_reverse).toEqual(false);
        expect(saas.select_all_checkbox).toEqual(false);
        expect(saas.prev_page_disabled).toEqual(true);
        expect(saas.next_page_disabled).toEqual(true);
        expect(saas.num_pages).toEqual(0);
        expect(saas.query).toEqual("");
        expect(saas.showing).toEqual({
            'start': 1,
            'end': 0
        });
    });

    it('search_buildings uses the argument `query`', function() {
        saas.query = "hotels";
        saas.search_buildings("not hotels");

        expect(saas.query).toEqual("not hotels");
    });
    it('filter search resets the current page', function() {
        // arrange
        saas.current_page = 22;
        spyOn(saas, 'search_buildings');

        // act
        saas.filter_search();

        // assert
        expect(saas.current_page).toEqual(1);
        expect(saas.search_buildings).toHaveBeenCalled();
    });

    it('search_buildings function will default to its query if' +
        ' no query is passed as an argument', function() {
        saas.query = "hotels";
        saas.search_buildings();

        expect(saas.query).toEqual("hotels");
    });

    it('search_buildings hits the set url', function() {
        test_url = "/my-search-url";
        saas.url = test_url;
        saas.search_buildings();
        httpBackend.expectPOST(test_url);
        httpBackend.flush();
    });

    it('search_buildings POSTs the query data as `q`', function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.query = "hotel chains";
        saas.number_per_page = 25;
        saas.order_by = "gross_floor_area";
        saas.sort_reverse = true;
        saas.filter_params = {
            project: '2012 data'
        };

        // act
        saas.search_buildings();

        // assert
        httpBackend.expectPOST(test_url,
            {
                "q": "hotel chains",
                "number_per_page": 25,
                "order_by": "gross_floor_area",
                "sort_reverse": true,
                "filter_params": {
                    "project": "2012 data"
                },
                "page":1
            }
        ).respond(201, "");
        httpBackend.flush();
    });
    it('search_buildings updates its `buildings` model', function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.query = "hotel chains";
        saas.number_per_page = 25;
        saas.order_by = "gross_floor_area";
        saas.sort_reverse = true;
        saas.filter_params = {
            project: '2012 data'
        };

        // act
        saas.search_buildings();

        // assert
        httpBackend.expectPOST(test_url,
            {
                "q": "hotel chains",
                "number_per_page": 25,
                "order_by": "gross_floor_area",
                "sort_reverse": true,
                "filter_params": {
                    "project": "2012 data"
                },
                "page":1
            }
        ).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        expect(saas.buildings).toEqual([
            {
                name: "one",
                id: 1,
                checked: false
            },
            {
                name: "two",
                id: 2,
                checked: false
            }
        ]);
    });
    it('should clear the error and alert after a successful search',
        function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.error_message = "help";
        saas.alert = true;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {
            'buildings': [
                {
                    name: "one",
                    id: 1
                },
                {
                    name: "two",
                    id: 2
                }],
            'number_matching_search': 101
            });
        httpBackend.flush();

        // assert
        expect(saas.alert).toEqual(false);
        expect(saas.error_message).toEqual("");
    });

    /**
     * pagination tests
     */
    it('increments the page when the `next` button is clicked',
        function() {
        // arrange
        saas.num_pages = 1000;
        saas.current_page = 100;
        spyOn(saas, 'search_buildings');
        // act
        saas.next_page();

        // assert
        expect(saas.current_page).toEqual(101);
        expect(saas.search_buildings).toHaveBeenCalled();
        expect(saas.search_buildings.callCount).toEqual(1);

    });
    it('doesn\'t increment past the last page when the `next` button is' +
        ' clicked', function() {
        // arrange
        saas.num_pages = 2;
        saas.current_page = 2;
        spyOn(saas, 'search_buildings');
        // act
        saas.next_page();

        // assert
        expect(saas.current_page).toEqual(2);
        expect(saas.search_buildings).toHaveBeenCalled();
        expect(saas.search_buildings.callCount).toEqual(1);

    });
    it('decrements the page when the `previous` button is clicked',
        function() {
        // arrange
        saas.num_pages = 1000;
        saas.current_page = 100;
        spyOn(saas, 'search_buildings');
        // act
        saas.prev_page();

        // assert
        expect(saas.current_page).toEqual(99);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('does not decrement below the first page when the `previous` button' +
        ' is clicked', function() {
        // arrange
        saas.num_pages = 1;
        saas.current_page = 1;
        spyOn(saas, 'search_buildings');
        // act
        saas.prev_page();

        // assert
        expect(saas.current_page).toEqual(1);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('fetches more or less results per page when a user selects an option' +
        ' from the number per page select',
        function() {
        // arrange
        saas.number_per_page_options_model = 50;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_number_per_page();

        // assert
        expect(saas.number_per_page).toEqual(50);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('updates the number of results displayed text after a successful '+
        'search', function() {
        // standard case
        // page 2 of 3 with 10/page, so should display 11 of 20
        // arrange
        saas.current_page = 2;
        saas.num_pages = 3;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_start_end_paging();

        // assert
        expect(saas.showing.start).toEqual(11);
        expect(saas.showing.end).toEqual(20);
        expect(saas.search_buildings).not.toHaveBeenCalled();
    });
    it('displays the number matching the query if on the last page of results',
        function() {
        // standard case
        // page 3 of 3 with 10/page and 34 results, so should display 21 of 34
        // arrange
        saas.current_page = 3;
        saas.number_matching_search = 34;
        saas.num_pages = 3;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_start_end_paging();

        // assert
        expect(saas.showing.start).toEqual(21);
        expect(saas.showing.end).toEqual(34);
    });
    it('should call update_start_end_paging after a successful search',
        function() {
        // arrange
        spyOn(saas, 'update_start_end_paging');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_start_end_paging).toHaveBeenCalled();
    });
    it('should call update_buttons after a successful search',
        function() {
        // arrange
        spyOn(saas, 'update_buttons');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_buttons).toHaveBeenCalled();
    });
    it('should disable prev paging buttons at the first page',
        function() {
        // arrange
        saas.current_page = 1;
        saas.num_pages = 5;

        // act
        saas.update_buttons();

        // assert
        expect(saas.prev_page_disabled).toEqual(true);
        expect(saas.next_page_disabled).toEqual(false);
    });
    it('should disable next paging buttons at the last page',
        function() {
        // arrange
        saas.current_page = 5;
        saas.num_pages = 5;

        // act
        saas.update_buttons();

        // assert
        expect(saas.prev_page_disabled).toEqual(false);
        expect(saas.next_page_disabled).toEqual(true);
    });
    it('should calculate the number of pages after a successful search',
        function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {
            'buildings': [
                {
                    name: "one",
                    id: 1
                },
                {
                    name: "two",
                    id: 2
                }],
            'number_matching_search': 101
            });
        httpBackend.flush();

        // assert
        expect(saas.number_matching_search).toEqual(101);
        expect(saas.num_pages).toEqual(11);
    });

    /**
     * checkbox logic tests
     */
    it('should select or unselect all the viewed results when the select all' +
        ' checkbox is checked or unchecked', function() {
        // arrange
        saas.selected_buildings = [1,2,3];
        saas.select_all_checkbox = true;
        saas.buildings = [
            {
                checked: false
            },
            {
                checked: true
            }
        ];
        spyOn(saas, 'select_or_deselect_all_buildings').andCallThrough();

        // act
        saas.select_all_changed();

        // assert
        expect(saas.selected_buildings).toEqual([]);
        expect(saas.buildings).toEqual([
                {
                    checked: true
                },
                {
                    checked: true
                }
            ]);
        expect(saas.select_or_deselect_all_buildings).toHaveBeenCalled();
    });
    it('should call select_or_deselect_all_buildings after a search',
        function() {
        // arrange
        spyOn(saas, 'select_or_deselect_all_buildings');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.select_or_deselect_all_buildings).toHaveBeenCalled();
    });
    it('should add a building to the selected list when checked',
        function() {
        // arrange
        var building = {
            id: 5,
            checked: true
        };

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([5]);
    });
    it('should add a building to the selected list when unchecked and the ' +
        'select all checkbox is checked', function() {
        // arrange
        var building = {
            id: 5,
            checked: false
        };
        saas.select_all_checkbox = true;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([5]);
    });
    it('should remove a building to the selected list when unchecked',
        function() {
        // arrange
        var building = {
            id: 5,
            checked: false
        };
        saas.selected_buildings = [5,6,7];
        saas.select_all_checkbox = false;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([6,7]);
    });
    it('should remove a building to the selected list when checked if the ' +
        'select all checkbox is checked', function() {
        // arrange
        var building = {
            id: 5,
            checked: true
        };
        saas.selected_buildings = [5,6,7];
        saas.select_all_checkbox = true;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([6,7]);
    });
    it('should call load_state_from_selected_buildings after a successful ' +
        'search', function() {
        // arrange
        spyOn(saas, 'load_state_from_selected_buildings').andCallThrough();
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.load_state_from_selected_buildings).toHaveBeenCalled();
    });
    it('should call update_results after a successful ' +
        'search', function() {
        // arrange
        var select_or_deselect_all_buildings_time,
            load_state_from_selected_buildings_time;
        spyOn(saas, 'update_results').andCallThrough();
        spyOn(saas, 'select_or_deselect_all_buildings')
            .andCallFake(function() {
                select_or_deselect_all_buildings_time = new Date();
            }
        );
        spyOn(saas, 'load_state_from_selected_buildings')
            .andCallFake(function() {
                // wait for a sec, otherwise both have the same timestamp
                for(var y=0;y<100000;y++){
                    var x = new Date();
                    x = x+y;
                }
                load_state_from_selected_buildings_time = new Date();
            }
        );
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_results).toHaveBeenCalled();
        expect(select_or_deselect_all_buildings_time <
               load_state_from_selected_buildings_time).toBe(true);
    });
    it('check selected buildings successful', function() {
        // arrange
        saas.selected_buildings = [2];
        saas.buildings = [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ];

        // act
        saas.load_state_from_selected_buildings();

        // assert
        expect(saas.buildings[1]).toEqual({
            name: "two",
            id: 2,
            checked: true
        });
    });
    it('should generate columns', function() {
        // arrange
        var all_columns, column_headers, columns;
        all_columns = [
            {
                sort_column: "name"
            },
            {
                sort_column: "id"
            }
        ];
        column_headers = ["id"];
        saas.sort_column = "something else";
        saas.update_results({});
        // act
        columns = saas.generate_columns(
            all_columns, column_headers, saas.column_prototype
        );

        // assert that columns are extended off the prototype and only have
        // "id"
        expect(columns.length).toEqual(1);
        expect(columns[0].sort_column).toEqual("id");
        expect(columns[0].is_unsorted()).toEqual(true);
        saas.sort_column = "id";
        expect(columns[0].is_unsorted()).toEqual(false);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: settings_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller;
    var ctrl, ctrl_scope, modalInstance;
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          $q,
          organization_service) {
            ctrl = $controller;
            scope = $rootScope;
            ctrl_scope = $rootScope.$new();

            mock_organization_service = organization_service;
            
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_settings_controller(){
        ctrl = ctrl('settings_controller', {
            $scope: ctrl_scope,
            all_columns: {fields: [
                {checked: false, title: 'PM Property ID', sort_column: 'pm_property_id'},
                {checked: false, title: 'G', sort_column: 'g'},
                {checked: false, title: "Gross Floor Area", sort_column: 'gross_floor_area'}
            ]},
            organization_payload: {
                organization: {name: 'my org', id: 4}
            },
            query_threshold_payload: {
                query_threshold: 10
            },
            shared_fields_payload: {
                shared_fields: [
                    {
                        title: "PM Property Id",
                        sort_column: "pm_property_id"
                    }
                ],
                public_fields: [
                {
                    title: "Gross Floor Area",
                    sort_column: "gross_floor_area"
                }]
            },
            auth_payload: {
                auth: {
                    'is_owner': true,
                    'is_parent_org_owner': false
                }
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should accepts its payload", function() {
        // arrange
        create_settings_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.org).toEqual({
            name : 'my org',
            id : 4,
            query_threshold: 10
        });
        expect(ctrl_scope.fields[0].checked).toEqual(true);
        expect(ctrl_scope.fields[1].checked).toEqual(false);
        expect(ctrl_scope.fields[0].title).toEqual('PM Property ID');
    });
    it("should select all", function() {
        // arrange
        create_settings_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.controls.select_all = true;
        ctrl_scope.select_all_clicked();
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.infinite_fields[0].checked).toEqual(true);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myStripFilterApp = angular.module('myStripFilterApp', ['stripImportPrefix']);

describe("The stripImportPrefix filter", function() {
    beforeEach(module('myStripFilterApp'));
    it('Strips out the import prefix from building ids',
        // e.g. remove the 'IMP12-' from the id 'IMP12-1321/123'
        inject(function(stripImportPrefixFilter) {
            // normal cases
            expect(stripImportPrefixFilter('IMP134-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP134555-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP1-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP0-134')).toBe('134');
            // deals with `-`
            expect(stripImportPrefixFilter('IMP134-abc-dev')).toBe('abc-dev');
            // deals with `/`
            expect(stripImportPrefixFilter('IMP134-00/11')).toBe('00/11');
            // only strips first prefix
            expect(stripImportPrefixFilter('IMP134-IMP134-123')).toBe('IMP134-123');
        })
    );
    it("Does not strip out anything if there is not a prefix",
        inject(function(stripImportPrefixFilter) {
            // normal cases
            expect(stripImportPrefixFilter('123-123')).toBe('123-123');
            expect(stripImportPrefixFilter('0123/123')).toBe('0123/123');
        })
    );
    it("Is case sensitive to the import prefix",
        inject(function(stripImportPrefixFilter) {
            expect(stripImportPrefixFilter('imp123-abc')).toBe('imp123-abc');
            expect(stripImportPrefixFilter('iMp123-abc')).toBe('iMp123-abc');
            expect(stripImportPrefixFilter('iMP123-abc')).toBe('iMP123-abc');
        })
    );
    it("Handles undefined or null inputs",
        inject(function(stripImportPrefixFilter) {
            expect(stripImportPrefixFilter(undefined)).toBe(undefined);
            expect(stripImportPrefixFilter(null)).toBe(null);
        })
    );
    it("Only strips out the prefix if it has at least one digit and a hyphen",
        inject(function(stripImportPrefixFilter) {
            // must have the 'IMP' folowed by a digit then a hyphen
            expect(stripImportPrefixFilter('IMP-123')).toBe('IMP-123');
            expect(stripImportPrefixFilter('IMP1123')).toBe('IMP1123');
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myTitleCaseApp = angular.module('myTitleCaseApp', ['titleCase']);

describe("The TitleCase filter", function() {
    beforeEach(module('myTitleCaseApp'));
    it('Strips out ``_`` characters from strings and capitalizes the rest',
        inject(function(titleCaseFilter) {
            // normal cases
            expect(titleCaseFilter('super_data')).toBe('Super Data');
            expect(titleCaseFilter('super_data_45')).toBe('Super Data 45');
            expect(titleCaseFilter(undefined)).toBe(undefined);
            expect(titleCaseFilter(null)).toBe(null);
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myTypedNumberFilterApp = angular.module('myTypedNumberFilterApp', ['typedNumber']);

describe("The typedNumber filter", function() {
    beforeEach(module('myTypedNumberFilterApp'));
    it('should parse strings as strings and return them',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('tester')).toBe('tester');
        })
    );
    it('should parse strings as strings and return them, even if they look like numbers',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.1456')).toBe('123.1456');
        })
    );

    it('should parse numbers as numbers and return them',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.00001', 'number')).toBe("123");
        })
    );

    it('should allow the user to set the number of sig digits',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.321', 'number', 'not_year', 1)).toBe("123.3");
        })
    );

    it('should add commas to number greater than 999',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123456789', 'number', 'not_year', 0)).toBe("123,456,789");
        })
    );

    it('should parse year_built and not add commas',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('1946', 'number', 'year_built', 1)).toBe("1946");
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var validationTestApp = angular.module(
    'validationTestApp', ['mappingValidatorService']
);

describe("The MappingValidatorService", function() {
    var mvs;

    beforeEach(function () {
        module("validationTestApp");
        inject(function (mappingValidatorService) {
            mvs = mappingValidatorService;

        });

    });

    it('validates good string, float and date data', function() {
        // normal cases
        // Here ``type`` is undefined. Should still work.
        var str_data = ['Fun', 'fun2', 'fun3', 'fun4'];
        var float_data = ['12.34', '144.5', '234'];
        var date_data = ['2014/02/02', '03/13/2013', '03-14-2004'];

        expect(mvs.validate(str_data)).toEqual([]);
        expect(mvs.validate(float_data, 'float')).toEqual([]);
        expect(mvs.validate(date_data, 'date')).toEqual([]);
    });

    it('recognizes semivalid data', function() {
        // Cases where the data is /almost/ right.
        var float_data = ['12.34', '144.5', 'NaN'];
        var date_data = ['2014/02/02', 'huh?', '03-14-2004'];
        expect(mvs.validate(float_data, 'float')).toEqual(['NaN']);
        expect(mvs.validate(date_data, 'date')).toEqual(['huh?']);
    });

    it('recognizes invalid data', function() {
        // Cases where the data is *all* wrong.
        var float_data = ['', 'not a float', 'NaN'];
        var date_data = ['', 'huh?', 'what?'];
        // Cases where the data are correct.
        var good_float_data = ['12.34', '144.5', '234'];
        var good_date_data = ['2014/02/02', '03/13/2013', '03-14-2004'];

        // Data is wrong
        expect(mvs.validate(float_data, 'float')).toEqual(float_data);
        expect(mvs.validate(date_data, 'date')).toEqual(date_data);

        // Type is wrong
        // N.B. we use semivalid here, because Date is pretty forgiving w/ nums.
        expect(mvs.validate(good_float_data, 'date')).toEqual(['12.34']);
        expect(mvs.validate(good_date_data, 'float')).toEqual(good_date_data);


    });

});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// taken from the angularjs testing page
// http://docs.angularjs.org/guide/dev_guide.unit-testing

// create dummy angularJS app to attach filter(s)
var myBELabelDirectiveApp = angular.module('myBELabelDirectiveApp', ['beLabel']);

describe("The beLabel directive", function() {
    var $compile;
    var $rootScope;
    beforeEach(module('myBELabelDirectiveApp'));
    // Store references to $rootScope and $compile
    // so they are available to all tests in this describe block
    beforeEach(inject(function(_$compile_, _$rootScope_){
      // The injector unwraps the underscores (_) from around the parameter names when matching
      $compile = _$compile_;
      $rootScope = _$rootScope_;
    }));

    it('Replaces the element with the appropriate content', function() {
        // Compile a piece of HTML containing the directive
        var element = $compile('<be-label name="compliant" color="blue"></be-label>')($rootScope);
        // fire all the watches
        $rootScope.$digest();
        // Check that the compiled element contains the templated content
        expect(element.hasClass('label-primary')).toBe(true);
        expect(element.hasClass('label')).toBe(true);
        expect(element.html()).toContain("compliant");
    });

        // 'red': 'danger',
        // 'gray': 'default',
        // 'orange': 'warning',
        // 'green': 'success',
        // 'blue': 'primary',
        // 'light blue': 'info'
    it('Maps colors to semantic bootstrap class names', function() {
        var element = $compile('<be-label name="compliant" color="red"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-danger')).toBe(true);

        element = $compile('<be-label name="compliant" color="gray"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-default')).toBe(true);

        element = $compile('<be-label name="compliant" color="orange"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-warning')).toBe(true);

        element = $compile('<be-label name="compliant" color="green"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-success')).toBe(true);

        element = $compile('<be-label name="compliant" color="blue"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-primary')).toBe(true);

        element = $compile('<be-label name="compliant" color="light blue"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-info')).toBe(true);
    });


});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// taken from the angularjs testing page
// http://docs.angularjs.org/guide/dev_guide.unit-testing

// create dummy angularJS app to attach filter(s)
var myBEUploaderDirectiveApp = angular.module('myBEUploaderDirectiveApp', ['beUploader']);

describe("The beUploader directive", function() {
    var g_message, g_file, g_progress;
    var $compile;
    var $rootScope;
    var uploader_html = '<div be-uploader sourcetype="assessor" importrecord="5" buttontext="Upload your building list .csv file" eventfunc="uploaderfunc(message, filename, progress)" ng-hide="uploader.in_progress"></div>';
    beforeEach(module('myBEUploaderDirectiveApp'));
    // Store references to $rootScope and $compile
    // so they are available to all tests in this describe block
    beforeEach(inject(function(_$compile_, _$rootScope_){
      // The injector unwraps the underscores (_) from around the parameter names when matching
      $compile = _$compile_;
      $rootScope = _$rootScope_;
      $rootScope.eventfunc = function (fine_object) {
        console.log({fin: fine_object});
        g_message = fine_object.message;
        g_file = fine_object.file;
        g_progress = fine_object.progress;
      };
      window.BE = window.BE || {};
      window.BE.FILE_UPLOAD_DESTINATION = 'S3';
    }));

    it('Creates the fineuploader element', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        
        // act
        $rootScope.$digest();

        // assert
        expect(element.html()).toContain("qq-uploader");
        expect(element.html()).toContain("qq-upload-button");
    });

    it('Contains the buttontext specified', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);

        // act
        $rootScope.$digest();

        // assert
        expect(element.html()).toContain("Upload your building list .csv file");
    });

    it('Only allows one file to be uploaded at a time', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");

        // act
        $rootScope.$digest();

        // assert
        expect(func._options.multiple).toBe(false);
    });

    it('Uses the callback function for invalid file types', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.jpeg");

        // act
        $rootScope.$digest();
        func._options.showMessage("there was an invalid extension. Valid extension(s): .csv");


        // assert
        expect(g_message).toBe("invalid_extension");
    });

    it('Uses the callback function to share its state: upload started',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';
        
        // act
        $rootScope.$digest();
        func._options.callbacks.onSubmitted(1, filename);


        // assert
        expect(g_message).toBe("upload_submitted");
        expect(g_file.filename).toBe(filename);
    });

    it('Uses the callback function to share its state: in progress',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';
        var loaded = 10;
        var total = 100;
        
        // act
        $rootScope.$digest();
        func._options.callbacks.onProgress(1, filename, loaded, total);


        // assert
        expect(g_message).toBe("upload_in_progress");
        expect(g_file.filename).toBe(filename);
        expect(g_progress.loaded).toBe(loaded);
        expect(g_progress.total).toBe(total);
    });

    it('Uses the callback function to share its state: complete',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';

        
        // act
        $rootScope.$digest();
        func._options.callbacks.onComplete(1, filename, {success: true});


        // assert        
        expect(g_message).toBe("upload_complete");
        expect(g_file.filename).toBe(filename);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: building_detail_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, ngFilter, delete_called;
    var building_detail_ctrl, building_detail_ctrl_scope, modalInstance, labels;
    var mock_building_services, mock_project_service;
    var mock_building;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          urls,
          $q,
          building_services,
          project_service,
          $filter) {
            controller = $controller;
            scope = $rootScope;
            ngFilter = $filter;
            building_detail_ctrl_scope = $rootScope.$new();
            modal_state = "";
            delete_called = false;

            // mock the building_services factory methods used in the controller
            // and return their promises
            mock_building_services = building_services;
            mock_project_service = project_service;

            spyOn(mock_project_service, "get_project")
                .andCallFake(function(project_slug){
                    return $q.when(
                        {
                            "status": "success",
                            "project": {
                                id: 33,
                                name: "test project",
                                slug: project_slug
                            }
                        }
                    );
                }
            );
            spyOn(mock_project_service, "get_labels")
                .andCallFake(function(){
                    return $q.when(
                        {
                            "status": "success",
                            "labels": [{
                                id: 44,
                                name: "bad label",
                                color: "red"
                            }]
                        }
                    );
                }
            );
            spyOn(mock_project_service, "update_project_building")
                .andCallFake(function(building_id, project, label){
                    return $q.when(
                        {
                            "status": "success",
                            "approver": "bob doe",
                            "approved_date": "01/01/2012"
                        }
                    );
                }
            );
            spyOn(mock_building_services, "update_building")
                .andCallFake(function (building, org_id){
                    mock_building = building;
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_building_detail_controller(){
        var fake_building = {
            id: 511,
            pk: 511,
            gross_floor_area: 123456,
            gross_floor_area_source: 2,
            city: "DC",
            city_source: 4,
            tax_lot_id: "11/22",
            tax_lot_id_source: 3,
            extra_data: {
                'some other key': 12344,
                'some other key that is not in a parent': 223
            },
            extra_data_sources: {
                'some other key': 2,
                'some other key that is not in a parent': 3
            },
            created: "at some point"
        };
        var fake_imported_buildings = [
            {
                id: 2,
                pk: 2,
                gross_floor_area: 123456,
                gross_floor_area_source: null,
                city: "Washington, DC",
                city_source: null,
                extra_data: {
                    'some other key': 123,
                    'some other key that is not in a child': 333,
                    'some floor area': 444
                },
                extra_data_sources: {
                    'some other key': null,
                    'some other key that is not in a child': 111,
                    'some floor area': 444
                },
                created: "test"
            },
            {
                id: 3,
                pk: 3,
                gross_floor_area: 2111111,
                gross_floor_area_source: null,
                city: "Washington",
                city_source: null,
                tax_lot_id: "11/22",
                tax_lot_id_source: null,
                extra_data: {
                    'make it four': 4
                },
                extra_data_sources: {
                    'make it four': null
                }
            },{
                id: 4,
                pk: 4,
                gross_floor_area: 2111111,
                gross_floor_area_source: null,
                city: "Washington",
                city_source: null,
                tax_lot_id: "11/22",
                tax_lot_id_source: null,
                extra_data: {
                    'make it four': 5
                },
                extra_data_sources: {
                    'make it four': null
                }
            }
        ];
        var fake_payload = {
            "status": "success",
            "building": fake_building,
            "imported_buildings": fake_imported_buildings,
            "projects": [],
            "user_org_id": 42
        };
        var fake_all_columns = [{
            "title": "PM Property ID",
            "sort_column": "pm_property_id",
            "class": "is_aligned_right",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Tax Lot ID",
            "sort_column": "tax_lot_id",
            "class": "is_aligned_right",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Custom ID 1",
            "sort_column": "custom_id_1",
            "class": "is_aligned_right whitespace",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Property Name",
            "sort_column": "property_name",
            "class": "",
            "title_class": "",
            "type": "string",
            "field_type": "building_information",
            "sortable": true,
            "checked": false
        }];
        building_detail_ctrl = controller('building_detail_controller', {
            $scope: building_detail_ctrl_scope,
            $routeParams: {
                building_id: 1,
                project_id: 2
            },
            building_payload: fake_payload,
            all_columns: {
                fields: fake_all_columns
            },
            audit_payload: {
                audit_logs: []
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should have an building payload", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.building.id).toBe(511);
        expect(building_detail_ctrl_scope.imported_buildings[0].id).toBe(2);
    });

    it("should get labels on load", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.labels[0].id).toBe(44);
        expect(building_detail_ctrl_scope.labels[0].name).toBe("bad label");
        expect(building_detail_ctrl_scope.labels[0].color).toBe("red");
    });

    it("should highlight the active project", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.is_active_project({id:33}))
        .toBe(true);
        expect(building_detail_ctrl_scope.is_active_project({id:34}))
        .toBe(false);
        building_detail_ctrl_scope.project = undefined;
        expect(building_detail_ctrl_scope.is_active_project({id:34}))
        .toBe(false);
    });

    it("should make a copy of building while making edits", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.save_building_state();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;

        // assertions
        expect(building_detail_ctrl_scope.building_copy.gross_floor_area)
        .toBe(123456);
    });
    it("should restore the copy of building if a user clicks cancel",
        function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.save_building_state();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;
        building_detail_ctrl_scope.restore_building();

        // assertions
        expect(building_detail_ctrl_scope.building.gross_floor_area)
        .toBe(123456);
        expect(building_detail_ctrl_scope.building.edit_form_showing).toBe(false);
    });
    it("should save a building when a user clicks the save button", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;
        building_detail_ctrl_scope.save_building();

        // assertions
        expect(mock_building_services.update_building)
        .toHaveBeenCalledWith(building_detail_ctrl_scope.building, 42);
        expect(mock_building.gross_floor_area).toEqual(43214);
    });
    it("should show a default label if a building doesn't have one", function() {
        // arrange
        create_building_detail_controller();
        var building_with_label = {
            label: {
                name: "hello",
                label: "success"
            }
        };
        var building_without_label = {};
        var label_with, label_without;

        // act
        building_detail_ctrl_scope.$digest();
        label_with = building_detail_ctrl_scope.get_label(building_with_label);
        label_without = building_detail_ctrl_scope.get_label(building_without_label);

        // assertions
        expect(label_with).toEqual({
                name: "hello",
                label: "success"
            });
        expect(label_without).toEqual({
                name: "Add Label",
                label: "default"
            });
    });

    it("should show a project or buildings breadcrumb", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.user.project_slug = "project_1";

        // assertions
        expect(building_detail_ctrl_scope.is_project()).toEqual(true);
        building_detail_ctrl_scope.user.project_slug = undefined;
        expect(building_detail_ctrl_scope.is_project()).toEqual(false);

    });
    it("should show the default projects table if a user has no compliance" +
        " projects", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.user.has_projects()).toEqual(false);
        building_detail_ctrl_scope.projects = [{id: 1, name: "a"}];
        expect(building_detail_ctrl_scope.user.has_projects()).toEqual(true);

    });

    it("should set only building attribute to master, not ids or children", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.is_valid_key('id')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('pk')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('pk_source')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key(' extra_data ')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('gross_floor_area'))
          .toEqual(true);
    });
    it("should update a project-building label", function() {
        // arrange
        create_building_detail_controller();
        var project = {
            id: 2,
            building: {}
        };

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.update_project_building(project,
            {
                name: "label name",
                color: "red"
            });
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(mock_project_service.update_project_building).toHaveBeenCalled();
        expect(project.building.approver).toEqual("bob doe");
        expect(project.building.approved_date).toEqual("01/01/2012");
        expect(project.building.label.name).toEqual("label name");
        expect(project.building.label.color).toEqual("red");

    });
    it("should set a field as source when clicked", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[0].is_master = true;
        expect(building_detail_ctrl_scope.building.gross_floor_area_source)
          .not.toEqual(building_detail_ctrl_scope.building.id);
        building_detail_ctrl_scope.set_self_as_source('gross_floor_area');
        building_detail_ctrl_scope.set_self_as_source('some other key', true);
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.building.gross_floor_area_source)
          .toEqual(building_detail_ctrl_scope.building.id);
        expect(building_detail_ctrl_scope.imported_buildings[0].is_master)
          .toEqual(false);
    });
    it("should set a column as the dominant source when clicked", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[1].is_master = true;
        building_detail_ctrl_scope.make_source_default(
            building_detail_ctrl_scope.imported_buildings[0]);
        building_detail_ctrl_scope.$digest();

        // assertions
        var b = building_detail_ctrl_scope.building,
            i = building_detail_ctrl_scope.imported_buildings[0],
            i_other = building_detail_ctrl_scope.imported_buildings[1];

        expect(b.gross_floor_area_source).toEqual(i.id);
        expect(b.id).not.toEqual(i.id);
        expect(b.pk).not.toEqual(i.id);
        expect(b.city).toEqual(i.city);
        expect(b.city_source).toEqual(i.id);
        expect(b.tax_lot_id).toEqual("11/22");
        expect(b.tax_lot_id_source).toEqual(i_other.id);
        expect(b.extra_data['some other key']).toEqual(123);
        expect(b.extra_data_sources['some other key']).toEqual(i.id);
        expect(b.extra_data['some other key that is not in a child']).toEqual(333);
        expect(b.extra_data_sources['some other key that is not in a child']).toEqual(i.id);
        expect(b.extra_data['some other key that is not in a parent']).toEqual(223);
        expect(b.extra_data_sources['some other key that is not in a parent']).toEqual(i_other.id);
        expect(b.created).toEqual("at some point");

        expect(i.is_master).toEqual(true);
        expect(i_other.is_master).toEqual(false);
    });
    it("should set the master building value when parent's value is clicked",
        function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[1].is_master = true;
        building_detail_ctrl_scope.set_building_attribute(
            building_detail_ctrl_scope.imported_buildings[0], 'city');
        building_detail_ctrl_scope.set_building_attribute(
            building_detail_ctrl_scope.imported_buildings[0], 'some other key', true);
        building_detail_ctrl_scope.$digest();

        // assertions
        var b = building_detail_ctrl_scope.building,
            i = building_detail_ctrl_scope.imported_buildings[0],
            i_other = building_detail_ctrl_scope.imported_buildings[1];

        expect(b.id).not.toEqual(i.id);
        expect(b.pk).not.toEqual(i.id);
        expect(b.city).toEqual(i.city);
        expect(b.city_source).toEqual(i.id);
        expect(b.tax_lot_id).toEqual("11/22");
        expect(b.tax_lot_id_source).toEqual(i_other.id);
        expect(b.extra_data['some other key']).toEqual(123);
        expect(b.extra_data_sources['some other key']).toEqual(i.id);

        expect(i.is_master).toEqual(false);
        expect(i_other.is_master).toEqual(false);
    });

    it("should display all the data within all the buildings", function() {
        // arrange
        create_building_detail_controller();
        var keys;

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        var edc = building_detail_ctrl_scope.data_columns;

        // should not duplicate keys
        expect(edc.length).toEqual(8);
        keys = edc.map(function ( d ) {
            return d.key;
        });
        expect(keys.indexOf('make it four')).toEqual(4);
    });

    it("should display Floor Areas", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.$digest();

        // assertions
        var area_fields = building_detail_ctrl_scope.floor_area_fields;
        expect(area_fields.length).toEqual(1);
    });

    it("should display Floor Areas with number", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.get_number("")).toEqual(0);
        expect(building_detail_ctrl_scope.get_number("123,123,123")).toEqual(123123123);
        expect(building_detail_ctrl_scope.get_number("123,123,123.123")).toEqual(123123123.123);
        expect(building_detail_ctrl_scope.get_number("-123,123,123")).toEqual(-123123123);
        expect(building_detail_ctrl_scope.get_number(-123123123)).toEqual(-123123123);


    });
});

describe("controller: concat_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var scope, controller, modal_state;
    var edit_ctrl, concat_modal_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label, mock_mapping_service, mock_matching_service;
    var global_step = 1;
    var global_dataset = {};

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
            $controller, $rootScope, $modal, urls, $q
        ) {
            controller = $controller;
            scope = $rootScope;
            concat_modal_ctrl_scope = $rootScope.$new();
            concat_modal_ctrl_scope.concat_columns = [];
            modal_state = "";
        }
    ));

    var mock_building_column_types = [
        'address1', 'city', 'state', 'postal_code'
    ];

    var mock_raw_columns = [
        {
            name: 'Address',
            suggestion: 'address1',
            confidence: 1,
            raw_data: [
                '234 Database way',
                '23444 Huh hwy',
                '23444 Huh hwy',
                '23444 Huh hwy',
                '1223 face pl.'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        },
        {
            name: 'City',
            suggestion: 'city',
            confidence: 1,
            raw_data: [
                'Mega City', 'Mega City', 'Mega City', 'Mega City', 'Mega City'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        },
        {
            name: 'Zip',
            suggestion: '',
            confidence: 0,
            raw_data: [
                '234233', '234233', '234233', '234233', '234233'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        }
    ];

    // this is outside the beforeEach so it can be configured by each unit test
    function create_concat_modal_controller(){
        edit_ctrl = controller('concat_modal_ctrl', {
            $scope: concat_modal_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            building_column_types: mock_building_column_types,
            raw_columns: mock_raw_columns
        });
    }

    /*
     * Test scenarios
     */

    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.close_concat_modal();
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should mangle scope appropriately during concatenation", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(3);

        // arrange
        concat_modal_ctrl_scope.concat_columns =
            concat_modal_ctrl_scope.raw_columns.slice(0);
        concat_modal_ctrl_scope.raw_columns = [];

        // act
        concat_modal_ctrl_scope.$digest();
        concat_modal_ctrl_scope.save_concat();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(1);
        expect(
            concat_modal_ctrl_scope.raw_columns[0].is_concatenated
        ).toEqual(true);
    });

    it("should modify the raw_data of our modified TCM correctly", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(3);

        // arrange
        concat_modal_ctrl_scope.concat_columns =
            concat_modal_ctrl_scope.raw_columns.slice(0);
        concat_modal_ctrl_scope.raw_columns = [];

        // act
        concat_modal_ctrl_scope.$digest();
        concat_modal_ctrl_scope.save_concat();

        var expected_raw = [
            '234 Database way Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '1223 face pl. Mega City 234233'
        ];

        // assertions
        expect(
            concat_modal_ctrl_scope.raw_columns[0].raw_data
        ).toEqual(expected_raw);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: create_organization_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_organization_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, organization_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        mock_organization_service = organization_service;
        spyOn(mock_organization_service, "create_sub_org")
            .andCallFake(function(org, sub_org){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_organization_modal_ctrl(){
        ctrl = ctrl('create_organization_modal_ctrl', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            organization: {organization_id: 1}
        });
    }

    /*
     * Test scenarios
     */

    it("should call the organization service to add a new sub_org",
        function() {
        // arrange
        create_organization_modal_ctrl();

        // act
        ctrl_scope.$digest();
        ctrl_scope.sub_org.name = "my shiny new org";
        ctrl_scope.sub_org.email = "jb.smooth@be.com";
        ctrl_scope.submit_form(true);

        // assertions
        expect(mock_organization_service.create_sub_org)
            .toHaveBeenCalledWith(
                {
                    organization_id: 1
                },
                {
                    name: "my shiny new org",
                    email: "jb.smooth@be.com"
                }
            );
    });
    
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: data_upload_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_uploader_service, scope, controller, modal_state;
    var edit_ctrl, data_upload_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label, mock_mapping_service, mock_matching_service;
    var global_step = 1;
    var global_dataset = {};
    var return_labels = [
        {
            "name": 'compliant',
            "color": 'green',
            "id": 1
        },
        {
            "name": "new label",
            "color": "blue",
            "id": 2
        }
    ];

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, uploader_service, mapping_service, matching_service) {
            controller = $controller;
            scope = $rootScope;
            data_upload_ctrl_scope = $rootScope.$new();
            modal_state = "";

            // mock the uploader_service factory methods used in the controller
            // and return their promises
            mock_uploader_service = uploader_service;
            mock_mapping_service = mapping_service;
            mock_matching_service = matching_service;
            spyOn(mock_uploader_service, "get_AWS_creds")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "AWS_CLIENT_ACCESS_KEY": "123",
                            "AWS_UPLOAD_BUCKET_NAME": "test-bucket"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "check_progress")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "progress": "25.0"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "create_dataset")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "id": 3,
                                "name": dataset_name

                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error",
                                "message": "name already in use"
                            }
                        );
                    }
                }
            );
            spyOn(mock_uploader_service, "save_raw_data")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "file_id": 3
                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error"
                            }
                        );
                    }
                }
            );
            spyOn(mock_mapping_service, "start_mapping")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "file_id": 3
                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error"
                            }
                        );
                    }
                }
            );
            spyOn(mock_matching_service, "start_system_matching")
            .andCallFake(function(file_id){
                // return $q.reject for error scenario
                return $q.when(
                    {
                        "status": "success",
                        "file_id": 3
                    }
                );
            });

        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_data_upload_modal_controller(){
        edit_ctrl = controller('data_upload_modal_ctrl', {
            $scope: data_upload_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            step: global_step,
            dataset: global_dataset
        });
    }

    /*
     * Test scenarios
     */

    it("should close the modal when the close function is called", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.close();
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel function is called", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.cancel();
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

    it("should start at the step provided", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(1);

        // arrange
        global_step = 2;
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(2);
    });

    it("should goto different steps", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var step;
        step = 2;
        data_upload_ctrl_scope.goto_step(step);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(step);
    });

    it("disables the 'Name it' button if no text is entered", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(true);
    });
    it("disables the 'Name it' button if no text is entered, then cleared",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.dataset.name = undefined;
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(true);
    });
    it("enables the 'Name it' button if text is entered", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.dataset.name = "my dataset name";
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(false);
    });
    it("should show an alert if the dataset name is already in use",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.create_dataset("fail");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.alert).toBe(true);
    });
    it("should not show an alert if the dataset name is not already in use",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.create_dataset("my shiny new dataset");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.alert).toBe(false);
    });
    it("after creating a dataset, stores the dataset id", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var ds_name = "my shiny new dataset";
        data_upload_ctrl_scope.create_dataset(ds_name);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.id).toBe(3);
        expect(data_upload_ctrl_scope.dataset.name).toBe(ds_name);
    });
    it("after uploading a file, stores the file id", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var message, filename;
        message = "upload_complete";
        filename = "file1.csv";

        // act
        data_upload_ctrl_scope.uploaderfunc(message, {
            filename: filename,
            file_id: 20140313
        });
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.import_file_id).toBe(20140313);
    });
    it("should show an invalid extension alert if a file with an invalid" +
        "extension is loaded", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.uploaderfunc("invalid_extension");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.invalid_extension_alert)
            .toBe(true);
    });
    it("should hide the upload button after the user selects a file",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename;
        message = "upload_submitted";
        filename = "file1.csv";

        // act
        data_upload_ctrl_scope.uploaderfunc(message, {filename: filename});
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.filename).toBe(filename);
        expect(data_upload_ctrl_scope.uploader.in_progress).toBe(true);
    });
    it("should show the progressbar during upload",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename, progress;
        message = "upload_in_progress";
        filename = "file1.csv";
        progress = {
            loaded: 10,
            total: 100
        };

        // act
        data_upload_ctrl_scope.uploaderfunc(message, filename, progress);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.in_progress).toBe(true);
        expect(data_upload_ctrl_scope.uploader.progress).toBe(2.5);
    });
    it("should start saving the energy data when the file has been uploaded",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename;
        message = "upload_complete";
        filename = "file1.csv";
        data_upload_ctrl_scope.step.number = 4;

        // act
        data_upload_ctrl_scope.uploaderfunc(message, filename);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.status_message)
            .toBe("saving energy data");
    });

    it("should take an dataset payload", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.name).toBe("");
        expect(data_upload_ctrl_scope.dataset.filename).toBe("");
        expect(data_upload_ctrl_scope.dataset.id).toBe(0);
    });

    it("should extend a custom dataset payload", function() {
        // arrange
        global_dataset = {
            id: 100,
            filename: "seed_data.csv",
            name: "Compliance Project"
        };
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.name).toBe("Compliance Project");
        expect(data_upload_ctrl_scope.dataset.filename).toBe("seed_data.csv");
        expect(data_upload_ctrl_scope.dataset.id).toBe(100);
        expect(data_upload_ctrl_scope.dataset.alert).toBe(false);

    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: dataset_detail_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, ngFilter, delete_called;
    var dataset_detail_ctrl, dataset_detail_ctrl_scope, modalInstance, labels;

    

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, dataset_service, $filter) {
            controller = $controller;
            scope = $rootScope;
            ngFilter = $filter;
            dataset_detail_ctrl_scope = $rootScope.$new();
            modal_state = "";
            delete_called = false;

            // mock the dataset_service factory methods used in the controller
            // and return their promises
            mock_dataset_service = dataset_service;
            spyOn(mock_dataset_service, "get_dataset")
                .andCallFake(function(dataset_id){
                    // return $q.reject for error scenario
                    var fake_importfiles = [
                        {
                            name: "DC_CoveredBuildings_50k.csv",
                            number_of_buildings: 511,
                            number_of_mappings: 511,
                            number_of_cleanings: 1349,
                            source_type: "Assessed Raw",
                            number_of_matchings: 403
                        },
                        {
                            name: "DC_ESPM_Report.csv",
                            number_of_buildings: 511,
                            number_of_matchings: 403,
                            source_type: "Portfolio Raw"
                        }
                    ];
                    var fake_dataset = {
                        name: "DC 2013 data",
                        last_modified: (new Date()).getTime(),
                        last_modified_by: "john.s@buildingenergy.com",
                        number_of_buildings: 89,
                        id: 1,
                        importfiles: fake_importfiles
                    };
                    var fake_payload = {
                        "status": "success",
                        "dataset": fake_dataset
                    };
                    if (delete_called) {
                        fake_payload.dataset.importfiles.pop();
                    }
                    console.log({delete_called: delete_called, ds: fake_payload});
                    return $q.when(fake_payload);
                }
            );

            spyOn(mock_dataset_service, "delete_file")
                .andCallFake(function(import_file){
                    delete_called = true;
                    console.log({d: "delete_called"});
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_detail_controller(){
        var fake_importfiles = [
            {
                name: "DC_CoveredBuildings_50k.csv",
                number_of_buildings: 511,
                number_of_mappings: 511,
                number_of_cleanings: 1349,
                source_type: "Assessed Raw",
                number_of_matchings: 403
            },
            {
                name: "DC_ESPM_Report.csv",
                number_of_buildings: 511,
                number_of_matchings: 403,
                source_type: "Portfolio Raw"
            }
        ];
        var fake_dataset = {
            name: "DC 2013 data",
            last_modified: (new Date()).getTime(),
            last_modified_by: "john.s@buildingenergy.com",
            number_of_buildings: 89,
            id: 1,
            importfiles: fake_importfiles
        };
        var fake_payload = {
            "status": "success",
            "dataset": fake_dataset
        };
        dataset_detail_ctrl = controller('dataset_detail_controller', {
            $scope: dataset_detail_ctrl_scope,
            dataset_payload: fake_payload
        });
    }

    /*
     * Test scenarios
     */

    it("should have an data set payload with import files", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        dataset_detail_ctrl_scope.$digest();

        // assertions
        expect(dataset_detail_ctrl_scope.dataset.importfiles.length).toBe(2);
    });

    it("should show an alert when the delete icon is clicked", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        dataset_detail_ctrl_scope.$digest();
        var importfiles = dataset_detail_ctrl_scope.dataset.importfiles;
        dataset_detail_ctrl_scope.delete_file(importfiles[0]);
        dataset_detail_ctrl_scope.$digest();

        // assertions
        expect(dataset_detail_ctrl_scope.dataset.importfiles.length).toBe(1);
    });
   
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: dataset_list_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, modal_state;
    var edit_ctrl, dataset_list_ctrl_scope, modalInstance, labels;
    var location;

    

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, uploader_service,
            $location) {
            controller = $controller;
            scope = $rootScope;
            dataset_list_ctrl_scope = $rootScope.$new();
            modal_state = "";
            location = $location;

            // mock the uploader_service factory methods used in the controller
            // and return their promises
            mock_uploader_service = uploader_service;
            spyOn(mock_uploader_service, "get_AWS_creds")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "AWS_CLIENT_ACCESS_KEY": "123",
                            "AWS_UPLOAD_BUCKET_NAME": "test-bucket"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "create_dataset")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "import_record_id": 3,
                                "import_record_name": dataset_name

                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error",
                                "message": "name already in use"
                            }
                        );
                    }
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_list_controller(){
        var fake_datasets_payload = {
            "status": "success",
            "datasets": [
                {
                    name: "DC 2013 data",
                    last_modified: (new Date()).getTime(),
                    last_modified_by: "john.s@buildingenergy.com",
                    number_of_buildings: 89
                },
                {
                    name: "DC 2014 data",
                    last_modified: (new Date()).getTime() -
                        1550 * 60 * 60 * 1000,
                    last_modified_by: "gavin.m@buildingenergy.com",
                    number_of_buildings: 70
                }
            ]
        };
        edit_ctrl = controller('dataset_list_controller', {
            $scope: dataset_list_ctrl_scope,
            datasets_payload: fake_datasets_payload
        });
    }

    /*
     * Test scenarios
     */

    it("should have a dataset_payload", function() {
        // arrange
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();

        // assertions
        expect(dataset_list_ctrl_scope.datasets.length).toEqual(2);
    });

    it("should disable the mapping button if the dataset has no" +
        " Assessor files", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Portfolio Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_assessor_files(dataset);

        // assertions
        expect(disabled).toEqual(true);
    });

    it("should enable the mapping button if the dataset has at least one" +
        " Assessor file", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_assessor_files(dataset);

        // assertions
        expect(disabled).toEqual(false);
    });
    it("should disable the matching button if the dataset has no" +
        " Portfolio Manger files", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Assessed Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_pm_files(dataset);

        // assertions
        expect(disabled).toEqual(true);
    });
    it("should enable the matching button if the dataset has at least one" +
        " Portfolio Manger file", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_pm_files(dataset);

        // assertions
        expect(disabled).toEqual(false);
    });
    it("should navigate to the mapping page of the first assessed" +
        " import file when the ``Mapping`` button is clicked", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Assessed Raw",
                    id: 3
                },
                {
                    source_type: "Assessed Raw",
                    id: 5
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        dataset_list_ctrl_scope.goto_mapping(dataset);

        // assertions
        expect(location.path()).toBe('/data/mapping/3');
    });
    it("should navigate to the matching page of the first Portfolio Manager" +
        " import file when the ``Matching`` button is clicked", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw",
                    id: 3
                },
                {
                    source_type: "Portfolio Raw",
                    id: 5
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        dataset_list_ctrl_scope.goto_matching(dataset);

        // assertions
        expect(location.path()).toBe('/data/matching/3');
    });

   
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: delete_modal_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, building_services, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        // mock the export_service factory methods used in the controller
        // and return their promises
        mock_building_services = building_services;
        spyOn(mock_building_services, "delete_buildings")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_delete_modal_controller(){
        ctrl = ctrl('delete_modal_controller', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            search: { 
                selected_buildings: [1,2],
                filter_params: {},
                select_all_checkbox: false,
                order_by: "",
                sort_reverse: false,
                number_matching_search: 1000
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should start at the delete page", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.delete_state).toEqual("delete"); 
    });
    it("should save the search paramaters",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.delete_payload;
        expect(b.selected_buildings).toEqual([1,2]);
        expect(b.filter_params).toEqual({});
        expect(b.order_by).toEqual("");
        expect(b.sort_reverse).toEqual(false);
        expect(b.select_all_checkbox).toEqual(false);
    });
    it("should delete when the delete button is clicked",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.delete_buildings();

        // assertions
        expect(ctrl_scope.delete_state).toEqual("prepare");
        expect(mock_building_services.delete_buildings).toHaveBeenCalled();
    });
    it("should show the success page when the delete is finished",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.delete_buildings();
        ctrl_scope.$digest();

        // assertions
        expect(mock_building_services.delete_buildings).toHaveBeenCalled();
        expect(ctrl_scope.delete_state).toEqual("success");
    });
    it("should show the number of buildings to be deleted",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        var number_to_delete = ctrl_scope.number_to_delete();

        // assertions
        expect(number_to_delete).toEqual(2);
    });
    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.close();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.cancel();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

  
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myDistrictApp = angular.module('myDistrictApp', ['district']);

describe("The district filter", function() {
    beforeEach(module('myDistrictApp'));
    it('replaces `district` with `County/District/Ward/Borough`',
        inject(function(districtFilter) {
            // normal cases
            expect(districtFilter('district')).toBe('County/District/Ward/Borough');
            expect(districtFilter('District')).toBe('County/District/Ward/Borough');
            expect(districtFilter('DistRict')).toBe('County/District/Ward/Borough');
            expect(districtFilter('DISTRICT')).toBe('County/District/Ward/Borough');
            expect(districtFilter('aDISTRICT')).toBe('aDISTRICT');
            expect(districtFilter('')).toBe('');
            expect(districtFilter('district ')).toBe('district ');
            expect(districtFilter('ok')).toBe('ok');
            expect(districtFilter(undefined)).toBe(undefined);
            expect(districtFilter(null)).toBe(null);
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: edit_label_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, modal_state;
    var edit_ctrl, edit_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label;
    var return_labels = [
        {
            "name": 'compliant',
            "color": 'green',
            "id": 1
        },
        {
            "name": "new label",
            "color": "blue",
            "id": 2
        }
    ];

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, urls, $q, project_service) {
        controller = $controller;
        scope = $rootScope;
        edit_ctrl_scope = $rootScope.$new();
        modal_state = "";

        // mock the project_service factory methods used in the controller
        // and return their promises
        mock_project_service = project_service;
        spyOn(mock_project_service, "get_labels")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success", "labels": return_labels});
            }
        );
        spyOn(mock_project_service, "add_label")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
        spyOn(mock_project_service, "delete_label")
            .andCallFake(function(label){
                deleted_label = label;
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
        spyOn(mock_project_service, "update_label")
            .andCallFake(function(label){
                updated_label = label;
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );

    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_edit_modal_controller(){
        var labels = [
            {
                "name": 'compliant',
                "color": 'green',
                "id": 1
            }
        ];

        edit_ctrl = controller('edit_label_modal_ctrl', {
            $scope: edit_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            labels: labels
        });
    }

    /*
     * Test scenarios
     */

    it("should initialize the default label", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.$digest();
        edit_ctrl_scope.initialize_label_modal();

        // assertions
        expect(edit_ctrl_scope.label_modal.color).toBe("gray");
        expect(edit_ctrl_scope.label_modal.label).toBe("default");
        expect(edit_ctrl_scope.label_modal.name).toBe("");
        expect(edit_ctrl_scope.modal.label.state).toBe("create");
    });

    it("should get the labels available to an organization", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.add_label({});  // calls private get_labels
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.labels.length).toBe(2);
    });

    it("should add a label in the user's organization", function() {
        // arrange
        create_edit_modal_controller();
        var label_to_add = {
            color: "blue",
            label: "primary",
            name: "new label"
        };

        // act
        edit_ctrl_scope.add_label(label_to_add);
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.labels.length).toBe(2);
        expect(edit_ctrl_scope.labels[1].color).toBe("blue");
        expect(edit_ctrl_scope.labels[1].name).toBe("new label");
    });

    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.close();
        edit_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.cancel();
        edit_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

    it("sets the label_modal to the label when its edit button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.edit_label(label);
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.label_modal.color).toBe(label.color);
        expect(edit_ctrl_scope.label_modal.name).toBe(label.name);
        expect(edit_ctrl_scope.modal.label.state).toBe("edit");

        // assert that edit_ctrl_scope.label_modal is a copy and not a reference to label
        edit_ctrl_scope.label_modal.name = "random name here";
        expect(edit_ctrl_scope.label_modal.name).not.toBe(label.name);
    });
    
    it("deletes the appropriate label when the delete button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.delete_label(label);
        edit_ctrl_scope.$digest();

        // assertions
        expect(deleted_label).toBe(label);
    });

    it("updates the appropriate label when the update label button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.edit_label(label);
        edit_ctrl_scope.$digest();
        edit_ctrl_scope.label_modal.name = "harry";
        edit_ctrl_scope.label_modal.color = "blue";
        edit_ctrl_scope.update_label(edit_ctrl_scope.label_modal);
        edit_ctrl_scope.$digest();

        // assertions
        expect(mock_project_service.update_label).toHaveBeenCalledWith(edit_ctrl_scope.label_modal);
        expect(updated_label).toBe(edit_ctrl_scope.label_modal);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: export_modal_controller", function(){
    // globals set up and used in each test scenario
    var mock_export_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, export_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        // mock the export_service factory methods used in the controller
        // and return their promises
        mock_export_service = export_service;
        spyOn(mock_export_service, "export_buildings")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success", "export_id": "123456"});
            }
        );
        spyOn(mock_export_service, "export_buildings_progress")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({
                    "status": "success",
                    "buildings_processed": 1000
                });
            }
        );
            spyOn(mock_export_service, "export_buildings_download")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({
                    "status": "success",
                    "url": "#"
                });
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_export_modal_controller(){
        ctrl = ctrl('export_modal_controller', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            search: { 
                selected_buildings: [],
                filter_params: {},
                select_all_checkbox: false,
                order_by: "",
                sort_reverse: false,
                number_matching_search: 1000
            },
            selected_fields: ['tax_lot_id', 'postal_code'],
            project: {
                id: 11
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should start at the create page", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.export_state).toEqual("create"); 
    });
    it("should start with an empty name and default file type of 'xls'",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.building_export;
        expect(b.export_name).toEqual("");
        expect(b.export_type).toEqual("xls");
    });
    it("should save the search paramaters",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.building_export;
        expect(b.selected_buildings).toEqual([]);
        expect(b.filter_params).toEqual({});
        expect(b.order_by).toEqual("");
        expect(b.sort_reverse).toEqual(false);
        expect(b.select_all_checkbox).toEqual(false);
        expect(b.selected_fields).toEqual(['tax_lot_id', 'postal_code']);
        expect(b.project_id).toEqual(11);
        expect(ctrl_scope.progress_denominator).toEqual(0);
    });
    it("should kick off the export process when the export button is clicked",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.export_buildings();

        // assertions
        expect(ctrl_scope.export_state).toEqual("prepare");
        expect(mock_export_service.export_buildings).toHaveBeenCalled();
    });
    it("should show the success page when the data is ready",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.show_success_page("123");
        ctrl_scope.$digest();

        // assertions
        expect(mock_export_service.export_buildings_download).toHaveBeenCalled();
        expect(ctrl_scope.export_state).toEqual("success");
    });
    it("should update the progress bar",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.monitor_progress("123", 1000);
        ctrl_scope.$digest();
        timeout.flush();

        // assertions
        expect(mock_export_service.export_buildings_progress).toHaveBeenCalled();
        expect(ctrl_scope.progress_percentage).toEqual(100);
        expect(ctrl_scope.progress_numerator).toEqual(1000);
        expect(ctrl_scope.progress_denominator).toEqual(1000);
    });
    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.close();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.cancel();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

  
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
/**
 * tests fromNow angularjs filter wrapper of moment.js
 * uses epoch milliseconds as that is what the back-end returns
 */

// create dummy angularJS app to attach filter(s)
var myfromNowFilterApp = angular.module('myfromNowFilterApp', ['fromNow']);

describe("The fromNow filter", function() {
    beforeEach(module('myfromNowFilterApp'));

    it('shows the present time as "a few seconds ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('a few seconds ago');
        })
    );

    it('shows 5 minutes ago as "5 minutes ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 5  * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('5 minutes ago');
        })
    );

    it('shows 4 hours ago as "4 hours ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 4 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('4 hours ago');
        })
    );

    it('shows 24 hours ago as "a day ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 24 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('a day ago');
        })
    );

    it('shows 36 hours ago as "2 days ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 36 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('2 days ago');
        })
    );

    it('shows 1550 hours ago as "2 months ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 1550 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('2 months ago');
        })
    );

    it('defaults to "a few seconds ago" for undefined values',
        inject(function(fromNowFilter) {
            // arrange

            // act

            // assert
            expect(fromNowFilter(undefined)).toBe('a few seconds ago');
            expect(fromNowFilter(null)).toBe('a few seconds ago');
            expect(fromNowFilter("some text")).toBe('a few seconds ago');
            expect(fromNowFilter({})).toBe('a few seconds ago');
            expect(fromNowFilter({time: "not time"})).toBe('a few seconds ago');
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myignoremapApp = angular.module('myignoremapApp', ['ignoremap']);

describe("The ignoremap filter", function() {
    beforeEach(module('myignoremapApp'));
    it('replaces `""` with `------ Ignore Row ------`',
        inject(function(ignoremapFilter) {
            // normal cases
            expect(ignoremapFilter('')).toBe('------ Ignore Row ------');
            expect(ignoremapFilter(' ')).toBe(' ');
            expect(ignoremapFilter('aignoremap')).toBe('aignoremap');
            expect(ignoremapFilter('ignoremap ')).toBe('ignoremap ');
            expect(ignoremapFilter('ok')).toBe('ok');
            expect(ignoremapFilter(undefined)).toBe('------ Ignore Row ------');
            expect(ignoremapFilter(null)).toBe('------ Ignore Row ------');
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: mapping_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, modal_state;
    var mapping_ctrl, mapping_ctrl_scope, modalInstance, labels;
    var timeout, mock_user_service, mock_search_service;



    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, building_services, $timeout, user_service, search_service) {
            controller = $controller;
            scope = $rootScope;
            mapping_ctrl_scope = $rootScope.$new();
            modal_state = "";
            timeout = $timeout;
            mock_user_service = user_service;
            mock_search_service = search_service;

            spyOn(mock_user_service, 'set_default_columns')
                .andCallFake(function(mapped_columns){
                    return undefined;
                });
            spyOn(mock_search_service, 'search_buildings')
                .andCallFake(function(){
                    return [1,2,3];
                });
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_mapping_controller(){
        var mock_datasets = [
            {
                name: "DC 2013 data",
                last_modified: (new Date()).getTime(),
                last_modified_by: "john.s@buildingenergy.com",
                number_of_buildings: 89,
                id: 1
            },
            {
                name: "DC 2014 data",
                last_modified: (new Date()).getTime() -
                    1550 * 60 * 60 * 1000,
                last_modified_by: "gavin.m@buildingenergy.com",
                number_of_buildings: 70,
                id: 2
            }
        ];
        var fake_import_file_payload = {
            "status": "success",
            "import_file": {
                        file_name: "assessor_fun.csv",
                        last_modified: (new Date()).getTime(),
                        last_modified_by: "john.s@buildingenergy.com",
                        source_type: 'AssessorRaw',
                        dataset: mock_datasets[0],
                        id: 1
                    }
        };

        var mock_be_building_columns = [
            'pm_property_id',
            'property_name',
            'property_notes',
            'tax_lot_id',
            'gross_floor_area',
            'My New non-BEDES field'
        ];

        var mock_be_building_types = {
            'gross_floor_area': {
                unit_type: 'float',
                schema: 'BEDES'
            }
        };

        var mock_mapping_suggestions_payload = {
            'status': 'success',
            'suggested_column_mappings': {
                // key(django model attribute): [csv_header1, ... csv_header3]
                'property id': ['pm_property_id', 89],
                'lot number': ['tax_lot_id' , 54]
            },
            "building_columns": mock_be_building_columns,
            "building_column_types": mock_be_building_types
        };

        var mock_raw_column_names = [
            'property id',
            'property_name',
            'property_notes',
            'lot number',
            'lot size'
        ];

        var mock_first_five_rows = [];
        for (var i=0; i < 4; i++) {
            mock_first_five_rows.push({
                'property id': i,
                'property_name': 'Property ' + i,
                'property_notes': 'Nup.',
                'lot number': i * 2,
                'lot size': 454 * i
            });
        }

        mock_first_five_rows.push({
            'property id': '121L',
            'property_name': 'Inconsistent Property',
            'property_notes': 'N/A',
            'lot number': 'N/A',
            'lot size': 45
        });

        var raw_columns_payload = {
            "status": "success",
            "raw_columns": mock_raw_column_names
        };
        var first_five_rows_payload = {
            "status": "success",
            "first_five_rows": mock_first_five_rows
        };
        mapping_ctrl = controller('mapping_controller', {
            $scope: mapping_ctrl_scope,
            import_file_payload: fake_import_file_payload,
            suggested_mappings_payload: mock_mapping_suggestions_payload,
            raw_columns_payload: raw_columns_payload,
            first_five_rows_payload: first_five_rows_payload,
            all_columns: {fields: []},
            building_services: mock_building_services,
            $timeout: timeout
        });
    }

    /*
     * Test scenarios
     */

    it("should have a import_file_payload", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        expect(mapping_ctrl_scope.import_file.dataset.name).toBe("DC 2013 data");
    });

    it("should show suggested mappings and confidence", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        var raw_columns = mapping_ctrl_scope.raw_columns;
        var first_column = raw_columns[0];

        expect(first_column.confidence).toBe(89);
        expect(first_column.suggestion).toBe("Pm Property Id");
    });

    it("should show 'low', 'med', 'high', or '' confidence text", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        var raw_columns = mapping_ctrl_scope.raw_columns;
        var first_column = raw_columns[0];
        expect(first_column.confidence_text()).toBe("high");
        first_column.confidence = 70;
        expect(first_column.confidence_text()).toBe("med");
        first_column.confidence = 35;
        expect(first_column.confidence_text()).toBe("low");
        delete(first_column.confidence);
        expect(first_column.confidence_text()).toBe("");
    });

    it("should validate initial data", function() {
        create_mapping_controller();
        // act
        mapping_ctrl_scope.$digest();
        // assertions
        angular.forEach(mapping_ctrl_scope.raw_columns, function(rc) {
            if (rc.suggestion !== '' && typeof(rc.suggestion) !== "undefined") {
                expect(rc.validity).toBe('valid');
            }
        });
    });

    it("should invalidate bad suggestions", function() {
        // Simulate a change on the tcm, make it fail.
        create_mapping_controller();
        // act
        mapping_ctrl_scope.$digest();
        // assertions
        //
        // We change the suggested mapping for the "property name" column
        // to "gross_floor_area" (which validates as float) to
        // purposesly cause a failing change.
        mapping_ctrl_scope.raw_columns[1].suggestion = 'gross_floor_area';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[1]);
        expect(mapping_ctrl_scope.raw_columns[1].validity).toBe('invalid');

    });

    it("should set td_class appropriately", function() {
        var tcm;

        create_mapping_controller();

        mapping_ctrl_scope.$digest();
        tcm = mapping_ctrl_scope.raw_columns[0];
        var good_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[0]
        );

        // First raw column is mapped up as pm_property_id <-> property_id
        // Any kind of string will be valid.
        expect(good_val).toBe('success');

        // Now set it to one that expects float values.
        // Only one of these will *not* validate.
        mapping_ctrl_scope.raw_columns[0].suggestion = 'gross_floor_area';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[0]);

        tcm = mapping_ctrl_scope.raw_columns[0];
        var warning_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[4]
        );

        expect(warning_val).toBe('warning');

        // We don't want the warning style to be applied to neighboring cells
        // in the same row. Check that the cell next to our invalid one is
        // unstyled (undefined).
        tcm = mapping_ctrl_scope.raw_columns[0];
        var adjacent_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[3]
        );

        expect(adjacent_val).toBe(undefined);

        // Now we're saying the suggestion is to not map.
        // Check that we don't have any class set for this row now.
        mapping_ctrl_scope.raw_columns[0].suggestion = '';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[0]);

        tcm = mapping_ctrl_scope.raw_columns[0];
        var blank_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[4]
        );

        expect(blank_val).toBe('');

    });

    it("should detect duplicates of mapped rows", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // raw_columns[0] and raw_columns[3] should be the only mapped rows
        var column = mapping_ctrl_scope.raw_columns[3];
        var test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

        // Set the property_name tcm's suggestion to the same as
        // the property_id tcm (raw_columns[0])
        column.suggestion = 'Pm Property Id';

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(true);

        // Since we mark both duplicates as duplicates, the other
        // TCM that has the 'pm_property_id' suggestion should also get
        // 'danger' as its duplicate class.
        var other_dup = mapping_ctrl_scope.is_tcm_duplicate(
            mapping_ctrl_scope.raw_columns[0]
        );
        expect(other_dup).toBe(true);

        // Shows that mapped_row is the sole determinant of
        // column ignoring
        column.mapped_row = false;

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

    });

    it("should ignore duplicates of unmapped rows", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // raw_columns[0] and raw_columns[3] should be the only mapped rows
        var column = mapping_ctrl_scope.raw_columns[1];
        var test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

        // Set the property_name tcm's suggestion to the same as
        // the property_id tcm (raw_columns[0])
        column.suggestion = 'Pm Property Id';

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);
    });

    it("should get mapped buildings", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        mapping_ctrl_scope.get_mapped_buildings();
        mapping_ctrl_scope.$digest();

        // assertions
        expect(mapping_ctrl_scope.search.search_buildings).toHaveBeenCalled();
        expect(mock_user_service.set_default_columns).toHaveBeenCalled();
    });

    it("should enbale the 'show & review buildings' button if duplicates are" +
        " not present", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        for (var i = mapping_ctrl_scope.raw_columns.length - 1; i >= 0; i--) {
            mapping_ctrl_scope.change(mapping_ctrl_scope.raw_columns[i]);
        }
        var duplicates_found = mapping_ctrl_scope.duplicates_present();

        // assertions
        expect(duplicates_found).toBe(false);
    });

    it("should disable the 'show & review buildings' button if duplicates " +
        "are present", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        for (var i = mapping_ctrl_scope.raw_columns.length - 1; i >= 0; i--) {
            mapping_ctrl_scope.raw_columns[i].suggestion = "pm_property_id";
            mapping_ctrl_scope.change(mapping_ctrl_scope.raw_columns[i]);
        }
        var duplicates_found = mapping_ctrl_scope.duplicates_present();

        // assertions
        expect(duplicates_found).toBe(true);
    });

    it("should get mappings in an API friendly way", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();
        var mappings = mapping_ctrl_scope.get_mappings();
        expect(mappings.length).toBe(5);
        expect(mappings[0]).toEqual(['Pm Property Id', 'property id']);
        // everything in between is empty since we we're using only
        // suggested mappings.
        expect(mappings[3]).toEqual(['Tax Lot Id', 'lot number']);
    });

    it("should show the 'STEP 2' tab when reviewing mappings", function() {
        // arrange
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // act
        var mappings = mapping_ctrl_scope.get_mapped_buildings();

        // assert
        expect(mapping_ctrl_scope.tabs).toEqual({
            'one_active': false,
            'two_active': true,
            'three_active': false
        });
    });

    it("should show BEDES fields with a checkbox", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assert
        expect(mapping_ctrl_scope.is_suggestion_BEDES('gross_floor_area')).toBe(true);
        expect(mapping_ctrl_scope.is_suggestion_BEDES('Gross Floor Area')).toBe(true);
        expect(mapping_ctrl_scope.is_suggestion_BEDES('My New non-BEDES field')).toBe(false);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: matching_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, delete_called;
    var matching_ctrl, matching_ctrl_scope, modalInstance, labels;


    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, building_services) {
            controller = $controller;
            scope = $rootScope;
            matching_ctrl_scope = $rootScope.$new();

            mock_building_services = building_services;
            spyOn(mock_building_services, "get_PM_filter_by_counts")
                .andCallFake(function(import_file){
                    return $q.when(
                        {
                            "status": "success",
                            "unmatched": 5,
                            "matched": 10
                        }
                    );
                }
            );
            spyOn(mock_building_services, "save_match")
                .andCallFake(function(b1, b2, create){
                    return $q.when(
                        {
                            "status": "success",
                            "child_id": 3
                        }
                    );
                }
            );
            spyOn(mock_building_services, "search_matching_buildings")
                .andCallFake(function(q, number_per_page, current_page, order_by, sort_reverse, 
                                        filter_params, file_id ){
                    
                    return $q.when(
                        {
                            status: "success",
                            number_returned: buildings_payload.length,
                            number_matching_search: buildings_payload.length,
                            buildings: [
                                {
                                    pm_property_id: 1
                                },
                                {
                                    pm_property_id: 2
                                }
                                ,
                                {
                                    pm_property_id: 3
                                }
                            ];
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_detail_controller(){
        var buildings_payload = {
            buildings: [
                {
                    pm_property_id: 1,
                    tax_lot_id: null,
                    custom_id_1: 2,
                    gross_floor_area: 111,
                    matched: true,
                    id: 1,
                    children: [3],
                    coparent: {
                        pm_property_id: null,
                        tax_lot_id: 2,
                        custom_id_1: null,
                        gross_floor_area: 111,
                        id: 2,
                        children: [3]
                    }
                }
            ],
            number_matching_search: 1,
            number_returned: 1
        };
        matching_ctrl = controller('matching_controller', {
            $scope: matching_ctrl_scope,
            buildings_payload: buildings_payload,
            all_columns: {
                fields: [{sort_column: 'pm_property_id'}]
            },
            default_columns: {
                columns: ['pm_property_id']
            },
            import_file_payload: {
                import_file: {
                    id: 1,
                    dataset: {
                        importfiles: [
                            {
                                id: 1,
                                name: "file_1.csv"
                            },
                            {
                                id: 2,
                                name: "file_2.csv"
                            }
                        ]
                    }
                }
            }
        });
    }



    /*
     * Test scenarios
     */

    it("should have a buildings payload with potential matches", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();
        var b = matching_ctrl_scope.buildings[0];

        // assertions
        expect(matching_ctrl_scope.buildings.length).toBe(1);
        expect(b.coparent.children).toEqual(b.children);
    });

    it("should provide to the view scope variables representing the number matched and the number of unmatched buildings", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();

        // assertions
        expect(matching_ctrl_scope.matched_buildings).toEqual(10);
        expect(matching_ctrl_scope.unmatched_buildings).toEqual(5);
    });

    it("should jump back to the matching list when the 'Back to list' button" +
        " is clicked", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.show_building_list = false;
        matching_ctrl_scope.back_to_list();

        // assertions
        expect(matching_ctrl_scope.show_building_list).toEqual(true);
    });

    it("should present an initial state with the matching buildings table",
        function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();

        // assertions
        expect(matching_ctrl_scope.columns).toEqual([{ sort_column : 'pm_property_id' }]);
        expect(matching_ctrl_scope.number_matching_search).toEqual(1);
        expect(matching_ctrl_scope.number_returned).toEqual(1);
        expect(matching_ctrl_scope.num_pages).toEqual(1);
        expect(mock_building_services.get_PM_filter_by_counts).toHaveBeenCalled();
    });
    it("should match a building in the matching list", function() {
        // arrange
        create_dataset_detail_controller();
        var b1, b2;
        b2 = {
            id: 2,
            children: [],
            matched: false
        };
        b1 = {
            id: 1,
            children: [],
            matched: true,
            coparent: b2
        };

        // act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.toggle_match(b1);
        matching_ctrl_scope.$digest();

        // assertions
        expect(mock_building_services.save_match).toHaveBeenCalledWith(b1.id, b2.id, true);
        expect(mock_building_services.get_PM_filter_by_counts).toHaveBeenCalled();
        expect(b1.children[0]).toEqual(3);
    });
    it("Should update the list of buildings correctly when 'Show Matched' is selected", 
        function() {
        //arrange
        create_dataset_detail_controller();

        //act
        controller.update_show_filter(controller.SHOW_MATCHED)

        //assertions
        expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(1);
        expect(matching_ctrl_scope.number_returned).toEqual(1);
    });
    it("Should update the list of buildings correctly when 'Show Unmatched' is selected", 
        function() {
        //arrange
        create_dataset_detail_controller();

        //act
        controller.update_show_filter(controller.SHOW_UNMATCHED)

        //assertions
        expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(2);
        expect(matching_ctrl_scope.number_returned).toEqual(2);
    });
    it("Should update the list of buildings correctly when 'Show All' is selected", 
        function() {
        //arrange
        create_dataset_detail_controller();

        //act
        controller.update_show_filter(controller.SHOW_ALL)

        //assertions
        expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(3);
        expect(matching_ctrl_scope.number_returned).toEqual(3);
    });



});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: members_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller;
    var ctrl, ctrl_scope, modalInstance;
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          $q,
          organization_service) {
            ctrl = $controller;
            scope = $rootScope;
            ctrl_scope = $rootScope.$new();

            mock_organization_service = organization_service;
            
            spyOn(mock_organization_service, "remove_user")
                .andCallFake(function(user_id, org_id){
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
            spyOn(mock_organization_service, "get_organization_users")
                .andCallFake(function(org){
                    return $q.when(
                        {
                            "status": "success",
                            "users": [{id:1, first_name:"Bob", last_name:"D"}]
                        }
                    );
                }
            );
            spyOn(mock_organization_service, "update_role")
                .andCallFake(function(org_id, user_id, role){
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_members_controller(){
        ctrl = ctrl('members_controller', {
            $scope: ctrl_scope,
            users_payload: {users: [
                {first_name: 'J', last_name: 'S'},
                {first_name: undefined, last_name: null}
            ]},
            organization_payload: {
                organization: {name: 'my org', id: 4}
            },
            auth_payload: {
                auth: {
                    'can_invite_member': true,
                    'can_remove_member': true
                }
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should accepts its payload", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.org).toEqual({name : 'my org', id : 4});
        expect(ctrl_scope.users[0].name).toEqual("J S");
        expect(ctrl_scope.users[1].name).toEqual(" ");
    });
    it("clicking remove should remove a user", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.remove_member({user_id: 2});

        // assertions
        expect(mock_organization_service.remove_user)
            .toHaveBeenCalledWith(2, 4);
        
        ctrl_scope.$digest();
        expect(mock_organization_service.get_organization_users)
            .toHaveBeenCalledWith({org_id: 4});
    });
    it("clicking a new role should update the user's role", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.update_role({user_id: 2, role: "viewer"});

        // assertions
        expect(mock_organization_service.update_role)
            .toHaveBeenCalledWith(2, 4, 'viewer');
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: new_member_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_user_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, user_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        mock_user_service = user_service;
        spyOn(mock_user_service, "add")
            .andCallFake(function(user){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_new_member_controller(){
        ctrl = ctrl('new_member_modal_ctrl', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            organization: {organization_id: 1}
        });
    }

    /*
     * Test scenarios
     */

    it("should set the default role to 'member'", function() {
        // arrange
        create_new_member_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.user.role.value).toEqual("member"); 
    });
    it("should call the user service to add a new user to the org",
        function() {
        // arrange
        create_new_member_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.user.first_name = "JB";
        ctrl_scope.user.last_name = "Smooth";
        ctrl_scope.user.email = "jb.smooth@be.com";
        ctrl_scope.submit_form(true);

        // assertions
        expect(mock_user_service.add)
            .toHaveBeenCalledWith({
                first_name: "JB",
                last_name: "Smooth",
                email: "jb.smooth@be.com",
                role: ctrl_scope.roles[0],
                organization: {
                    organization_id: 1
                }
            });
    });
    
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
/**
 * run_jasmine.js: runs the jasmine JS test runner
 */
(function() {
    var jasmineEnv = jasmine.getEnv();
    jasmineEnv.updateInterval = 1000;

    var htmlReporter = new jasmine.HtmlReporter();

    jasmineEnv.addReporter(htmlReporter);

    jasmineEnv.specFilter = function(spec) {
        return htmlReporter.specFilter(spec);
    };

    var currentWindowOnload = window.onload;

    window.onload = function() {
        if (currentWindowOnload) {
        currentWindowOnload();
        }
        execJasmine();
    };
    function execJasmine() {
        jasmineEnv.execute();
    }
})();

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var searchTestApp = angular.module(
    'searchTestApp', ['BE.seed.service.search']
);

describe("The search_service service", function() {
    var saas, httpBackend, test_url;

    beforeEach(function () {
        module("searchTestApp");
        inject(function (search_service, $httpBackend) {
            saas = search_service;
            httpBackend = $httpBackend;
            httpBackend.when("POST", test_url).respond("ok");
        });

    });

    /**
     * sanitize_params tests
     */
    it('removes null and undefined values from filter_params', function () {
        // arrange
        saas.filter_params = {
          'National Median Site Energy Use__gte': 4,
          'National Median Site Energy Use__lte': null,
          'National Median Source EUI__gte': undefined
        };

        // act
        saas.sanitize_params();

        // assert
        expect(saas.filter_params).toEqual({'National Median Site Energy Use__gte': 4});
    });

    /**
     * search_buildings tests
     */
    it('has sane defaults', function() {
        expect(saas.url).toEqual("");
        expect(saas.error_message).toEqual("");
        expect(saas.alert).toEqual(false);
        expect(saas.buildings).toEqual([]);
        expect(saas.current_page).toEqual(1);
        expect(saas.number_per_page).toEqual(10);
        expect(saas.order_by).toEqual("");
        expect(saas.sort_column).toEqual("tax_lot_id");
        expect(saas.sort_reverse).toEqual(false);
        expect(saas.select_all_checkbox).toEqual(false);
        expect(saas.prev_page_disabled).toEqual(true);
        expect(saas.next_page_disabled).toEqual(true);
        expect(saas.num_pages).toEqual(0);
        expect(saas.query).toEqual("");
        expect(saas.showing).toEqual({
            'start': 1,
            'end': 0
        });
    });

    it('search_buildings uses the argument `query`', function() {
        saas.query = "hotels";
        saas.search_buildings("not hotels");

        expect(saas.query).toEqual("not hotels");
    });
    it('filter search resets the current page', function() {
        // arrange
        saas.current_page = 22;
        spyOn(saas, 'search_buildings');

        // act
        saas.filter_search();

        // assert
        expect(saas.current_page).toEqual(1);
        expect(saas.search_buildings).toHaveBeenCalled();
    });

    it('search_buildings function will default to its query if' +
        ' no query is passed as an argument', function() {
        saas.query = "hotels";
        saas.search_buildings();

        expect(saas.query).toEqual("hotels");
    });

    it('search_buildings hits the set url', function() {
        test_url = "/my-search-url";
        saas.url = test_url;
        saas.search_buildings();
        httpBackend.expectPOST(test_url);
        httpBackend.flush();
    });

    it('search_buildings POSTs the query data as `q`', function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.query = "hotel chains";
        saas.number_per_page = 25;
        saas.order_by = "gross_floor_area";
        saas.sort_reverse = true;
        saas.filter_params = {
            project: '2012 data'
        };

        // act
        saas.search_buildings();

        // assert
        httpBackend.expectPOST(test_url,
            {
                "q": "hotel chains",
                "number_per_page": 25,
                "order_by": "gross_floor_area",
                "sort_reverse": true,
                "filter_params": {
                    "project": "2012 data"
                },
                "page":1
            }
        ).respond(201, "");
        httpBackend.flush();
    });
    it('search_buildings updates its `buildings` model', function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.query = "hotel chains";
        saas.number_per_page = 25;
        saas.order_by = "gross_floor_area";
        saas.sort_reverse = true;
        saas.filter_params = {
            project: '2012 data'
        };

        // act
        saas.search_buildings();

        // assert
        httpBackend.expectPOST(test_url,
            {
                "q": "hotel chains",
                "number_per_page": 25,
                "order_by": "gross_floor_area",
                "sort_reverse": true,
                "filter_params": {
                    "project": "2012 data"
                },
                "page":1
            }
        ).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        expect(saas.buildings).toEqual([
            {
                name: "one",
                id: 1,
                checked: false
            },
            {
                name: "two",
                id: 2,
                checked: false
            }
        ]);
    });
    it('should clear the error and alert after a successful search',
        function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.error_message = "help";
        saas.alert = true;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {
            'buildings': [
                {
                    name: "one",
                    id: 1
                },
                {
                    name: "two",
                    id: 2
                }],
            'number_matching_search': 101
            });
        httpBackend.flush();

        // assert
        expect(saas.alert).toEqual(false);
        expect(saas.error_message).toEqual("");
    });

    /**
     * pagination tests
     */
    it('increments the page when the `next` button is clicked',
        function() {
        // arrange
        saas.num_pages = 1000;
        saas.current_page = 100;
        spyOn(saas, 'search_buildings');
        // act
        saas.next_page();

        // assert
        expect(saas.current_page).toEqual(101);
        expect(saas.search_buildings).toHaveBeenCalled();
        expect(saas.search_buildings.callCount).toEqual(1);

    });
    it('doesn\'t increment past the last page when the `next` button is' +
        ' clicked', function() {
        // arrange
        saas.num_pages = 2;
        saas.current_page = 2;
        spyOn(saas, 'search_buildings');
        // act
        saas.next_page();

        // assert
        expect(saas.current_page).toEqual(2);
        expect(saas.search_buildings).toHaveBeenCalled();
        expect(saas.search_buildings.callCount).toEqual(1);

    });
    it('decrements the page when the `previous` button is clicked',
        function() {
        // arrange
        saas.num_pages = 1000;
        saas.current_page = 100;
        spyOn(saas, 'search_buildings');
        // act
        saas.prev_page();

        // assert
        expect(saas.current_page).toEqual(99);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('does not decrement below the first page when the `previous` button' +
        ' is clicked', function() {
        // arrange
        saas.num_pages = 1;
        saas.current_page = 1;
        spyOn(saas, 'search_buildings');
        // act
        saas.prev_page();

        // assert
        expect(saas.current_page).toEqual(1);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('fetches more or less results per page when a user selects an option' +
        ' from the number per page select',
        function() {
        // arrange
        saas.number_per_page_options_model = 50;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_number_per_page();

        // assert
        expect(saas.number_per_page).toEqual(50);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('updates the number of results displayed text after a successful '+
        'search', function() {
        // standard case
        // page 2 of 3 with 10/page, so should display 11 of 20
        // arrange
        saas.current_page = 2;
        saas.num_pages = 3;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_start_end_paging();

        // assert
        expect(saas.showing.start).toEqual(11);
        expect(saas.showing.end).toEqual(20);
        expect(saas.search_buildings).not.toHaveBeenCalled();
    });
    it('displays the number matching the query if on the last page of results',
        function() {
        // standard case
        // page 3 of 3 with 10/page and 34 results, so should display 21 of 34
        // arrange
        saas.current_page = 3;
        saas.number_matching_search = 34;
        saas.num_pages = 3;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_start_end_paging();

        // assert
        expect(saas.showing.start).toEqual(21);
        expect(saas.showing.end).toEqual(34);
    });
    it('should call update_start_end_paging after a successful search',
        function() {
        // arrange
        spyOn(saas, 'update_start_end_paging');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_start_end_paging).toHaveBeenCalled();
    });
    it('should call update_buttons after a successful search',
        function() {
        // arrange
        spyOn(saas, 'update_buttons');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_buttons).toHaveBeenCalled();
    });
    it('should disable prev paging buttons at the first page',
        function() {
        // arrange
        saas.current_page = 1;
        saas.num_pages = 5;

        // act
        saas.update_buttons();

        // assert
        expect(saas.prev_page_disabled).toEqual(true);
        expect(saas.next_page_disabled).toEqual(false);
    });
    it('should disable next paging buttons at the last page',
        function() {
        // arrange
        saas.current_page = 5;
        saas.num_pages = 5;

        // act
        saas.update_buttons();

        // assert
        expect(saas.prev_page_disabled).toEqual(false);
        expect(saas.next_page_disabled).toEqual(true);
    });
    it('should calculate the number of pages after a successful search',
        function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {
            'buildings': [
                {
                    name: "one",
                    id: 1
                },
                {
                    name: "two",
                    id: 2
                }],
            'number_matching_search': 101
            });
        httpBackend.flush();

        // assert
        expect(saas.number_matching_search).toEqual(101);
        expect(saas.num_pages).toEqual(11);
    });

    /**
     * checkbox logic tests
     */
    it('should select or unselect all the viewed results when the select all' +
        ' checkbox is checked or unchecked', function() {
        // arrange
        saas.selected_buildings = [1,2,3];
        saas.select_all_checkbox = true;
        saas.buildings = [
            {
                checked: false
            },
            {
                checked: true
            }
        ];
        spyOn(saas, 'select_or_deselect_all_buildings').andCallThrough();

        // act
        saas.select_all_changed();

        // assert
        expect(saas.selected_buildings).toEqual([]);
        expect(saas.buildings).toEqual([
                {
                    checked: true
                },
                {
                    checked: true
                }
            ]);
        expect(saas.select_or_deselect_all_buildings).toHaveBeenCalled();
    });
    it('should call select_or_deselect_all_buildings after a search',
        function() {
        // arrange
        spyOn(saas, 'select_or_deselect_all_buildings');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.select_or_deselect_all_buildings).toHaveBeenCalled();
    });
    it('should add a building to the selected list when checked',
        function() {
        // arrange
        var building = {
            id: 5,
            checked: true
        };

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([5]);
    });
    it('should add a building to the selected list when unchecked and the ' +
        'select all checkbox is checked', function() {
        // arrange
        var building = {
            id: 5,
            checked: false
        };
        saas.select_all_checkbox = true;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([5]);
    });
    it('should remove a building to the selected list when unchecked',
        function() {
        // arrange
        var building = {
            id: 5,
            checked: false
        };
        saas.selected_buildings = [5,6,7];
        saas.select_all_checkbox = false;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([6,7]);
    });
    it('should remove a building to the selected list when checked if the ' +
        'select all checkbox is checked', function() {
        // arrange
        var building = {
            id: 5,
            checked: true
        };
        saas.selected_buildings = [5,6,7];
        saas.select_all_checkbox = true;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([6,7]);
    });
    it('should call load_state_from_selected_buildings after a successful ' +
        'search', function() {
        // arrange
        spyOn(saas, 'load_state_from_selected_buildings').andCallThrough();
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.load_state_from_selected_buildings).toHaveBeenCalled();
    });
    it('should call update_results after a successful ' +
        'search', function() {
        // arrange
        var select_or_deselect_all_buildings_time,
            load_state_from_selected_buildings_time;
        spyOn(saas, 'update_results').andCallThrough();
        spyOn(saas, 'select_or_deselect_all_buildings')
            .andCallFake(function() {
                select_or_deselect_all_buildings_time = new Date();
            }
        );
        spyOn(saas, 'load_state_from_selected_buildings')
            .andCallFake(function() {
                // wait for a sec, otherwise both have the same timestamp
                for(var y=0;y<100000;y++){
                    var x = new Date();
                    x = x+y;
                }
                load_state_from_selected_buildings_time = new Date();
            }
        );
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_results).toHaveBeenCalled();
        expect(select_or_deselect_all_buildings_time <
               load_state_from_selected_buildings_time).toBe(true);
    });
    it('check selected buildings successful', function() {
        // arrange
        saas.selected_buildings = [2];
        saas.buildings = [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ];

        // act
        saas.load_state_from_selected_buildings();

        // assert
        expect(saas.buildings[1]).toEqual({
            name: "two",
            id: 2,
            checked: true
        });
    });
    it('should generate columns', function() {
        // arrange
        var all_columns, column_headers, columns;
        all_columns = [
            {
                sort_column: "name"
            },
            {
                sort_column: "id"
            }
        ];
        column_headers = ["id"];
        saas.sort_column = "something else";
        saas.update_results({});
        // act
        columns = saas.generate_columns(
            all_columns, column_headers, saas.column_prototype
        );

        // assert that columns are extended off the prototype and only have
        // "id"
        expect(columns.length).toEqual(1);
        expect(columns[0].sort_column).toEqual("id");
        expect(columns[0].is_unsorted()).toEqual(true);
        saas.sort_column = "id";
        expect(columns[0].is_unsorted()).toEqual(false);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: settings_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller;
    var ctrl, ctrl_scope, modalInstance;
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          $q,
          organization_service) {
            ctrl = $controller;
            scope = $rootScope;
            ctrl_scope = $rootScope.$new();

            mock_organization_service = organization_service;
            
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_settings_controller(){
        ctrl = ctrl('settings_controller', {
            $scope: ctrl_scope,
            all_columns: {fields: [
                {checked: false, title: 'PM Property ID', sort_column: 'pm_property_id'},
                {checked: false, title: 'G', sort_column: 'g'},
                {checked: false, title: "Gross Floor Area", sort_column: 'gross_floor_area'}
            ]},
            organization_payload: {
                organization: {name: 'my org', id: 4}
            },
            query_threshold_payload: {
                query_threshold: 10
            },
            shared_fields_payload: {
                shared_fields: [
                    {
                        title: "PM Property Id",
                        sort_column: "pm_property_id"
                    }
                ],
                public_fields: [
                {
                    title: "Gross Floor Area",
                    sort_column: "gross_floor_area"
                }]
            },
            auth_payload: {
                auth: {
                    'is_owner': true,
                    'is_parent_org_owner': false
                }
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should accepts its payload", function() {
        // arrange
        create_settings_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.org).toEqual({
            name : 'my org',
            id : 4,
            query_threshold: 10
        });
        expect(ctrl_scope.fields[0].checked).toEqual(true);
        expect(ctrl_scope.fields[1].checked).toEqual(false);
        expect(ctrl_scope.fields[0].title).toEqual('PM Property ID');
    });
    it("should select all", function() {
        // arrange
        create_settings_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.controls.select_all = true;
        ctrl_scope.select_all_clicked();
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.infinite_fields[0].checked).toEqual(true);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myStripFilterApp = angular.module('myStripFilterApp', ['stripImportPrefix']);

describe("The stripImportPrefix filter", function() {
    beforeEach(module('myStripFilterApp'));
    it('Strips out the import prefix from building ids',
        // e.g. remove the 'IMP12-' from the id 'IMP12-1321/123'
        inject(function(stripImportPrefixFilter) {
            // normal cases
            expect(stripImportPrefixFilter('IMP134-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP134555-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP1-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP0-134')).toBe('134');
            // deals with `-`
            expect(stripImportPrefixFilter('IMP134-abc-dev')).toBe('abc-dev');
            // deals with `/`
            expect(stripImportPrefixFilter('IMP134-00/11')).toBe('00/11');
            // only strips first prefix
            expect(stripImportPrefixFilter('IMP134-IMP134-123')).toBe('IMP134-123');
        })
    );
    it("Does not strip out anything if there is not a prefix",
        inject(function(stripImportPrefixFilter) {
            // normal cases
            expect(stripImportPrefixFilter('123-123')).toBe('123-123');
            expect(stripImportPrefixFilter('0123/123')).toBe('0123/123');
        })
    );
    it("Is case sensitive to the import prefix",
        inject(function(stripImportPrefixFilter) {
            expect(stripImportPrefixFilter('imp123-abc')).toBe('imp123-abc');
            expect(stripImportPrefixFilter('iMp123-abc')).toBe('iMp123-abc');
            expect(stripImportPrefixFilter('iMP123-abc')).toBe('iMP123-abc');
        })
    );
    it("Handles undefined or null inputs",
        inject(function(stripImportPrefixFilter) {
            expect(stripImportPrefixFilter(undefined)).toBe(undefined);
            expect(stripImportPrefixFilter(null)).toBe(null);
        })
    );
    it("Only strips out the prefix if it has at least one digit and a hyphen",
        inject(function(stripImportPrefixFilter) {
            // must have the 'IMP' folowed by a digit then a hyphen
            expect(stripImportPrefixFilter('IMP-123')).toBe('IMP-123');
            expect(stripImportPrefixFilter('IMP1123')).toBe('IMP1123');
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myTitleCaseApp = angular.module('myTitleCaseApp', ['titleCase']);

describe("The TitleCase filter", function() {
    beforeEach(module('myTitleCaseApp'));
    it('Strips out ``_`` characters from strings and capitalizes the rest',
        inject(function(titleCaseFilter) {
            // normal cases
            expect(titleCaseFilter('super_data')).toBe('Super Data');
            expect(titleCaseFilter('super_data_45')).toBe('Super Data 45');
            expect(titleCaseFilter(undefined)).toBe(undefined);
            expect(titleCaseFilter(null)).toBe(null);
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myTypedNumberFilterApp = angular.module('myTypedNumberFilterApp', ['typedNumber']);

describe("The typedNumber filter", function() {
    beforeEach(module('myTypedNumberFilterApp'));
    it('should parse strings as strings and return them',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('tester')).toBe('tester');
        })
    );
    it('should parse strings as strings and return them, even if they look like numbers',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.1456')).toBe('123.1456');
        })
    );

    it('should parse numbers as numbers and return them',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.00001', 'number')).toBe("123");
        })
    );

    it('should allow the user to set the number of sig digits',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.321', 'number', 'not_year', 1)).toBe("123.3");
        })
    );

    it('should add commas to number greater than 999',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123456789', 'number', 'not_year', 0)).toBe("123,456,789");
        })
    );

    it('should parse year_built and not add commas',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('1946', 'number', 'year_built', 1)).toBe("1946");
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var validationTestApp = angular.module(
    'validationTestApp', ['mappingValidatorService']
);

describe("The MappingValidatorService", function() {
    var mvs;

    beforeEach(function () {
        module("validationTestApp");
        inject(function (mappingValidatorService) {
            mvs = mappingValidatorService;

        });

    });

    it('validates good string, float and date data', function() {
        // normal cases
        // Here ``type`` is undefined. Should still work.
        var str_data = ['Fun', 'fun2', 'fun3', 'fun4'];
        var float_data = ['12.34', '144.5', '234'];
        var date_data = ['2014/02/02', '03/13/2013', '03-14-2004'];

        expect(mvs.validate(str_data)).toEqual([]);
        expect(mvs.validate(float_data, 'float')).toEqual([]);
        expect(mvs.validate(date_data, 'date')).toEqual([]);
    });

    it('recognizes semivalid data', function() {
        // Cases where the data is /almost/ right.
        var float_data = ['12.34', '144.5', 'NaN'];
        var date_data = ['2014/02/02', 'huh?', '03-14-2004'];
        expect(mvs.validate(float_data, 'float')).toEqual(['NaN']);
        expect(mvs.validate(date_data, 'date')).toEqual(['huh?']);
    });

    it('recognizes invalid data', function() {
        // Cases where the data is *all* wrong.
        var float_data = ['', 'not a float', 'NaN'];
        var date_data = ['', 'huh?', 'what?'];
        // Cases where the data are correct.
        var good_float_data = ['12.34', '144.5', '234'];
        var good_date_data = ['2014/02/02', '03/13/2013', '03-14-2004'];

        // Data is wrong
        expect(mvs.validate(float_data, 'float')).toEqual(float_data);
        expect(mvs.validate(date_data, 'date')).toEqual(date_data);

        // Type is wrong
        // N.B. we use semivalid here, because Date is pretty forgiving w/ nums.
        expect(mvs.validate(good_float_data, 'date')).toEqual(['12.34']);
        expect(mvs.validate(good_date_data, 'float')).toEqual(good_date_data);


    });

});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// taken from the angularjs testing page
// http://docs.angularjs.org/guide/dev_guide.unit-testing

// create dummy angularJS app to attach filter(s)
var myBELabelDirectiveApp = angular.module('myBELabelDirectiveApp', ['beLabel']);

describe("The beLabel directive", function() {
    var $compile;
    var $rootScope;
    beforeEach(module('myBELabelDirectiveApp'));
    // Store references to $rootScope and $compile
    // so they are available to all tests in this describe block
    beforeEach(inject(function(_$compile_, _$rootScope_){
      // The injector unwraps the underscores (_) from around the parameter names when matching
      $compile = _$compile_;
      $rootScope = _$rootScope_;
    }));

    it('Replaces the element with the appropriate content', function() {
        // Compile a piece of HTML containing the directive
        var element = $compile('<be-label name="compliant" color="blue"></be-label>')($rootScope);
        // fire all the watches
        $rootScope.$digest();
        // Check that the compiled element contains the templated content
        expect(element.hasClass('label-primary')).toBe(true);
        expect(element.hasClass('label')).toBe(true);
        expect(element.html()).toContain("compliant");
    });

        // 'red': 'danger',
        // 'gray': 'default',
        // 'orange': 'warning',
        // 'green': 'success',
        // 'blue': 'primary',
        // 'light blue': 'info'
    it('Maps colors to semantic bootstrap class names', function() {
        var element = $compile('<be-label name="compliant" color="red"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-danger')).toBe(true);

        element = $compile('<be-label name="compliant" color="gray"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-default')).toBe(true);

        element = $compile('<be-label name="compliant" color="orange"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-warning')).toBe(true);

        element = $compile('<be-label name="compliant" color="green"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-success')).toBe(true);

        element = $compile('<be-label name="compliant" color="blue"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-primary')).toBe(true);

        element = $compile('<be-label name="compliant" color="light blue"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-info')).toBe(true);
    });


});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// taken from the angularjs testing page
// http://docs.angularjs.org/guide/dev_guide.unit-testing

// create dummy angularJS app to attach filter(s)
var myBEUploaderDirectiveApp = angular.module('myBEUploaderDirectiveApp', ['beUploader']);

describe("The beUploader directive", function() {
    var g_message, g_file, g_progress;
    var $compile;
    var $rootScope;
    var uploader_html = '<div be-uploader sourcetype="assessor" importrecord="5" buttontext="Upload your building list .csv file" eventfunc="uploaderfunc(message, filename, progress)" ng-hide="uploader.in_progress"></div>';
    beforeEach(module('myBEUploaderDirectiveApp'));
    // Store references to $rootScope and $compile
    // so they are available to all tests in this describe block
    beforeEach(inject(function(_$compile_, _$rootScope_){
      // The injector unwraps the underscores (_) from around the parameter names when matching
      $compile = _$compile_;
      $rootScope = _$rootScope_;
      $rootScope.eventfunc = function (fine_object) {
        console.log({fin: fine_object});
        g_message = fine_object.message;
        g_file = fine_object.file;
        g_progress = fine_object.progress;
      };
      window.BE = window.BE || {};
      window.BE.FILE_UPLOAD_DESTINATION = 'S3';
    }));

    it('Creates the fineuploader element', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        
        // act
        $rootScope.$digest();

        // assert
        expect(element.html()).toContain("qq-uploader");
        expect(element.html()).toContain("qq-upload-button");
    });

    it('Contains the buttontext specified', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);

        // act
        $rootScope.$digest();

        // assert
        expect(element.html()).toContain("Upload your building list .csv file");
    });

    it('Only allows one file to be uploaded at a time', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");

        // act
        $rootScope.$digest();

        // assert
        expect(func._options.multiple).toBe(false);
    });

    it('Uses the callback function for invalid file types', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.jpeg");

        // act
        $rootScope.$digest();
        func._options.showMessage("there was an invalid extension. Valid extension(s): .csv");


        // assert
        expect(g_message).toBe("invalid_extension");
    });

    it('Uses the callback function to share its state: upload started',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';
        
        // act
        $rootScope.$digest();
        func._options.callbacks.onSubmitted(1, filename);


        // assert
        expect(g_message).toBe("upload_submitted");
        expect(g_file.filename).toBe(filename);
    });

    it('Uses the callback function to share its state: in progress',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';
        var loaded = 10;
        var total = 100;
        
        // act
        $rootScope.$digest();
        func._options.callbacks.onProgress(1, filename, loaded, total);


        // assert
        expect(g_message).toBe("upload_in_progress");
        expect(g_file.filename).toBe(filename);
        expect(g_progress.loaded).toBe(loaded);
        expect(g_progress.total).toBe(total);
    });

    it('Uses the callback function to share its state: complete',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';

        
        // act
        $rootScope.$digest();
        func._options.callbacks.onComplete(1, filename, {success: true});


        // assert        
        expect(g_message).toBe("upload_complete");
        expect(g_file.filename).toBe(filename);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: building_detail_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, ngFilter, delete_called;
    var building_detail_ctrl, building_detail_ctrl_scope, modalInstance, labels;
    var mock_building_services, mock_project_service;
    var mock_building;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          urls,
          $q,
          building_services,
          project_service,
          $filter) {
            controller = $controller;
            scope = $rootScope;
            ngFilter = $filter;
            building_detail_ctrl_scope = $rootScope.$new();
            modal_state = "";
            delete_called = false;

            // mock the building_services factory methods used in the controller
            // and return their promises
            mock_building_services = building_services;
            mock_project_service = project_service;

            spyOn(mock_project_service, "get_project")
                .andCallFake(function(project_slug){
                    return $q.when(
                        {
                            "status": "success",
                            "project": {
                                id: 33,
                                name: "test project",
                                slug: project_slug
                            }
                        }
                    );
                }
            );
            spyOn(mock_project_service, "get_labels")
                .andCallFake(function(){
                    return $q.when(
                        {
                            "status": "success",
                            "labels": [{
                                id: 44,
                                name: "bad label",
                                color: "red"
                            }]
                        }
                    );
                }
            );
            spyOn(mock_project_service, "update_project_building")
                .andCallFake(function(building_id, project, label){
                    return $q.when(
                        {
                            "status": "success",
                            "approver": "bob doe",
                            "approved_date": "01/01/2012"
                        }
                    );
                }
            );
            spyOn(mock_building_services, "update_building")
                .andCallFake(function (building, org_id){
                    mock_building = building;
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_building_detail_controller(){
        var fake_building = {
            id: 511,
            pk: 511,
            gross_floor_area: 123456,
            gross_floor_area_source: 2,
            city: "DC",
            city_source: 4,
            tax_lot_id: "11/22",
            tax_lot_id_source: 3,
            extra_data: {
                'some other key': 12344,
                'some other key that is not in a parent': 223
            },
            extra_data_sources: {
                'some other key': 2,
                'some other key that is not in a parent': 3
            },
            created: "at some point"
        };
        var fake_imported_buildings = [
            {
                id: 2,
                pk: 2,
                gross_floor_area: 123456,
                gross_floor_area_source: null,
                city: "Washington, DC",
                city_source: null,
                extra_data: {
                    'some other key': 123,
                    'some other key that is not in a child': 333,
                    'some floor area': 444
                },
                extra_data_sources: {
                    'some other key': null,
                    'some other key that is not in a child': 111,
                    'some floor area': 444
                },
                created: "test"
            },
            {
                id: 3,
                pk: 3,
                gross_floor_area: 2111111,
                gross_floor_area_source: null,
                city: "Washington",
                city_source: null,
                tax_lot_id: "11/22",
                tax_lot_id_source: null,
                extra_data: {
                    'make it four': 4
                },
                extra_data_sources: {
                    'make it four': null
                }
            },{
                id: 4,
                pk: 4,
                gross_floor_area: 2111111,
                gross_floor_area_source: null,
                city: "Washington",
                city_source: null,
                tax_lot_id: "11/22",
                tax_lot_id_source: null,
                extra_data: {
                    'make it four': 5
                },
                extra_data_sources: {
                    'make it four': null
                }
            }
        ];
        var fake_payload = {
            "status": "success",
            "building": fake_building,
            "imported_buildings": fake_imported_buildings,
            "projects": [],
            "user_org_id": 42
        };
        var fake_all_columns = [{
            "title": "PM Property ID",
            "sort_column": "pm_property_id",
            "class": "is_aligned_right",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Tax Lot ID",
            "sort_column": "tax_lot_id",
            "class": "is_aligned_right",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Custom ID 1",
            "sort_column": "custom_id_1",
            "class": "is_aligned_right whitespace",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Property Name",
            "sort_column": "property_name",
            "class": "",
            "title_class": "",
            "type": "string",
            "field_type": "building_information",
            "sortable": true,
            "checked": false
        }];
        building_detail_ctrl = controller('building_detail_controller', {
            $scope: building_detail_ctrl_scope,
            $routeParams: {
                building_id: 1,
                project_id: 2
            },
            building_payload: fake_payload,
            all_columns: {
                fields: fake_all_columns
            },
            audit_payload: {
                audit_logs: []
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should have an building payload", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.building.id).toBe(511);
        expect(building_detail_ctrl_scope.imported_buildings[0].id).toBe(2);
    });

    it("should get labels on load", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.labels[0].id).toBe(44);
        expect(building_detail_ctrl_scope.labels[0].name).toBe("bad label");
        expect(building_detail_ctrl_scope.labels[0].color).toBe("red");
    });

    it("should highlight the active project", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.is_active_project({id:33}))
        .toBe(true);
        expect(building_detail_ctrl_scope.is_active_project({id:34}))
        .toBe(false);
        building_detail_ctrl_scope.project = undefined;
        expect(building_detail_ctrl_scope.is_active_project({id:34}))
        .toBe(false);
    });

    it("should make a copy of building while making edits", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.save_building_state();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;

        // assertions
        expect(building_detail_ctrl_scope.building_copy.gross_floor_area)
        .toBe(123456);
    });
    it("should restore the copy of building if a user clicks cancel",
        function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.save_building_state();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;
        building_detail_ctrl_scope.restore_building();

        // assertions
        expect(building_detail_ctrl_scope.building.gross_floor_area)
        .toBe(123456);
        expect(building_detail_ctrl_scope.building.edit_form_showing).toBe(false);
    });
    it("should save a building when a user clicks the save button", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;
        building_detail_ctrl_scope.save_building();

        // assertions
        expect(mock_building_services.update_building)
        .toHaveBeenCalledWith(building_detail_ctrl_scope.building, 42);
        expect(mock_building.gross_floor_area).toEqual(43214);
    });
    it("should show a default label if a building doesn't have one", function() {
        // arrange
        create_building_detail_controller();
        var building_with_label = {
            label: {
                name: "hello",
                label: "success"
            }
        };
        var building_without_label = {};
        var label_with, label_without;

        // act
        building_detail_ctrl_scope.$digest();
        label_with = building_detail_ctrl_scope.get_label(building_with_label);
        label_without = building_detail_ctrl_scope.get_label(building_without_label);

        // assertions
        expect(label_with).toEqual({
                name: "hello",
                label: "success"
            });
        expect(label_without).toEqual({
                name: "Add Label",
                label: "default"
            });
    });

    it("should show a project or buildings breadcrumb", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.user.project_slug = "project_1";

        // assertions
        expect(building_detail_ctrl_scope.is_project()).toEqual(true);
        building_detail_ctrl_scope.user.project_slug = undefined;
        expect(building_detail_ctrl_scope.is_project()).toEqual(false);

    });
    it("should show the default projects table if a user has no compliance" +
        " projects", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.user.has_projects()).toEqual(false);
        building_detail_ctrl_scope.projects = [{id: 1, name: "a"}];
        expect(building_detail_ctrl_scope.user.has_projects()).toEqual(true);

    });

    it("should set only building attribute to master, not ids or children", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.is_valid_key('id')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('pk')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('pk_source')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key(' extra_data ')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('gross_floor_area'))
          .toEqual(true);
    });
    it("should update a project-building label", function() {
        // arrange
        create_building_detail_controller();
        var project = {
            id: 2,
            building: {}
        };

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.update_project_building(project,
            {
                name: "label name",
                color: "red"
            });
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(mock_project_service.update_project_building).toHaveBeenCalled();
        expect(project.building.approver).toEqual("bob doe");
        expect(project.building.approved_date).toEqual("01/01/2012");
        expect(project.building.label.name).toEqual("label name");
        expect(project.building.label.color).toEqual("red");

    });
    it("should set a field as source when clicked", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[0].is_master = true;
        expect(building_detail_ctrl_scope.building.gross_floor_area_source)
          .not.toEqual(building_detail_ctrl_scope.building.id);
        building_detail_ctrl_scope.set_self_as_source('gross_floor_area');
        building_detail_ctrl_scope.set_self_as_source('some other key', true);
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.building.gross_floor_area_source)
          .toEqual(building_detail_ctrl_scope.building.id);
        expect(building_detail_ctrl_scope.imported_buildings[0].is_master)
          .toEqual(false);
    });
    it("should set a column as the dominant source when clicked", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[1].is_master = true;
        building_detail_ctrl_scope.make_source_default(
            building_detail_ctrl_scope.imported_buildings[0]);
        building_detail_ctrl_scope.$digest();

        // assertions
        var b = building_detail_ctrl_scope.building,
            i = building_detail_ctrl_scope.imported_buildings[0],
            i_other = building_detail_ctrl_scope.imported_buildings[1];

        expect(b.gross_floor_area_source).toEqual(i.id);
        expect(b.id).not.toEqual(i.id);
        expect(b.pk).not.toEqual(i.id);
        expect(b.city).toEqual(i.city);
        expect(b.city_source).toEqual(i.id);
        expect(b.tax_lot_id).toEqual("11/22");
        expect(b.tax_lot_id_source).toEqual(i_other.id);
        expect(b.extra_data['some other key']).toEqual(123);
        expect(b.extra_data_sources['some other key']).toEqual(i.id);
        expect(b.extra_data['some other key that is not in a child']).toEqual(333);
        expect(b.extra_data_sources['some other key that is not in a child']).toEqual(i.id);
        expect(b.extra_data['some other key that is not in a parent']).toEqual(223);
        expect(b.extra_data_sources['some other key that is not in a parent']).toEqual(i_other.id);
        expect(b.created).toEqual("at some point");

        expect(i.is_master).toEqual(true);
        expect(i_other.is_master).toEqual(false);
    });
    it("should set the master building value when parent's value is clicked",
        function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[1].is_master = true;
        building_detail_ctrl_scope.set_building_attribute(
            building_detail_ctrl_scope.imported_buildings[0], 'city');
        building_detail_ctrl_scope.set_building_attribute(
            building_detail_ctrl_scope.imported_buildings[0], 'some other key', true);
        building_detail_ctrl_scope.$digest();

        // assertions
        var b = building_detail_ctrl_scope.building,
            i = building_detail_ctrl_scope.imported_buildings[0],
            i_other = building_detail_ctrl_scope.imported_buildings[1];

        expect(b.id).not.toEqual(i.id);
        expect(b.pk).not.toEqual(i.id);
        expect(b.city).toEqual(i.city);
        expect(b.city_source).toEqual(i.id);
        expect(b.tax_lot_id).toEqual("11/22");
        expect(b.tax_lot_id_source).toEqual(i_other.id);
        expect(b.extra_data['some other key']).toEqual(123);
        expect(b.extra_data_sources['some other key']).toEqual(i.id);

        expect(i.is_master).toEqual(false);
        expect(i_other.is_master).toEqual(false);
    });

    it("should display all the data within all the buildings", function() {
        // arrange
        create_building_detail_controller();
        var keys;

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        var edc = building_detail_ctrl_scope.data_columns;

        // should not duplicate keys
        expect(edc.length).toEqual(8);
        keys = edc.map(function ( d ) {
            return d.key;
        });
        expect(keys.indexOf('make it four')).toEqual(4);
    });

    it("should display Floor Areas", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.$digest();

        // assertions
        var area_fields = building_detail_ctrl_scope.floor_area_fields;
        expect(area_fields.length).toEqual(1);
    });

    it("should display Floor Areas with number", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.get_number("")).toEqual(0);
        expect(building_detail_ctrl_scope.get_number("123,123,123")).toEqual(123123123);
        expect(building_detail_ctrl_scope.get_number("123,123,123.123")).toEqual(123123123.123);
        expect(building_detail_ctrl_scope.get_number("-123,123,123")).toEqual(-123123123);
        expect(building_detail_ctrl_scope.get_number(-123123123)).toEqual(-123123123);


    });
});

describe("controller: concat_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var scope, controller, modal_state;
    var edit_ctrl, concat_modal_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label, mock_mapping_service, mock_matching_service;
    var global_step = 1;
    var global_dataset = {};

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
            $controller, $rootScope, $modal, urls, $q
        ) {
            controller = $controller;
            scope = $rootScope;
            concat_modal_ctrl_scope = $rootScope.$new();
            concat_modal_ctrl_scope.concat_columns = [];
            modal_state = "";
        }
    ));

    var mock_building_column_types = [
        'address1', 'city', 'state', 'postal_code'
    ];

    var mock_raw_columns = [
        {
            name: 'Address',
            suggestion: 'address1',
            confidence: 1,
            raw_data: [
                '234 Database way',
                '23444 Huh hwy',
                '23444 Huh hwy',
                '23444 Huh hwy',
                '1223 face pl.'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        },
        {
            name: 'City',
            suggestion: 'city',
            confidence: 1,
            raw_data: [
                'Mega City', 'Mega City', 'Mega City', 'Mega City', 'Mega City'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        },
        {
            name: 'Zip',
            suggestion: '',
            confidence: 0,
            raw_data: [
                '234233', '234233', '234233', '234233', '234233'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        }
    ];

    // this is outside the beforeEach so it can be configured by each unit test
    function create_concat_modal_controller(){
        edit_ctrl = controller('concat_modal_ctrl', {
            $scope: concat_modal_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            building_column_types: mock_building_column_types,
            raw_columns: mock_raw_columns
        });
    }

    /*
     * Test scenarios
     */

    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.close_concat_modal();
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should mangle scope appropriately during concatenation", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(3);

        // arrange
        concat_modal_ctrl_scope.concat_columns =
            concat_modal_ctrl_scope.raw_columns.slice(0);
        concat_modal_ctrl_scope.raw_columns = [];

        // act
        concat_modal_ctrl_scope.$digest();
        concat_modal_ctrl_scope.save_concat();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(1);
        expect(
            concat_modal_ctrl_scope.raw_columns[0].is_concatenated
        ).toEqual(true);
    });

    it("should modify the raw_data of our modified TCM correctly", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(3);

        // arrange
        concat_modal_ctrl_scope.concat_columns =
            concat_modal_ctrl_scope.raw_columns.slice(0);
        concat_modal_ctrl_scope.raw_columns = [];

        // act
        concat_modal_ctrl_scope.$digest();
        concat_modal_ctrl_scope.save_concat();

        var expected_raw = [
            '234 Database way Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '1223 face pl. Mega City 234233'
        ];

        // assertions
        expect(
            concat_modal_ctrl_scope.raw_columns[0].raw_data
        ).toEqual(expected_raw);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: create_organization_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_organization_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, organization_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        mock_organization_service = organization_service;
        spyOn(mock_organization_service, "create_sub_org")
            .andCallFake(function(org, sub_org){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_organization_modal_ctrl(){
        ctrl = ctrl('create_organization_modal_ctrl', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            organization: {organization_id: 1}
        });
    }

    /*
     * Test scenarios
     */

    it("should call the organization service to add a new sub_org",
        function() {
        // arrange
        create_organization_modal_ctrl();

        // act
        ctrl_scope.$digest();
        ctrl_scope.sub_org.name = "my shiny new org";
        ctrl_scope.sub_org.email = "jb.smooth@be.com";
        ctrl_scope.submit_form(true);

        // assertions
        expect(mock_organization_service.create_sub_org)
            .toHaveBeenCalledWith(
                {
                    organization_id: 1
                },
                {
                    name: "my shiny new org",
                    email: "jb.smooth@be.com"
                }
            );
    });
    
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: data_upload_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_uploader_service, scope, controller, modal_state;
    var edit_ctrl, data_upload_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label, mock_mapping_service, mock_matching_service;
    var global_step = 1;
    var global_dataset = {};
    var return_labels = [
        {
            "name": 'compliant',
            "color": 'green',
            "id": 1
        },
        {
            "name": "new label",
            "color": "blue",
            "id": 2
        }
    ];

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, uploader_service, mapping_service, matching_service) {
            controller = $controller;
            scope = $rootScope;
            data_upload_ctrl_scope = $rootScope.$new();
            modal_state = "";

            // mock the uploader_service factory methods used in the controller
            // and return their promises
            mock_uploader_service = uploader_service;
            mock_mapping_service = mapping_service;
            mock_matching_service = matching_service;
            spyOn(mock_uploader_service, "get_AWS_creds")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "AWS_CLIENT_ACCESS_KEY": "123",
                            "AWS_UPLOAD_BUCKET_NAME": "test-bucket"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "check_progress")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "progress": "25.0"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "create_dataset")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "id": 3,
                                "name": dataset_name

                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error",
                                "message": "name already in use"
                            }
                        );
                    }
                }
            );
            spyOn(mock_uploader_service, "save_raw_data")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "file_id": 3
                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error"
                            }
                        );
                    }
                }
            );
            spyOn(mock_mapping_service, "start_mapping")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "file_id": 3
                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error"
                            }
                        );
                    }
                }
            );
            spyOn(mock_matching_service, "start_system_matching")
            .andCallFake(function(file_id){
                // return $q.reject for error scenario
                return $q.when(
                    {
                        "status": "success",
                        "file_id": 3
                    }
                );
            });

        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_data_upload_modal_controller(){
        edit_ctrl = controller('data_upload_modal_ctrl', {
            $scope: data_upload_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            step: global_step,
            dataset: global_dataset
        });
    }

    /*
     * Test scenarios
     */

    it("should close the modal when the close function is called", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.close();
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel function is called", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.cancel();
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

    it("should start at the step provided", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(1);

        // arrange
        global_step = 2;
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(2);
    });

    it("should goto different steps", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var step;
        step = 2;
        data_upload_ctrl_scope.goto_step(step);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(step);
    });

    it("disables the 'Name it' button if no text is entered", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(true);
    });
    it("disables the 'Name it' button if no text is entered, then cleared",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.dataset.name = undefined;
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(true);
    });
    it("enables the 'Name it' button if text is entered", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.dataset.name = "my dataset name";
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(false);
    });
    it("should show an alert if the dataset name is already in use",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.create_dataset("fail");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.alert).toBe(true);
    });
    it("should not show an alert if the dataset name is not already in use",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.create_dataset("my shiny new dataset");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.alert).toBe(false);
    });
    it("after creating a dataset, stores the dataset id", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var ds_name = "my shiny new dataset";
        data_upload_ctrl_scope.create_dataset(ds_name);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.id).toBe(3);
        expect(data_upload_ctrl_scope.dataset.name).toBe(ds_name);
    });
    it("after uploading a file, stores the file id", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var message, filename;
        message = "upload_complete";
        filename = "file1.csv";

        // act
        data_upload_ctrl_scope.uploaderfunc(message, {
            filename: filename,
            file_id: 20140313
        });
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.import_file_id).toBe(20140313);
    });
    it("should show an invalid extension alert if a file with an invalid" +
        "extension is loaded", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.uploaderfunc("invalid_extension");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.invalid_extension_alert)
            .toBe(true);
    });
    it("should hide the upload button after the user selects a file",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename;
        message = "upload_submitted";
        filename = "file1.csv";

        // act
        data_upload_ctrl_scope.uploaderfunc(message, {filename: filename});
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.filename).toBe(filename);
        expect(data_upload_ctrl_scope.uploader.in_progress).toBe(true);
    });
    it("should show the progressbar during upload",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename, progress;
        message = "upload_in_progress";
        filename = "file1.csv";
        progress = {
            loaded: 10,
            total: 100
        };

        // act
        data_upload_ctrl_scope.uploaderfunc(message, filename, progress);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.in_progress).toBe(true);
        expect(data_upload_ctrl_scope.uploader.progress).toBe(2.5);
    });
    it("should start saving the energy data when the file has been uploaded",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename;
        message = "upload_complete";
        filename = "file1.csv";
        data_upload_ctrl_scope.step.number = 4;

        // act
        data_upload_ctrl_scope.uploaderfunc(message, filename);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.status_message)
            .toBe("saving energy data");
    });

    it("should take an dataset payload", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.name).toBe("");
        expect(data_upload_ctrl_scope.dataset.filename).toBe("");
        expect(data_upload_ctrl_scope.dataset.id).toBe(0);
    });

    it("should extend a custom dataset payload", function() {
        // arrange
        global_dataset = {
            id: 100,
            filename: "seed_data.csv",
            name: "Compliance Project"
        };
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.name).toBe("Compliance Project");
        expect(data_upload_ctrl_scope.dataset.filename).toBe("seed_data.csv");
        expect(data_upload_ctrl_scope.dataset.id).toBe(100);
        expect(data_upload_ctrl_scope.dataset.alert).toBe(false);

    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: dataset_detail_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, ngFilter, delete_called;
    var dataset_detail_ctrl, dataset_detail_ctrl_scope, modalInstance, labels;

    

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, dataset_service, $filter) {
            controller = $controller;
            scope = $rootScope;
            ngFilter = $filter;
            dataset_detail_ctrl_scope = $rootScope.$new();
            modal_state = "";
            delete_called = false;

            // mock the dataset_service factory methods used in the controller
            // and return their promises
            mock_dataset_service = dataset_service;
            spyOn(mock_dataset_service, "get_dataset")
                .andCallFake(function(dataset_id){
                    // return $q.reject for error scenario
                    var fake_importfiles = [
                        {
                            name: "DC_CoveredBuildings_50k.csv",
                            number_of_buildings: 511,
                            number_of_mappings: 511,
                            number_of_cleanings: 1349,
                            source_type: "Assessed Raw",
                            number_of_matchings: 403
                        },
                        {
                            name: "DC_ESPM_Report.csv",
                            number_of_buildings: 511,
                            number_of_matchings: 403,
                            source_type: "Portfolio Raw"
                        }
                    ];
                    var fake_dataset = {
                        name: "DC 2013 data",
                        last_modified: (new Date()).getTime(),
                        last_modified_by: "john.s@buildingenergy.com",
                        number_of_buildings: 89,
                        id: 1,
                        importfiles: fake_importfiles
                    };
                    var fake_payload = {
                        "status": "success",
                        "dataset": fake_dataset
                    };
                    if (delete_called) {
                        fake_payload.dataset.importfiles.pop();
                    }
                    console.log({delete_called: delete_called, ds: fake_payload});
                    return $q.when(fake_payload);
                }
            );

            spyOn(mock_dataset_service, "delete_file")
                .andCallFake(function(import_file){
                    delete_called = true;
                    console.log({d: "delete_called"});
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_detail_controller(){
        var fake_importfiles = [
            {
                name: "DC_CoveredBuildings_50k.csv",
                number_of_buildings: 511,
                number_of_mappings: 511,
                number_of_cleanings: 1349,
                source_type: "Assessed Raw",
                number_of_matchings: 403
            },
            {
                name: "DC_ESPM_Report.csv",
                number_of_buildings: 511,
                number_of_matchings: 403,
                source_type: "Portfolio Raw"
            }
        ];
        var fake_dataset = {
            name: "DC 2013 data",
            last_modified: (new Date()).getTime(),
            last_modified_by: "john.s@buildingenergy.com",
            number_of_buildings: 89,
            id: 1,
            importfiles: fake_importfiles
        };
        var fake_payload = {
            "status": "success",
            "dataset": fake_dataset
        };
        dataset_detail_ctrl = controller('dataset_detail_controller', {
            $scope: dataset_detail_ctrl_scope,
            dataset_payload: fake_payload
        });
    }

    /*
     * Test scenarios
     */

    it("should have an data set payload with import files", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        dataset_detail_ctrl_scope.$digest();

        // assertions
        expect(dataset_detail_ctrl_scope.dataset.importfiles.length).toBe(2);
    });

    it("should show an alert when the delete icon is clicked", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        dataset_detail_ctrl_scope.$digest();
        var importfiles = dataset_detail_ctrl_scope.dataset.importfiles;
        dataset_detail_ctrl_scope.delete_file(importfiles[0]);
        dataset_detail_ctrl_scope.$digest();

        // assertions
        expect(dataset_detail_ctrl_scope.dataset.importfiles.length).toBe(1);
    });
   
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: dataset_list_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, modal_state;
    var edit_ctrl, dataset_list_ctrl_scope, modalInstance, labels;
    var location;

    

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, uploader_service,
            $location) {
            controller = $controller;
            scope = $rootScope;
            dataset_list_ctrl_scope = $rootScope.$new();
            modal_state = "";
            location = $location;

            // mock the uploader_service factory methods used in the controller
            // and return their promises
            mock_uploader_service = uploader_service;
            spyOn(mock_uploader_service, "get_AWS_creds")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "AWS_CLIENT_ACCESS_KEY": "123",
                            "AWS_UPLOAD_BUCKET_NAME": "test-bucket"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "create_dataset")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "import_record_id": 3,
                                "import_record_name": dataset_name

                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error",
                                "message": "name already in use"
                            }
                        );
                    }
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_list_controller(){
        var fake_datasets_payload = {
            "status": "success",
            "datasets": [
                {
                    name: "DC 2013 data",
                    last_modified: (new Date()).getTime(),
                    last_modified_by: "john.s@buildingenergy.com",
                    number_of_buildings: 89
                },
                {
                    name: "DC 2014 data",
                    last_modified: (new Date()).getTime() -
                        1550 * 60 * 60 * 1000,
                    last_modified_by: "gavin.m@buildingenergy.com",
                    number_of_buildings: 70
                }
            ]
        };
        edit_ctrl = controller('dataset_list_controller', {
            $scope: dataset_list_ctrl_scope,
            datasets_payload: fake_datasets_payload
        });
    }

    /*
     * Test scenarios
     */

    it("should have a dataset_payload", function() {
        // arrange
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();

        // assertions
        expect(dataset_list_ctrl_scope.datasets.length).toEqual(2);
    });

    it("should disable the mapping button if the dataset has no" +
        " Assessor files", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Portfolio Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_assessor_files(dataset);

        // assertions
        expect(disabled).toEqual(true);
    });

    it("should enable the mapping button if the dataset has at least one" +
        " Assessor file", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_assessor_files(dataset);

        // assertions
        expect(disabled).toEqual(false);
    });
    it("should disable the matching button if the dataset has no" +
        " Portfolio Manger files", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Assessed Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_pm_files(dataset);

        // assertions
        expect(disabled).toEqual(true);
    });
    it("should enable the matching button if the dataset has at least one" +
        " Portfolio Manger file", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_pm_files(dataset);

        // assertions
        expect(disabled).toEqual(false);
    });
    it("should navigate to the mapping page of the first assessed" +
        " import file when the ``Mapping`` button is clicked", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Assessed Raw",
                    id: 3
                },
                {
                    source_type: "Assessed Raw",
                    id: 5
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        dataset_list_ctrl_scope.goto_mapping(dataset);

        // assertions
        expect(location.path()).toBe('/data/mapping/3');
    });
    it("should navigate to the matching page of the first Portfolio Manager" +
        " import file when the ``Matching`` button is clicked", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw",
                    id: 3
                },
                {
                    source_type: "Portfolio Raw",
                    id: 5
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        dataset_list_ctrl_scope.goto_matching(dataset);

        // assertions
        expect(location.path()).toBe('/data/matching/3');
    });

   
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: delete_modal_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, building_services, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        // mock the export_service factory methods used in the controller
        // and return their promises
        mock_building_services = building_services;
        spyOn(mock_building_services, "delete_buildings")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_delete_modal_controller(){
        ctrl = ctrl('delete_modal_controller', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            search: { 
                selected_buildings: [1,2],
                filter_params: {},
                select_all_checkbox: false,
                order_by: "",
                sort_reverse: false,
                number_matching_search: 1000
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should start at the delete page", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.delete_state).toEqual("delete"); 
    });
    it("should save the search paramaters",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.delete_payload;
        expect(b.selected_buildings).toEqual([1,2]);
        expect(b.filter_params).toEqual({});
        expect(b.order_by).toEqual("");
        expect(b.sort_reverse).toEqual(false);
        expect(b.select_all_checkbox).toEqual(false);
    });
    it("should delete when the delete button is clicked",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.delete_buildings();

        // assertions
        expect(ctrl_scope.delete_state).toEqual("prepare");
        expect(mock_building_services.delete_buildings).toHaveBeenCalled();
    });
    it("should show the success page when the delete is finished",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.delete_buildings();
        ctrl_scope.$digest();

        // assertions
        expect(mock_building_services.delete_buildings).toHaveBeenCalled();
        expect(ctrl_scope.delete_state).toEqual("success");
    });
    it("should show the number of buildings to be deleted",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        var number_to_delete = ctrl_scope.number_to_delete();

        // assertions
        expect(number_to_delete).toEqual(2);
    });
    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.close();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.cancel();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

  
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myDistrictApp = angular.module('myDistrictApp', ['district']);

describe("The district filter", function() {
    beforeEach(module('myDistrictApp'));
    it('replaces `district` with `County/District/Ward/Borough`',
        inject(function(districtFilter) {
            // normal cases
            expect(districtFilter('district')).toBe('County/District/Ward/Borough');
            expect(districtFilter('District')).toBe('County/District/Ward/Borough');
            expect(districtFilter('DistRict')).toBe('County/District/Ward/Borough');
            expect(districtFilter('DISTRICT')).toBe('County/District/Ward/Borough');
            expect(districtFilter('aDISTRICT')).toBe('aDISTRICT');
            expect(districtFilter('')).toBe('');
            expect(districtFilter('district ')).toBe('district ');
            expect(districtFilter('ok')).toBe('ok');
            expect(districtFilter(undefined)).toBe(undefined);
            expect(districtFilter(null)).toBe(null);
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: edit_label_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, modal_state;
    var edit_ctrl, edit_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label;
    var return_labels = [
        {
            "name": 'compliant',
            "color": 'green',
            "id": 1
        },
        {
            "name": "new label",
            "color": "blue",
            "id": 2
        }
    ];

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, urls, $q, project_service) {
        controller = $controller;
        scope = $rootScope;
        edit_ctrl_scope = $rootScope.$new();
        modal_state = "";

        // mock the project_service factory methods used in the controller
        // and return their promises
        mock_project_service = project_service;
        spyOn(mock_project_service, "get_labels")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success", "labels": return_labels});
            }
        );
        spyOn(mock_project_service, "add_label")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
        spyOn(mock_project_service, "delete_label")
            .andCallFake(function(label){
                deleted_label = label;
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
        spyOn(mock_project_service, "update_label")
            .andCallFake(function(label){
                updated_label = label;
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );

    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_edit_modal_controller(){
        var labels = [
            {
                "name": 'compliant',
                "color": 'green',
                "id": 1
            }
        ];

        edit_ctrl = controller('edit_label_modal_ctrl', {
            $scope: edit_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            labels: labels
        });
    }

    /*
     * Test scenarios
     */

    it("should initialize the default label", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.$digest();
        edit_ctrl_scope.initialize_label_modal();

        // assertions
        expect(edit_ctrl_scope.label_modal.color).toBe("gray");
        expect(edit_ctrl_scope.label_modal.label).toBe("default");
        expect(edit_ctrl_scope.label_modal.name).toBe("");
        expect(edit_ctrl_scope.modal.label.state).toBe("create");
    });

    it("should get the labels available to an organization", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.add_label({});  // calls private get_labels
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.labels.length).toBe(2);
    });

    it("should add a label in the user's organization", function() {
        // arrange
        create_edit_modal_controller();
        var label_to_add = {
            color: "blue",
            label: "primary",
            name: "new label"
        };

        // act
        edit_ctrl_scope.add_label(label_to_add);
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.labels.length).toBe(2);
        expect(edit_ctrl_scope.labels[1].color).toBe("blue");
        expect(edit_ctrl_scope.labels[1].name).toBe("new label");
    });

    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.close();
        edit_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.cancel();
        edit_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

    it("sets the label_modal to the label when its edit button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.edit_label(label);
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.label_modal.color).toBe(label.color);
        expect(edit_ctrl_scope.label_modal.name).toBe(label.name);
        expect(edit_ctrl_scope.modal.label.state).toBe("edit");

        // assert that edit_ctrl_scope.label_modal is a copy and not a reference to label
        edit_ctrl_scope.label_modal.name = "random name here";
        expect(edit_ctrl_scope.label_modal.name).not.toBe(label.name);
    });
    
    it("deletes the appropriate label when the delete button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.delete_label(label);
        edit_ctrl_scope.$digest();

        // assertions
        expect(deleted_label).toBe(label);
    });

    it("updates the appropriate label when the update label button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.edit_label(label);
        edit_ctrl_scope.$digest();
        edit_ctrl_scope.label_modal.name = "harry";
        edit_ctrl_scope.label_modal.color = "blue";
        edit_ctrl_scope.update_label(edit_ctrl_scope.label_modal);
        edit_ctrl_scope.$digest();

        // assertions
        expect(mock_project_service.update_label).toHaveBeenCalledWith(edit_ctrl_scope.label_modal);
        expect(updated_label).toBe(edit_ctrl_scope.label_modal);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: export_modal_controller", function(){
    // globals set up and used in each test scenario
    var mock_export_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, export_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        // mock the export_service factory methods used in the controller
        // and return their promises
        mock_export_service = export_service;
        spyOn(mock_export_service, "export_buildings")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success", "export_id": "123456"});
            }
        );
        spyOn(mock_export_service, "export_buildings_progress")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({
                    "status": "success",
                    "buildings_processed": 1000
                });
            }
        );
            spyOn(mock_export_service, "export_buildings_download")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({
                    "status": "success",
                    "url": "#"
                });
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_export_modal_controller(){
        ctrl = ctrl('export_modal_controller', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            search: { 
                selected_buildings: [],
                filter_params: {},
                select_all_checkbox: false,
                order_by: "",
                sort_reverse: false,
                number_matching_search: 1000
            },
            selected_fields: ['tax_lot_id', 'postal_code'],
            project: {
                id: 11
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should start at the create page", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.export_state).toEqual("create"); 
    });
    it("should start with an empty name and default file type of 'xls'",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.building_export;
        expect(b.export_name).toEqual("");
        expect(b.export_type).toEqual("xls");
    });
    it("should save the search paramaters",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.building_export;
        expect(b.selected_buildings).toEqual([]);
        expect(b.filter_params).toEqual({});
        expect(b.order_by).toEqual("");
        expect(b.sort_reverse).toEqual(false);
        expect(b.select_all_checkbox).toEqual(false);
        expect(b.selected_fields).toEqual(['tax_lot_id', 'postal_code']);
        expect(b.project_id).toEqual(11);
        expect(ctrl_scope.progress_denominator).toEqual(0);
    });
    it("should kick off the export process when the export button is clicked",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.export_buildings();

        // assertions
        expect(ctrl_scope.export_state).toEqual("prepare");
        expect(mock_export_service.export_buildings).toHaveBeenCalled();
    });
    it("should show the success page when the data is ready",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.show_success_page("123");
        ctrl_scope.$digest();

        // assertions
        expect(mock_export_service.export_buildings_download).toHaveBeenCalled();
        expect(ctrl_scope.export_state).toEqual("success");
    });
    it("should update the progress bar",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.monitor_progress("123", 1000);
        ctrl_scope.$digest();
        timeout.flush();

        // assertions
        expect(mock_export_service.export_buildings_progress).toHaveBeenCalled();
        expect(ctrl_scope.progress_percentage).toEqual(100);
        expect(ctrl_scope.progress_numerator).toEqual(1000);
        expect(ctrl_scope.progress_denominator).toEqual(1000);
    });
    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.close();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.cancel();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

  
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
/**
 * tests fromNow angularjs filter wrapper of moment.js
 * uses epoch milliseconds as that is what the back-end returns
 */

// create dummy angularJS app to attach filter(s)
var myfromNowFilterApp = angular.module('myfromNowFilterApp', ['fromNow']);

describe("The fromNow filter", function() {
    beforeEach(module('myfromNowFilterApp'));

    it('shows the present time as "a few seconds ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('a few seconds ago');
        })
    );

    it('shows 5 minutes ago as "5 minutes ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 5  * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('5 minutes ago');
        })
    );

    it('shows 4 hours ago as "4 hours ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 4 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('4 hours ago');
        })
    );

    it('shows 24 hours ago as "a day ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 24 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('a day ago');
        })
    );

    it('shows 36 hours ago as "2 days ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 36 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('2 days ago');
        })
    );

    it('shows 1550 hours ago as "2 months ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 1550 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('2 months ago');
        })
    );

    it('defaults to "a few seconds ago" for undefined values',
        inject(function(fromNowFilter) {
            // arrange

            // act

            // assert
            expect(fromNowFilter(undefined)).toBe('a few seconds ago');
            expect(fromNowFilter(null)).toBe('a few seconds ago');
            expect(fromNowFilter("some text")).toBe('a few seconds ago');
            expect(fromNowFilter({})).toBe('a few seconds ago');
            expect(fromNowFilter({time: "not time"})).toBe('a few seconds ago');
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myignoremapApp = angular.module('myignoremapApp', ['ignoremap']);

describe("The ignoremap filter", function() {
    beforeEach(module('myignoremapApp'));
    it('replaces `""` with `------ Ignore Row ------`',
        inject(function(ignoremapFilter) {
            // normal cases
            expect(ignoremapFilter('')).toBe('------ Ignore Row ------');
            expect(ignoremapFilter(' ')).toBe(' ');
            expect(ignoremapFilter('aignoremap')).toBe('aignoremap');
            expect(ignoremapFilter('ignoremap ')).toBe('ignoremap ');
            expect(ignoremapFilter('ok')).toBe('ok');
            expect(ignoremapFilter(undefined)).toBe('------ Ignore Row ------');
            expect(ignoremapFilter(null)).toBe('------ Ignore Row ------');
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: mapping_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, modal_state;
    var mapping_ctrl, mapping_ctrl_scope, modalInstance, labels;
    var timeout, mock_user_service, mock_search_service;



    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, building_services, $timeout, user_service, search_service) {
            controller = $controller;
            scope = $rootScope;
            mapping_ctrl_scope = $rootScope.$new();
            modal_state = "";
            timeout = $timeout;
            mock_user_service = user_service;
            mock_search_service = search_service;

            spyOn(mock_user_service, 'set_default_columns')
                .andCallFake(function(mapped_columns){
                    return undefined;
                });
            spyOn(mock_search_service, 'search_buildings')
                .andCallFake(function(){
                    return [1,2,3];
                });
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_mapping_controller(){
        var mock_datasets = [
            {
                name: "DC 2013 data",
                last_modified: (new Date()).getTime(),
                last_modified_by: "john.s@buildingenergy.com",
                number_of_buildings: 89,
                id: 1
            },
            {
                name: "DC 2014 data",
                last_modified: (new Date()).getTime() -
                    1550 * 60 * 60 * 1000,
                last_modified_by: "gavin.m@buildingenergy.com",
                number_of_buildings: 70,
                id: 2
            }
        ];
        var fake_import_file_payload = {
            "status": "success",
            "import_file": {
                        file_name: "assessor_fun.csv",
                        last_modified: (new Date()).getTime(),
                        last_modified_by: "john.s@buildingenergy.com",
                        source_type: 'AssessorRaw',
                        dataset: mock_datasets[0],
                        id: 1
                    }
        };

        var mock_be_building_columns = [
            'pm_property_id',
            'property_name',
            'property_notes',
            'tax_lot_id',
            'gross_floor_area',
            'My New non-BEDES field'
        ];

        var mock_be_building_types = {
            'gross_floor_area': {
                unit_type: 'float',
                schema: 'BEDES'
            }
        };

        var mock_mapping_suggestions_payload = {
            'status': 'success',
            'suggested_column_mappings': {
                // key(django model attribute): [csv_header1, ... csv_header3]
                'property id': ['pm_property_id', 89],
                'lot number': ['tax_lot_id' , 54]
            },
            "building_columns": mock_be_building_columns,
            "building_column_types": mock_be_building_types
        };

        var mock_raw_column_names = [
            'property id',
            'property_name',
            'property_notes',
            'lot number',
            'lot size'
        ];

        var mock_first_five_rows = [];
        for (var i=0; i < 4; i++) {
            mock_first_five_rows.push({
                'property id': i,
                'property_name': 'Property ' + i,
                'property_notes': 'Nup.',
                'lot number': i * 2,
                'lot size': 454 * i
            });
        }

        mock_first_five_rows.push({
            'property id': '121L',
            'property_name': 'Inconsistent Property',
            'property_notes': 'N/A',
            'lot number': 'N/A',
            'lot size': 45
        });

        var raw_columns_payload = {
            "status": "success",
            "raw_columns": mock_raw_column_names
        };
        var first_five_rows_payload = {
            "status": "success",
            "first_five_rows": mock_first_five_rows
        };
        mapping_ctrl = controller('mapping_controller', {
            $scope: mapping_ctrl_scope,
            import_file_payload: fake_import_file_payload,
            suggested_mappings_payload: mock_mapping_suggestions_payload,
            raw_columns_payload: raw_columns_payload,
            first_five_rows_payload: first_five_rows_payload,
            all_columns: {fields: []},
            building_services: mock_building_services,
            $timeout: timeout
        });
    }

    /*
     * Test scenarios
     */

    it("should have a import_file_payload", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        expect(mapping_ctrl_scope.import_file.dataset.name).toBe("DC 2013 data");
    });

    it("should show suggested mappings and confidence", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        var raw_columns = mapping_ctrl_scope.raw_columns;
        var first_column = raw_columns[0];

        expect(first_column.confidence).toBe(89);
        expect(first_column.suggestion).toBe("Pm Property Id");
    });

    it("should show 'low', 'med', 'high', or '' confidence text", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        var raw_columns = mapping_ctrl_scope.raw_columns;
        var first_column = raw_columns[0];
        expect(first_column.confidence_text()).toBe("high");
        first_column.confidence = 70;
        expect(first_column.confidence_text()).toBe("med");
        first_column.confidence = 35;
        expect(first_column.confidence_text()).toBe("low");
        delete(first_column.confidence);
        expect(first_column.confidence_text()).toBe("");
    });

    it("should validate initial data", function() {
        create_mapping_controller();
        // act
        mapping_ctrl_scope.$digest();
        // assertions
        angular.forEach(mapping_ctrl_scope.raw_columns, function(rc) {
            if (rc.suggestion !== '' && typeof(rc.suggestion) !== "undefined") {
                expect(rc.validity).toBe('valid');
            }
        });
    });

    it("should invalidate bad suggestions", function() {
        // Simulate a change on the tcm, make it fail.
        create_mapping_controller();
        // act
        mapping_ctrl_scope.$digest();
        // assertions
        //
        // We change the suggested mapping for the "property name" column
        // to "gross_floor_area" (which validates as float) to
        // purposesly cause a failing change.
        mapping_ctrl_scope.raw_columns[1].suggestion = 'gross_floor_area';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[1]);
        expect(mapping_ctrl_scope.raw_columns[1].validity).toBe('invalid');

    });

    it("should set td_class appropriately", function() {
        var tcm;

        create_mapping_controller();

        mapping_ctrl_scope.$digest();
        tcm = mapping_ctrl_scope.raw_columns[0];
        var good_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[0]
        );

        // First raw column is mapped up as pm_property_id <-> property_id
        // Any kind of string will be valid.
        expect(good_val).toBe('success');

        // Now set it to one that expects float values.
        // Only one of these will *not* validate.
        mapping_ctrl_scope.raw_columns[0].suggestion = 'gross_floor_area';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[0]);

        tcm = mapping_ctrl_scope.raw_columns[0];
        var warning_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[4]
        );

        expect(warning_val).toBe('warning');

        // We don't want the warning style to be applied to neighboring cells
        // in the same row. Check that the cell next to our invalid one is
        // unstyled (undefined).
        tcm = mapping_ctrl_scope.raw_columns[0];
        var adjacent_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[3]
        );

        expect(adjacent_val).toBe(undefined);

        // Now we're saying the suggestion is to not map.
        // Check that we don't have any class set for this row now.
        mapping_ctrl_scope.raw_columns[0].suggestion = '';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[0]);

        tcm = mapping_ctrl_scope.raw_columns[0];
        var blank_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[4]
        );

        expect(blank_val).toBe('');

    });

    it("should detect duplicates of mapped rows", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // raw_columns[0] and raw_columns[3] should be the only mapped rows
        var column = mapping_ctrl_scope.raw_columns[3];
        var test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

        // Set the property_name tcm's suggestion to the same as
        // the property_id tcm (raw_columns[0])
        column.suggestion = 'Pm Property Id';

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(true);

        // Since we mark both duplicates as duplicates, the other
        // TCM that has the 'pm_property_id' suggestion should also get
        // 'danger' as its duplicate class.
        var other_dup = mapping_ctrl_scope.is_tcm_duplicate(
            mapping_ctrl_scope.raw_columns[0]
        );
        expect(other_dup).toBe(true);

        // Shows that mapped_row is the sole determinant of
        // column ignoring
        column.mapped_row = false;

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

    });

    it("should ignore duplicates of unmapped rows", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // raw_columns[0] and raw_columns[3] should be the only mapped rows
        var column = mapping_ctrl_scope.raw_columns[1];
        var test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

        // Set the property_name tcm's suggestion to the same as
        // the property_id tcm (raw_columns[0])
        column.suggestion = 'Pm Property Id';

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);
    });

    it("should get mapped buildings", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        mapping_ctrl_scope.get_mapped_buildings();
        mapping_ctrl_scope.$digest();

        // assertions
        expect(mapping_ctrl_scope.search.search_buildings).toHaveBeenCalled();
        expect(mock_user_service.set_default_columns).toHaveBeenCalled();
    });

    it("should enbale the 'show & review buildings' button if duplicates are" +
        " not present", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        for (var i = mapping_ctrl_scope.raw_columns.length - 1; i >= 0; i--) {
            mapping_ctrl_scope.change(mapping_ctrl_scope.raw_columns[i]);
        }
        var duplicates_found = mapping_ctrl_scope.duplicates_present();

        // assertions
        expect(duplicates_found).toBe(false);
    });

    it("should disable the 'show & review buildings' button if duplicates " +
        "are present", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        for (var i = mapping_ctrl_scope.raw_columns.length - 1; i >= 0; i--) {
            mapping_ctrl_scope.raw_columns[i].suggestion = "pm_property_id";
            mapping_ctrl_scope.change(mapping_ctrl_scope.raw_columns[i]);
        }
        var duplicates_found = mapping_ctrl_scope.duplicates_present();

        // assertions
        expect(duplicates_found).toBe(true);
    });

    it("should get mappings in an API friendly way", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();
        var mappings = mapping_ctrl_scope.get_mappings();
        expect(mappings.length).toBe(5);
        expect(mappings[0]).toEqual(['Pm Property Id', 'property id']);
        // everything in between is empty since we we're using only
        // suggested mappings.
        expect(mappings[3]).toEqual(['Tax Lot Id', 'lot number']);
    });

    it("should show the 'STEP 2' tab when reviewing mappings", function() {
        // arrange
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // act
        var mappings = mapping_ctrl_scope.get_mapped_buildings();

        // assert
        expect(mapping_ctrl_scope.tabs).toEqual({
            'one_active': false,
            'two_active': true,
            'three_active': false
        });
    });

    it("should show BEDES fields with a checkbox", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assert
        expect(mapping_ctrl_scope.is_suggestion_BEDES('gross_floor_area')).toBe(true);
        expect(mapping_ctrl_scope.is_suggestion_BEDES('Gross Floor Area')).toBe(true);
        expect(mapping_ctrl_scope.is_suggestion_BEDES('My New non-BEDES field')).toBe(false);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: matching_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, delete_called;
    var matching_ctrl, matching_ctrl_scope, modalInstance, labels;


    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, building_services) {
            controller = $controller;
            scope = $rootScope;
            matching_ctrl_scope = $rootScope.$new();

            mock_building_services = building_services;
            spyOn(mock_building_services, "get_PM_filter_by_counts")
                .andCallFake(function(import_file){
                    return $q.when(
                        {
                            "status": "success",
                            "unmatched": 5,
                            "matched": 10
                        }
                    );
                }
            );
            spyOn(mock_building_services, "save_match")
                .andCallFake(function(b1, b2, create){
                    return $q.when(
                        {
                            "status": "success",
                            "child_id": 3
                        }
                    );
                }
            );
            spyOn(mock_building_services, "search_matching_buildings")
                .andCallFake(function(q, number_per_page, current_page, order_by, sort_reverse, 
                                        filter_params, file_id ){
                    
                    return $q.when(
                        {
                            status: "success",
                            number_returned: buildings_payload.length,
                            number_matching_search: buildings_payload.length,
                            buildings: [
                                {
                                    pm_property_id: 1
                                },
                                {
                                    pm_property_id: 2
                                }
                                ,
                                {
                                    pm_property_id: 3
                                }
                            ];
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_detail_controller(){
        var buildings_payload = {
            buildings: [
                {
                    pm_property_id: 1,
                    tax_lot_id: null,
                    custom_id_1: 2,
                    gross_floor_area: 111,
                    matched: true,
                    id: 1,
                    children: [3],
                    coparent: {
                        pm_property_id: null,
                        tax_lot_id: 2,
                        custom_id_1: null,
                        gross_floor_area: 111,
                        id: 2,
                        children: [3]
                    }
                }
            ],
            number_matching_search: 1,
            number_returned: 1
        };
        matching_ctrl = controller('matching_controller', {
            $scope: matching_ctrl_scope,
            buildings_payload: buildings_payload,
            all_columns: {
                fields: [{sort_column: 'pm_property_id'}]
            },
            default_columns: {
                columns: ['pm_property_id']
            },
            import_file_payload: {
                import_file: {
                    id: 1,
                    dataset: {
                        importfiles: [
                            {
                                id: 1,
                                name: "file_1.csv"
                            },
                            {
                                id: 2,
                                name: "file_2.csv"
                            }
                        ]
                    }
                }
            }
        });
    }



    /*
     * Test scenarios
     */

    it("should have a buildings payload with potential matches", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();
        var b = matching_ctrl_scope.buildings[0];

        // assertions
        expect(matching_ctrl_scope.buildings.length).toBe(1);
        expect(b.coparent.children).toEqual(b.children);
    });

    it("should provide to the view scope variables representing the number matched and the number of unmatched buildings", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();

        // assertions
        expect(matching_ctrl_scope.matched_buildings).toEqual(10);
        expect(matching_ctrl_scope.unmatched_buildings).toEqual(15);
    });

    it("should jump back to the matching list when the 'Back to list' button" +
        " is clicked", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.show_building_list = false;
        matching_ctrl_scope.back_to_list();

        // assertions
        expect(matching_ctrl_scope.show_building_list).toEqual(true);
    });

    it("should present an initial state with the matching buildings table",
        function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();

        // assertions
        expect(matching_ctrl_scope.columns).toEqual([{ sort_column : 'pm_property_id' }]);
        expect(matching_ctrl_scope.number_matching_search).toEqual(1);
        expect(matching_ctrl_scope.number_returned).toEqual(1);
        expect(matching_ctrl_scope.num_pages).toEqual(1);
        expect(mock_building_services.get_PM_filter_by_counts).toHaveBeenCalled();
    });
    it("should match a building in the matching list", function() {
        // arrange
        create_dataset_detail_controller();
        var b1, b2;
        b2 = {
            id: 2,
            children: [],
            matched: false
        };
        b1 = {
            id: 1,
            children: [],
            matched: true,
            coparent: b2
        };

        // act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.toggle_match(b1);
        matching_ctrl_scope.$digest();

        // assertions
        expect(mock_building_services.save_match).toHaveBeenCalledWith(b1.id, b2.id, true);
        expect(mock_building_services.get_PM_filter_by_counts).toHaveBeenCalled();
        expect(b1.children[0]).toEqual(3);
    });
    it("Should update the list of buildings correctly when 'Show Matched' is selected", 
        function() {
        //arrange
        create_dataset_detail_controller();

        //act
        controller.update_show_filter(controller.SHOW_MATCHED)

        //assertions
        expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(1);
        expect(matching_ctrl_scope.number_returned).toEqual(1);
    });
    it("Should update the list of buildings correctly when 'Show Unmatched' is selected", 
        function() {
        //arrange
        create_dataset_detail_controller();

        //act
        controller.update_show_filter(controller.SHOW_UNMATCHED)

        //assertions
        expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(2);
        expect(matching_ctrl_scope.number_returned).toEqual(2);
    });
    it("Should update the list of buildings correctly when 'Show All' is selected", 
        function() {
        //arrange
        create_dataset_detail_controller();

        //act
        controller.update_show_filter(controller.SHOW_ALL)

        //assertions
        expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(3);
        expect(matching_ctrl_scope.number_returned).toEqual(3);
    });



});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: members_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller;
    var ctrl, ctrl_scope, modalInstance;
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          $q,
          organization_service) {
            ctrl = $controller;
            scope = $rootScope;
            ctrl_scope = $rootScope.$new();

            mock_organization_service = organization_service;
            
            spyOn(mock_organization_service, "remove_user")
                .andCallFake(function(user_id, org_id){
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
            spyOn(mock_organization_service, "get_organization_users")
                .andCallFake(function(org){
                    return $q.when(
                        {
                            "status": "success",
                            "users": [{id:1, first_name:"Bob", last_name:"D"}]
                        }
                    );
                }
            );
            spyOn(mock_organization_service, "update_role")
                .andCallFake(function(org_id, user_id, role){
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_members_controller(){
        ctrl = ctrl('members_controller', {
            $scope: ctrl_scope,
            users_payload: {users: [
                {first_name: 'J', last_name: 'S'},
                {first_name: undefined, last_name: null}
            ]},
            organization_payload: {
                organization: {name: 'my org', id: 4}
            },
            auth_payload: {
                auth: {
                    'can_invite_member': true,
                    'can_remove_member': true
                }
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should accepts its payload", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.org).toEqual({name : 'my org', id : 4});
        expect(ctrl_scope.users[0].name).toEqual("J S");
        expect(ctrl_scope.users[1].name).toEqual(" ");
    });
    it("clicking remove should remove a user", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.remove_member({user_id: 2});

        // assertions
        expect(mock_organization_service.remove_user)
            .toHaveBeenCalledWith(2, 4);
        
        ctrl_scope.$digest();
        expect(mock_organization_service.get_organization_users)
            .toHaveBeenCalledWith({org_id: 4});
    });
    it("clicking a new role should update the user's role", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.update_role({user_id: 2, role: "viewer"});

        // assertions
        expect(mock_organization_service.update_role)
            .toHaveBeenCalledWith(2, 4, 'viewer');
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: new_member_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_user_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, user_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        mock_user_service = user_service;
        spyOn(mock_user_service, "add")
            .andCallFake(function(user){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_new_member_controller(){
        ctrl = ctrl('new_member_modal_ctrl', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            organization: {organization_id: 1}
        });
    }

    /*
     * Test scenarios
     */

    it("should set the default role to 'member'", function() {
        // arrange
        create_new_member_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.user.role.value).toEqual("member"); 
    });
    it("should call the user service to add a new user to the org",
        function() {
        // arrange
        create_new_member_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.user.first_name = "JB";
        ctrl_scope.user.last_name = "Smooth";
        ctrl_scope.user.email = "jb.smooth@be.com";
        ctrl_scope.submit_form(true);

        // assertions
        expect(mock_user_service.add)
            .toHaveBeenCalledWith({
                first_name: "JB",
                last_name: "Smooth",
                email: "jb.smooth@be.com",
                role: ctrl_scope.roles[0],
                organization: {
                    organization_id: 1
                }
            });
    });
    
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
/**
 * run_jasmine.js: runs the jasmine JS test runner
 */
(function() {
    var jasmineEnv = jasmine.getEnv();
    jasmineEnv.updateInterval = 1000;

    var htmlReporter = new jasmine.HtmlReporter();

    jasmineEnv.addReporter(htmlReporter);

    jasmineEnv.specFilter = function(spec) {
        return htmlReporter.specFilter(spec);
    };

    var currentWindowOnload = window.onload;

    window.onload = function() {
        if (currentWindowOnload) {
        currentWindowOnload();
        }
        execJasmine();
    };
    function execJasmine() {
        jasmineEnv.execute();
    }
})();

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var searchTestApp = angular.module(
    'searchTestApp', ['BE.seed.service.search']
);

describe("The search_service service", function() {
    var saas, httpBackend, test_url;

    beforeEach(function () {
        module("searchTestApp");
        inject(function (search_service, $httpBackend) {
            saas = search_service;
            httpBackend = $httpBackend;
            httpBackend.when("POST", test_url).respond("ok");
        });

    });

    /**
     * sanitize_params tests
     */
    it('removes null and undefined values from filter_params', function () {
        // arrange
        saas.filter_params = {
          'National Median Site Energy Use__gte': 4,
          'National Median Site Energy Use__lte': null,
          'National Median Source EUI__gte': undefined
        };

        // act
        saas.sanitize_params();

        // assert
        expect(saas.filter_params).toEqual({'National Median Site Energy Use__gte': 4});
    });

    /**
     * search_buildings tests
     */
    it('has sane defaults', function() {
        expect(saas.url).toEqual("");
        expect(saas.error_message).toEqual("");
        expect(saas.alert).toEqual(false);
        expect(saas.buildings).toEqual([]);
        expect(saas.current_page).toEqual(1);
        expect(saas.number_per_page).toEqual(10);
        expect(saas.order_by).toEqual("");
        expect(saas.sort_column).toEqual("tax_lot_id");
        expect(saas.sort_reverse).toEqual(false);
        expect(saas.select_all_checkbox).toEqual(false);
        expect(saas.prev_page_disabled).toEqual(true);
        expect(saas.next_page_disabled).toEqual(true);
        expect(saas.num_pages).toEqual(0);
        expect(saas.query).toEqual("");
        expect(saas.showing).toEqual({
            'start': 1,
            'end': 0
        });
    });

    it('search_buildings uses the argument `query`', function() {
        saas.query = "hotels";
        saas.search_buildings("not hotels");

        expect(saas.query).toEqual("not hotels");
    });
    it('filter search resets the current page', function() {
        // arrange
        saas.current_page = 22;
        spyOn(saas, 'search_buildings');

        // act
        saas.filter_search();

        // assert
        expect(saas.current_page).toEqual(1);
        expect(saas.search_buildings).toHaveBeenCalled();
    });

    it('search_buildings function will default to its query if' +
        ' no query is passed as an argument', function() {
        saas.query = "hotels";
        saas.search_buildings();

        expect(saas.query).toEqual("hotels");
    });

    it('search_buildings hits the set url', function() {
        test_url = "/my-search-url";
        saas.url = test_url;
        saas.search_buildings();
        httpBackend.expectPOST(test_url);
        httpBackend.flush();
    });

    it('search_buildings POSTs the query data as `q`', function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.query = "hotel chains";
        saas.number_per_page = 25;
        saas.order_by = "gross_floor_area";
        saas.sort_reverse = true;
        saas.filter_params = {
            project: '2012 data'
        };

        // act
        saas.search_buildings();

        // assert
        httpBackend.expectPOST(test_url,
            {
                "q": "hotel chains",
                "number_per_page": 25,
                "order_by": "gross_floor_area",
                "sort_reverse": true,
                "filter_params": {
                    "project": "2012 data"
                },
                "page":1
            }
        ).respond(201, "");
        httpBackend.flush();
    });
    it('search_buildings updates its `buildings` model', function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.query = "hotel chains";
        saas.number_per_page = 25;
        saas.order_by = "gross_floor_area";
        saas.sort_reverse = true;
        saas.filter_params = {
            project: '2012 data'
        };

        // act
        saas.search_buildings();

        // assert
        httpBackend.expectPOST(test_url,
            {
                "q": "hotel chains",
                "number_per_page": 25,
                "order_by": "gross_floor_area",
                "sort_reverse": true,
                "filter_params": {
                    "project": "2012 data"
                },
                "page":1
            }
        ).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        expect(saas.buildings).toEqual([
            {
                name: "one",
                id: 1,
                checked: false
            },
            {
                name: "two",
                id: 2,
                checked: false
            }
        ]);
    });
    it('should clear the error and alert after a successful search',
        function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.error_message = "help";
        saas.alert = true;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {
            'buildings': [
                {
                    name: "one",
                    id: 1
                },
                {
                    name: "two",
                    id: 2
                }],
            'number_matching_search': 101
            });
        httpBackend.flush();

        // assert
        expect(saas.alert).toEqual(false);
        expect(saas.error_message).toEqual("");
    });

    /**
     * pagination tests
     */
    it('increments the page when the `next` button is clicked',
        function() {
        // arrange
        saas.num_pages = 1000;
        saas.current_page = 100;
        spyOn(saas, 'search_buildings');
        // act
        saas.next_page();

        // assert
        expect(saas.current_page).toEqual(101);
        expect(saas.search_buildings).toHaveBeenCalled();
        expect(saas.search_buildings.callCount).toEqual(1);

    });
    it('doesn\'t increment past the last page when the `next` button is' +
        ' clicked', function() {
        // arrange
        saas.num_pages = 2;
        saas.current_page = 2;
        spyOn(saas, 'search_buildings');
        // act
        saas.next_page();

        // assert
        expect(saas.current_page).toEqual(2);
        expect(saas.search_buildings).toHaveBeenCalled();
        expect(saas.search_buildings.callCount).toEqual(1);

    });
    it('decrements the page when the `previous` button is clicked',
        function() {
        // arrange
        saas.num_pages = 1000;
        saas.current_page = 100;
        spyOn(saas, 'search_buildings');
        // act
        saas.prev_page();

        // assert
        expect(saas.current_page).toEqual(99);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('does not decrement below the first page when the `previous` button' +
        ' is clicked', function() {
        // arrange
        saas.num_pages = 1;
        saas.current_page = 1;
        spyOn(saas, 'search_buildings');
        // act
        saas.prev_page();

        // assert
        expect(saas.current_page).toEqual(1);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('fetches more or less results per page when a user selects an option' +
        ' from the number per page select',
        function() {
        // arrange
        saas.number_per_page_options_model = 50;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_number_per_page();

        // assert
        expect(saas.number_per_page).toEqual(50);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('updates the number of results displayed text after a successful '+
        'search', function() {
        // standard case
        // page 2 of 3 with 10/page, so should display 11 of 20
        // arrange
        saas.current_page = 2;
        saas.num_pages = 3;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_start_end_paging();

        // assert
        expect(saas.showing.start).toEqual(11);
        expect(saas.showing.end).toEqual(20);
        expect(saas.search_buildings).not.toHaveBeenCalled();
    });
    it('displays the number matching the query if on the last page of results',
        function() {
        // standard case
        // page 3 of 3 with 10/page and 34 results, so should display 21 of 34
        // arrange
        saas.current_page = 3;
        saas.number_matching_search = 34;
        saas.num_pages = 3;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_start_end_paging();

        // assert
        expect(saas.showing.start).toEqual(21);
        expect(saas.showing.end).toEqual(34);
    });
    it('should call update_start_end_paging after a successful search',
        function() {
        // arrange
        spyOn(saas, 'update_start_end_paging');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_start_end_paging).toHaveBeenCalled();
    });
    it('should call update_buttons after a successful search',
        function() {
        // arrange
        spyOn(saas, 'update_buttons');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_buttons).toHaveBeenCalled();
    });
    it('should disable prev paging buttons at the first page',
        function() {
        // arrange
        saas.current_page = 1;
        saas.num_pages = 5;

        // act
        saas.update_buttons();

        // assert
        expect(saas.prev_page_disabled).toEqual(true);
        expect(saas.next_page_disabled).toEqual(false);
    });
    it('should disable next paging buttons at the last page',
        function() {
        // arrange
        saas.current_page = 5;
        saas.num_pages = 5;

        // act
        saas.update_buttons();

        // assert
        expect(saas.prev_page_disabled).toEqual(false);
        expect(saas.next_page_disabled).toEqual(true);
    });
    it('should calculate the number of pages after a successful search',
        function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {
            'buildings': [
                {
                    name: "one",
                    id: 1
                },
                {
                    name: "two",
                    id: 2
                }],
            'number_matching_search': 101
            });
        httpBackend.flush();

        // assert
        expect(saas.number_matching_search).toEqual(101);
        expect(saas.num_pages).toEqual(11);
    });

    /**
     * checkbox logic tests
     */
    it('should select or unselect all the viewed results when the select all' +
        ' checkbox is checked or unchecked', function() {
        // arrange
        saas.selected_buildings = [1,2,3];
        saas.select_all_checkbox = true;
        saas.buildings = [
            {
                checked: false
            },
            {
                checked: true
            }
        ];
        spyOn(saas, 'select_or_deselect_all_buildings').andCallThrough();

        // act
        saas.select_all_changed();

        // assert
        expect(saas.selected_buildings).toEqual([]);
        expect(saas.buildings).toEqual([
                {
                    checked: true
                },
                {
                    checked: true
                }
            ]);
        expect(saas.select_or_deselect_all_buildings).toHaveBeenCalled();
    });
    it('should call select_or_deselect_all_buildings after a search',
        function() {
        // arrange
        spyOn(saas, 'select_or_deselect_all_buildings');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.select_or_deselect_all_buildings).toHaveBeenCalled();
    });
    it('should add a building to the selected list when checked',
        function() {
        // arrange
        var building = {
            id: 5,
            checked: true
        };

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([5]);
    });
    it('should add a building to the selected list when unchecked and the ' +
        'select all checkbox is checked', function() {
        // arrange
        var building = {
            id: 5,
            checked: false
        };
        saas.select_all_checkbox = true;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([5]);
    });
    it('should remove a building to the selected list when unchecked',
        function() {
        // arrange
        var building = {
            id: 5,
            checked: false
        };
        saas.selected_buildings = [5,6,7];
        saas.select_all_checkbox = false;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([6,7]);
    });
    it('should remove a building to the selected list when checked if the ' +
        'select all checkbox is checked', function() {
        // arrange
        var building = {
            id: 5,
            checked: true
        };
        saas.selected_buildings = [5,6,7];
        saas.select_all_checkbox = true;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([6,7]);
    });
    it('should call load_state_from_selected_buildings after a successful ' +
        'search', function() {
        // arrange
        spyOn(saas, 'load_state_from_selected_buildings').andCallThrough();
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.load_state_from_selected_buildings).toHaveBeenCalled();
    });
    it('should call update_results after a successful ' +
        'search', function() {
        // arrange
        var select_or_deselect_all_buildings_time,
            load_state_from_selected_buildings_time;
        spyOn(saas, 'update_results').andCallThrough();
        spyOn(saas, 'select_or_deselect_all_buildings')
            .andCallFake(function() {
                select_or_deselect_all_buildings_time = new Date();
            }
        );
        spyOn(saas, 'load_state_from_selected_buildings')
            .andCallFake(function() {
                // wait for a sec, otherwise both have the same timestamp
                for(var y=0;y<100000;y++){
                    var x = new Date();
                    x = x+y;
                }
                load_state_from_selected_buildings_time = new Date();
            }
        );
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_results).toHaveBeenCalled();
        expect(select_or_deselect_all_buildings_time <
               load_state_from_selected_buildings_time).toBe(true);
    });
    it('check selected buildings successful', function() {
        // arrange
        saas.selected_buildings = [2];
        saas.buildings = [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ];

        // act
        saas.load_state_from_selected_buildings();

        // assert
        expect(saas.buildings[1]).toEqual({
            name: "two",
            id: 2,
            checked: true
        });
    });
    it('should generate columns', function() {
        // arrange
        var all_columns, column_headers, columns;
        all_columns = [
            {
                sort_column: "name"
            },
            {
                sort_column: "id"
            }
        ];
        column_headers = ["id"];
        saas.sort_column = "something else";
        saas.update_results({});
        // act
        columns = saas.generate_columns(
            all_columns, column_headers, saas.column_prototype
        );

        // assert that columns are extended off the prototype and only have
        // "id"
        expect(columns.length).toEqual(1);
        expect(columns[0].sort_column).toEqual("id");
        expect(columns[0].is_unsorted()).toEqual(true);
        saas.sort_column = "id";
        expect(columns[0].is_unsorted()).toEqual(false);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: settings_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller;
    var ctrl, ctrl_scope, modalInstance;
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          $q,
          organization_service) {
            ctrl = $controller;
            scope = $rootScope;
            ctrl_scope = $rootScope.$new();

            mock_organization_service = organization_service;
            
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_settings_controller(){
        ctrl = ctrl('settings_controller', {
            $scope: ctrl_scope,
            all_columns: {fields: [
                {checked: false, title: 'PM Property ID', sort_column: 'pm_property_id'},
                {checked: false, title: 'G', sort_column: 'g'},
                {checked: false, title: "Gross Floor Area", sort_column: 'gross_floor_area'}
            ]},
            organization_payload: {
                organization: {name: 'my org', id: 4}
            },
            query_threshold_payload: {
                query_threshold: 10
            },
            shared_fields_payload: {
                shared_fields: [
                    {
                        title: "PM Property Id",
                        sort_column: "pm_property_id"
                    }
                ],
                public_fields: [
                {
                    title: "Gross Floor Area",
                    sort_column: "gross_floor_area"
                }]
            },
            auth_payload: {
                auth: {
                    'is_owner': true,
                    'is_parent_org_owner': false
                }
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should accepts its payload", function() {
        // arrange
        create_settings_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.org).toEqual({
            name : 'my org',
            id : 4,
            query_threshold: 10
        });
        expect(ctrl_scope.fields[0].checked).toEqual(true);
        expect(ctrl_scope.fields[1].checked).toEqual(false);
        expect(ctrl_scope.fields[0].title).toEqual('PM Property ID');
    });
    it("should select all", function() {
        // arrange
        create_settings_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.controls.select_all = true;
        ctrl_scope.select_all_clicked();
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.infinite_fields[0].checked).toEqual(true);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myStripFilterApp = angular.module('myStripFilterApp', ['stripImportPrefix']);

describe("The stripImportPrefix filter", function() {
    beforeEach(module('myStripFilterApp'));
    it('Strips out the import prefix from building ids',
        // e.g. remove the 'IMP12-' from the id 'IMP12-1321/123'
        inject(function(stripImportPrefixFilter) {
            // normal cases
            expect(stripImportPrefixFilter('IMP134-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP134555-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP1-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP0-134')).toBe('134');
            // deals with `-`
            expect(stripImportPrefixFilter('IMP134-abc-dev')).toBe('abc-dev');
            // deals with `/`
            expect(stripImportPrefixFilter('IMP134-00/11')).toBe('00/11');
            // only strips first prefix
            expect(stripImportPrefixFilter('IMP134-IMP134-123')).toBe('IMP134-123');
        })
    );
    it("Does not strip out anything if there is not a prefix",
        inject(function(stripImportPrefixFilter) {
            // normal cases
            expect(stripImportPrefixFilter('123-123')).toBe('123-123');
            expect(stripImportPrefixFilter('0123/123')).toBe('0123/123');
        })
    );
    it("Is case sensitive to the import prefix",
        inject(function(stripImportPrefixFilter) {
            expect(stripImportPrefixFilter('imp123-abc')).toBe('imp123-abc');
            expect(stripImportPrefixFilter('iMp123-abc')).toBe('iMp123-abc');
            expect(stripImportPrefixFilter('iMP123-abc')).toBe('iMP123-abc');
        })
    );
    it("Handles undefined or null inputs",
        inject(function(stripImportPrefixFilter) {
            expect(stripImportPrefixFilter(undefined)).toBe(undefined);
            expect(stripImportPrefixFilter(null)).toBe(null);
        })
    );
    it("Only strips out the prefix if it has at least one digit and a hyphen",
        inject(function(stripImportPrefixFilter) {
            // must have the 'IMP' folowed by a digit then a hyphen
            expect(stripImportPrefixFilter('IMP-123')).toBe('IMP-123');
            expect(stripImportPrefixFilter('IMP1123')).toBe('IMP1123');
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myTitleCaseApp = angular.module('myTitleCaseApp', ['titleCase']);

describe("The TitleCase filter", function() {
    beforeEach(module('myTitleCaseApp'));
    it('Strips out ``_`` characters from strings and capitalizes the rest',
        inject(function(titleCaseFilter) {
            // normal cases
            expect(titleCaseFilter('super_data')).toBe('Super Data');
            expect(titleCaseFilter('super_data_45')).toBe('Super Data 45');
            expect(titleCaseFilter(undefined)).toBe(undefined);
            expect(titleCaseFilter(null)).toBe(null);
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myTypedNumberFilterApp = angular.module('myTypedNumberFilterApp', ['typedNumber']);

describe("The typedNumber filter", function() {
    beforeEach(module('myTypedNumberFilterApp'));
    it('should parse strings as strings and return them',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('tester')).toBe('tester');
        })
    );
    it('should parse strings as strings and return them, even if they look like numbers',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.1456')).toBe('123.1456');
        })
    );

    it('should parse numbers as numbers and return them',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.00001', 'number')).toBe("123");
        })
    );

    it('should allow the user to set the number of sig digits',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.321', 'number', 'not_year', 1)).toBe("123.3");
        })
    );

    it('should add commas to number greater than 999',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123456789', 'number', 'not_year', 0)).toBe("123,456,789");
        })
    );

    it('should parse year_built and not add commas',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('1946', 'number', 'year_built', 1)).toBe("1946");
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var validationTestApp = angular.module(
    'validationTestApp', ['mappingValidatorService']
);

describe("The MappingValidatorService", function() {
    var mvs;

    beforeEach(function () {
        module("validationTestApp");
        inject(function (mappingValidatorService) {
            mvs = mappingValidatorService;

        });

    });

    it('validates good string, float and date data', function() {
        // normal cases
        // Here ``type`` is undefined. Should still work.
        var str_data = ['Fun', 'fun2', 'fun3', 'fun4'];
        var float_data = ['12.34', '144.5', '234'];
        var date_data = ['2014/02/02', '03/13/2013', '03-14-2004'];

        expect(mvs.validate(str_data)).toEqual([]);
        expect(mvs.validate(float_data, 'float')).toEqual([]);
        expect(mvs.validate(date_data, 'date')).toEqual([]);
    });

    it('recognizes semivalid data', function() {
        // Cases where the data is /almost/ right.
        var float_data = ['12.34', '144.5', 'NaN'];
        var date_data = ['2014/02/02', 'huh?', '03-14-2004'];
        expect(mvs.validate(float_data, 'float')).toEqual(['NaN']);
        expect(mvs.validate(date_data, 'date')).toEqual(['huh?']);
    });

    it('recognizes invalid data', function() {
        // Cases where the data is *all* wrong.
        var float_data = ['', 'not a float', 'NaN'];
        var date_data = ['', 'huh?', 'what?'];
        // Cases where the data are correct.
        var good_float_data = ['12.34', '144.5', '234'];
        var good_date_data = ['2014/02/02', '03/13/2013', '03-14-2004'];

        // Data is wrong
        expect(mvs.validate(float_data, 'float')).toEqual(float_data);
        expect(mvs.validate(date_data, 'date')).toEqual(date_data);

        // Type is wrong
        // N.B. we use semivalid here, because Date is pretty forgiving w/ nums.
        expect(mvs.validate(good_float_data, 'date')).toEqual(['12.34']);
        expect(mvs.validate(good_date_data, 'float')).toEqual(good_date_data);


    });

});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// taken from the angularjs testing page
// http://docs.angularjs.org/guide/dev_guide.unit-testing

// create dummy angularJS app to attach filter(s)
var myBELabelDirectiveApp = angular.module('myBELabelDirectiveApp', ['beLabel']);

describe("The beLabel directive", function() {
    var $compile;
    var $rootScope;
    beforeEach(module('myBELabelDirectiveApp'));
    // Store references to $rootScope and $compile
    // so they are available to all tests in this describe block
    beforeEach(inject(function(_$compile_, _$rootScope_){
      // The injector unwraps the underscores (_) from around the parameter names when matching
      $compile = _$compile_;
      $rootScope = _$rootScope_;
    }));

    it('Replaces the element with the appropriate content', function() {
        // Compile a piece of HTML containing the directive
        var element = $compile('<be-label name="compliant" color="blue"></be-label>')($rootScope);
        // fire all the watches
        $rootScope.$digest();
        // Check that the compiled element contains the templated content
        expect(element.hasClass('label-primary')).toBe(true);
        expect(element.hasClass('label')).toBe(true);
        expect(element.html()).toContain("compliant");
    });

        // 'red': 'danger',
        // 'gray': 'default',
        // 'orange': 'warning',
        // 'green': 'success',
        // 'blue': 'primary',
        // 'light blue': 'info'
    it('Maps colors to semantic bootstrap class names', function() {
        var element = $compile('<be-label name="compliant" color="red"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-danger')).toBe(true);

        element = $compile('<be-label name="compliant" color="gray"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-default')).toBe(true);

        element = $compile('<be-label name="compliant" color="orange"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-warning')).toBe(true);

        element = $compile('<be-label name="compliant" color="green"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-success')).toBe(true);

        element = $compile('<be-label name="compliant" color="blue"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-primary')).toBe(true);

        element = $compile('<be-label name="compliant" color="light blue"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-info')).toBe(true);
    });


});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// taken from the angularjs testing page
// http://docs.angularjs.org/guide/dev_guide.unit-testing

// create dummy angularJS app to attach filter(s)
var myBEUploaderDirectiveApp = angular.module('myBEUploaderDirectiveApp', ['beUploader']);

describe("The beUploader directive", function() {
    var g_message, g_file, g_progress;
    var $compile;
    var $rootScope;
    var uploader_html = '<div be-uploader sourcetype="assessor" importrecord="5" buttontext="Upload your building list .csv file" eventfunc="uploaderfunc(message, filename, progress)" ng-hide="uploader.in_progress"></div>';
    beforeEach(module('myBEUploaderDirectiveApp'));
    // Store references to $rootScope and $compile
    // so they are available to all tests in this describe block
    beforeEach(inject(function(_$compile_, _$rootScope_){
      // The injector unwraps the underscores (_) from around the parameter names when matching
      $compile = _$compile_;
      $rootScope = _$rootScope_;
      $rootScope.eventfunc = function (fine_object) {
        console.log({fin: fine_object});
        g_message = fine_object.message;
        g_file = fine_object.file;
        g_progress = fine_object.progress;
      };
      window.BE = window.BE || {};
      window.BE.FILE_UPLOAD_DESTINATION = 'S3';
    }));

    it('Creates the fineuploader element', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        
        // act
        $rootScope.$digest();

        // assert
        expect(element.html()).toContain("qq-uploader");
        expect(element.html()).toContain("qq-upload-button");
    });

    it('Contains the buttontext specified', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);

        // act
        $rootScope.$digest();

        // assert
        expect(element.html()).toContain("Upload your building list .csv file");
    });

    it('Only allows one file to be uploaded at a time', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");

        // act
        $rootScope.$digest();

        // assert
        expect(func._options.multiple).toBe(false);
    });

    it('Uses the callback function for invalid file types', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.jpeg");

        // act
        $rootScope.$digest();
        func._options.showMessage("there was an invalid extension. Valid extension(s): .csv");


        // assert
        expect(g_message).toBe("invalid_extension");
    });

    it('Uses the callback function to share its state: upload started',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';
        
        // act
        $rootScope.$digest();
        func._options.callbacks.onSubmitted(1, filename);


        // assert
        expect(g_message).toBe("upload_submitted");
        expect(g_file.filename).toBe(filename);
    });

    it('Uses the callback function to share its state: in progress',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';
        var loaded = 10;
        var total = 100;
        
        // act
        $rootScope.$digest();
        func._options.callbacks.onProgress(1, filename, loaded, total);


        // assert
        expect(g_message).toBe("upload_in_progress");
        expect(g_file.filename).toBe(filename);
        expect(g_progress.loaded).toBe(loaded);
        expect(g_progress.total).toBe(total);
    });

    it('Uses the callback function to share its state: complete',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';

        
        // act
        $rootScope.$digest();
        func._options.callbacks.onComplete(1, filename, {success: true});


        // assert        
        expect(g_message).toBe("upload_complete");
        expect(g_file.filename).toBe(filename);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: building_detail_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, ngFilter, delete_called;
    var building_detail_ctrl, building_detail_ctrl_scope, modalInstance, labels;
    var mock_building_services, mock_project_service;
    var mock_building;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          urls,
          $q,
          building_services,
          project_service,
          $filter) {
            controller = $controller;
            scope = $rootScope;
            ngFilter = $filter;
            building_detail_ctrl_scope = $rootScope.$new();
            modal_state = "";
            delete_called = false;

            // mock the building_services factory methods used in the controller
            // and return their promises
            mock_building_services = building_services;
            mock_project_service = project_service;

            spyOn(mock_project_service, "get_project")
                .andCallFake(function(project_slug){
                    return $q.when(
                        {
                            "status": "success",
                            "project": {
                                id: 33,
                                name: "test project",
                                slug: project_slug
                            }
                        }
                    );
                }
            );
            spyOn(mock_project_service, "get_labels")
                .andCallFake(function(){
                    return $q.when(
                        {
                            "status": "success",
                            "labels": [{
                                id: 44,
                                name: "bad label",
                                color: "red"
                            }]
                        }
                    );
                }
            );
            spyOn(mock_project_service, "update_project_building")
                .andCallFake(function(building_id, project, label){
                    return $q.when(
                        {
                            "status": "success",
                            "approver": "bob doe",
                            "approved_date": "01/01/2012"
                        }
                    );
                }
            );
            spyOn(mock_building_services, "update_building")
                .andCallFake(function (building, org_id){
                    mock_building = building;
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_building_detail_controller(){
        var fake_building = {
            id: 511,
            pk: 511,
            gross_floor_area: 123456,
            gross_floor_area_source: 2,
            city: "DC",
            city_source: 4,
            tax_lot_id: "11/22",
            tax_lot_id_source: 3,
            extra_data: {
                'some other key': 12344,
                'some other key that is not in a parent': 223
            },
            extra_data_sources: {
                'some other key': 2,
                'some other key that is not in a parent': 3
            },
            created: "at some point"
        };
        var fake_imported_buildings = [
            {
                id: 2,
                pk: 2,
                gross_floor_area: 123456,
                gross_floor_area_source: null,
                city: "Washington, DC",
                city_source: null,
                extra_data: {
                    'some other key': 123,
                    'some other key that is not in a child': 333,
                    'some floor area': 444
                },
                extra_data_sources: {
                    'some other key': null,
                    'some other key that is not in a child': 111,
                    'some floor area': 444
                },
                created: "test"
            },
            {
                id: 3,
                pk: 3,
                gross_floor_area: 2111111,
                gross_floor_area_source: null,
                city: "Washington",
                city_source: null,
                tax_lot_id: "11/22",
                tax_lot_id_source: null,
                extra_data: {
                    'make it four': 4
                },
                extra_data_sources: {
                    'make it four': null
                }
            },{
                id: 4,
                pk: 4,
                gross_floor_area: 2111111,
                gross_floor_area_source: null,
                city: "Washington",
                city_source: null,
                tax_lot_id: "11/22",
                tax_lot_id_source: null,
                extra_data: {
                    'make it four': 5
                },
                extra_data_sources: {
                    'make it four': null
                }
            }
        ];
        var fake_payload = {
            "status": "success",
            "building": fake_building,
            "imported_buildings": fake_imported_buildings,
            "projects": [],
            "user_org_id": 42
        };
        var fake_all_columns = [{
            "title": "PM Property ID",
            "sort_column": "pm_property_id",
            "class": "is_aligned_right",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Tax Lot ID",
            "sort_column": "tax_lot_id",
            "class": "is_aligned_right",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Custom ID 1",
            "sort_column": "custom_id_1",
            "class": "is_aligned_right whitespace",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Property Name",
            "sort_column": "property_name",
            "class": "",
            "title_class": "",
            "type": "string",
            "field_type": "building_information",
            "sortable": true,
            "checked": false
        }];
        building_detail_ctrl = controller('building_detail_controller', {
            $scope: building_detail_ctrl_scope,
            $routeParams: {
                building_id: 1,
                project_id: 2
            },
            building_payload: fake_payload,
            all_columns: {
                fields: fake_all_columns
            },
            audit_payload: {
                audit_logs: []
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should have an building payload", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.building.id).toBe(511);
        expect(building_detail_ctrl_scope.imported_buildings[0].id).toBe(2);
    });

    it("should get labels on load", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.labels[0].id).toBe(44);
        expect(building_detail_ctrl_scope.labels[0].name).toBe("bad label");
        expect(building_detail_ctrl_scope.labels[0].color).toBe("red");
    });

    it("should highlight the active project", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.is_active_project({id:33}))
        .toBe(true);
        expect(building_detail_ctrl_scope.is_active_project({id:34}))
        .toBe(false);
        building_detail_ctrl_scope.project = undefined;
        expect(building_detail_ctrl_scope.is_active_project({id:34}))
        .toBe(false);
    });

    it("should make a copy of building while making edits", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.save_building_state();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;

        // assertions
        expect(building_detail_ctrl_scope.building_copy.gross_floor_area)
        .toBe(123456);
    });
    it("should restore the copy of building if a user clicks cancel",
        function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.save_building_state();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;
        building_detail_ctrl_scope.restore_building();

        // assertions
        expect(building_detail_ctrl_scope.building.gross_floor_area)
        .toBe(123456);
        expect(building_detail_ctrl_scope.building.edit_form_showing).toBe(false);
    });
    it("should save a building when a user clicks the save button", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;
        building_detail_ctrl_scope.save_building();

        // assertions
        expect(mock_building_services.update_building)
        .toHaveBeenCalledWith(building_detail_ctrl_scope.building, 42);
        expect(mock_building.gross_floor_area).toEqual(43214);
    });
    it("should show a default label if a building doesn't have one", function() {
        // arrange
        create_building_detail_controller();
        var building_with_label = {
            label: {
                name: "hello",
                label: "success"
            }
        };
        var building_without_label = {};
        var label_with, label_without;

        // act
        building_detail_ctrl_scope.$digest();
        label_with = building_detail_ctrl_scope.get_label(building_with_label);
        label_without = building_detail_ctrl_scope.get_label(building_without_label);

        // assertions
        expect(label_with).toEqual({
                name: "hello",
                label: "success"
            });
        expect(label_without).toEqual({
                name: "Add Label",
                label: "default"
            });
    });

    it("should show a project or buildings breadcrumb", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.user.project_slug = "project_1";

        // assertions
        expect(building_detail_ctrl_scope.is_project()).toEqual(true);
        building_detail_ctrl_scope.user.project_slug = undefined;
        expect(building_detail_ctrl_scope.is_project()).toEqual(false);

    });
    it("should show the default projects table if a user has no compliance" +
        " projects", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.user.has_projects()).toEqual(false);
        building_detail_ctrl_scope.projects = [{id: 1, name: "a"}];
        expect(building_detail_ctrl_scope.user.has_projects()).toEqual(true);

    });

    it("should set only building attribute to master, not ids or children", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.is_valid_key('id')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('pk')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('pk_source')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key(' extra_data ')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('gross_floor_area'))
          .toEqual(true);
    });
    it("should update a project-building label", function() {
        // arrange
        create_building_detail_controller();
        var project = {
            id: 2,
            building: {}
        };

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.update_project_building(project,
            {
                name: "label name",
                color: "red"
            });
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(mock_project_service.update_project_building).toHaveBeenCalled();
        expect(project.building.approver).toEqual("bob doe");
        expect(project.building.approved_date).toEqual("01/01/2012");
        expect(project.building.label.name).toEqual("label name");
        expect(project.building.label.color).toEqual("red");

    });
    it("should set a field as source when clicked", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[0].is_master = true;
        expect(building_detail_ctrl_scope.building.gross_floor_area_source)
          .not.toEqual(building_detail_ctrl_scope.building.id);
        building_detail_ctrl_scope.set_self_as_source('gross_floor_area');
        building_detail_ctrl_scope.set_self_as_source('some other key', true);
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.building.gross_floor_area_source)
          .toEqual(building_detail_ctrl_scope.building.id);
        expect(building_detail_ctrl_scope.imported_buildings[0].is_master)
          .toEqual(false);
    });
    it("should set a column as the dominant source when clicked", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[1].is_master = true;
        building_detail_ctrl_scope.make_source_default(
            building_detail_ctrl_scope.imported_buildings[0]);
        building_detail_ctrl_scope.$digest();

        // assertions
        var b = building_detail_ctrl_scope.building,
            i = building_detail_ctrl_scope.imported_buildings[0],
            i_other = building_detail_ctrl_scope.imported_buildings[1];

        expect(b.gross_floor_area_source).toEqual(i.id);
        expect(b.id).not.toEqual(i.id);
        expect(b.pk).not.toEqual(i.id);
        expect(b.city).toEqual(i.city);
        expect(b.city_source).toEqual(i.id);
        expect(b.tax_lot_id).toEqual("11/22");
        expect(b.tax_lot_id_source).toEqual(i_other.id);
        expect(b.extra_data['some other key']).toEqual(123);
        expect(b.extra_data_sources['some other key']).toEqual(i.id);
        expect(b.extra_data['some other key that is not in a child']).toEqual(333);
        expect(b.extra_data_sources['some other key that is not in a child']).toEqual(i.id);
        expect(b.extra_data['some other key that is not in a parent']).toEqual(223);
        expect(b.extra_data_sources['some other key that is not in a parent']).toEqual(i_other.id);
        expect(b.created).toEqual("at some point");

        expect(i.is_master).toEqual(true);
        expect(i_other.is_master).toEqual(false);
    });
    it("should set the master building value when parent's value is clicked",
        function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[1].is_master = true;
        building_detail_ctrl_scope.set_building_attribute(
            building_detail_ctrl_scope.imported_buildings[0], 'city');
        building_detail_ctrl_scope.set_building_attribute(
            building_detail_ctrl_scope.imported_buildings[0], 'some other key', true);
        building_detail_ctrl_scope.$digest();

        // assertions
        var b = building_detail_ctrl_scope.building,
            i = building_detail_ctrl_scope.imported_buildings[0],
            i_other = building_detail_ctrl_scope.imported_buildings[1];

        expect(b.id).not.toEqual(i.id);
        expect(b.pk).not.toEqual(i.id);
        expect(b.city).toEqual(i.city);
        expect(b.city_source).toEqual(i.id);
        expect(b.tax_lot_id).toEqual("11/22");
        expect(b.tax_lot_id_source).toEqual(i_other.id);
        expect(b.extra_data['some other key']).toEqual(123);
        expect(b.extra_data_sources['some other key']).toEqual(i.id);

        expect(i.is_master).toEqual(false);
        expect(i_other.is_master).toEqual(false);
    });

    it("should display all the data within all the buildings", function() {
        // arrange
        create_building_detail_controller();
        var keys;

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        var edc = building_detail_ctrl_scope.data_columns;

        // should not duplicate keys
        expect(edc.length).toEqual(8);
        keys = edc.map(function ( d ) {
            return d.key;
        });
        expect(keys.indexOf('make it four')).toEqual(4);
    });

    it("should display Floor Areas", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.$digest();

        // assertions
        var area_fields = building_detail_ctrl_scope.floor_area_fields;
        expect(area_fields.length).toEqual(1);
    });

    it("should display Floor Areas with number", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.get_number("")).toEqual(0);
        expect(building_detail_ctrl_scope.get_number("123,123,123")).toEqual(123123123);
        expect(building_detail_ctrl_scope.get_number("123,123,123.123")).toEqual(123123123.123);
        expect(building_detail_ctrl_scope.get_number("-123,123,123")).toEqual(-123123123);
        expect(building_detail_ctrl_scope.get_number(-123123123)).toEqual(-123123123);


    });
});

describe("controller: concat_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var scope, controller, modal_state;
    var edit_ctrl, concat_modal_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label, mock_mapping_service, mock_matching_service;
    var global_step = 1;
    var global_dataset = {};

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
            $controller, $rootScope, $modal, urls, $q
        ) {
            controller = $controller;
            scope = $rootScope;
            concat_modal_ctrl_scope = $rootScope.$new();
            concat_modal_ctrl_scope.concat_columns = [];
            modal_state = "";
        }
    ));

    var mock_building_column_types = [
        'address1', 'city', 'state', 'postal_code'
    ];

    var mock_raw_columns = [
        {
            name: 'Address',
            suggestion: 'address1',
            confidence: 1,
            raw_data: [
                '234 Database way',
                '23444 Huh hwy',
                '23444 Huh hwy',
                '23444 Huh hwy',
                '1223 face pl.'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        },
        {
            name: 'City',
            suggestion: 'city',
            confidence: 1,
            raw_data: [
                'Mega City', 'Mega City', 'Mega City', 'Mega City', 'Mega City'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        },
        {
            name: 'Zip',
            suggestion: '',
            confidence: 0,
            raw_data: [
                '234233', '234233', '234233', '234233', '234233'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        }
    ];

    // this is outside the beforeEach so it can be configured by each unit test
    function create_concat_modal_controller(){
        edit_ctrl = controller('concat_modal_ctrl', {
            $scope: concat_modal_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            building_column_types: mock_building_column_types,
            raw_columns: mock_raw_columns
        });
    }

    /*
     * Test scenarios
     */

    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.close_concat_modal();
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should mangle scope appropriately during concatenation", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(3);

        // arrange
        concat_modal_ctrl_scope.concat_columns =
            concat_modal_ctrl_scope.raw_columns.slice(0);
        concat_modal_ctrl_scope.raw_columns = [];

        // act
        concat_modal_ctrl_scope.$digest();
        concat_modal_ctrl_scope.save_concat();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(1);
        expect(
            concat_modal_ctrl_scope.raw_columns[0].is_concatenated
        ).toEqual(true);
    });

    it("should modify the raw_data of our modified TCM correctly", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(3);

        // arrange
        concat_modal_ctrl_scope.concat_columns =
            concat_modal_ctrl_scope.raw_columns.slice(0);
        concat_modal_ctrl_scope.raw_columns = [];

        // act
        concat_modal_ctrl_scope.$digest();
        concat_modal_ctrl_scope.save_concat();

        var expected_raw = [
            '234 Database way Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '1223 face pl. Mega City 234233'
        ];

        // assertions
        expect(
            concat_modal_ctrl_scope.raw_columns[0].raw_data
        ).toEqual(expected_raw);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: create_organization_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_organization_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, organization_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        mock_organization_service = organization_service;
        spyOn(mock_organization_service, "create_sub_org")
            .andCallFake(function(org, sub_org){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_organization_modal_ctrl(){
        ctrl = ctrl('create_organization_modal_ctrl', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            organization: {organization_id: 1}
        });
    }

    /*
     * Test scenarios
     */

    it("should call the organization service to add a new sub_org",
        function() {
        // arrange
        create_organization_modal_ctrl();

        // act
        ctrl_scope.$digest();
        ctrl_scope.sub_org.name = "my shiny new org";
        ctrl_scope.sub_org.email = "jb.smooth@be.com";
        ctrl_scope.submit_form(true);

        // assertions
        expect(mock_organization_service.create_sub_org)
            .toHaveBeenCalledWith(
                {
                    organization_id: 1
                },
                {
                    name: "my shiny new org",
                    email: "jb.smooth@be.com"
                }
            );
    });
    
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: data_upload_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_uploader_service, scope, controller, modal_state;
    var edit_ctrl, data_upload_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label, mock_mapping_service, mock_matching_service;
    var global_step = 1;
    var global_dataset = {};
    var return_labels = [
        {
            "name": 'compliant',
            "color": 'green',
            "id": 1
        },
        {
            "name": "new label",
            "color": "blue",
            "id": 2
        }
    ];

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, uploader_service, mapping_service, matching_service) {
            controller = $controller;
            scope = $rootScope;
            data_upload_ctrl_scope = $rootScope.$new();
            modal_state = "";

            // mock the uploader_service factory methods used in the controller
            // and return their promises
            mock_uploader_service = uploader_service;
            mock_mapping_service = mapping_service;
            mock_matching_service = matching_service;
            spyOn(mock_uploader_service, "get_AWS_creds")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "AWS_CLIENT_ACCESS_KEY": "123",
                            "AWS_UPLOAD_BUCKET_NAME": "test-bucket"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "check_progress")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "progress": "25.0"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "create_dataset")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "id": 3,
                                "name": dataset_name

                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error",
                                "message": "name already in use"
                            }
                        );
                    }
                }
            );
            spyOn(mock_uploader_service, "save_raw_data")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "file_id": 3
                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error"
                            }
                        );
                    }
                }
            );
            spyOn(mock_mapping_service, "start_mapping")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "file_id": 3
                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error"
                            }
                        );
                    }
                }
            );
            spyOn(mock_matching_service, "start_system_matching")
            .andCallFake(function(file_id){
                // return $q.reject for error scenario
                return $q.when(
                    {
                        "status": "success",
                        "file_id": 3
                    }
                );
            });

        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_data_upload_modal_controller(){
        edit_ctrl = controller('data_upload_modal_ctrl', {
            $scope: data_upload_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            step: global_step,
            dataset: global_dataset
        });
    }

    /*
     * Test scenarios
     */

    it("should close the modal when the close function is called", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.close();
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel function is called", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.cancel();
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

    it("should start at the step provided", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(1);

        // arrange
        global_step = 2;
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(2);
    });

    it("should goto different steps", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var step;
        step = 2;
        data_upload_ctrl_scope.goto_step(step);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(step);
    });

    it("disables the 'Name it' button if no text is entered", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(true);
    });
    it("disables the 'Name it' button if no text is entered, then cleared",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.dataset.name = undefined;
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(true);
    });
    it("enables the 'Name it' button if text is entered", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.dataset.name = "my dataset name";
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(false);
    });
    it("should show an alert if the dataset name is already in use",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.create_dataset("fail");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.alert).toBe(true);
    });
    it("should not show an alert if the dataset name is not already in use",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.create_dataset("my shiny new dataset");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.alert).toBe(false);
    });
    it("after creating a dataset, stores the dataset id", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var ds_name = "my shiny new dataset";
        data_upload_ctrl_scope.create_dataset(ds_name);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.id).toBe(3);
        expect(data_upload_ctrl_scope.dataset.name).toBe(ds_name);
    });
    it("after uploading a file, stores the file id", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var message, filename;
        message = "upload_complete";
        filename = "file1.csv";

        // act
        data_upload_ctrl_scope.uploaderfunc(message, {
            filename: filename,
            file_id: 20140313
        });
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.import_file_id).toBe(20140313);
    });
    it("should show an invalid extension alert if a file with an invalid" +
        "extension is loaded", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.uploaderfunc("invalid_extension");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.invalid_extension_alert)
            .toBe(true);
    });
    it("should hide the upload button after the user selects a file",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename;
        message = "upload_submitted";
        filename = "file1.csv";

        // act
        data_upload_ctrl_scope.uploaderfunc(message, {filename: filename});
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.filename).toBe(filename);
        expect(data_upload_ctrl_scope.uploader.in_progress).toBe(true);
    });
    it("should show the progressbar during upload",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename, progress;
        message = "upload_in_progress";
        filename = "file1.csv";
        progress = {
            loaded: 10,
            total: 100
        };

        // act
        data_upload_ctrl_scope.uploaderfunc(message, filename, progress);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.in_progress).toBe(true);
        expect(data_upload_ctrl_scope.uploader.progress).toBe(2.5);
    });
    it("should start saving the energy data when the file has been uploaded",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename;
        message = "upload_complete";
        filename = "file1.csv";
        data_upload_ctrl_scope.step.number = 4;

        // act
        data_upload_ctrl_scope.uploaderfunc(message, filename);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.status_message)
            .toBe("saving energy data");
    });

    it("should take an dataset payload", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.name).toBe("");
        expect(data_upload_ctrl_scope.dataset.filename).toBe("");
        expect(data_upload_ctrl_scope.dataset.id).toBe(0);
    });

    it("should extend a custom dataset payload", function() {
        // arrange
        global_dataset = {
            id: 100,
            filename: "seed_data.csv",
            name: "Compliance Project"
        };
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.name).toBe("Compliance Project");
        expect(data_upload_ctrl_scope.dataset.filename).toBe("seed_data.csv");
        expect(data_upload_ctrl_scope.dataset.id).toBe(100);
        expect(data_upload_ctrl_scope.dataset.alert).toBe(false);

    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: dataset_detail_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, ngFilter, delete_called;
    var dataset_detail_ctrl, dataset_detail_ctrl_scope, modalInstance, labels;

    

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, dataset_service, $filter) {
            controller = $controller;
            scope = $rootScope;
            ngFilter = $filter;
            dataset_detail_ctrl_scope = $rootScope.$new();
            modal_state = "";
            delete_called = false;

            // mock the dataset_service factory methods used in the controller
            // and return their promises
            mock_dataset_service = dataset_service;
            spyOn(mock_dataset_service, "get_dataset")
                .andCallFake(function(dataset_id){
                    // return $q.reject for error scenario
                    var fake_importfiles = [
                        {
                            name: "DC_CoveredBuildings_50k.csv",
                            number_of_buildings: 511,
                            number_of_mappings: 511,
                            number_of_cleanings: 1349,
                            source_type: "Assessed Raw",
                            number_of_matchings: 403
                        },
                        {
                            name: "DC_ESPM_Report.csv",
                            number_of_buildings: 511,
                            number_of_matchings: 403,
                            source_type: "Portfolio Raw"
                        }
                    ];
                    var fake_dataset = {
                        name: "DC 2013 data",
                        last_modified: (new Date()).getTime(),
                        last_modified_by: "john.s@buildingenergy.com",
                        number_of_buildings: 89,
                        id: 1,
                        importfiles: fake_importfiles
                    };
                    var fake_payload = {
                        "status": "success",
                        "dataset": fake_dataset
                    };
                    if (delete_called) {
                        fake_payload.dataset.importfiles.pop();
                    }
                    console.log({delete_called: delete_called, ds: fake_payload});
                    return $q.when(fake_payload);
                }
            );

            spyOn(mock_dataset_service, "delete_file")
                .andCallFake(function(import_file){
                    delete_called = true;
                    console.log({d: "delete_called"});
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_detail_controller(){
        var fake_importfiles = [
            {
                name: "DC_CoveredBuildings_50k.csv",
                number_of_buildings: 511,
                number_of_mappings: 511,
                number_of_cleanings: 1349,
                source_type: "Assessed Raw",
                number_of_matchings: 403
            },
            {
                name: "DC_ESPM_Report.csv",
                number_of_buildings: 511,
                number_of_matchings: 403,
                source_type: "Portfolio Raw"
            }
        ];
        var fake_dataset = {
            name: "DC 2013 data",
            last_modified: (new Date()).getTime(),
            last_modified_by: "john.s@buildingenergy.com",
            number_of_buildings: 89,
            id: 1,
            importfiles: fake_importfiles
        };
        var fake_payload = {
            "status": "success",
            "dataset": fake_dataset
        };
        dataset_detail_ctrl = controller('dataset_detail_controller', {
            $scope: dataset_detail_ctrl_scope,
            dataset_payload: fake_payload
        });
    }

    /*
     * Test scenarios
     */

    it("should have an data set payload with import files", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        dataset_detail_ctrl_scope.$digest();

        // assertions
        expect(dataset_detail_ctrl_scope.dataset.importfiles.length).toBe(2);
    });

    it("should show an alert when the delete icon is clicked", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        dataset_detail_ctrl_scope.$digest();
        var importfiles = dataset_detail_ctrl_scope.dataset.importfiles;
        dataset_detail_ctrl_scope.delete_file(importfiles[0]);
        dataset_detail_ctrl_scope.$digest();

        // assertions
        expect(dataset_detail_ctrl_scope.dataset.importfiles.length).toBe(1);
    });
   
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: dataset_list_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, modal_state;
    var edit_ctrl, dataset_list_ctrl_scope, modalInstance, labels;
    var location;

    

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, uploader_service,
            $location) {
            controller = $controller;
            scope = $rootScope;
            dataset_list_ctrl_scope = $rootScope.$new();
            modal_state = "";
            location = $location;

            // mock the uploader_service factory methods used in the controller
            // and return their promises
            mock_uploader_service = uploader_service;
            spyOn(mock_uploader_service, "get_AWS_creds")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "AWS_CLIENT_ACCESS_KEY": "123",
                            "AWS_UPLOAD_BUCKET_NAME": "test-bucket"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "create_dataset")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "import_record_id": 3,
                                "import_record_name": dataset_name

                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error",
                                "message": "name already in use"
                            }
                        );
                    }
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_list_controller(){
        var fake_datasets_payload = {
            "status": "success",
            "datasets": [
                {
                    name: "DC 2013 data",
                    last_modified: (new Date()).getTime(),
                    last_modified_by: "john.s@buildingenergy.com",
                    number_of_buildings: 89
                },
                {
                    name: "DC 2014 data",
                    last_modified: (new Date()).getTime() -
                        1550 * 60 * 60 * 1000,
                    last_modified_by: "gavin.m@buildingenergy.com",
                    number_of_buildings: 70
                }
            ]
        };
        edit_ctrl = controller('dataset_list_controller', {
            $scope: dataset_list_ctrl_scope,
            datasets_payload: fake_datasets_payload
        });
    }

    /*
     * Test scenarios
     */

    it("should have a dataset_payload", function() {
        // arrange
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();

        // assertions
        expect(dataset_list_ctrl_scope.datasets.length).toEqual(2);
    });

    it("should disable the mapping button if the dataset has no" +
        " Assessor files", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Portfolio Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_assessor_files(dataset);

        // assertions
        expect(disabled).toEqual(true);
    });

    it("should enable the mapping button if the dataset has at least one" +
        " Assessor file", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_assessor_files(dataset);

        // assertions
        expect(disabled).toEqual(false);
    });
    it("should disable the matching button if the dataset has no" +
        " Portfolio Manger files", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Assessed Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_pm_files(dataset);

        // assertions
        expect(disabled).toEqual(true);
    });
    it("should enable the matching button if the dataset has at least one" +
        " Portfolio Manger file", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_pm_files(dataset);

        // assertions
        expect(disabled).toEqual(false);
    });
    it("should navigate to the mapping page of the first assessed" +
        " import file when the ``Mapping`` button is clicked", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Assessed Raw",
                    id: 3
                },
                {
                    source_type: "Assessed Raw",
                    id: 5
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        dataset_list_ctrl_scope.goto_mapping(dataset);

        // assertions
        expect(location.path()).toBe('/data/mapping/3');
    });
    it("should navigate to the matching page of the first Portfolio Manager" +
        " import file when the ``Matching`` button is clicked", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw",
                    id: 3
                },
                {
                    source_type: "Portfolio Raw",
                    id: 5
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        dataset_list_ctrl_scope.goto_matching(dataset);

        // assertions
        expect(location.path()).toBe('/data/matching/3');
    });

   
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: delete_modal_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, building_services, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        // mock the export_service factory methods used in the controller
        // and return their promises
        mock_building_services = building_services;
        spyOn(mock_building_services, "delete_buildings")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_delete_modal_controller(){
        ctrl = ctrl('delete_modal_controller', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            search: { 
                selected_buildings: [1,2],
                filter_params: {},
                select_all_checkbox: false,
                order_by: "",
                sort_reverse: false,
                number_matching_search: 1000
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should start at the delete page", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.delete_state).toEqual("delete"); 
    });
    it("should save the search paramaters",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.delete_payload;
        expect(b.selected_buildings).toEqual([1,2]);
        expect(b.filter_params).toEqual({});
        expect(b.order_by).toEqual("");
        expect(b.sort_reverse).toEqual(false);
        expect(b.select_all_checkbox).toEqual(false);
    });
    it("should delete when the delete button is clicked",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.delete_buildings();

        // assertions
        expect(ctrl_scope.delete_state).toEqual("prepare");
        expect(mock_building_services.delete_buildings).toHaveBeenCalled();
    });
    it("should show the success page when the delete is finished",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.delete_buildings();
        ctrl_scope.$digest();

        // assertions
        expect(mock_building_services.delete_buildings).toHaveBeenCalled();
        expect(ctrl_scope.delete_state).toEqual("success");
    });
    it("should show the number of buildings to be deleted",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        var number_to_delete = ctrl_scope.number_to_delete();

        // assertions
        expect(number_to_delete).toEqual(2);
    });
    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.close();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.cancel();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

  
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myDistrictApp = angular.module('myDistrictApp', ['district']);

describe("The district filter", function() {
    beforeEach(module('myDistrictApp'));
    it('replaces `district` with `County/District/Ward/Borough`',
        inject(function(districtFilter) {
            // normal cases
            expect(districtFilter('district')).toBe('County/District/Ward/Borough');
            expect(districtFilter('District')).toBe('County/District/Ward/Borough');
            expect(districtFilter('DistRict')).toBe('County/District/Ward/Borough');
            expect(districtFilter('DISTRICT')).toBe('County/District/Ward/Borough');
            expect(districtFilter('aDISTRICT')).toBe('aDISTRICT');
            expect(districtFilter('')).toBe('');
            expect(districtFilter('district ')).toBe('district ');
            expect(districtFilter('ok')).toBe('ok');
            expect(districtFilter(undefined)).toBe(undefined);
            expect(districtFilter(null)).toBe(null);
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: edit_label_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, modal_state;
    var edit_ctrl, edit_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label;
    var return_labels = [
        {
            "name": 'compliant',
            "color": 'green',
            "id": 1
        },
        {
            "name": "new label",
            "color": "blue",
            "id": 2
        }
    ];

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, urls, $q, project_service) {
        controller = $controller;
        scope = $rootScope;
        edit_ctrl_scope = $rootScope.$new();
        modal_state = "";

        // mock the project_service factory methods used in the controller
        // and return their promises
        mock_project_service = project_service;
        spyOn(mock_project_service, "get_labels")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success", "labels": return_labels});
            }
        );
        spyOn(mock_project_service, "add_label")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
        spyOn(mock_project_service, "delete_label")
            .andCallFake(function(label){
                deleted_label = label;
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
        spyOn(mock_project_service, "update_label")
            .andCallFake(function(label){
                updated_label = label;
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );

    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_edit_modal_controller(){
        var labels = [
            {
                "name": 'compliant',
                "color": 'green',
                "id": 1
            }
        ];

        edit_ctrl = controller('edit_label_modal_ctrl', {
            $scope: edit_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            labels: labels
        });
    }

    /*
     * Test scenarios
     */

    it("should initialize the default label", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.$digest();
        edit_ctrl_scope.initialize_label_modal();

        // assertions
        expect(edit_ctrl_scope.label_modal.color).toBe("gray");
        expect(edit_ctrl_scope.label_modal.label).toBe("default");
        expect(edit_ctrl_scope.label_modal.name).toBe("");
        expect(edit_ctrl_scope.modal.label.state).toBe("create");
    });

    it("should get the labels available to an organization", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.add_label({});  // calls private get_labels
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.labels.length).toBe(2);
    });

    it("should add a label in the user's organization", function() {
        // arrange
        create_edit_modal_controller();
        var label_to_add = {
            color: "blue",
            label: "primary",
            name: "new label"
        };

        // act
        edit_ctrl_scope.add_label(label_to_add);
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.labels.length).toBe(2);
        expect(edit_ctrl_scope.labels[1].color).toBe("blue");
        expect(edit_ctrl_scope.labels[1].name).toBe("new label");
    });

    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.close();
        edit_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.cancel();
        edit_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

    it("sets the label_modal to the label when its edit button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.edit_label(label);
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.label_modal.color).toBe(label.color);
        expect(edit_ctrl_scope.label_modal.name).toBe(label.name);
        expect(edit_ctrl_scope.modal.label.state).toBe("edit");

        // assert that edit_ctrl_scope.label_modal is a copy and not a reference to label
        edit_ctrl_scope.label_modal.name = "random name here";
        expect(edit_ctrl_scope.label_modal.name).not.toBe(label.name);
    });
    
    it("deletes the appropriate label when the delete button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.delete_label(label);
        edit_ctrl_scope.$digest();

        // assertions
        expect(deleted_label).toBe(label);
    });

    it("updates the appropriate label when the update label button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.edit_label(label);
        edit_ctrl_scope.$digest();
        edit_ctrl_scope.label_modal.name = "harry";
        edit_ctrl_scope.label_modal.color = "blue";
        edit_ctrl_scope.update_label(edit_ctrl_scope.label_modal);
        edit_ctrl_scope.$digest();

        // assertions
        expect(mock_project_service.update_label).toHaveBeenCalledWith(edit_ctrl_scope.label_modal);
        expect(updated_label).toBe(edit_ctrl_scope.label_modal);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: export_modal_controller", function(){
    // globals set up and used in each test scenario
    var mock_export_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, export_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        // mock the export_service factory methods used in the controller
        // and return their promises
        mock_export_service = export_service;
        spyOn(mock_export_service, "export_buildings")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success", "export_id": "123456"});
            }
        );
        spyOn(mock_export_service, "export_buildings_progress")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({
                    "status": "success",
                    "buildings_processed": 1000
                });
            }
        );
            spyOn(mock_export_service, "export_buildings_download")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({
                    "status": "success",
                    "url": "#"
                });
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_export_modal_controller(){
        ctrl = ctrl('export_modal_controller', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            search: { 
                selected_buildings: [],
                filter_params: {},
                select_all_checkbox: false,
                order_by: "",
                sort_reverse: false,
                number_matching_search: 1000
            },
            selected_fields: ['tax_lot_id', 'postal_code'],
            project: {
                id: 11
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should start at the create page", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.export_state).toEqual("create"); 
    });
    it("should start with an empty name and default file type of 'xls'",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.building_export;
        expect(b.export_name).toEqual("");
        expect(b.export_type).toEqual("xls");
    });
    it("should save the search paramaters",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.building_export;
        expect(b.selected_buildings).toEqual([]);
        expect(b.filter_params).toEqual({});
        expect(b.order_by).toEqual("");
        expect(b.sort_reverse).toEqual(false);
        expect(b.select_all_checkbox).toEqual(false);
        expect(b.selected_fields).toEqual(['tax_lot_id', 'postal_code']);
        expect(b.project_id).toEqual(11);
        expect(ctrl_scope.progress_denominator).toEqual(0);
    });
    it("should kick off the export process when the export button is clicked",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.export_buildings();

        // assertions
        expect(ctrl_scope.export_state).toEqual("prepare");
        expect(mock_export_service.export_buildings).toHaveBeenCalled();
    });
    it("should show the success page when the data is ready",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.show_success_page("123");
        ctrl_scope.$digest();

        // assertions
        expect(mock_export_service.export_buildings_download).toHaveBeenCalled();
        expect(ctrl_scope.export_state).toEqual("success");
    });
    it("should update the progress bar",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.monitor_progress("123", 1000);
        ctrl_scope.$digest();
        timeout.flush();

        // assertions
        expect(mock_export_service.export_buildings_progress).toHaveBeenCalled();
        expect(ctrl_scope.progress_percentage).toEqual(100);
        expect(ctrl_scope.progress_numerator).toEqual(1000);
        expect(ctrl_scope.progress_denominator).toEqual(1000);
    });
    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.close();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.cancel();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

  
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
/**
 * tests fromNow angularjs filter wrapper of moment.js
 * uses epoch milliseconds as that is what the back-end returns
 */

// create dummy angularJS app to attach filter(s)
var myfromNowFilterApp = angular.module('myfromNowFilterApp', ['fromNow']);

describe("The fromNow filter", function() {
    beforeEach(module('myfromNowFilterApp'));

    it('shows the present time as "a few seconds ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('a few seconds ago');
        })
    );

    it('shows 5 minutes ago as "5 minutes ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 5  * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('5 minutes ago');
        })
    );

    it('shows 4 hours ago as "4 hours ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 4 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('4 hours ago');
        })
    );

    it('shows 24 hours ago as "a day ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 24 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('a day ago');
        })
    );

    it('shows 36 hours ago as "2 days ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 36 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('2 days ago');
        })
    );

    it('shows 1550 hours ago as "2 months ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 1550 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('2 months ago');
        })
    );

    it('defaults to "a few seconds ago" for undefined values',
        inject(function(fromNowFilter) {
            // arrange

            // act

            // assert
            expect(fromNowFilter(undefined)).toBe('a few seconds ago');
            expect(fromNowFilter(null)).toBe('a few seconds ago');
            expect(fromNowFilter("some text")).toBe('a few seconds ago');
            expect(fromNowFilter({})).toBe('a few seconds ago');
            expect(fromNowFilter({time: "not time"})).toBe('a few seconds ago');
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myignoremapApp = angular.module('myignoremapApp', ['ignoremap']);

describe("The ignoremap filter", function() {
    beforeEach(module('myignoremapApp'));
    it('replaces `""` with `------ Ignore Row ------`',
        inject(function(ignoremapFilter) {
            // normal cases
            expect(ignoremapFilter('')).toBe('------ Ignore Row ------');
            expect(ignoremapFilter(' ')).toBe(' ');
            expect(ignoremapFilter('aignoremap')).toBe('aignoremap');
            expect(ignoremapFilter('ignoremap ')).toBe('ignoremap ');
            expect(ignoremapFilter('ok')).toBe('ok');
            expect(ignoremapFilter(undefined)).toBe('------ Ignore Row ------');
            expect(ignoremapFilter(null)).toBe('------ Ignore Row ------');
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: mapping_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, modal_state;
    var mapping_ctrl, mapping_ctrl_scope, modalInstance, labels;
    var timeout, mock_user_service, mock_search_service;



    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, building_services, $timeout, user_service, search_service) {
            controller = $controller;
            scope = $rootScope;
            mapping_ctrl_scope = $rootScope.$new();
            modal_state = "";
            timeout = $timeout;
            mock_user_service = user_service;
            mock_search_service = search_service;

            spyOn(mock_user_service, 'set_default_columns')
                .andCallFake(function(mapped_columns){
                    return undefined;
                });
            spyOn(mock_search_service, 'search_buildings')
                .andCallFake(function(){
                    return [1,2,3];
                });
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_mapping_controller(){
        var mock_datasets = [
            {
                name: "DC 2013 data",
                last_modified: (new Date()).getTime(),
                last_modified_by: "john.s@buildingenergy.com",
                number_of_buildings: 89,
                id: 1
            },
            {
                name: "DC 2014 data",
                last_modified: (new Date()).getTime() -
                    1550 * 60 * 60 * 1000,
                last_modified_by: "gavin.m@buildingenergy.com",
                number_of_buildings: 70,
                id: 2
            }
        ];
        var fake_import_file_payload = {
            "status": "success",
            "import_file": {
                        file_name: "assessor_fun.csv",
                        last_modified: (new Date()).getTime(),
                        last_modified_by: "john.s@buildingenergy.com",
                        source_type: 'AssessorRaw',
                        dataset: mock_datasets[0],
                        id: 1
                    }
        };

        var mock_be_building_columns = [
            'pm_property_id',
            'property_name',
            'property_notes',
            'tax_lot_id',
            'gross_floor_area',
            'My New non-BEDES field'
        ];

        var mock_be_building_types = {
            'gross_floor_area': {
                unit_type: 'float',
                schema: 'BEDES'
            }
        };

        var mock_mapping_suggestions_payload = {
            'status': 'success',
            'suggested_column_mappings': {
                // key(django model attribute): [csv_header1, ... csv_header3]
                'property id': ['pm_property_id', 89],
                'lot number': ['tax_lot_id' , 54]
            },
            "building_columns": mock_be_building_columns,
            "building_column_types": mock_be_building_types
        };

        var mock_raw_column_names = [
            'property id',
            'property_name',
            'property_notes',
            'lot number',
            'lot size'
        ];

        var mock_first_five_rows = [];
        for (var i=0; i < 4; i++) {
            mock_first_five_rows.push({
                'property id': i,
                'property_name': 'Property ' + i,
                'property_notes': 'Nup.',
                'lot number': i * 2,
                'lot size': 454 * i
            });
        }

        mock_first_five_rows.push({
            'property id': '121L',
            'property_name': 'Inconsistent Property',
            'property_notes': 'N/A',
            'lot number': 'N/A',
            'lot size': 45
        });

        var raw_columns_payload = {
            "status": "success",
            "raw_columns": mock_raw_column_names
        };
        var first_five_rows_payload = {
            "status": "success",
            "first_five_rows": mock_first_five_rows
        };
        mapping_ctrl = controller('mapping_controller', {
            $scope: mapping_ctrl_scope,
            import_file_payload: fake_import_file_payload,
            suggested_mappings_payload: mock_mapping_suggestions_payload,
            raw_columns_payload: raw_columns_payload,
            first_five_rows_payload: first_five_rows_payload,
            all_columns: {fields: []},
            building_services: mock_building_services,
            $timeout: timeout
        });
    }

    /*
     * Test scenarios
     */

    it("should have a import_file_payload", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        expect(mapping_ctrl_scope.import_file.dataset.name).toBe("DC 2013 data");
    });

    it("should show suggested mappings and confidence", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        var raw_columns = mapping_ctrl_scope.raw_columns;
        var first_column = raw_columns[0];

        expect(first_column.confidence).toBe(89);
        expect(first_column.suggestion).toBe("Pm Property Id");
    });

    it("should show 'low', 'med', 'high', or '' confidence text", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        var raw_columns = mapping_ctrl_scope.raw_columns;
        var first_column = raw_columns[0];
        expect(first_column.confidence_text()).toBe("high");
        first_column.confidence = 70;
        expect(first_column.confidence_text()).toBe("med");
        first_column.confidence = 35;
        expect(first_column.confidence_text()).toBe("low");
        delete(first_column.confidence);
        expect(first_column.confidence_text()).toBe("");
    });

    it("should validate initial data", function() {
        create_mapping_controller();
        // act
        mapping_ctrl_scope.$digest();
        // assertions
        angular.forEach(mapping_ctrl_scope.raw_columns, function(rc) {
            if (rc.suggestion !== '' && typeof(rc.suggestion) !== "undefined") {
                expect(rc.validity).toBe('valid');
            }
        });
    });

    it("should invalidate bad suggestions", function() {
        // Simulate a change on the tcm, make it fail.
        create_mapping_controller();
        // act
        mapping_ctrl_scope.$digest();
        // assertions
        //
        // We change the suggested mapping for the "property name" column
        // to "gross_floor_area" (which validates as float) to
        // purposesly cause a failing change.
        mapping_ctrl_scope.raw_columns[1].suggestion = 'gross_floor_area';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[1]);
        expect(mapping_ctrl_scope.raw_columns[1].validity).toBe('invalid');

    });

    it("should set td_class appropriately", function() {
        var tcm;

        create_mapping_controller();

        mapping_ctrl_scope.$digest();
        tcm = mapping_ctrl_scope.raw_columns[0];
        var good_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[0]
        );

        // First raw column is mapped up as pm_property_id <-> property_id
        // Any kind of string will be valid.
        expect(good_val).toBe('success');

        // Now set it to one that expects float values.
        // Only one of these will *not* validate.
        mapping_ctrl_scope.raw_columns[0].suggestion = 'gross_floor_area';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[0]);

        tcm = mapping_ctrl_scope.raw_columns[0];
        var warning_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[4]
        );

        expect(warning_val).toBe('warning');

        // We don't want the warning style to be applied to neighboring cells
        // in the same row. Check that the cell next to our invalid one is
        // unstyled (undefined).
        tcm = mapping_ctrl_scope.raw_columns[0];
        var adjacent_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[3]
        );

        expect(adjacent_val).toBe(undefined);

        // Now we're saying the suggestion is to not map.
        // Check that we don't have any class set for this row now.
        mapping_ctrl_scope.raw_columns[0].suggestion = '';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[0]);

        tcm = mapping_ctrl_scope.raw_columns[0];
        var blank_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[4]
        );

        expect(blank_val).toBe('');

    });

    it("should detect duplicates of mapped rows", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // raw_columns[0] and raw_columns[3] should be the only mapped rows
        var column = mapping_ctrl_scope.raw_columns[3];
        var test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

        // Set the property_name tcm's suggestion to the same as
        // the property_id tcm (raw_columns[0])
        column.suggestion = 'Pm Property Id';

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(true);

        // Since we mark both duplicates as duplicates, the other
        // TCM that has the 'pm_property_id' suggestion should also get
        // 'danger' as its duplicate class.
        var other_dup = mapping_ctrl_scope.is_tcm_duplicate(
            mapping_ctrl_scope.raw_columns[0]
        );
        expect(other_dup).toBe(true);

        // Shows that mapped_row is the sole determinant of
        // column ignoring
        column.mapped_row = false;

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

    });

    it("should ignore duplicates of unmapped rows", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // raw_columns[0] and raw_columns[3] should be the only mapped rows
        var column = mapping_ctrl_scope.raw_columns[1];
        var test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

        // Set the property_name tcm's suggestion to the same as
        // the property_id tcm (raw_columns[0])
        column.suggestion = 'Pm Property Id';

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);
    });

    it("should get mapped buildings", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        mapping_ctrl_scope.get_mapped_buildings();
        mapping_ctrl_scope.$digest();

        // assertions
        expect(mapping_ctrl_scope.search.search_buildings).toHaveBeenCalled();
        expect(mock_user_service.set_default_columns).toHaveBeenCalled();
    });

    it("should enbale the 'show & review buildings' button if duplicates are" +
        " not present", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        for (var i = mapping_ctrl_scope.raw_columns.length - 1; i >= 0; i--) {
            mapping_ctrl_scope.change(mapping_ctrl_scope.raw_columns[i]);
        }
        var duplicates_found = mapping_ctrl_scope.duplicates_present();

        // assertions
        expect(duplicates_found).toBe(false);
    });

    it("should disable the 'show & review buildings' button if duplicates " +
        "are present", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        for (var i = mapping_ctrl_scope.raw_columns.length - 1; i >= 0; i--) {
            mapping_ctrl_scope.raw_columns[i].suggestion = "pm_property_id";
            mapping_ctrl_scope.change(mapping_ctrl_scope.raw_columns[i]);
        }
        var duplicates_found = mapping_ctrl_scope.duplicates_present();

        // assertions
        expect(duplicates_found).toBe(true);
    });

    it("should get mappings in an API friendly way", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();
        var mappings = mapping_ctrl_scope.get_mappings();
        expect(mappings.length).toBe(5);
        expect(mappings[0]).toEqual(['Pm Property Id', 'property id']);
        // everything in between is empty since we we're using only
        // suggested mappings.
        expect(mappings[3]).toEqual(['Tax Lot Id', 'lot number']);
    });

    it("should show the 'STEP 2' tab when reviewing mappings", function() {
        // arrange
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // act
        var mappings = mapping_ctrl_scope.get_mapped_buildings();

        // assert
        expect(mapping_ctrl_scope.tabs).toEqual({
            'one_active': false,
            'two_active': true,
            'three_active': false
        });
    });

    it("should show BEDES fields with a checkbox", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assert
        expect(mapping_ctrl_scope.is_suggestion_BEDES('gross_floor_area')).toBe(true);
        expect(mapping_ctrl_scope.is_suggestion_BEDES('Gross Floor Area')).toBe(true);
        expect(mapping_ctrl_scope.is_suggestion_BEDES('My New non-BEDES field')).toBe(false);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: matching_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, delete_called;
    var matching_ctrl, matching_ctrl_scope, modalInstance, labels;


    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, building_services) {
            controller = $controller;
            scope = $rootScope;
            matching_ctrl_scope = $rootScope.$new();

            mock_building_services = building_services;
            spyOn(mock_building_services, "get_PM_filter_by_counts")
                .andCallFake(function(import_file){
                    return $q.when(
                        {
                            "status": "success",
                            "unmatched": 5,
                            "matched": 10
                        }
                    );
                }
            );
            spyOn(mock_building_services, "save_match")
                .andCallFake(function(b1, b2, create){
                    return $q.when(
                        {
                            "status": "success",
                            "child_id": 3
                        }
                    );
                }
            );
            spyOn(mock_building_services, "search_matching_buildings")
                .andCallFake(function(q, number_per_page, current_page, order_by, sort_reverse, 
                                        filter_params, file_id ){
                    
                    switch(filter_params.children__isnull){
                        case undefined:
                            var bldgs = ;
                            break;
                        case false:
                            var bldgs = [
                                {
                                    pm_property_id: 1
                                }
                            ];
                            break;
                        case true:
                            var bldgs = [
                                {
                                    pm_property_id: 3
                                },
                                {
                                    pm_property_id: 4
                                }
                            ];
                            break;
                    }

                    return $q.when(
                        {
                            status: "success",
                            number_returned: buildings_payload.length,
                            number_matching_search: buildings_payload.length,
                            buildings: bldgs;
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_detail_controller(){
        var buildings_payload = {
            buildings: [
                {
                    pm_property_id: 1,
                    tax_lot_id: null,
                    custom_id_1: 2,
                    gross_floor_area: 111,
                    matched: true,
                    id: 1,
                    children: [3],
                    coparent: {
                        pm_property_id: null,
                        tax_lot_id: 2,
                        custom_id_1: null,
                        gross_floor_area: 111,
                        id: 2,
                        children: [3]
                    }
                }
            ],
            number_matching_search: 1,
            number_returned: 1
        };
        matching_ctrl = controller('matching_controller', {
            $scope: matching_ctrl_scope,
            buildings_payload: buildings_payload,
            all_columns: {
                fields: [{sort_column: 'pm_property_id'}]
            },
            default_columns: {
                columns: ['pm_property_id']
            },
            import_file_payload: {
                import_file: {
                    id: 1,
                    dataset: {
                        importfiles: [
                            {
                                id: 1,
                                name: "file_1.csv"
                            },
                            {
                                id: 2,
                                name: "file_2.csv"
                            }
                        ]
                    }
                }
            }
        });
    }



    /*
     * Test scenarios
     */

    it("should have a buildings payload with potential matches", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();
        var b = matching_ctrl_scope.buildings[0];

        // assertions
        expect(matching_ctrl_scope.buildings.length).toBe(1);
        expect(b.coparent.children).toEqual(b.children);
    });

    it("should provide to the view scope variables representing the number matched and the number of unmatched buildings", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();

        // assertions
        expect(matching_ctrl_scope.matched_buildings).toEqual(10);
        expect(matching_ctrl_scope.unmatched_buildings).toEqual(5);
    });

    it("should jump back to the matching list when the 'Back to list' button" +
        " is clicked", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.show_building_list = false;
        matching_ctrl_scope.back_to_list();

        // assertions
        expect(matching_ctrl_scope.show_building_list).toEqual(true);
    });

    it("should present an initial state with the matching buildings table",
        function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();

        // assertions
        expect(matching_ctrl_scope.columns).toEqual([{ sort_column : 'pm_property_id' }]);
        expect(matching_ctrl_scope.number_matching_search).toEqual(1);
        expect(matching_ctrl_scope.number_returned).toEqual(1);
        expect(matching_ctrl_scope.num_pages).toEqual(1);
        expect(mock_building_services.get_PM_filter_by_counts).toHaveBeenCalled();
    });
    it("should match a building in the matching list", function() {
        // arrange
        create_dataset_detail_controller();
        var b1, b2;
        b2 = {
            id: 2,
            children: [],
            matched: false
        };
        b1 = {
            id: 1,
            children: [],
            matched: true,
            coparent: b2
        };

        // act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.toggle_match(b1);
        matching_ctrl_scope.$digest();

        // assertions
        expect(mock_building_services.save_match).toHaveBeenCalledWith(b1.id, b2.id, true);
        expect(mock_building_services.get_PM_filter_by_counts).toHaveBeenCalled();
        expect(b1.children[0]).toEqual(3);
    });
    it("Should update the list of buildings correctly when 'Show Matched' is selected", 
        function() {
        //arrange
        create_dataset_detail_controller();

        //act
        controller.update_show_filter(controller.SHOW_MATCHED)

        //assertions
        expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(1);
        expect(matching_ctrl_scope.number_returned).toEqual(1);
    });
    it("Should update the list of buildings correctly when 'Show Unmatched' is selected", 
        function() {
        //arrange
        create_dataset_detail_controller();

        //act
        controller.update_show_filter(controller.SHOW_UNMATCHED)

        //assertions
        expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(2);
        expect(matching_ctrl_scope.number_returned).toEqual(2);
    });
    it("Should update the list of buildings correctly when 'Show All' is selected", 
        function() {
        //arrange
        create_dataset_detail_controller();

        //act
        controller.update_show_filter(controller.SHOW_ALL)

        //assertions
        expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(3);
        expect(matching_ctrl_scope.number_returned).toEqual(3);
    });



});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: members_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller;
    var ctrl, ctrl_scope, modalInstance;
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          $q,
          organization_service) {
            ctrl = $controller;
            scope = $rootScope;
            ctrl_scope = $rootScope.$new();

            mock_organization_service = organization_service;
            
            spyOn(mock_organization_service, "remove_user")
                .andCallFake(function(user_id, org_id){
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
            spyOn(mock_organization_service, "get_organization_users")
                .andCallFake(function(org){
                    return $q.when(
                        {
                            "status": "success",
                            "users": [{id:1, first_name:"Bob", last_name:"D"}]
                        }
                    );
                }
            );
            spyOn(mock_organization_service, "update_role")
                .andCallFake(function(org_id, user_id, role){
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_members_controller(){
        ctrl = ctrl('members_controller', {
            $scope: ctrl_scope,
            users_payload: {users: [
                {first_name: 'J', last_name: 'S'},
                {first_name: undefined, last_name: null}
            ]},
            organization_payload: {
                organization: {name: 'my org', id: 4}
            },
            auth_payload: {
                auth: {
                    'can_invite_member': true,
                    'can_remove_member': true
                }
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should accepts its payload", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.org).toEqual({name : 'my org', id : 4});
        expect(ctrl_scope.users[0].name).toEqual("J S");
        expect(ctrl_scope.users[1].name).toEqual(" ");
    });
    it("clicking remove should remove a user", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.remove_member({user_id: 2});

        // assertions
        expect(mock_organization_service.remove_user)
            .toHaveBeenCalledWith(2, 4);
        
        ctrl_scope.$digest();
        expect(mock_organization_service.get_organization_users)
            .toHaveBeenCalledWith({org_id: 4});
    });
    it("clicking a new role should update the user's role", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.update_role({user_id: 2, role: "viewer"});

        // assertions
        expect(mock_organization_service.update_role)
            .toHaveBeenCalledWith(2, 4, 'viewer');
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: new_member_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_user_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, user_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        mock_user_service = user_service;
        spyOn(mock_user_service, "add")
            .andCallFake(function(user){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_new_member_controller(){
        ctrl = ctrl('new_member_modal_ctrl', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            organization: {organization_id: 1}
        });
    }

    /*
     * Test scenarios
     */

    it("should set the default role to 'member'", function() {
        // arrange
        create_new_member_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.user.role.value).toEqual("member"); 
    });
    it("should call the user service to add a new user to the org",
        function() {
        // arrange
        create_new_member_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.user.first_name = "JB";
        ctrl_scope.user.last_name = "Smooth";
        ctrl_scope.user.email = "jb.smooth@be.com";
        ctrl_scope.submit_form(true);

        // assertions
        expect(mock_user_service.add)
            .toHaveBeenCalledWith({
                first_name: "JB",
                last_name: "Smooth",
                email: "jb.smooth@be.com",
                role: ctrl_scope.roles[0],
                organization: {
                    organization_id: 1
                }
            });
    });
    
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
/**
 * run_jasmine.js: runs the jasmine JS test runner
 */
(function() {
    var jasmineEnv = jasmine.getEnv();
    jasmineEnv.updateInterval = 1000;

    var htmlReporter = new jasmine.HtmlReporter();

    jasmineEnv.addReporter(htmlReporter);

    jasmineEnv.specFilter = function(spec) {
        return htmlReporter.specFilter(spec);
    };

    var currentWindowOnload = window.onload;

    window.onload = function() {
        if (currentWindowOnload) {
        currentWindowOnload();
        }
        execJasmine();
    };
    function execJasmine() {
        jasmineEnv.execute();
    }
})();

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var searchTestApp = angular.module(
    'searchTestApp', ['BE.seed.service.search']
);

describe("The search_service service", function() {
    var saas, httpBackend, test_url;

    beforeEach(function () {
        module("searchTestApp");
        inject(function (search_service, $httpBackend) {
            saas = search_service;
            httpBackend = $httpBackend;
            httpBackend.when("POST", test_url).respond("ok");
        });

    });

    /**
     * sanitize_params tests
     */
    it('removes null and undefined values from filter_params', function () {
        // arrange
        saas.filter_params = {
          'National Median Site Energy Use__gte': 4,
          'National Median Site Energy Use__lte': null,
          'National Median Source EUI__gte': undefined
        };

        // act
        saas.sanitize_params();

        // assert
        expect(saas.filter_params).toEqual({'National Median Site Energy Use__gte': 4});
    });

    /**
     * search_buildings tests
     */
    it('has sane defaults', function() {
        expect(saas.url).toEqual("");
        expect(saas.error_message).toEqual("");
        expect(saas.alert).toEqual(false);
        expect(saas.buildings).toEqual([]);
        expect(saas.current_page).toEqual(1);
        expect(saas.number_per_page).toEqual(10);
        expect(saas.order_by).toEqual("");
        expect(saas.sort_column).toEqual("tax_lot_id");
        expect(saas.sort_reverse).toEqual(false);
        expect(saas.select_all_checkbox).toEqual(false);
        expect(saas.prev_page_disabled).toEqual(true);
        expect(saas.next_page_disabled).toEqual(true);
        expect(saas.num_pages).toEqual(0);
        expect(saas.query).toEqual("");
        expect(saas.showing).toEqual({
            'start': 1,
            'end': 0
        });
    });

    it('search_buildings uses the argument `query`', function() {
        saas.query = "hotels";
        saas.search_buildings("not hotels");

        expect(saas.query).toEqual("not hotels");
    });
    it('filter search resets the current page', function() {
        // arrange
        saas.current_page = 22;
        spyOn(saas, 'search_buildings');

        // act
        saas.filter_search();

        // assert
        expect(saas.current_page).toEqual(1);
        expect(saas.search_buildings).toHaveBeenCalled();
    });

    it('search_buildings function will default to its query if' +
        ' no query is passed as an argument', function() {
        saas.query = "hotels";
        saas.search_buildings();

        expect(saas.query).toEqual("hotels");
    });

    it('search_buildings hits the set url', function() {
        test_url = "/my-search-url";
        saas.url = test_url;
        saas.search_buildings();
        httpBackend.expectPOST(test_url);
        httpBackend.flush();
    });

    it('search_buildings POSTs the query data as `q`', function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.query = "hotel chains";
        saas.number_per_page = 25;
        saas.order_by = "gross_floor_area";
        saas.sort_reverse = true;
        saas.filter_params = {
            project: '2012 data'
        };

        // act
        saas.search_buildings();

        // assert
        httpBackend.expectPOST(test_url,
            {
                "q": "hotel chains",
                "number_per_page": 25,
                "order_by": "gross_floor_area",
                "sort_reverse": true,
                "filter_params": {
                    "project": "2012 data"
                },
                "page":1
            }
        ).respond(201, "");
        httpBackend.flush();
    });
    it('search_buildings updates its `buildings` model', function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.query = "hotel chains";
        saas.number_per_page = 25;
        saas.order_by = "gross_floor_area";
        saas.sort_reverse = true;
        saas.filter_params = {
            project: '2012 data'
        };

        // act
        saas.search_buildings();

        // assert
        httpBackend.expectPOST(test_url,
            {
                "q": "hotel chains",
                "number_per_page": 25,
                "order_by": "gross_floor_area",
                "sort_reverse": true,
                "filter_params": {
                    "project": "2012 data"
                },
                "page":1
            }
        ).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        expect(saas.buildings).toEqual([
            {
                name: "one",
                id: 1,
                checked: false
            },
            {
                name: "two",
                id: 2,
                checked: false
            }
        ]);
    });
    it('should clear the error and alert after a successful search',
        function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.error_message = "help";
        saas.alert = true;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {
            'buildings': [
                {
                    name: "one",
                    id: 1
                },
                {
                    name: "two",
                    id: 2
                }],
            'number_matching_search': 101
            });
        httpBackend.flush();

        // assert
        expect(saas.alert).toEqual(false);
        expect(saas.error_message).toEqual("");
    });

    /**
     * pagination tests
     */
    it('increments the page when the `next` button is clicked',
        function() {
        // arrange
        saas.num_pages = 1000;
        saas.current_page = 100;
        spyOn(saas, 'search_buildings');
        // act
        saas.next_page();

        // assert
        expect(saas.current_page).toEqual(101);
        expect(saas.search_buildings).toHaveBeenCalled();
        expect(saas.search_buildings.callCount).toEqual(1);

    });
    it('doesn\'t increment past the last page when the `next` button is' +
        ' clicked', function() {
        // arrange
        saas.num_pages = 2;
        saas.current_page = 2;
        spyOn(saas, 'search_buildings');
        // act
        saas.next_page();

        // assert
        expect(saas.current_page).toEqual(2);
        expect(saas.search_buildings).toHaveBeenCalled();
        expect(saas.search_buildings.callCount).toEqual(1);

    });
    it('decrements the page when the `previous` button is clicked',
        function() {
        // arrange
        saas.num_pages = 1000;
        saas.current_page = 100;
        spyOn(saas, 'search_buildings');
        // act
        saas.prev_page();

        // assert
        expect(saas.current_page).toEqual(99);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('does not decrement below the first page when the `previous` button' +
        ' is clicked', function() {
        // arrange
        saas.num_pages = 1;
        saas.current_page = 1;
        spyOn(saas, 'search_buildings');
        // act
        saas.prev_page();

        // assert
        expect(saas.current_page).toEqual(1);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('fetches more or less results per page when a user selects an option' +
        ' from the number per page select',
        function() {
        // arrange
        saas.number_per_page_options_model = 50;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_number_per_page();

        // assert
        expect(saas.number_per_page).toEqual(50);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('updates the number of results displayed text after a successful '+
        'search', function() {
        // standard case
        // page 2 of 3 with 10/page, so should display 11 of 20
        // arrange
        saas.current_page = 2;
        saas.num_pages = 3;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_start_end_paging();

        // assert
        expect(saas.showing.start).toEqual(11);
        expect(saas.showing.end).toEqual(20);
        expect(saas.search_buildings).not.toHaveBeenCalled();
    });
    it('displays the number matching the query if on the last page of results',
        function() {
        // standard case
        // page 3 of 3 with 10/page and 34 results, so should display 21 of 34
        // arrange
        saas.current_page = 3;
        saas.number_matching_search = 34;
        saas.num_pages = 3;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_start_end_paging();

        // assert
        expect(saas.showing.start).toEqual(21);
        expect(saas.showing.end).toEqual(34);
    });
    it('should call update_start_end_paging after a successful search',
        function() {
        // arrange
        spyOn(saas, 'update_start_end_paging');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_start_end_paging).toHaveBeenCalled();
    });
    it('should call update_buttons after a successful search',
        function() {
        // arrange
        spyOn(saas, 'update_buttons');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_buttons).toHaveBeenCalled();
    });
    it('should disable prev paging buttons at the first page',
        function() {
        // arrange
        saas.current_page = 1;
        saas.num_pages = 5;

        // act
        saas.update_buttons();

        // assert
        expect(saas.prev_page_disabled).toEqual(true);
        expect(saas.next_page_disabled).toEqual(false);
    });
    it('should disable next paging buttons at the last page',
        function() {
        // arrange
        saas.current_page = 5;
        saas.num_pages = 5;

        // act
        saas.update_buttons();

        // assert
        expect(saas.prev_page_disabled).toEqual(false);
        expect(saas.next_page_disabled).toEqual(true);
    });
    it('should calculate the number of pages after a successful search',
        function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {
            'buildings': [
                {
                    name: "one",
                    id: 1
                },
                {
                    name: "two",
                    id: 2
                }],
            'number_matching_search': 101
            });
        httpBackend.flush();

        // assert
        expect(saas.number_matching_search).toEqual(101);
        expect(saas.num_pages).toEqual(11);
    });

    /**
     * checkbox logic tests
     */
    it('should select or unselect all the viewed results when the select all' +
        ' checkbox is checked or unchecked', function() {
        // arrange
        saas.selected_buildings = [1,2,3];
        saas.select_all_checkbox = true;
        saas.buildings = [
            {
                checked: false
            },
            {
                checked: true
            }
        ];
        spyOn(saas, 'select_or_deselect_all_buildings').andCallThrough();

        // act
        saas.select_all_changed();

        // assert
        expect(saas.selected_buildings).toEqual([]);
        expect(saas.buildings).toEqual([
                {
                    checked: true
                },
                {
                    checked: true
                }
            ]);
        expect(saas.select_or_deselect_all_buildings).toHaveBeenCalled();
    });
    it('should call select_or_deselect_all_buildings after a search',
        function() {
        // arrange
        spyOn(saas, 'select_or_deselect_all_buildings');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.select_or_deselect_all_buildings).toHaveBeenCalled();
    });
    it('should add a building to the selected list when checked',
        function() {
        // arrange
        var building = {
            id: 5,
            checked: true
        };

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([5]);
    });
    it('should add a building to the selected list when unchecked and the ' +
        'select all checkbox is checked', function() {
        // arrange
        var building = {
            id: 5,
            checked: false
        };
        saas.select_all_checkbox = true;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([5]);
    });
    it('should remove a building to the selected list when unchecked',
        function() {
        // arrange
        var building = {
            id: 5,
            checked: false
        };
        saas.selected_buildings = [5,6,7];
        saas.select_all_checkbox = false;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([6,7]);
    });
    it('should remove a building to the selected list when checked if the ' +
        'select all checkbox is checked', function() {
        // arrange
        var building = {
            id: 5,
            checked: true
        };
        saas.selected_buildings = [5,6,7];
        saas.select_all_checkbox = true;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([6,7]);
    });
    it('should call load_state_from_selected_buildings after a successful ' +
        'search', function() {
        // arrange
        spyOn(saas, 'load_state_from_selected_buildings').andCallThrough();
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.load_state_from_selected_buildings).toHaveBeenCalled();
    });
    it('should call update_results after a successful ' +
        'search', function() {
        // arrange
        var select_or_deselect_all_buildings_time,
            load_state_from_selected_buildings_time;
        spyOn(saas, 'update_results').andCallThrough();
        spyOn(saas, 'select_or_deselect_all_buildings')
            .andCallFake(function() {
                select_or_deselect_all_buildings_time = new Date();
            }
        );
        spyOn(saas, 'load_state_from_selected_buildings')
            .andCallFake(function() {
                // wait for a sec, otherwise both have the same timestamp
                for(var y=0;y<100000;y++){
                    var x = new Date();
                    x = x+y;
                }
                load_state_from_selected_buildings_time = new Date();
            }
        );
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_results).toHaveBeenCalled();
        expect(select_or_deselect_all_buildings_time <
               load_state_from_selected_buildings_time).toBe(true);
    });
    it('check selected buildings successful', function() {
        // arrange
        saas.selected_buildings = [2];
        saas.buildings = [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ];

        // act
        saas.load_state_from_selected_buildings();

        // assert
        expect(saas.buildings[1]).toEqual({
            name: "two",
            id: 2,
            checked: true
        });
    });
    it('should generate columns', function() {
        // arrange
        var all_columns, column_headers, columns;
        all_columns = [
            {
                sort_column: "name"
            },
            {
                sort_column: "id"
            }
        ];
        column_headers = ["id"];
        saas.sort_column = "something else";
        saas.update_results({});
        // act
        columns = saas.generate_columns(
            all_columns, column_headers, saas.column_prototype
        );

        // assert that columns are extended off the prototype and only have
        // "id"
        expect(columns.length).toEqual(1);
        expect(columns[0].sort_column).toEqual("id");
        expect(columns[0].is_unsorted()).toEqual(true);
        saas.sort_column = "id";
        expect(columns[0].is_unsorted()).toEqual(false);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: settings_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller;
    var ctrl, ctrl_scope, modalInstance;
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          $q,
          organization_service) {
            ctrl = $controller;
            scope = $rootScope;
            ctrl_scope = $rootScope.$new();

            mock_organization_service = organization_service;
            
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_settings_controller(){
        ctrl = ctrl('settings_controller', {
            $scope: ctrl_scope,
            all_columns: {fields: [
                {checked: false, title: 'PM Property ID', sort_column: 'pm_property_id'},
                {checked: false, title: 'G', sort_column: 'g'},
                {checked: false, title: "Gross Floor Area", sort_column: 'gross_floor_area'}
            ]},
            organization_payload: {
                organization: {name: 'my org', id: 4}
            },
            query_threshold_payload: {
                query_threshold: 10
            },
            shared_fields_payload: {
                shared_fields: [
                    {
                        title: "PM Property Id",
                        sort_column: "pm_property_id"
                    }
                ],
                public_fields: [
                {
                    title: "Gross Floor Area",
                    sort_column: "gross_floor_area"
                }]
            },
            auth_payload: {
                auth: {
                    'is_owner': true,
                    'is_parent_org_owner': false
                }
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should accepts its payload", function() {
        // arrange
        create_settings_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.org).toEqual({
            name : 'my org',
            id : 4,
            query_threshold: 10
        });
        expect(ctrl_scope.fields[0].checked).toEqual(true);
        expect(ctrl_scope.fields[1].checked).toEqual(false);
        expect(ctrl_scope.fields[0].title).toEqual('PM Property ID');
    });
    it("should select all", function() {
        // arrange
        create_settings_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.controls.select_all = true;
        ctrl_scope.select_all_clicked();
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.infinite_fields[0].checked).toEqual(true);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myStripFilterApp = angular.module('myStripFilterApp', ['stripImportPrefix']);

describe("The stripImportPrefix filter", function() {
    beforeEach(module('myStripFilterApp'));
    it('Strips out the import prefix from building ids',
        // e.g. remove the 'IMP12-' from the id 'IMP12-1321/123'
        inject(function(stripImportPrefixFilter) {
            // normal cases
            expect(stripImportPrefixFilter('IMP134-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP134555-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP1-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP0-134')).toBe('134');
            // deals with `-`
            expect(stripImportPrefixFilter('IMP134-abc-dev')).toBe('abc-dev');
            // deals with `/`
            expect(stripImportPrefixFilter('IMP134-00/11')).toBe('00/11');
            // only strips first prefix
            expect(stripImportPrefixFilter('IMP134-IMP134-123')).toBe('IMP134-123');
        })
    );
    it("Does not strip out anything if there is not a prefix",
        inject(function(stripImportPrefixFilter) {
            // normal cases
            expect(stripImportPrefixFilter('123-123')).toBe('123-123');
            expect(stripImportPrefixFilter('0123/123')).toBe('0123/123');
        })
    );
    it("Is case sensitive to the import prefix",
        inject(function(stripImportPrefixFilter) {
            expect(stripImportPrefixFilter('imp123-abc')).toBe('imp123-abc');
            expect(stripImportPrefixFilter('iMp123-abc')).toBe('iMp123-abc');
            expect(stripImportPrefixFilter('iMP123-abc')).toBe('iMP123-abc');
        })
    );
    it("Handles undefined or null inputs",
        inject(function(stripImportPrefixFilter) {
            expect(stripImportPrefixFilter(undefined)).toBe(undefined);
            expect(stripImportPrefixFilter(null)).toBe(null);
        })
    );
    it("Only strips out the prefix if it has at least one digit and a hyphen",
        inject(function(stripImportPrefixFilter) {
            // must have the 'IMP' folowed by a digit then a hyphen
            expect(stripImportPrefixFilter('IMP-123')).toBe('IMP-123');
            expect(stripImportPrefixFilter('IMP1123')).toBe('IMP1123');
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myTitleCaseApp = angular.module('myTitleCaseApp', ['titleCase']);

describe("The TitleCase filter", function() {
    beforeEach(module('myTitleCaseApp'));
    it('Strips out ``_`` characters from strings and capitalizes the rest',
        inject(function(titleCaseFilter) {
            // normal cases
            expect(titleCaseFilter('super_data')).toBe('Super Data');
            expect(titleCaseFilter('super_data_45')).toBe('Super Data 45');
            expect(titleCaseFilter(undefined)).toBe(undefined);
            expect(titleCaseFilter(null)).toBe(null);
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myTypedNumberFilterApp = angular.module('myTypedNumberFilterApp', ['typedNumber']);

describe("The typedNumber filter", function() {
    beforeEach(module('myTypedNumberFilterApp'));
    it('should parse strings as strings and return them',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('tester')).toBe('tester');
        })
    );
    it('should parse strings as strings and return them, even if they look like numbers',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.1456')).toBe('123.1456');
        })
    );

    it('should parse numbers as numbers and return them',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.00001', 'number')).toBe("123");
        })
    );

    it('should allow the user to set the number of sig digits',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.321', 'number', 'not_year', 1)).toBe("123.3");
        })
    );

    it('should add commas to number greater than 999',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123456789', 'number', 'not_year', 0)).toBe("123,456,789");
        })
    );

    it('should parse year_built and not add commas',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('1946', 'number', 'year_built', 1)).toBe("1946");
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var validationTestApp = angular.module(
    'validationTestApp', ['mappingValidatorService']
);

describe("The MappingValidatorService", function() {
    var mvs;

    beforeEach(function () {
        module("validationTestApp");
        inject(function (mappingValidatorService) {
            mvs = mappingValidatorService;

        });

    });

    it('validates good string, float and date data', function() {
        // normal cases
        // Here ``type`` is undefined. Should still work.
        var str_data = ['Fun', 'fun2', 'fun3', 'fun4'];
        var float_data = ['12.34', '144.5', '234'];
        var date_data = ['2014/02/02', '03/13/2013', '03-14-2004'];

        expect(mvs.validate(str_data)).toEqual([]);
        expect(mvs.validate(float_data, 'float')).toEqual([]);
        expect(mvs.validate(date_data, 'date')).toEqual([]);
    });

    it('recognizes semivalid data', function() {
        // Cases where the data is /almost/ right.
        var float_data = ['12.34', '144.5', 'NaN'];
        var date_data = ['2014/02/02', 'huh?', '03-14-2004'];
        expect(mvs.validate(float_data, 'float')).toEqual(['NaN']);
        expect(mvs.validate(date_data, 'date')).toEqual(['huh?']);
    });

    it('recognizes invalid data', function() {
        // Cases where the data is *all* wrong.
        var float_data = ['', 'not a float', 'NaN'];
        var date_data = ['', 'huh?', 'what?'];
        // Cases where the data are correct.
        var good_float_data = ['12.34', '144.5', '234'];
        var good_date_data = ['2014/02/02', '03/13/2013', '03-14-2004'];

        // Data is wrong
        expect(mvs.validate(float_data, 'float')).toEqual(float_data);
        expect(mvs.validate(date_data, 'date')).toEqual(date_data);

        // Type is wrong
        // N.B. we use semivalid here, because Date is pretty forgiving w/ nums.
        expect(mvs.validate(good_float_data, 'date')).toEqual(['12.34']);
        expect(mvs.validate(good_date_data, 'float')).toEqual(good_date_data);


    });

});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// taken from the angularjs testing page
// http://docs.angularjs.org/guide/dev_guide.unit-testing

// create dummy angularJS app to attach filter(s)
var myBELabelDirectiveApp = angular.module('myBELabelDirectiveApp', ['beLabel']);

describe("The beLabel directive", function() {
    var $compile;
    var $rootScope;
    beforeEach(module('myBELabelDirectiveApp'));
    // Store references to $rootScope and $compile
    // so they are available to all tests in this describe block
    beforeEach(inject(function(_$compile_, _$rootScope_){
      // The injector unwraps the underscores (_) from around the parameter names when matching
      $compile = _$compile_;
      $rootScope = _$rootScope_;
    }));

    it('Replaces the element with the appropriate content', function() {
        // Compile a piece of HTML containing the directive
        var element = $compile('<be-label name="compliant" color="blue"></be-label>')($rootScope);
        // fire all the watches
        $rootScope.$digest();
        // Check that the compiled element contains the templated content
        expect(element.hasClass('label-primary')).toBe(true);
        expect(element.hasClass('label')).toBe(true);
        expect(element.html()).toContain("compliant");
    });

        // 'red': 'danger',
        // 'gray': 'default',
        // 'orange': 'warning',
        // 'green': 'success',
        // 'blue': 'primary',
        // 'light blue': 'info'
    it('Maps colors to semantic bootstrap class names', function() {
        var element = $compile('<be-label name="compliant" color="red"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-danger')).toBe(true);

        element = $compile('<be-label name="compliant" color="gray"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-default')).toBe(true);

        element = $compile('<be-label name="compliant" color="orange"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-warning')).toBe(true);

        element = $compile('<be-label name="compliant" color="green"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-success')).toBe(true);

        element = $compile('<be-label name="compliant" color="blue"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-primary')).toBe(true);

        element = $compile('<be-label name="compliant" color="light blue"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-info')).toBe(true);
    });


});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// taken from the angularjs testing page
// http://docs.angularjs.org/guide/dev_guide.unit-testing

// create dummy angularJS app to attach filter(s)
var myBEUploaderDirectiveApp = angular.module('myBEUploaderDirectiveApp', ['beUploader']);

describe("The beUploader directive", function() {
    var g_message, g_file, g_progress;
    var $compile;
    var $rootScope;
    var uploader_html = '<div be-uploader sourcetype="assessor" importrecord="5" buttontext="Upload your building list .csv file" eventfunc="uploaderfunc(message, filename, progress)" ng-hide="uploader.in_progress"></div>';
    beforeEach(module('myBEUploaderDirectiveApp'));
    // Store references to $rootScope and $compile
    // so they are available to all tests in this describe block
    beforeEach(inject(function(_$compile_, _$rootScope_){
      // The injector unwraps the underscores (_) from around the parameter names when matching
      $compile = _$compile_;
      $rootScope = _$rootScope_;
      $rootScope.eventfunc = function (fine_object) {
        console.log({fin: fine_object});
        g_message = fine_object.message;
        g_file = fine_object.file;
        g_progress = fine_object.progress;
      };
      window.BE = window.BE || {};
      window.BE.FILE_UPLOAD_DESTINATION = 'S3';
    }));

    it('Creates the fineuploader element', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        
        // act
        $rootScope.$digest();

        // assert
        expect(element.html()).toContain("qq-uploader");
        expect(element.html()).toContain("qq-upload-button");
    });

    it('Contains the buttontext specified', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);

        // act
        $rootScope.$digest();

        // assert
        expect(element.html()).toContain("Upload your building list .csv file");
    });

    it('Only allows one file to be uploaded at a time', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");

        // act
        $rootScope.$digest();

        // assert
        expect(func._options.multiple).toBe(false);
    });

    it('Uses the callback function for invalid file types', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.jpeg");

        // act
        $rootScope.$digest();
        func._options.showMessage("there was an invalid extension. Valid extension(s): .csv");


        // assert
        expect(g_message).toBe("invalid_extension");
    });

    it('Uses the callback function to share its state: upload started',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';
        
        // act
        $rootScope.$digest();
        func._options.callbacks.onSubmitted(1, filename);


        // assert
        expect(g_message).toBe("upload_submitted");
        expect(g_file.filename).toBe(filename);
    });

    it('Uses the callback function to share its state: in progress',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';
        var loaded = 10;
        var total = 100;
        
        // act
        $rootScope.$digest();
        func._options.callbacks.onProgress(1, filename, loaded, total);


        // assert
        expect(g_message).toBe("upload_in_progress");
        expect(g_file.filename).toBe(filename);
        expect(g_progress.loaded).toBe(loaded);
        expect(g_progress.total).toBe(total);
    });

    it('Uses the callback function to share its state: complete',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';

        
        // act
        $rootScope.$digest();
        func._options.callbacks.onComplete(1, filename, {success: true});


        // assert        
        expect(g_message).toBe("upload_complete");
        expect(g_file.filename).toBe(filename);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: building_detail_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, ngFilter, delete_called;
    var building_detail_ctrl, building_detail_ctrl_scope, modalInstance, labels;
    var mock_building_services, mock_project_service;
    var mock_building;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          urls,
          $q,
          building_services,
          project_service,
          $filter) {
            controller = $controller;
            scope = $rootScope;
            ngFilter = $filter;
            building_detail_ctrl_scope = $rootScope.$new();
            modal_state = "";
            delete_called = false;

            // mock the building_services factory methods used in the controller
            // and return their promises
            mock_building_services = building_services;
            mock_project_service = project_service;

            spyOn(mock_project_service, "get_project")
                .andCallFake(function(project_slug){
                    return $q.when(
                        {
                            "status": "success",
                            "project": {
                                id: 33,
                                name: "test project",
                                slug: project_slug
                            }
                        }
                    );
                }
            );
            spyOn(mock_project_service, "get_labels")
                .andCallFake(function(){
                    return $q.when(
                        {
                            "status": "success",
                            "labels": [{
                                id: 44,
                                name: "bad label",
                                color: "red"
                            }]
                        }
                    );
                }
            );
            spyOn(mock_project_service, "update_project_building")
                .andCallFake(function(building_id, project, label){
                    return $q.when(
                        {
                            "status": "success",
                            "approver": "bob doe",
                            "approved_date": "01/01/2012"
                        }
                    );
                }
            );
            spyOn(mock_building_services, "update_building")
                .andCallFake(function (building, org_id){
                    mock_building = building;
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_building_detail_controller(){
        var fake_building = {
            id: 511,
            pk: 511,
            gross_floor_area: 123456,
            gross_floor_area_source: 2,
            city: "DC",
            city_source: 4,
            tax_lot_id: "11/22",
            tax_lot_id_source: 3,
            extra_data: {
                'some other key': 12344,
                'some other key that is not in a parent': 223
            },
            extra_data_sources: {
                'some other key': 2,
                'some other key that is not in a parent': 3
            },
            created: "at some point"
        };
        var fake_imported_buildings = [
            {
                id: 2,
                pk: 2,
                gross_floor_area: 123456,
                gross_floor_area_source: null,
                city: "Washington, DC",
                city_source: null,
                extra_data: {
                    'some other key': 123,
                    'some other key that is not in a child': 333,
                    'some floor area': 444
                },
                extra_data_sources: {
                    'some other key': null,
                    'some other key that is not in a child': 111,
                    'some floor area': 444
                },
                created: "test"
            },
            {
                id: 3,
                pk: 3,
                gross_floor_area: 2111111,
                gross_floor_area_source: null,
                city: "Washington",
                city_source: null,
                tax_lot_id: "11/22",
                tax_lot_id_source: null,
                extra_data: {
                    'make it four': 4
                },
                extra_data_sources: {
                    'make it four': null
                }
            },{
                id: 4,
                pk: 4,
                gross_floor_area: 2111111,
                gross_floor_area_source: null,
                city: "Washington",
                city_source: null,
                tax_lot_id: "11/22",
                tax_lot_id_source: null,
                extra_data: {
                    'make it four': 5
                },
                extra_data_sources: {
                    'make it four': null
                }
            }
        ];
        var fake_payload = {
            "status": "success",
            "building": fake_building,
            "imported_buildings": fake_imported_buildings,
            "projects": [],
            "user_org_id": 42
        };
        var fake_all_columns = [{
            "title": "PM Property ID",
            "sort_column": "pm_property_id",
            "class": "is_aligned_right",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Tax Lot ID",
            "sort_column": "tax_lot_id",
            "class": "is_aligned_right",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Custom ID 1",
            "sort_column": "custom_id_1",
            "class": "is_aligned_right whitespace",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Property Name",
            "sort_column": "property_name",
            "class": "",
            "title_class": "",
            "type": "string",
            "field_type": "building_information",
            "sortable": true,
            "checked": false
        }];
        building_detail_ctrl = controller('building_detail_controller', {
            $scope: building_detail_ctrl_scope,
            $routeParams: {
                building_id: 1,
                project_id: 2
            },
            building_payload: fake_payload,
            all_columns: {
                fields: fake_all_columns
            },
            audit_payload: {
                audit_logs: []
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should have an building payload", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.building.id).toBe(511);
        expect(building_detail_ctrl_scope.imported_buildings[0].id).toBe(2);
    });

    it("should get labels on load", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.labels[0].id).toBe(44);
        expect(building_detail_ctrl_scope.labels[0].name).toBe("bad label");
        expect(building_detail_ctrl_scope.labels[0].color).toBe("red");
    });

    it("should highlight the active project", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.is_active_project({id:33}))
        .toBe(true);
        expect(building_detail_ctrl_scope.is_active_project({id:34}))
        .toBe(false);
        building_detail_ctrl_scope.project = undefined;
        expect(building_detail_ctrl_scope.is_active_project({id:34}))
        .toBe(false);
    });

    it("should make a copy of building while making edits", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.save_building_state();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;

        // assertions
        expect(building_detail_ctrl_scope.building_copy.gross_floor_area)
        .toBe(123456);
    });
    it("should restore the copy of building if a user clicks cancel",
        function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.save_building_state();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;
        building_detail_ctrl_scope.restore_building();

        // assertions
        expect(building_detail_ctrl_scope.building.gross_floor_area)
        .toBe(123456);
        expect(building_detail_ctrl_scope.building.edit_form_showing).toBe(false);
    });
    it("should save a building when a user clicks the save button", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;
        building_detail_ctrl_scope.save_building();

        // assertions
        expect(mock_building_services.update_building)
        .toHaveBeenCalledWith(building_detail_ctrl_scope.building, 42);
        expect(mock_building.gross_floor_area).toEqual(43214);
    });
    it("should show a default label if a building doesn't have one", function() {
        // arrange
        create_building_detail_controller();
        var building_with_label = {
            label: {
                name: "hello",
                label: "success"
            }
        };
        var building_without_label = {};
        var label_with, label_without;

        // act
        building_detail_ctrl_scope.$digest();
        label_with = building_detail_ctrl_scope.get_label(building_with_label);
        label_without = building_detail_ctrl_scope.get_label(building_without_label);

        // assertions
        expect(label_with).toEqual({
                name: "hello",
                label: "success"
            });
        expect(label_without).toEqual({
                name: "Add Label",
                label: "default"
            });
    });

    it("should show a project or buildings breadcrumb", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.user.project_slug = "project_1";

        // assertions
        expect(building_detail_ctrl_scope.is_project()).toEqual(true);
        building_detail_ctrl_scope.user.project_slug = undefined;
        expect(building_detail_ctrl_scope.is_project()).toEqual(false);

    });
    it("should show the default projects table if a user has no compliance" +
        " projects", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.user.has_projects()).toEqual(false);
        building_detail_ctrl_scope.projects = [{id: 1, name: "a"}];
        expect(building_detail_ctrl_scope.user.has_projects()).toEqual(true);

    });

    it("should set only building attribute to master, not ids or children", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.is_valid_key('id')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('pk')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('pk_source')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key(' extra_data ')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('gross_floor_area'))
          .toEqual(true);
    });
    it("should update a project-building label", function() {
        // arrange
        create_building_detail_controller();
        var project = {
            id: 2,
            building: {}
        };

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.update_project_building(project,
            {
                name: "label name",
                color: "red"
            });
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(mock_project_service.update_project_building).toHaveBeenCalled();
        expect(project.building.approver).toEqual("bob doe");
        expect(project.building.approved_date).toEqual("01/01/2012");
        expect(project.building.label.name).toEqual("label name");
        expect(project.building.label.color).toEqual("red");

    });
    it("should set a field as source when clicked", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[0].is_master = true;
        expect(building_detail_ctrl_scope.building.gross_floor_area_source)
          .not.toEqual(building_detail_ctrl_scope.building.id);
        building_detail_ctrl_scope.set_self_as_source('gross_floor_area');
        building_detail_ctrl_scope.set_self_as_source('some other key', true);
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.building.gross_floor_area_source)
          .toEqual(building_detail_ctrl_scope.building.id);
        expect(building_detail_ctrl_scope.imported_buildings[0].is_master)
          .toEqual(false);
    });
    it("should set a column as the dominant source when clicked", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[1].is_master = true;
        building_detail_ctrl_scope.make_source_default(
            building_detail_ctrl_scope.imported_buildings[0]);
        building_detail_ctrl_scope.$digest();

        // assertions
        var b = building_detail_ctrl_scope.building,
            i = building_detail_ctrl_scope.imported_buildings[0],
            i_other = building_detail_ctrl_scope.imported_buildings[1];

        expect(b.gross_floor_area_source).toEqual(i.id);
        expect(b.id).not.toEqual(i.id);
        expect(b.pk).not.toEqual(i.id);
        expect(b.city).toEqual(i.city);
        expect(b.city_source).toEqual(i.id);
        expect(b.tax_lot_id).toEqual("11/22");
        expect(b.tax_lot_id_source).toEqual(i_other.id);
        expect(b.extra_data['some other key']).toEqual(123);
        expect(b.extra_data_sources['some other key']).toEqual(i.id);
        expect(b.extra_data['some other key that is not in a child']).toEqual(333);
        expect(b.extra_data_sources['some other key that is not in a child']).toEqual(i.id);
        expect(b.extra_data['some other key that is not in a parent']).toEqual(223);
        expect(b.extra_data_sources['some other key that is not in a parent']).toEqual(i_other.id);
        expect(b.created).toEqual("at some point");

        expect(i.is_master).toEqual(true);
        expect(i_other.is_master).toEqual(false);
    });
    it("should set the master building value when parent's value is clicked",
        function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[1].is_master = true;
        building_detail_ctrl_scope.set_building_attribute(
            building_detail_ctrl_scope.imported_buildings[0], 'city');
        building_detail_ctrl_scope.set_building_attribute(
            building_detail_ctrl_scope.imported_buildings[0], 'some other key', true);
        building_detail_ctrl_scope.$digest();

        // assertions
        var b = building_detail_ctrl_scope.building,
            i = building_detail_ctrl_scope.imported_buildings[0],
            i_other = building_detail_ctrl_scope.imported_buildings[1];

        expect(b.id).not.toEqual(i.id);
        expect(b.pk).not.toEqual(i.id);
        expect(b.city).toEqual(i.city);
        expect(b.city_source).toEqual(i.id);
        expect(b.tax_lot_id).toEqual("11/22");
        expect(b.tax_lot_id_source).toEqual(i_other.id);
        expect(b.extra_data['some other key']).toEqual(123);
        expect(b.extra_data_sources['some other key']).toEqual(i.id);

        expect(i.is_master).toEqual(false);
        expect(i_other.is_master).toEqual(false);
    });

    it("should display all the data within all the buildings", function() {
        // arrange
        create_building_detail_controller();
        var keys;

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        var edc = building_detail_ctrl_scope.data_columns;

        // should not duplicate keys
        expect(edc.length).toEqual(8);
        keys = edc.map(function ( d ) {
            return d.key;
        });
        expect(keys.indexOf('make it four')).toEqual(4);
    });

    it("should display Floor Areas", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.$digest();

        // assertions
        var area_fields = building_detail_ctrl_scope.floor_area_fields;
        expect(area_fields.length).toEqual(1);
    });

    it("should display Floor Areas with number", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.get_number("")).toEqual(0);
        expect(building_detail_ctrl_scope.get_number("123,123,123")).toEqual(123123123);
        expect(building_detail_ctrl_scope.get_number("123,123,123.123")).toEqual(123123123.123);
        expect(building_detail_ctrl_scope.get_number("-123,123,123")).toEqual(-123123123);
        expect(building_detail_ctrl_scope.get_number(-123123123)).toEqual(-123123123);


    });
});

describe("controller: concat_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var scope, controller, modal_state;
    var edit_ctrl, concat_modal_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label, mock_mapping_service, mock_matching_service;
    var global_step = 1;
    var global_dataset = {};

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
            $controller, $rootScope, $modal, urls, $q
        ) {
            controller = $controller;
            scope = $rootScope;
            concat_modal_ctrl_scope = $rootScope.$new();
            concat_modal_ctrl_scope.concat_columns = [];
            modal_state = "";
        }
    ));

    var mock_building_column_types = [
        'address1', 'city', 'state', 'postal_code'
    ];

    var mock_raw_columns = [
        {
            name: 'Address',
            suggestion: 'address1',
            confidence: 1,
            raw_data: [
                '234 Database way',
                '23444 Huh hwy',
                '23444 Huh hwy',
                '23444 Huh hwy',
                '1223 face pl.'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        },
        {
            name: 'City',
            suggestion: 'city',
            confidence: 1,
            raw_data: [
                'Mega City', 'Mega City', 'Mega City', 'Mega City', 'Mega City'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        },
        {
            name: 'Zip',
            suggestion: '',
            confidence: 0,
            raw_data: [
                '234233', '234233', '234233', '234233', '234233'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        }
    ];

    // this is outside the beforeEach so it can be configured by each unit test
    function create_concat_modal_controller(){
        edit_ctrl = controller('concat_modal_ctrl', {
            $scope: concat_modal_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            building_column_types: mock_building_column_types,
            raw_columns: mock_raw_columns
        });
    }

    /*
     * Test scenarios
     */

    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.close_concat_modal();
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should mangle scope appropriately during concatenation", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(3);

        // arrange
        concat_modal_ctrl_scope.concat_columns =
            concat_modal_ctrl_scope.raw_columns.slice(0);
        concat_modal_ctrl_scope.raw_columns = [];

        // act
        concat_modal_ctrl_scope.$digest();
        concat_modal_ctrl_scope.save_concat();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(1);
        expect(
            concat_modal_ctrl_scope.raw_columns[0].is_concatenated
        ).toEqual(true);
    });

    it("should modify the raw_data of our modified TCM correctly", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(3);

        // arrange
        concat_modal_ctrl_scope.concat_columns =
            concat_modal_ctrl_scope.raw_columns.slice(0);
        concat_modal_ctrl_scope.raw_columns = [];

        // act
        concat_modal_ctrl_scope.$digest();
        concat_modal_ctrl_scope.save_concat();

        var expected_raw = [
            '234 Database way Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '1223 face pl. Mega City 234233'
        ];

        // assertions
        expect(
            concat_modal_ctrl_scope.raw_columns[0].raw_data
        ).toEqual(expected_raw);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: create_organization_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_organization_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, organization_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        mock_organization_service = organization_service;
        spyOn(mock_organization_service, "create_sub_org")
            .andCallFake(function(org, sub_org){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_organization_modal_ctrl(){
        ctrl = ctrl('create_organization_modal_ctrl', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            organization: {organization_id: 1}
        });
    }

    /*
     * Test scenarios
     */

    it("should call the organization service to add a new sub_org",
        function() {
        // arrange
        create_organization_modal_ctrl();

        // act
        ctrl_scope.$digest();
        ctrl_scope.sub_org.name = "my shiny new org";
        ctrl_scope.sub_org.email = "jb.smooth@be.com";
        ctrl_scope.submit_form(true);

        // assertions
        expect(mock_organization_service.create_sub_org)
            .toHaveBeenCalledWith(
                {
                    organization_id: 1
                },
                {
                    name: "my shiny new org",
                    email: "jb.smooth@be.com"
                }
            );
    });
    
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: data_upload_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_uploader_service, scope, controller, modal_state;
    var edit_ctrl, data_upload_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label, mock_mapping_service, mock_matching_service;
    var global_step = 1;
    var global_dataset = {};
    var return_labels = [
        {
            "name": 'compliant',
            "color": 'green',
            "id": 1
        },
        {
            "name": "new label",
            "color": "blue",
            "id": 2
        }
    ];

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, uploader_service, mapping_service, matching_service) {
            controller = $controller;
            scope = $rootScope;
            data_upload_ctrl_scope = $rootScope.$new();
            modal_state = "";

            // mock the uploader_service factory methods used in the controller
            // and return their promises
            mock_uploader_service = uploader_service;
            mock_mapping_service = mapping_service;
            mock_matching_service = matching_service;
            spyOn(mock_uploader_service, "get_AWS_creds")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "AWS_CLIENT_ACCESS_KEY": "123",
                            "AWS_UPLOAD_BUCKET_NAME": "test-bucket"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "check_progress")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "progress": "25.0"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "create_dataset")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "id": 3,
                                "name": dataset_name

                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error",
                                "message": "name already in use"
                            }
                        );
                    }
                }
            );
            spyOn(mock_uploader_service, "save_raw_data")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "file_id": 3
                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error"
                            }
                        );
                    }
                }
            );
            spyOn(mock_mapping_service, "start_mapping")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "file_id": 3
                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error"
                            }
                        );
                    }
                }
            );
            spyOn(mock_matching_service, "start_system_matching")
            .andCallFake(function(file_id){
                // return $q.reject for error scenario
                return $q.when(
                    {
                        "status": "success",
                        "file_id": 3
                    }
                );
            });

        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_data_upload_modal_controller(){
        edit_ctrl = controller('data_upload_modal_ctrl', {
            $scope: data_upload_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            step: global_step,
            dataset: global_dataset
        });
    }

    /*
     * Test scenarios
     */

    it("should close the modal when the close function is called", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.close();
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel function is called", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.cancel();
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

    it("should start at the step provided", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(1);

        // arrange
        global_step = 2;
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(2);
    });

    it("should goto different steps", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var step;
        step = 2;
        data_upload_ctrl_scope.goto_step(step);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(step);
    });

    it("disables the 'Name it' button if no text is entered", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(true);
    });
    it("disables the 'Name it' button if no text is entered, then cleared",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.dataset.name = undefined;
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(true);
    });
    it("enables the 'Name it' button if text is entered", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.dataset.name = "my dataset name";
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(false);
    });
    it("should show an alert if the dataset name is already in use",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.create_dataset("fail");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.alert).toBe(true);
    });
    it("should not show an alert if the dataset name is not already in use",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.create_dataset("my shiny new dataset");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.alert).toBe(false);
    });
    it("after creating a dataset, stores the dataset id", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var ds_name = "my shiny new dataset";
        data_upload_ctrl_scope.create_dataset(ds_name);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.id).toBe(3);
        expect(data_upload_ctrl_scope.dataset.name).toBe(ds_name);
    });
    it("after uploading a file, stores the file id", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var message, filename;
        message = "upload_complete";
        filename = "file1.csv";

        // act
        data_upload_ctrl_scope.uploaderfunc(message, {
            filename: filename,
            file_id: 20140313
        });
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.import_file_id).toBe(20140313);
    });
    it("should show an invalid extension alert if a file with an invalid" +
        "extension is loaded", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.uploaderfunc("invalid_extension");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.invalid_extension_alert)
            .toBe(true);
    });
    it("should hide the upload button after the user selects a file",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename;
        message = "upload_submitted";
        filename = "file1.csv";

        // act
        data_upload_ctrl_scope.uploaderfunc(message, {filename: filename});
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.filename).toBe(filename);
        expect(data_upload_ctrl_scope.uploader.in_progress).toBe(true);
    });
    it("should show the progressbar during upload",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename, progress;
        message = "upload_in_progress";
        filename = "file1.csv";
        progress = {
            loaded: 10,
            total: 100
        };

        // act
        data_upload_ctrl_scope.uploaderfunc(message, filename, progress);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.in_progress).toBe(true);
        expect(data_upload_ctrl_scope.uploader.progress).toBe(2.5);
    });
    it("should start saving the energy data when the file has been uploaded",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename;
        message = "upload_complete";
        filename = "file1.csv";
        data_upload_ctrl_scope.step.number = 4;

        // act
        data_upload_ctrl_scope.uploaderfunc(message, filename);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.status_message)
            .toBe("saving energy data");
    });

    it("should take an dataset payload", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.name).toBe("");
        expect(data_upload_ctrl_scope.dataset.filename).toBe("");
        expect(data_upload_ctrl_scope.dataset.id).toBe(0);
    });

    it("should extend a custom dataset payload", function() {
        // arrange
        global_dataset = {
            id: 100,
            filename: "seed_data.csv",
            name: "Compliance Project"
        };
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.name).toBe("Compliance Project");
        expect(data_upload_ctrl_scope.dataset.filename).toBe("seed_data.csv");
        expect(data_upload_ctrl_scope.dataset.id).toBe(100);
        expect(data_upload_ctrl_scope.dataset.alert).toBe(false);

    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: dataset_detail_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, ngFilter, delete_called;
    var dataset_detail_ctrl, dataset_detail_ctrl_scope, modalInstance, labels;

    

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, dataset_service, $filter) {
            controller = $controller;
            scope = $rootScope;
            ngFilter = $filter;
            dataset_detail_ctrl_scope = $rootScope.$new();
            modal_state = "";
            delete_called = false;

            // mock the dataset_service factory methods used in the controller
            // and return their promises
            mock_dataset_service = dataset_service;
            spyOn(mock_dataset_service, "get_dataset")
                .andCallFake(function(dataset_id){
                    // return $q.reject for error scenario
                    var fake_importfiles = [
                        {
                            name: "DC_CoveredBuildings_50k.csv",
                            number_of_buildings: 511,
                            number_of_mappings: 511,
                            number_of_cleanings: 1349,
                            source_type: "Assessed Raw",
                            number_of_matchings: 403
                        },
                        {
                            name: "DC_ESPM_Report.csv",
                            number_of_buildings: 511,
                            number_of_matchings: 403,
                            source_type: "Portfolio Raw"
                        }
                    ];
                    var fake_dataset = {
                        name: "DC 2013 data",
                        last_modified: (new Date()).getTime(),
                        last_modified_by: "john.s@buildingenergy.com",
                        number_of_buildings: 89,
                        id: 1,
                        importfiles: fake_importfiles
                    };
                    var fake_payload = {
                        "status": "success",
                        "dataset": fake_dataset
                    };
                    if (delete_called) {
                        fake_payload.dataset.importfiles.pop();
                    }
                    console.log({delete_called: delete_called, ds: fake_payload});
                    return $q.when(fake_payload);
                }
            );

            spyOn(mock_dataset_service, "delete_file")
                .andCallFake(function(import_file){
                    delete_called = true;
                    console.log({d: "delete_called"});
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_detail_controller(){
        var fake_importfiles = [
            {
                name: "DC_CoveredBuildings_50k.csv",
                number_of_buildings: 511,
                number_of_mappings: 511,
                number_of_cleanings: 1349,
                source_type: "Assessed Raw",
                number_of_matchings: 403
            },
            {
                name: "DC_ESPM_Report.csv",
                number_of_buildings: 511,
                number_of_matchings: 403,
                source_type: "Portfolio Raw"
            }
        ];
        var fake_dataset = {
            name: "DC 2013 data",
            last_modified: (new Date()).getTime(),
            last_modified_by: "john.s@buildingenergy.com",
            number_of_buildings: 89,
            id: 1,
            importfiles: fake_importfiles
        };
        var fake_payload = {
            "status": "success",
            "dataset": fake_dataset
        };
        dataset_detail_ctrl = controller('dataset_detail_controller', {
            $scope: dataset_detail_ctrl_scope,
            dataset_payload: fake_payload
        });
    }

    /*
     * Test scenarios
     */

    it("should have an data set payload with import files", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        dataset_detail_ctrl_scope.$digest();

        // assertions
        expect(dataset_detail_ctrl_scope.dataset.importfiles.length).toBe(2);
    });

    it("should show an alert when the delete icon is clicked", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        dataset_detail_ctrl_scope.$digest();
        var importfiles = dataset_detail_ctrl_scope.dataset.importfiles;
        dataset_detail_ctrl_scope.delete_file(importfiles[0]);
        dataset_detail_ctrl_scope.$digest();

        // assertions
        expect(dataset_detail_ctrl_scope.dataset.importfiles.length).toBe(1);
    });
   
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: dataset_list_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, modal_state;
    var edit_ctrl, dataset_list_ctrl_scope, modalInstance, labels;
    var location;

    

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, uploader_service,
            $location) {
            controller = $controller;
            scope = $rootScope;
            dataset_list_ctrl_scope = $rootScope.$new();
            modal_state = "";
            location = $location;

            // mock the uploader_service factory methods used in the controller
            // and return their promises
            mock_uploader_service = uploader_service;
            spyOn(mock_uploader_service, "get_AWS_creds")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "AWS_CLIENT_ACCESS_KEY": "123",
                            "AWS_UPLOAD_BUCKET_NAME": "test-bucket"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "create_dataset")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "import_record_id": 3,
                                "import_record_name": dataset_name

                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error",
                                "message": "name already in use"
                            }
                        );
                    }
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_list_controller(){
        var fake_datasets_payload = {
            "status": "success",
            "datasets": [
                {
                    name: "DC 2013 data",
                    last_modified: (new Date()).getTime(),
                    last_modified_by: "john.s@buildingenergy.com",
                    number_of_buildings: 89
                },
                {
                    name: "DC 2014 data",
                    last_modified: (new Date()).getTime() -
                        1550 * 60 * 60 * 1000,
                    last_modified_by: "gavin.m@buildingenergy.com",
                    number_of_buildings: 70
                }
            ]
        };
        edit_ctrl = controller('dataset_list_controller', {
            $scope: dataset_list_ctrl_scope,
            datasets_payload: fake_datasets_payload
        });
    }

    /*
     * Test scenarios
     */

    it("should have a dataset_payload", function() {
        // arrange
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();

        // assertions
        expect(dataset_list_ctrl_scope.datasets.length).toEqual(2);
    });

    it("should disable the mapping button if the dataset has no" +
        " Assessor files", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Portfolio Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_assessor_files(dataset);

        // assertions
        expect(disabled).toEqual(true);
    });

    it("should enable the mapping button if the dataset has at least one" +
        " Assessor file", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_assessor_files(dataset);

        // assertions
        expect(disabled).toEqual(false);
    });
    it("should disable the matching button if the dataset has no" +
        " Portfolio Manger files", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Assessed Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_pm_files(dataset);

        // assertions
        expect(disabled).toEqual(true);
    });
    it("should enable the matching button if the dataset has at least one" +
        " Portfolio Manger file", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_pm_files(dataset);

        // assertions
        expect(disabled).toEqual(false);
    });
    it("should navigate to the mapping page of the first assessed" +
        " import file when the ``Mapping`` button is clicked", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Assessed Raw",
                    id: 3
                },
                {
                    source_type: "Assessed Raw",
                    id: 5
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        dataset_list_ctrl_scope.goto_mapping(dataset);

        // assertions
        expect(location.path()).toBe('/data/mapping/3');
    });
    it("should navigate to the matching page of the first Portfolio Manager" +
        " import file when the ``Matching`` button is clicked", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw",
                    id: 3
                },
                {
                    source_type: "Portfolio Raw",
                    id: 5
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        dataset_list_ctrl_scope.goto_matching(dataset);

        // assertions
        expect(location.path()).toBe('/data/matching/3');
    });

   
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: delete_modal_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, building_services, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        // mock the export_service factory methods used in the controller
        // and return their promises
        mock_building_services = building_services;
        spyOn(mock_building_services, "delete_buildings")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_delete_modal_controller(){
        ctrl = ctrl('delete_modal_controller', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            search: { 
                selected_buildings: [1,2],
                filter_params: {},
                select_all_checkbox: false,
                order_by: "",
                sort_reverse: false,
                number_matching_search: 1000
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should start at the delete page", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.delete_state).toEqual("delete"); 
    });
    it("should save the search paramaters",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.delete_payload;
        expect(b.selected_buildings).toEqual([1,2]);
        expect(b.filter_params).toEqual({});
        expect(b.order_by).toEqual("");
        expect(b.sort_reverse).toEqual(false);
        expect(b.select_all_checkbox).toEqual(false);
    });
    it("should delete when the delete button is clicked",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.delete_buildings();

        // assertions
        expect(ctrl_scope.delete_state).toEqual("prepare");
        expect(mock_building_services.delete_buildings).toHaveBeenCalled();
    });
    it("should show the success page when the delete is finished",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.delete_buildings();
        ctrl_scope.$digest();

        // assertions
        expect(mock_building_services.delete_buildings).toHaveBeenCalled();
        expect(ctrl_scope.delete_state).toEqual("success");
    });
    it("should show the number of buildings to be deleted",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        var number_to_delete = ctrl_scope.number_to_delete();

        // assertions
        expect(number_to_delete).toEqual(2);
    });
    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.close();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.cancel();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

  
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myDistrictApp = angular.module('myDistrictApp', ['district']);

describe("The district filter", function() {
    beforeEach(module('myDistrictApp'));
    it('replaces `district` with `County/District/Ward/Borough`',
        inject(function(districtFilter) {
            // normal cases
            expect(districtFilter('district')).toBe('County/District/Ward/Borough');
            expect(districtFilter('District')).toBe('County/District/Ward/Borough');
            expect(districtFilter('DistRict')).toBe('County/District/Ward/Borough');
            expect(districtFilter('DISTRICT')).toBe('County/District/Ward/Borough');
            expect(districtFilter('aDISTRICT')).toBe('aDISTRICT');
            expect(districtFilter('')).toBe('');
            expect(districtFilter('district ')).toBe('district ');
            expect(districtFilter('ok')).toBe('ok');
            expect(districtFilter(undefined)).toBe(undefined);
            expect(districtFilter(null)).toBe(null);
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: edit_label_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, modal_state;
    var edit_ctrl, edit_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label;
    var return_labels = [
        {
            "name": 'compliant',
            "color": 'green',
            "id": 1
        },
        {
            "name": "new label",
            "color": "blue",
            "id": 2
        }
    ];

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, urls, $q, project_service) {
        controller = $controller;
        scope = $rootScope;
        edit_ctrl_scope = $rootScope.$new();
        modal_state = "";

        // mock the project_service factory methods used in the controller
        // and return their promises
        mock_project_service = project_service;
        spyOn(mock_project_service, "get_labels")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success", "labels": return_labels});
            }
        );
        spyOn(mock_project_service, "add_label")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
        spyOn(mock_project_service, "delete_label")
            .andCallFake(function(label){
                deleted_label = label;
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
        spyOn(mock_project_service, "update_label")
            .andCallFake(function(label){
                updated_label = label;
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );

    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_edit_modal_controller(){
        var labels = [
            {
                "name": 'compliant',
                "color": 'green',
                "id": 1
            }
        ];

        edit_ctrl = controller('edit_label_modal_ctrl', {
            $scope: edit_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            labels: labels
        });
    }

    /*
     * Test scenarios
     */

    it("should initialize the default label", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.$digest();
        edit_ctrl_scope.initialize_label_modal();

        // assertions
        expect(edit_ctrl_scope.label_modal.color).toBe("gray");
        expect(edit_ctrl_scope.label_modal.label).toBe("default");
        expect(edit_ctrl_scope.label_modal.name).toBe("");
        expect(edit_ctrl_scope.modal.label.state).toBe("create");
    });

    it("should get the labels available to an organization", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.add_label({});  // calls private get_labels
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.labels.length).toBe(2);
    });

    it("should add a label in the user's organization", function() {
        // arrange
        create_edit_modal_controller();
        var label_to_add = {
            color: "blue",
            label: "primary",
            name: "new label"
        };

        // act
        edit_ctrl_scope.add_label(label_to_add);
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.labels.length).toBe(2);
        expect(edit_ctrl_scope.labels[1].color).toBe("blue");
        expect(edit_ctrl_scope.labels[1].name).toBe("new label");
    });

    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.close();
        edit_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.cancel();
        edit_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

    it("sets the label_modal to the label when its edit button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.edit_label(label);
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.label_modal.color).toBe(label.color);
        expect(edit_ctrl_scope.label_modal.name).toBe(label.name);
        expect(edit_ctrl_scope.modal.label.state).toBe("edit");

        // assert that edit_ctrl_scope.label_modal is a copy and not a reference to label
        edit_ctrl_scope.label_modal.name = "random name here";
        expect(edit_ctrl_scope.label_modal.name).not.toBe(label.name);
    });
    
    it("deletes the appropriate label when the delete button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.delete_label(label);
        edit_ctrl_scope.$digest();

        // assertions
        expect(deleted_label).toBe(label);
    });

    it("updates the appropriate label when the update label button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.edit_label(label);
        edit_ctrl_scope.$digest();
        edit_ctrl_scope.label_modal.name = "harry";
        edit_ctrl_scope.label_modal.color = "blue";
        edit_ctrl_scope.update_label(edit_ctrl_scope.label_modal);
        edit_ctrl_scope.$digest();

        // assertions
        expect(mock_project_service.update_label).toHaveBeenCalledWith(edit_ctrl_scope.label_modal);
        expect(updated_label).toBe(edit_ctrl_scope.label_modal);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: export_modal_controller", function(){
    // globals set up and used in each test scenario
    var mock_export_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, export_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        // mock the export_service factory methods used in the controller
        // and return their promises
        mock_export_service = export_service;
        spyOn(mock_export_service, "export_buildings")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success", "export_id": "123456"});
            }
        );
        spyOn(mock_export_service, "export_buildings_progress")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({
                    "status": "success",
                    "buildings_processed": 1000
                });
            }
        );
            spyOn(mock_export_service, "export_buildings_download")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({
                    "status": "success",
                    "url": "#"
                });
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_export_modal_controller(){
        ctrl = ctrl('export_modal_controller', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            search: { 
                selected_buildings: [],
                filter_params: {},
                select_all_checkbox: false,
                order_by: "",
                sort_reverse: false,
                number_matching_search: 1000
            },
            selected_fields: ['tax_lot_id', 'postal_code'],
            project: {
                id: 11
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should start at the create page", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.export_state).toEqual("create"); 
    });
    it("should start with an empty name and default file type of 'xls'",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.building_export;
        expect(b.export_name).toEqual("");
        expect(b.export_type).toEqual("xls");
    });
    it("should save the search paramaters",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.building_export;
        expect(b.selected_buildings).toEqual([]);
        expect(b.filter_params).toEqual({});
        expect(b.order_by).toEqual("");
        expect(b.sort_reverse).toEqual(false);
        expect(b.select_all_checkbox).toEqual(false);
        expect(b.selected_fields).toEqual(['tax_lot_id', 'postal_code']);
        expect(b.project_id).toEqual(11);
        expect(ctrl_scope.progress_denominator).toEqual(0);
    });
    it("should kick off the export process when the export button is clicked",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.export_buildings();

        // assertions
        expect(ctrl_scope.export_state).toEqual("prepare");
        expect(mock_export_service.export_buildings).toHaveBeenCalled();
    });
    it("should show the success page when the data is ready",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.show_success_page("123");
        ctrl_scope.$digest();

        // assertions
        expect(mock_export_service.export_buildings_download).toHaveBeenCalled();
        expect(ctrl_scope.export_state).toEqual("success");
    });
    it("should update the progress bar",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.monitor_progress("123", 1000);
        ctrl_scope.$digest();
        timeout.flush();

        // assertions
        expect(mock_export_service.export_buildings_progress).toHaveBeenCalled();
        expect(ctrl_scope.progress_percentage).toEqual(100);
        expect(ctrl_scope.progress_numerator).toEqual(1000);
        expect(ctrl_scope.progress_denominator).toEqual(1000);
    });
    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.close();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.cancel();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

  
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
/**
 * tests fromNow angularjs filter wrapper of moment.js
 * uses epoch milliseconds as that is what the back-end returns
 */

// create dummy angularJS app to attach filter(s)
var myfromNowFilterApp = angular.module('myfromNowFilterApp', ['fromNow']);

describe("The fromNow filter", function() {
    beforeEach(module('myfromNowFilterApp'));

    it('shows the present time as "a few seconds ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('a few seconds ago');
        })
    );

    it('shows 5 minutes ago as "5 minutes ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 5  * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('5 minutes ago');
        })
    );

    it('shows 4 hours ago as "4 hours ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 4 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('4 hours ago');
        })
    );

    it('shows 24 hours ago as "a day ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 24 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('a day ago');
        })
    );

    it('shows 36 hours ago as "2 days ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 36 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('2 days ago');
        })
    );

    it('shows 1550 hours ago as "2 months ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 1550 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('2 months ago');
        })
    );

    it('defaults to "a few seconds ago" for undefined values',
        inject(function(fromNowFilter) {
            // arrange

            // act

            // assert
            expect(fromNowFilter(undefined)).toBe('a few seconds ago');
            expect(fromNowFilter(null)).toBe('a few seconds ago');
            expect(fromNowFilter("some text")).toBe('a few seconds ago');
            expect(fromNowFilter({})).toBe('a few seconds ago');
            expect(fromNowFilter({time: "not time"})).toBe('a few seconds ago');
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myignoremapApp = angular.module('myignoremapApp', ['ignoremap']);

describe("The ignoremap filter", function() {
    beforeEach(module('myignoremapApp'));
    it('replaces `""` with `------ Ignore Row ------`',
        inject(function(ignoremapFilter) {
            // normal cases
            expect(ignoremapFilter('')).toBe('------ Ignore Row ------');
            expect(ignoremapFilter(' ')).toBe(' ');
            expect(ignoremapFilter('aignoremap')).toBe('aignoremap');
            expect(ignoremapFilter('ignoremap ')).toBe('ignoremap ');
            expect(ignoremapFilter('ok')).toBe('ok');
            expect(ignoremapFilter(undefined)).toBe('------ Ignore Row ------');
            expect(ignoremapFilter(null)).toBe('------ Ignore Row ------');
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: mapping_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, modal_state;
    var mapping_ctrl, mapping_ctrl_scope, modalInstance, labels;
    var timeout, mock_user_service, mock_search_service;



    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, building_services, $timeout, user_service, search_service) {
            controller = $controller;
            scope = $rootScope;
            mapping_ctrl_scope = $rootScope.$new();
            modal_state = "";
            timeout = $timeout;
            mock_user_service = user_service;
            mock_search_service = search_service;

            spyOn(mock_user_service, 'set_default_columns')
                .andCallFake(function(mapped_columns){
                    return undefined;
                });
            spyOn(mock_search_service, 'search_buildings')
                .andCallFake(function(){
                    return [1,2,3];
                });
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_mapping_controller(){
        var mock_datasets = [
            {
                name: "DC 2013 data",
                last_modified: (new Date()).getTime(),
                last_modified_by: "john.s@buildingenergy.com",
                number_of_buildings: 89,
                id: 1
            },
            {
                name: "DC 2014 data",
                last_modified: (new Date()).getTime() -
                    1550 * 60 * 60 * 1000,
                last_modified_by: "gavin.m@buildingenergy.com",
                number_of_buildings: 70,
                id: 2
            }
        ];
        var fake_import_file_payload = {
            "status": "success",
            "import_file": {
                        file_name: "assessor_fun.csv",
                        last_modified: (new Date()).getTime(),
                        last_modified_by: "john.s@buildingenergy.com",
                        source_type: 'AssessorRaw',
                        dataset: mock_datasets[0],
                        id: 1
                    }
        };

        var mock_be_building_columns = [
            'pm_property_id',
            'property_name',
            'property_notes',
            'tax_lot_id',
            'gross_floor_area',
            'My New non-BEDES field'
        ];

        var mock_be_building_types = {
            'gross_floor_area': {
                unit_type: 'float',
                schema: 'BEDES'
            }
        };

        var mock_mapping_suggestions_payload = {
            'status': 'success',
            'suggested_column_mappings': {
                // key(django model attribute): [csv_header1, ... csv_header3]
                'property id': ['pm_property_id', 89],
                'lot number': ['tax_lot_id' , 54]
            },
            "building_columns": mock_be_building_columns,
            "building_column_types": mock_be_building_types
        };

        var mock_raw_column_names = [
            'property id',
            'property_name',
            'property_notes',
            'lot number',
            'lot size'
        ];

        var mock_first_five_rows = [];
        for (var i=0; i < 4; i++) {
            mock_first_five_rows.push({
                'property id': i,
                'property_name': 'Property ' + i,
                'property_notes': 'Nup.',
                'lot number': i * 2,
                'lot size': 454 * i
            });
        }

        mock_first_five_rows.push({
            'property id': '121L',
            'property_name': 'Inconsistent Property',
            'property_notes': 'N/A',
            'lot number': 'N/A',
            'lot size': 45
        });

        var raw_columns_payload = {
            "status": "success",
            "raw_columns": mock_raw_column_names
        };
        var first_five_rows_payload = {
            "status": "success",
            "first_five_rows": mock_first_five_rows
        };
        mapping_ctrl = controller('mapping_controller', {
            $scope: mapping_ctrl_scope,
            import_file_payload: fake_import_file_payload,
            suggested_mappings_payload: mock_mapping_suggestions_payload,
            raw_columns_payload: raw_columns_payload,
            first_five_rows_payload: first_five_rows_payload,
            all_columns: {fields: []},
            building_services: mock_building_services,
            $timeout: timeout
        });
    }

    /*
     * Test scenarios
     */

    it("should have a import_file_payload", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        expect(mapping_ctrl_scope.import_file.dataset.name).toBe("DC 2013 data");
    });

    it("should show suggested mappings and confidence", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        var raw_columns = mapping_ctrl_scope.raw_columns;
        var first_column = raw_columns[0];

        expect(first_column.confidence).toBe(89);
        expect(first_column.suggestion).toBe("Pm Property Id");
    });

    it("should show 'low', 'med', 'high', or '' confidence text", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        var raw_columns = mapping_ctrl_scope.raw_columns;
        var first_column = raw_columns[0];
        expect(first_column.confidence_text()).toBe("high");
        first_column.confidence = 70;
        expect(first_column.confidence_text()).toBe("med");
        first_column.confidence = 35;
        expect(first_column.confidence_text()).toBe("low");
        delete(first_column.confidence);
        expect(first_column.confidence_text()).toBe("");
    });

    it("should validate initial data", function() {
        create_mapping_controller();
        // act
        mapping_ctrl_scope.$digest();
        // assertions
        angular.forEach(mapping_ctrl_scope.raw_columns, function(rc) {
            if (rc.suggestion !== '' && typeof(rc.suggestion) !== "undefined") {
                expect(rc.validity).toBe('valid');
            }
        });
    });

    it("should invalidate bad suggestions", function() {
        // Simulate a change on the tcm, make it fail.
        create_mapping_controller();
        // act
        mapping_ctrl_scope.$digest();
        // assertions
        //
        // We change the suggested mapping for the "property name" column
        // to "gross_floor_area" (which validates as float) to
        // purposesly cause a failing change.
        mapping_ctrl_scope.raw_columns[1].suggestion = 'gross_floor_area';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[1]);
        expect(mapping_ctrl_scope.raw_columns[1].validity).toBe('invalid');

    });

    it("should set td_class appropriately", function() {
        var tcm;

        create_mapping_controller();

        mapping_ctrl_scope.$digest();
        tcm = mapping_ctrl_scope.raw_columns[0];
        var good_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[0]
        );

        // First raw column is mapped up as pm_property_id <-> property_id
        // Any kind of string will be valid.
        expect(good_val).toBe('success');

        // Now set it to one that expects float values.
        // Only one of these will *not* validate.
        mapping_ctrl_scope.raw_columns[0].suggestion = 'gross_floor_area';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[0]);

        tcm = mapping_ctrl_scope.raw_columns[0];
        var warning_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[4]
        );

        expect(warning_val).toBe('warning');

        // We don't want the warning style to be applied to neighboring cells
        // in the same row. Check that the cell next to our invalid one is
        // unstyled (undefined).
        tcm = mapping_ctrl_scope.raw_columns[0];
        var adjacent_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[3]
        );

        expect(adjacent_val).toBe(undefined);

        // Now we're saying the suggestion is to not map.
        // Check that we don't have any class set for this row now.
        mapping_ctrl_scope.raw_columns[0].suggestion = '';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[0]);

        tcm = mapping_ctrl_scope.raw_columns[0];
        var blank_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[4]
        );

        expect(blank_val).toBe('');

    });

    it("should detect duplicates of mapped rows", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // raw_columns[0] and raw_columns[3] should be the only mapped rows
        var column = mapping_ctrl_scope.raw_columns[3];
        var test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

        // Set the property_name tcm's suggestion to the same as
        // the property_id tcm (raw_columns[0])
        column.suggestion = 'Pm Property Id';

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(true);

        // Since we mark both duplicates as duplicates, the other
        // TCM that has the 'pm_property_id' suggestion should also get
        // 'danger' as its duplicate class.
        var other_dup = mapping_ctrl_scope.is_tcm_duplicate(
            mapping_ctrl_scope.raw_columns[0]
        );
        expect(other_dup).toBe(true);

        // Shows that mapped_row is the sole determinant of
        // column ignoring
        column.mapped_row = false;

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

    });

    it("should ignore duplicates of unmapped rows", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // raw_columns[0] and raw_columns[3] should be the only mapped rows
        var column = mapping_ctrl_scope.raw_columns[1];
        var test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

        // Set the property_name tcm's suggestion to the same as
        // the property_id tcm (raw_columns[0])
        column.suggestion = 'Pm Property Id';

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);
    });

    it("should get mapped buildings", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        mapping_ctrl_scope.get_mapped_buildings();
        mapping_ctrl_scope.$digest();

        // assertions
        expect(mapping_ctrl_scope.search.search_buildings).toHaveBeenCalled();
        expect(mock_user_service.set_default_columns).toHaveBeenCalled();
    });

    it("should enbale the 'show & review buildings' button if duplicates are" +
        " not present", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        for (var i = mapping_ctrl_scope.raw_columns.length - 1; i >= 0; i--) {
            mapping_ctrl_scope.change(mapping_ctrl_scope.raw_columns[i]);
        }
        var duplicates_found = mapping_ctrl_scope.duplicates_present();

        // assertions
        expect(duplicates_found).toBe(false);
    });

    it("should disable the 'show & review buildings' button if duplicates " +
        "are present", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        for (var i = mapping_ctrl_scope.raw_columns.length - 1; i >= 0; i--) {
            mapping_ctrl_scope.raw_columns[i].suggestion = "pm_property_id";
            mapping_ctrl_scope.change(mapping_ctrl_scope.raw_columns[i]);
        }
        var duplicates_found = mapping_ctrl_scope.duplicates_present();

        // assertions
        expect(duplicates_found).toBe(true);
    });

    it("should get mappings in an API friendly way", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();
        var mappings = mapping_ctrl_scope.get_mappings();
        expect(mappings.length).toBe(5);
        expect(mappings[0]).toEqual(['Pm Property Id', 'property id']);
        // everything in between is empty since we we're using only
        // suggested mappings.
        expect(mappings[3]).toEqual(['Tax Lot Id', 'lot number']);
    });

    it("should show the 'STEP 2' tab when reviewing mappings", function() {
        // arrange
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // act
        var mappings = mapping_ctrl_scope.get_mapped_buildings();

        // assert
        expect(mapping_ctrl_scope.tabs).toEqual({
            'one_active': false,
            'two_active': true,
            'three_active': false
        });
    });

    it("should show BEDES fields with a checkbox", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assert
        expect(mapping_ctrl_scope.is_suggestion_BEDES('gross_floor_area')).toBe(true);
        expect(mapping_ctrl_scope.is_suggestion_BEDES('Gross Floor Area')).toBe(true);
        expect(mapping_ctrl_scope.is_suggestion_BEDES('My New non-BEDES field')).toBe(false);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: matching_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, delete_called;
    var matching_ctrl, matching_ctrl_scope, modalInstance, labels;


    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, building_services) {
            controller = $controller;
            scope = $rootScope;
            matching_ctrl_scope = $rootScope.$new();

            mock_building_services = building_services;
            spyOn(mock_building_services, "get_PM_filter_by_counts")
                .andCallFake(function(import_file){
                    return $q.when(
                        {
                            "status": "success",
                            "unmatched": 5,
                            "matched": 10
                        }
                    );
                }
            );
            spyOn(mock_building_services, "save_match")
                .andCallFake(function(b1, b2, create){
                    return $q.when(
                        {
                            "status": "success",
                            "child_id": 3
                        }
                    );
                }
            );
            spyOn(mock_building_services, "search_matching_buildings")
                .andCallFake(function(q, number_per_page, current_page, order_by, sort_reverse, 
                                        filter_params, file_id ){
                    
                    switch(filter_params.children__isnull){
                        case undefined:
                            var bldgs = [
                                {
                                    pm_property_id: 1
                                },
                                {
                                    pm_property_id: 2
                                }
                                ,
                                {
                                    pm_property_id: 3
                                }
                            ];
                            break;
                        case false:
                            var bldgs = [
                                {
                                    pm_property_id: 1
                                }
                            ];
                            break;
                        case true:
                            var bldgs = [
                                {
                                    pm_property_id: 3
                                },
                                {
                                    pm_property_id: 4
                                }
                            ];
                            break;
                    }

                    return $q.when(
                        {
                            status: "success",
                            number_returned: buildings_payload.length,
                            number_matching_search: buildings_payload.length,
                            buildings: bldgs;
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_detail_controller(){
        var buildings_payload = {
            buildings: [
                {
                    pm_property_id: 1,
                    tax_lot_id: null,
                    custom_id_1: 2,
                    gross_floor_area: 111,
                    matched: true,
                    id: 1,
                    children: [3],
                    coparent: {
                        pm_property_id: null,
                        tax_lot_id: 2,
                        custom_id_1: null,
                        gross_floor_area: 111,
                        id: 2,
                        children: [3]
                    }
                }
            ],
            number_matching_search: 1,
            number_returned: 1
        };
        matching_ctrl = controller('matching_controller', {
            $scope: matching_ctrl_scope,
            buildings_payload: buildings_payload,
            all_columns: {
                fields: [{sort_column: 'pm_property_id'}]
            },
            default_columns: {
                columns: ['pm_property_id']
            },
            import_file_payload: {
                import_file: {
                    id: 1,
                    dataset: {
                        importfiles: [
                            {
                                id: 1,
                                name: "file_1.csv"
                            },
                            {
                                id: 2,
                                name: "file_2.csv"
                            }
                        ]
                    }
                }
            }
        });
    }



    /*
     * Test scenarios
     */

    it("should have a buildings payload with potential matches", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();
        var b = matching_ctrl_scope.buildings[0];

        // assertions
        expect(matching_ctrl_scope.buildings.length).toBe(1);
        expect(b.coparent.children).toEqual(b.children);
    });

    it("should provide to the view scope variables representing the number matched and the number of unmatched buildings", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();

        // assertions
        expect(matching_ctrl_scope.matched_buildings).toEqual(10);
        expect(matching_ctrl_scope.unmatched_buildings).toEqual(5);
    });

    it("should jump back to the matching list when the 'Back to list' button" +
        " is clicked", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.show_building_list = false;
        matching_ctrl_scope.back_to_list();

        // assertions
        expect(matching_ctrl_scope.show_building_list).toEqual(true);
    });

    it("should present an initial state with the matching buildings table",
        function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();

        // assertions
        expect(matching_ctrl_scope.columns).toEqual([{ sort_column : 'pm_property_id' }]);
        expect(matching_ctrl_scope.number_matching_search).toEqual(1);
        expect(matching_ctrl_scope.number_returned).toEqual(1);
        expect(matching_ctrl_scope.num_pages).toEqual(1);
        expect(mock_building_services.get_PM_filter_by_counts).toHaveBeenCalled();
    });
    it("should match a building in the matching list", function() {
        // arrange
        create_dataset_detail_controller();
        var b1, b2;
        b2 = {
            id: 2,
            children: [],
            matched: false
        };
        b1 = {
            id: 1,
            children: [],
            matched: true,
            coparent: b2
        };

        // act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.toggle_match(b1);
        matching_ctrl_scope.$digest();

        // assertions
        expect(mock_building_services.save_match).toHaveBeenCalledWith(b1.id, b2.id, true);
        expect(mock_building_services.get_PM_filter_by_counts).toHaveBeenCalled();
        expect(b1.children[0]).toEqual(3);
    });
    it("Should update the list of buildings correctly when 'Show Matched' is selected", 
        function() {
        //arrange
        create_dataset_detail_controller();

        //act
        controller.update_show_filter(controller.SHOW_MATCHED)

        //assertions
        expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(1);
        expect(matching_ctrl_scope.number_returned).toEqual(1);
    });
    it("Should update the list of buildings correctly when 'Show Unmatched' is selected", 
        function() {
        //arrange
        create_dataset_detail_controller();

        //act
        controller.update_show_filter(controller.SHOW_UNMATCHED)

        //assertions
        expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(2);
        expect(matching_ctrl_scope.number_returned).toEqual(2);
    });
    it("Should update the list of buildings correctly when 'Show All' is selected", 
        function() {
        //arrange
        create_dataset_detail_controller();

        //act
        controller.update_show_filter(controller.SHOW_ALL)

        //assertions
        expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(3);
        expect(matching_ctrl_scope.number_returned).toEqual(3);
    });



});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: members_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller;
    var ctrl, ctrl_scope, modalInstance;
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          $q,
          organization_service) {
            ctrl = $controller;
            scope = $rootScope;
            ctrl_scope = $rootScope.$new();

            mock_organization_service = organization_service;
            
            spyOn(mock_organization_service, "remove_user")
                .andCallFake(function(user_id, org_id){
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
            spyOn(mock_organization_service, "get_organization_users")
                .andCallFake(function(org){
                    return $q.when(
                        {
                            "status": "success",
                            "users": [{id:1, first_name:"Bob", last_name:"D"}]
                        }
                    );
                }
            );
            spyOn(mock_organization_service, "update_role")
                .andCallFake(function(org_id, user_id, role){
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_members_controller(){
        ctrl = ctrl('members_controller', {
            $scope: ctrl_scope,
            users_payload: {users: [
                {first_name: 'J', last_name: 'S'},
                {first_name: undefined, last_name: null}
            ]},
            organization_payload: {
                organization: {name: 'my org', id: 4}
            },
            auth_payload: {
                auth: {
                    'can_invite_member': true,
                    'can_remove_member': true
                }
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should accepts its payload", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.org).toEqual({name : 'my org', id : 4});
        expect(ctrl_scope.users[0].name).toEqual("J S");
        expect(ctrl_scope.users[1].name).toEqual(" ");
    });
    it("clicking remove should remove a user", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.remove_member({user_id: 2});

        // assertions
        expect(mock_organization_service.remove_user)
            .toHaveBeenCalledWith(2, 4);
        
        ctrl_scope.$digest();
        expect(mock_organization_service.get_organization_users)
            .toHaveBeenCalledWith({org_id: 4});
    });
    it("clicking a new role should update the user's role", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.update_role({user_id: 2, role: "viewer"});

        // assertions
        expect(mock_organization_service.update_role)
            .toHaveBeenCalledWith(2, 4, 'viewer');
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: new_member_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_user_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, user_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        mock_user_service = user_service;
        spyOn(mock_user_service, "add")
            .andCallFake(function(user){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_new_member_controller(){
        ctrl = ctrl('new_member_modal_ctrl', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            organization: {organization_id: 1}
        });
    }

    /*
     * Test scenarios
     */

    it("should set the default role to 'member'", function() {
        // arrange
        create_new_member_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.user.role.value).toEqual("member"); 
    });
    it("should call the user service to add a new user to the org",
        function() {
        // arrange
        create_new_member_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.user.first_name = "JB";
        ctrl_scope.user.last_name = "Smooth";
        ctrl_scope.user.email = "jb.smooth@be.com";
        ctrl_scope.submit_form(true);

        // assertions
        expect(mock_user_service.add)
            .toHaveBeenCalledWith({
                first_name: "JB",
                last_name: "Smooth",
                email: "jb.smooth@be.com",
                role: ctrl_scope.roles[0],
                organization: {
                    organization_id: 1
                }
            });
    });
    
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
/**
 * run_jasmine.js: runs the jasmine JS test runner
 */
(function() {
    var jasmineEnv = jasmine.getEnv();
    jasmineEnv.updateInterval = 1000;

    var htmlReporter = new jasmine.HtmlReporter();

    jasmineEnv.addReporter(htmlReporter);

    jasmineEnv.specFilter = function(spec) {
        return htmlReporter.specFilter(spec);
    };

    var currentWindowOnload = window.onload;

    window.onload = function() {
        if (currentWindowOnload) {
        currentWindowOnload();
        }
        execJasmine();
    };
    function execJasmine() {
        jasmineEnv.execute();
    }
})();

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var searchTestApp = angular.module(
    'searchTestApp', ['BE.seed.service.search']
);

describe("The search_service service", function() {
    var saas, httpBackend, test_url;

    beforeEach(function () {
        module("searchTestApp");
        inject(function (search_service, $httpBackend) {
            saas = search_service;
            httpBackend = $httpBackend;
            httpBackend.when("POST", test_url).respond("ok");
        });

    });

    /**
     * sanitize_params tests
     */
    it('removes null and undefined values from filter_params', function () {
        // arrange
        saas.filter_params = {
          'National Median Site Energy Use__gte': 4,
          'National Median Site Energy Use__lte': null,
          'National Median Source EUI__gte': undefined
        };

        // act
        saas.sanitize_params();

        // assert
        expect(saas.filter_params).toEqual({'National Median Site Energy Use__gte': 4});
    });

    /**
     * search_buildings tests
     */
    it('has sane defaults', function() {
        expect(saas.url).toEqual("");
        expect(saas.error_message).toEqual("");
        expect(saas.alert).toEqual(false);
        expect(saas.buildings).toEqual([]);
        expect(saas.current_page).toEqual(1);
        expect(saas.number_per_page).toEqual(10);
        expect(saas.order_by).toEqual("");
        expect(saas.sort_column).toEqual("tax_lot_id");
        expect(saas.sort_reverse).toEqual(false);
        expect(saas.select_all_checkbox).toEqual(false);
        expect(saas.prev_page_disabled).toEqual(true);
        expect(saas.next_page_disabled).toEqual(true);
        expect(saas.num_pages).toEqual(0);
        expect(saas.query).toEqual("");
        expect(saas.showing).toEqual({
            'start': 1,
            'end': 0
        });
    });

    it('search_buildings uses the argument `query`', function() {
        saas.query = "hotels";
        saas.search_buildings("not hotels");

        expect(saas.query).toEqual("not hotels");
    });
    it('filter search resets the current page', function() {
        // arrange
        saas.current_page = 22;
        spyOn(saas, 'search_buildings');

        // act
        saas.filter_search();

        // assert
        expect(saas.current_page).toEqual(1);
        expect(saas.search_buildings).toHaveBeenCalled();
    });

    it('search_buildings function will default to its query if' +
        ' no query is passed as an argument', function() {
        saas.query = "hotels";
        saas.search_buildings();

        expect(saas.query).toEqual("hotels");
    });

    it('search_buildings hits the set url', function() {
        test_url = "/my-search-url";
        saas.url = test_url;
        saas.search_buildings();
        httpBackend.expectPOST(test_url);
        httpBackend.flush();
    });

    it('search_buildings POSTs the query data as `q`', function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.query = "hotel chains";
        saas.number_per_page = 25;
        saas.order_by = "gross_floor_area";
        saas.sort_reverse = true;
        saas.filter_params = {
            project: '2012 data'
        };

        // act
        saas.search_buildings();

        // assert
        httpBackend.expectPOST(test_url,
            {
                "q": "hotel chains",
                "number_per_page": 25,
                "order_by": "gross_floor_area",
                "sort_reverse": true,
                "filter_params": {
                    "project": "2012 data"
                },
                "page":1
            }
        ).respond(201, "");
        httpBackend.flush();
    });
    it('search_buildings updates its `buildings` model', function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.query = "hotel chains";
        saas.number_per_page = 25;
        saas.order_by = "gross_floor_area";
        saas.sort_reverse = true;
        saas.filter_params = {
            project: '2012 data'
        };

        // act
        saas.search_buildings();

        // assert
        httpBackend.expectPOST(test_url,
            {
                "q": "hotel chains",
                "number_per_page": 25,
                "order_by": "gross_floor_area",
                "sort_reverse": true,
                "filter_params": {
                    "project": "2012 data"
                },
                "page":1
            }
        ).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        expect(saas.buildings).toEqual([
            {
                name: "one",
                id: 1,
                checked: false
            },
            {
                name: "two",
                id: 2,
                checked: false
            }
        ]);
    });
    it('should clear the error and alert after a successful search',
        function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.error_message = "help";
        saas.alert = true;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {
            'buildings': [
                {
                    name: "one",
                    id: 1
                },
                {
                    name: "two",
                    id: 2
                }],
            'number_matching_search': 101
            });
        httpBackend.flush();

        // assert
        expect(saas.alert).toEqual(false);
        expect(saas.error_message).toEqual("");
    });

    /**
     * pagination tests
     */
    it('increments the page when the `next` button is clicked',
        function() {
        // arrange
        saas.num_pages = 1000;
        saas.current_page = 100;
        spyOn(saas, 'search_buildings');
        // act
        saas.next_page();

        // assert
        expect(saas.current_page).toEqual(101);
        expect(saas.search_buildings).toHaveBeenCalled();
        expect(saas.search_buildings.callCount).toEqual(1);

    });
    it('doesn\'t increment past the last page when the `next` button is' +
        ' clicked', function() {
        // arrange
        saas.num_pages = 2;
        saas.current_page = 2;
        spyOn(saas, 'search_buildings');
        // act
        saas.next_page();

        // assert
        expect(saas.current_page).toEqual(2);
        expect(saas.search_buildings).toHaveBeenCalled();
        expect(saas.search_buildings.callCount).toEqual(1);

    });
    it('decrements the page when the `previous` button is clicked',
        function() {
        // arrange
        saas.num_pages = 1000;
        saas.current_page = 100;
        spyOn(saas, 'search_buildings');
        // act
        saas.prev_page();

        // assert
        expect(saas.current_page).toEqual(99);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('does not decrement below the first page when the `previous` button' +
        ' is clicked', function() {
        // arrange
        saas.num_pages = 1;
        saas.current_page = 1;
        spyOn(saas, 'search_buildings');
        // act
        saas.prev_page();

        // assert
        expect(saas.current_page).toEqual(1);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('fetches more or less results per page when a user selects an option' +
        ' from the number per page select',
        function() {
        // arrange
        saas.number_per_page_options_model = 50;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_number_per_page();

        // assert
        expect(saas.number_per_page).toEqual(50);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('updates the number of results displayed text after a successful '+
        'search', function() {
        // standard case
        // page 2 of 3 with 10/page, so should display 11 of 20
        // arrange
        saas.current_page = 2;
        saas.num_pages = 3;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_start_end_paging();

        // assert
        expect(saas.showing.start).toEqual(11);
        expect(saas.showing.end).toEqual(20);
        expect(saas.search_buildings).not.toHaveBeenCalled();
    });
    it('displays the number matching the query if on the last page of results',
        function() {
        // standard case
        // page 3 of 3 with 10/page and 34 results, so should display 21 of 34
        // arrange
        saas.current_page = 3;
        saas.number_matching_search = 34;
        saas.num_pages = 3;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_start_end_paging();

        // assert
        expect(saas.showing.start).toEqual(21);
        expect(saas.showing.end).toEqual(34);
    });
    it('should call update_start_end_paging after a successful search',
        function() {
        // arrange
        spyOn(saas, 'update_start_end_paging');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_start_end_paging).toHaveBeenCalled();
    });
    it('should call update_buttons after a successful search',
        function() {
        // arrange
        spyOn(saas, 'update_buttons');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_buttons).toHaveBeenCalled();
    });
    it('should disable prev paging buttons at the first page',
        function() {
        // arrange
        saas.current_page = 1;
        saas.num_pages = 5;

        // act
        saas.update_buttons();

        // assert
        expect(saas.prev_page_disabled).toEqual(true);
        expect(saas.next_page_disabled).toEqual(false);
    });
    it('should disable next paging buttons at the last page',
        function() {
        // arrange
        saas.current_page = 5;
        saas.num_pages = 5;

        // act
        saas.update_buttons();

        // assert
        expect(saas.prev_page_disabled).toEqual(false);
        expect(saas.next_page_disabled).toEqual(true);
    });
    it('should calculate the number of pages after a successful search',
        function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {
            'buildings': [
                {
                    name: "one",
                    id: 1
                },
                {
                    name: "two",
                    id: 2
                }],
            'number_matching_search': 101
            });
        httpBackend.flush();

        // assert
        expect(saas.number_matching_search).toEqual(101);
        expect(saas.num_pages).toEqual(11);
    });

    /**
     * checkbox logic tests
     */
    it('should select or unselect all the viewed results when the select all' +
        ' checkbox is checked or unchecked', function() {
        // arrange
        saas.selected_buildings = [1,2,3];
        saas.select_all_checkbox = true;
        saas.buildings = [
            {
                checked: false
            },
            {
                checked: true
            }
        ];
        spyOn(saas, 'select_or_deselect_all_buildings').andCallThrough();

        // act
        saas.select_all_changed();

        // assert
        expect(saas.selected_buildings).toEqual([]);
        expect(saas.buildings).toEqual([
                {
                    checked: true
                },
                {
                    checked: true
                }
            ]);
        expect(saas.select_or_deselect_all_buildings).toHaveBeenCalled();
    });
    it('should call select_or_deselect_all_buildings after a search',
        function() {
        // arrange
        spyOn(saas, 'select_or_deselect_all_buildings');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.select_or_deselect_all_buildings).toHaveBeenCalled();
    });
    it('should add a building to the selected list when checked',
        function() {
        // arrange
        var building = {
            id: 5,
            checked: true
        };

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([5]);
    });
    it('should add a building to the selected list when unchecked and the ' +
        'select all checkbox is checked', function() {
        // arrange
        var building = {
            id: 5,
            checked: false
        };
        saas.select_all_checkbox = true;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([5]);
    });
    it('should remove a building to the selected list when unchecked',
        function() {
        // arrange
        var building = {
            id: 5,
            checked: false
        };
        saas.selected_buildings = [5,6,7];
        saas.select_all_checkbox = false;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([6,7]);
    });
    it('should remove a building to the selected list when checked if the ' +
        'select all checkbox is checked', function() {
        // arrange
        var building = {
            id: 5,
            checked: true
        };
        saas.selected_buildings = [5,6,7];
        saas.select_all_checkbox = true;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([6,7]);
    });
    it('should call load_state_from_selected_buildings after a successful ' +
        'search', function() {
        // arrange
        spyOn(saas, 'load_state_from_selected_buildings').andCallThrough();
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.load_state_from_selected_buildings).toHaveBeenCalled();
    });
    it('should call update_results after a successful ' +
        'search', function() {
        // arrange
        var select_or_deselect_all_buildings_time,
            load_state_from_selected_buildings_time;
        spyOn(saas, 'update_results').andCallThrough();
        spyOn(saas, 'select_or_deselect_all_buildings')
            .andCallFake(function() {
                select_or_deselect_all_buildings_time = new Date();
            }
        );
        spyOn(saas, 'load_state_from_selected_buildings')
            .andCallFake(function() {
                // wait for a sec, otherwise both have the same timestamp
                for(var y=0;y<100000;y++){
                    var x = new Date();
                    x = x+y;
                }
                load_state_from_selected_buildings_time = new Date();
            }
        );
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_results).toHaveBeenCalled();
        expect(select_or_deselect_all_buildings_time <
               load_state_from_selected_buildings_time).toBe(true);
    });
    it('check selected buildings successful', function() {
        // arrange
        saas.selected_buildings = [2];
        saas.buildings = [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ];

        // act
        saas.load_state_from_selected_buildings();

        // assert
        expect(saas.buildings[1]).toEqual({
            name: "two",
            id: 2,
            checked: true
        });
    });
    it('should generate columns', function() {
        // arrange
        var all_columns, column_headers, columns;
        all_columns = [
            {
                sort_column: "name"
            },
            {
                sort_column: "id"
            }
        ];
        column_headers = ["id"];
        saas.sort_column = "something else";
        saas.update_results({});
        // act
        columns = saas.generate_columns(
            all_columns, column_headers, saas.column_prototype
        );

        // assert that columns are extended off the prototype and only have
        // "id"
        expect(columns.length).toEqual(1);
        expect(columns[0].sort_column).toEqual("id");
        expect(columns[0].is_unsorted()).toEqual(true);
        saas.sort_column = "id";
        expect(columns[0].is_unsorted()).toEqual(false);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: settings_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller;
    var ctrl, ctrl_scope, modalInstance;
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          $q,
          organization_service) {
            ctrl = $controller;
            scope = $rootScope;
            ctrl_scope = $rootScope.$new();

            mock_organization_service = organization_service;
            
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_settings_controller(){
        ctrl = ctrl('settings_controller', {
            $scope: ctrl_scope,
            all_columns: {fields: [
                {checked: false, title: 'PM Property ID', sort_column: 'pm_property_id'},
                {checked: false, title: 'G', sort_column: 'g'},
                {checked: false, title: "Gross Floor Area", sort_column: 'gross_floor_area'}
            ]},
            organization_payload: {
                organization: {name: 'my org', id: 4}
            },
            query_threshold_payload: {
                query_threshold: 10
            },
            shared_fields_payload: {
                shared_fields: [
                    {
                        title: "PM Property Id",
                        sort_column: "pm_property_id"
                    }
                ],
                public_fields: [
                {
                    title: "Gross Floor Area",
                    sort_column: "gross_floor_area"
                }]
            },
            auth_payload: {
                auth: {
                    'is_owner': true,
                    'is_parent_org_owner': false
                }
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should accepts its payload", function() {
        // arrange
        create_settings_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.org).toEqual({
            name : 'my org',
            id : 4,
            query_threshold: 10
        });
        expect(ctrl_scope.fields[0].checked).toEqual(true);
        expect(ctrl_scope.fields[1].checked).toEqual(false);
        expect(ctrl_scope.fields[0].title).toEqual('PM Property ID');
    });
    it("should select all", function() {
        // arrange
        create_settings_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.controls.select_all = true;
        ctrl_scope.select_all_clicked();
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.infinite_fields[0].checked).toEqual(true);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myStripFilterApp = angular.module('myStripFilterApp', ['stripImportPrefix']);

describe("The stripImportPrefix filter", function() {
    beforeEach(module('myStripFilterApp'));
    it('Strips out the import prefix from building ids',
        // e.g. remove the 'IMP12-' from the id 'IMP12-1321/123'
        inject(function(stripImportPrefixFilter) {
            // normal cases
            expect(stripImportPrefixFilter('IMP134-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP134555-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP1-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP0-134')).toBe('134');
            // deals with `-`
            expect(stripImportPrefixFilter('IMP134-abc-dev')).toBe('abc-dev');
            // deals with `/`
            expect(stripImportPrefixFilter('IMP134-00/11')).toBe('00/11');
            // only strips first prefix
            expect(stripImportPrefixFilter('IMP134-IMP134-123')).toBe('IMP134-123');
        })
    );
    it("Does not strip out anything if there is not a prefix",
        inject(function(stripImportPrefixFilter) {
            // normal cases
            expect(stripImportPrefixFilter('123-123')).toBe('123-123');
            expect(stripImportPrefixFilter('0123/123')).toBe('0123/123');
        })
    );
    it("Is case sensitive to the import prefix",
        inject(function(stripImportPrefixFilter) {
            expect(stripImportPrefixFilter('imp123-abc')).toBe('imp123-abc');
            expect(stripImportPrefixFilter('iMp123-abc')).toBe('iMp123-abc');
            expect(stripImportPrefixFilter('iMP123-abc')).toBe('iMP123-abc');
        })
    );
    it("Handles undefined or null inputs",
        inject(function(stripImportPrefixFilter) {
            expect(stripImportPrefixFilter(undefined)).toBe(undefined);
            expect(stripImportPrefixFilter(null)).toBe(null);
        })
    );
    it("Only strips out the prefix if it has at least one digit and a hyphen",
        inject(function(stripImportPrefixFilter) {
            // must have the 'IMP' folowed by a digit then a hyphen
            expect(stripImportPrefixFilter('IMP-123')).toBe('IMP-123');
            expect(stripImportPrefixFilter('IMP1123')).toBe('IMP1123');
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myTitleCaseApp = angular.module('myTitleCaseApp', ['titleCase']);

describe("The TitleCase filter", function() {
    beforeEach(module('myTitleCaseApp'));
    it('Strips out ``_`` characters from strings and capitalizes the rest',
        inject(function(titleCaseFilter) {
            // normal cases
            expect(titleCaseFilter('super_data')).toBe('Super Data');
            expect(titleCaseFilter('super_data_45')).toBe('Super Data 45');
            expect(titleCaseFilter(undefined)).toBe(undefined);
            expect(titleCaseFilter(null)).toBe(null);
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myTypedNumberFilterApp = angular.module('myTypedNumberFilterApp', ['typedNumber']);

describe("The typedNumber filter", function() {
    beforeEach(module('myTypedNumberFilterApp'));
    it('should parse strings as strings and return them',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('tester')).toBe('tester');
        })
    );
    it('should parse strings as strings and return them, even if they look like numbers',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.1456')).toBe('123.1456');
        })
    );

    it('should parse numbers as numbers and return them',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.00001', 'number')).toBe("123");
        })
    );

    it('should allow the user to set the number of sig digits',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.321', 'number', 'not_year', 1)).toBe("123.3");
        })
    );

    it('should add commas to number greater than 999',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123456789', 'number', 'not_year', 0)).toBe("123,456,789");
        })
    );

    it('should parse year_built and not add commas',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('1946', 'number', 'year_built', 1)).toBe("1946");
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var validationTestApp = angular.module(
    'validationTestApp', ['mappingValidatorService']
);

describe("The MappingValidatorService", function() {
    var mvs;

    beforeEach(function () {
        module("validationTestApp");
        inject(function (mappingValidatorService) {
            mvs = mappingValidatorService;

        });

    });

    it('validates good string, float and date data', function() {
        // normal cases
        // Here ``type`` is undefined. Should still work.
        var str_data = ['Fun', 'fun2', 'fun3', 'fun4'];
        var float_data = ['12.34', '144.5', '234'];
        var date_data = ['2014/02/02', '03/13/2013', '03-14-2004'];

        expect(mvs.validate(str_data)).toEqual([]);
        expect(mvs.validate(float_data, 'float')).toEqual([]);
        expect(mvs.validate(date_data, 'date')).toEqual([]);
    });

    it('recognizes semivalid data', function() {
        // Cases where the data is /almost/ right.
        var float_data = ['12.34', '144.5', 'NaN'];
        var date_data = ['2014/02/02', 'huh?', '03-14-2004'];
        expect(mvs.validate(float_data, 'float')).toEqual(['NaN']);
        expect(mvs.validate(date_data, 'date')).toEqual(['huh?']);
    });

    it('recognizes invalid data', function() {
        // Cases where the data is *all* wrong.
        var float_data = ['', 'not a float', 'NaN'];
        var date_data = ['', 'huh?', 'what?'];
        // Cases where the data are correct.
        var good_float_data = ['12.34', '144.5', '234'];
        var good_date_data = ['2014/02/02', '03/13/2013', '03-14-2004'];

        // Data is wrong
        expect(mvs.validate(float_data, 'float')).toEqual(float_data);
        expect(mvs.validate(date_data, 'date')).toEqual(date_data);

        // Type is wrong
        // N.B. we use semivalid here, because Date is pretty forgiving w/ nums.
        expect(mvs.validate(good_float_data, 'date')).toEqual(['12.34']);
        expect(mvs.validate(good_date_data, 'float')).toEqual(good_date_data);


    });

});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// taken from the angularjs testing page
// http://docs.angularjs.org/guide/dev_guide.unit-testing

// create dummy angularJS app to attach filter(s)
var myBELabelDirectiveApp = angular.module('myBELabelDirectiveApp', ['beLabel']);

describe("The beLabel directive", function() {
    var $compile;
    var $rootScope;
    beforeEach(module('myBELabelDirectiveApp'));
    // Store references to $rootScope and $compile
    // so they are available to all tests in this describe block
    beforeEach(inject(function(_$compile_, _$rootScope_){
      // The injector unwraps the underscores (_) from around the parameter names when matching
      $compile = _$compile_;
      $rootScope = _$rootScope_;
    }));

    it('Replaces the element with the appropriate content', function() {
        // Compile a piece of HTML containing the directive
        var element = $compile('<be-label name="compliant" color="blue"></be-label>')($rootScope);
        // fire all the watches
        $rootScope.$digest();
        // Check that the compiled element contains the templated content
        expect(element.hasClass('label-primary')).toBe(true);
        expect(element.hasClass('label')).toBe(true);
        expect(element.html()).toContain("compliant");
    });

        // 'red': 'danger',
        // 'gray': 'default',
        // 'orange': 'warning',
        // 'green': 'success',
        // 'blue': 'primary',
        // 'light blue': 'info'
    it('Maps colors to semantic bootstrap class names', function() {
        var element = $compile('<be-label name="compliant" color="red"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-danger')).toBe(true);

        element = $compile('<be-label name="compliant" color="gray"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-default')).toBe(true);

        element = $compile('<be-label name="compliant" color="orange"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-warning')).toBe(true);

        element = $compile('<be-label name="compliant" color="green"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-success')).toBe(true);

        element = $compile('<be-label name="compliant" color="blue"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-primary')).toBe(true);

        element = $compile('<be-label name="compliant" color="light blue"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-info')).toBe(true);
    });


});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// taken from the angularjs testing page
// http://docs.angularjs.org/guide/dev_guide.unit-testing

// create dummy angularJS app to attach filter(s)
var myBEUploaderDirectiveApp = angular.module('myBEUploaderDirectiveApp', ['beUploader']);

describe("The beUploader directive", function() {
    var g_message, g_file, g_progress;
    var $compile;
    var $rootScope;
    var uploader_html = '<div be-uploader sourcetype="assessor" importrecord="5" buttontext="Upload your building list .csv file" eventfunc="uploaderfunc(message, filename, progress)" ng-hide="uploader.in_progress"></div>';
    beforeEach(module('myBEUploaderDirectiveApp'));
    // Store references to $rootScope and $compile
    // so they are available to all tests in this describe block
    beforeEach(inject(function(_$compile_, _$rootScope_){
      // The injector unwraps the underscores (_) from around the parameter names when matching
      $compile = _$compile_;
      $rootScope = _$rootScope_;
      $rootScope.eventfunc = function (fine_object) {
        console.log({fin: fine_object});
        g_message = fine_object.message;
        g_file = fine_object.file;
        g_progress = fine_object.progress;
      };
      window.BE = window.BE || {};
      window.BE.FILE_UPLOAD_DESTINATION = 'S3';
    }));

    it('Creates the fineuploader element', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        
        // act
        $rootScope.$digest();

        // assert
        expect(element.html()).toContain("qq-uploader");
        expect(element.html()).toContain("qq-upload-button");
    });

    it('Contains the buttontext specified', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);

        // act
        $rootScope.$digest();

        // assert
        expect(element.html()).toContain("Upload your building list .csv file");
    });

    it('Only allows one file to be uploaded at a time', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");

        // act
        $rootScope.$digest();

        // assert
        expect(func._options.multiple).toBe(false);
    });

    it('Uses the callback function for invalid file types', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.jpeg");

        // act
        $rootScope.$digest();
        func._options.showMessage("there was an invalid extension. Valid extension(s): .csv");


        // assert
        expect(g_message).toBe("invalid_extension");
    });

    it('Uses the callback function to share its state: upload started',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';
        
        // act
        $rootScope.$digest();
        func._options.callbacks.onSubmitted(1, filename);


        // assert
        expect(g_message).toBe("upload_submitted");
        expect(g_file.filename).toBe(filename);
    });

    it('Uses the callback function to share its state: in progress',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';
        var loaded = 10;
        var total = 100;
        
        // act
        $rootScope.$digest();
        func._options.callbacks.onProgress(1, filename, loaded, total);


        // assert
        expect(g_message).toBe("upload_in_progress");
        expect(g_file.filename).toBe(filename);
        expect(g_progress.loaded).toBe(loaded);
        expect(g_progress.total).toBe(total);
    });

    it('Uses the callback function to share its state: complete',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';

        
        // act
        $rootScope.$digest();
        func._options.callbacks.onComplete(1, filename, {success: true});


        // assert        
        expect(g_message).toBe("upload_complete");
        expect(g_file.filename).toBe(filename);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: building_detail_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, ngFilter, delete_called;
    var building_detail_ctrl, building_detail_ctrl_scope, modalInstance, labels;
    var mock_building_services, mock_project_service;
    var mock_building;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          urls,
          $q,
          building_services,
          project_service,
          $filter) {
            controller = $controller;
            scope = $rootScope;
            ngFilter = $filter;
            building_detail_ctrl_scope = $rootScope.$new();
            modal_state = "";
            delete_called = false;

            // mock the building_services factory methods used in the controller
            // and return their promises
            mock_building_services = building_services;
            mock_project_service = project_service;

            spyOn(mock_project_service, "get_project")
                .andCallFake(function(project_slug){
                    return $q.when(
                        {
                            "status": "success",
                            "project": {
                                id: 33,
                                name: "test project",
                                slug: project_slug
                            }
                        }
                    );
                }
            );
            spyOn(mock_project_service, "get_labels")
                .andCallFake(function(){
                    return $q.when(
                        {
                            "status": "success",
                            "labels": [{
                                id: 44,
                                name: "bad label",
                                color: "red"
                            }]
                        }
                    );
                }
            );
            spyOn(mock_project_service, "update_project_building")
                .andCallFake(function(building_id, project, label){
                    return $q.when(
                        {
                            "status": "success",
                            "approver": "bob doe",
                            "approved_date": "01/01/2012"
                        }
                    );
                }
            );
            spyOn(mock_building_services, "update_building")
                .andCallFake(function (building, org_id){
                    mock_building = building;
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_building_detail_controller(){
        var fake_building = {
            id: 511,
            pk: 511,
            gross_floor_area: 123456,
            gross_floor_area_source: 2,
            city: "DC",
            city_source: 4,
            tax_lot_id: "11/22",
            tax_lot_id_source: 3,
            extra_data: {
                'some other key': 12344,
                'some other key that is not in a parent': 223
            },
            extra_data_sources: {
                'some other key': 2,
                'some other key that is not in a parent': 3
            },
            created: "at some point"
        };
        var fake_imported_buildings = [
            {
                id: 2,
                pk: 2,
                gross_floor_area: 123456,
                gross_floor_area_source: null,
                city: "Washington, DC",
                city_source: null,
                extra_data: {
                    'some other key': 123,
                    'some other key that is not in a child': 333,
                    'some floor area': 444
                },
                extra_data_sources: {
                    'some other key': null,
                    'some other key that is not in a child': 111,
                    'some floor area': 444
                },
                created: "test"
            },
            {
                id: 3,
                pk: 3,
                gross_floor_area: 2111111,
                gross_floor_area_source: null,
                city: "Washington",
                city_source: null,
                tax_lot_id: "11/22",
                tax_lot_id_source: null,
                extra_data: {
                    'make it four': 4
                },
                extra_data_sources: {
                    'make it four': null
                }
            },{
                id: 4,
                pk: 4,
                gross_floor_area: 2111111,
                gross_floor_area_source: null,
                city: "Washington",
                city_source: null,
                tax_lot_id: "11/22",
                tax_lot_id_source: null,
                extra_data: {
                    'make it four': 5
                },
                extra_data_sources: {
                    'make it four': null
                }
            }
        ];
        var fake_payload = {
            "status": "success",
            "building": fake_building,
            "imported_buildings": fake_imported_buildings,
            "projects": [],
            "user_org_id": 42
        };
        var fake_all_columns = [{
            "title": "PM Property ID",
            "sort_column": "pm_property_id",
            "class": "is_aligned_right",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Tax Lot ID",
            "sort_column": "tax_lot_id",
            "class": "is_aligned_right",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Custom ID 1",
            "sort_column": "custom_id_1",
            "class": "is_aligned_right whitespace",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Property Name",
            "sort_column": "property_name",
            "class": "",
            "title_class": "",
            "type": "string",
            "field_type": "building_information",
            "sortable": true,
            "checked": false
        }];
        building_detail_ctrl = controller('building_detail_controller', {
            $scope: building_detail_ctrl_scope,
            $routeParams: {
                building_id: 1,
                project_id: 2
            },
            building_payload: fake_payload,
            all_columns: {
                fields: fake_all_columns
            },
            audit_payload: {
                audit_logs: []
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should have an building payload", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.building.id).toBe(511);
        expect(building_detail_ctrl_scope.imported_buildings[0].id).toBe(2);
    });

    it("should get labels on load", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.labels[0].id).toBe(44);
        expect(building_detail_ctrl_scope.labels[0].name).toBe("bad label");
        expect(building_detail_ctrl_scope.labels[0].color).toBe("red");
    });

    it("should highlight the active project", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.is_active_project({id:33}))
        .toBe(true);
        expect(building_detail_ctrl_scope.is_active_project({id:34}))
        .toBe(false);
        building_detail_ctrl_scope.project = undefined;
        expect(building_detail_ctrl_scope.is_active_project({id:34}))
        .toBe(false);
    });

    it("should make a copy of building while making edits", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.save_building_state();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;

        // assertions
        expect(building_detail_ctrl_scope.building_copy.gross_floor_area)
        .toBe(123456);
    });
    it("should restore the copy of building if a user clicks cancel",
        function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.save_building_state();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;
        building_detail_ctrl_scope.restore_building();

        // assertions
        expect(building_detail_ctrl_scope.building.gross_floor_area)
        .toBe(123456);
        expect(building_detail_ctrl_scope.building.edit_form_showing).toBe(false);
    });
    it("should save a building when a user clicks the save button", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;
        building_detail_ctrl_scope.save_building();

        // assertions
        expect(mock_building_services.update_building)
        .toHaveBeenCalledWith(building_detail_ctrl_scope.building, 42);
        expect(mock_building.gross_floor_area).toEqual(43214);
    });
    it("should show a default label if a building doesn't have one", function() {
        // arrange
        create_building_detail_controller();
        var building_with_label = {
            label: {
                name: "hello",
                label: "success"
            }
        };
        var building_without_label = {};
        var label_with, label_without;

        // act
        building_detail_ctrl_scope.$digest();
        label_with = building_detail_ctrl_scope.get_label(building_with_label);
        label_without = building_detail_ctrl_scope.get_label(building_without_label);

        // assertions
        expect(label_with).toEqual({
                name: "hello",
                label: "success"
            });
        expect(label_without).toEqual({
                name: "Add Label",
                label: "default"
            });
    });

    it("should show a project or buildings breadcrumb", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.user.project_slug = "project_1";

        // assertions
        expect(building_detail_ctrl_scope.is_project()).toEqual(true);
        building_detail_ctrl_scope.user.project_slug = undefined;
        expect(building_detail_ctrl_scope.is_project()).toEqual(false);

    });
    it("should show the default projects table if a user has no compliance" +
        " projects", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.user.has_projects()).toEqual(false);
        building_detail_ctrl_scope.projects = [{id: 1, name: "a"}];
        expect(building_detail_ctrl_scope.user.has_projects()).toEqual(true);

    });

    it("should set only building attribute to master, not ids or children", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.is_valid_key('id')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('pk')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('pk_source')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key(' extra_data ')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('gross_floor_area'))
          .toEqual(true);
    });
    it("should update a project-building label", function() {
        // arrange
        create_building_detail_controller();
        var project = {
            id: 2,
            building: {}
        };

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.update_project_building(project,
            {
                name: "label name",
                color: "red"
            });
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(mock_project_service.update_project_building).toHaveBeenCalled();
        expect(project.building.approver).toEqual("bob doe");
        expect(project.building.approved_date).toEqual("01/01/2012");
        expect(project.building.label.name).toEqual("label name");
        expect(project.building.label.color).toEqual("red");

    });
    it("should set a field as source when clicked", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[0].is_master = true;
        expect(building_detail_ctrl_scope.building.gross_floor_area_source)
          .not.toEqual(building_detail_ctrl_scope.building.id);
        building_detail_ctrl_scope.set_self_as_source('gross_floor_area');
        building_detail_ctrl_scope.set_self_as_source('some other key', true);
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.building.gross_floor_area_source)
          .toEqual(building_detail_ctrl_scope.building.id);
        expect(building_detail_ctrl_scope.imported_buildings[0].is_master)
          .toEqual(false);
    });
    it("should set a column as the dominant source when clicked", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[1].is_master = true;
        building_detail_ctrl_scope.make_source_default(
            building_detail_ctrl_scope.imported_buildings[0]);
        building_detail_ctrl_scope.$digest();

        // assertions
        var b = building_detail_ctrl_scope.building,
            i = building_detail_ctrl_scope.imported_buildings[0],
            i_other = building_detail_ctrl_scope.imported_buildings[1];

        expect(b.gross_floor_area_source).toEqual(i.id);
        expect(b.id).not.toEqual(i.id);
        expect(b.pk).not.toEqual(i.id);
        expect(b.city).toEqual(i.city);
        expect(b.city_source).toEqual(i.id);
        expect(b.tax_lot_id).toEqual("11/22");
        expect(b.tax_lot_id_source).toEqual(i_other.id);
        expect(b.extra_data['some other key']).toEqual(123);
        expect(b.extra_data_sources['some other key']).toEqual(i.id);
        expect(b.extra_data['some other key that is not in a child']).toEqual(333);
        expect(b.extra_data_sources['some other key that is not in a child']).toEqual(i.id);
        expect(b.extra_data['some other key that is not in a parent']).toEqual(223);
        expect(b.extra_data_sources['some other key that is not in a parent']).toEqual(i_other.id);
        expect(b.created).toEqual("at some point");

        expect(i.is_master).toEqual(true);
        expect(i_other.is_master).toEqual(false);
    });
    it("should set the master building value when parent's value is clicked",
        function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[1].is_master = true;
        building_detail_ctrl_scope.set_building_attribute(
            building_detail_ctrl_scope.imported_buildings[0], 'city');
        building_detail_ctrl_scope.set_building_attribute(
            building_detail_ctrl_scope.imported_buildings[0], 'some other key', true);
        building_detail_ctrl_scope.$digest();

        // assertions
        var b = building_detail_ctrl_scope.building,
            i = building_detail_ctrl_scope.imported_buildings[0],
            i_other = building_detail_ctrl_scope.imported_buildings[1];

        expect(b.id).not.toEqual(i.id);
        expect(b.pk).not.toEqual(i.id);
        expect(b.city).toEqual(i.city);
        expect(b.city_source).toEqual(i.id);
        expect(b.tax_lot_id).toEqual("11/22");
        expect(b.tax_lot_id_source).toEqual(i_other.id);
        expect(b.extra_data['some other key']).toEqual(123);
        expect(b.extra_data_sources['some other key']).toEqual(i.id);

        expect(i.is_master).toEqual(false);
        expect(i_other.is_master).toEqual(false);
    });

    it("should display all the data within all the buildings", function() {
        // arrange
        create_building_detail_controller();
        var keys;

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        var edc = building_detail_ctrl_scope.data_columns;

        // should not duplicate keys
        expect(edc.length).toEqual(8);
        keys = edc.map(function ( d ) {
            return d.key;
        });
        expect(keys.indexOf('make it four')).toEqual(4);
    });

    it("should display Floor Areas", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.$digest();

        // assertions
        var area_fields = building_detail_ctrl_scope.floor_area_fields;
        expect(area_fields.length).toEqual(1);
    });

    it("should display Floor Areas with number", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.get_number("")).toEqual(0);
        expect(building_detail_ctrl_scope.get_number("123,123,123")).toEqual(123123123);
        expect(building_detail_ctrl_scope.get_number("123,123,123.123")).toEqual(123123123.123);
        expect(building_detail_ctrl_scope.get_number("-123,123,123")).toEqual(-123123123);
        expect(building_detail_ctrl_scope.get_number(-123123123)).toEqual(-123123123);


    });
});

describe("controller: concat_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var scope, controller, modal_state;
    var edit_ctrl, concat_modal_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label, mock_mapping_service, mock_matching_service;
    var global_step = 1;
    var global_dataset = {};

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
            $controller, $rootScope, $modal, urls, $q
        ) {
            controller = $controller;
            scope = $rootScope;
            concat_modal_ctrl_scope = $rootScope.$new();
            concat_modal_ctrl_scope.concat_columns = [];
            modal_state = "";
        }
    ));

    var mock_building_column_types = [
        'address1', 'city', 'state', 'postal_code'
    ];

    var mock_raw_columns = [
        {
            name: 'Address',
            suggestion: 'address1',
            confidence: 1,
            raw_data: [
                '234 Database way',
                '23444 Huh hwy',
                '23444 Huh hwy',
                '23444 Huh hwy',
                '1223 face pl.'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        },
        {
            name: 'City',
            suggestion: 'city',
            confidence: 1,
            raw_data: [
                'Mega City', 'Mega City', 'Mega City', 'Mega City', 'Mega City'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        },
        {
            name: 'Zip',
            suggestion: '',
            confidence: 0,
            raw_data: [
                '234233', '234233', '234233', '234233', '234233'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        }
    ];

    // this is outside the beforeEach so it can be configured by each unit test
    function create_concat_modal_controller(){
        edit_ctrl = controller('concat_modal_ctrl', {
            $scope: concat_modal_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            building_column_types: mock_building_column_types,
            raw_columns: mock_raw_columns
        });
    }

    /*
     * Test scenarios
     */

    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.close_concat_modal();
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should mangle scope appropriately during concatenation", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(3);

        // arrange
        concat_modal_ctrl_scope.concat_columns =
            concat_modal_ctrl_scope.raw_columns.slice(0);
        concat_modal_ctrl_scope.raw_columns = [];

        // act
        concat_modal_ctrl_scope.$digest();
        concat_modal_ctrl_scope.save_concat();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(1);
        expect(
            concat_modal_ctrl_scope.raw_columns[0].is_concatenated
        ).toEqual(true);
    });

    it("should modify the raw_data of our modified TCM correctly", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(3);

        // arrange
        concat_modal_ctrl_scope.concat_columns =
            concat_modal_ctrl_scope.raw_columns.slice(0);
        concat_modal_ctrl_scope.raw_columns = [];

        // act
        concat_modal_ctrl_scope.$digest();
        concat_modal_ctrl_scope.save_concat();

        var expected_raw = [
            '234 Database way Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '1223 face pl. Mega City 234233'
        ];

        // assertions
        expect(
            concat_modal_ctrl_scope.raw_columns[0].raw_data
        ).toEqual(expected_raw);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: create_organization_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_organization_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, organization_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        mock_organization_service = organization_service;
        spyOn(mock_organization_service, "create_sub_org")
            .andCallFake(function(org, sub_org){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_organization_modal_ctrl(){
        ctrl = ctrl('create_organization_modal_ctrl', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            organization: {organization_id: 1}
        });
    }

    /*
     * Test scenarios
     */

    it("should call the organization service to add a new sub_org",
        function() {
        // arrange
        create_organization_modal_ctrl();

        // act
        ctrl_scope.$digest();
        ctrl_scope.sub_org.name = "my shiny new org";
        ctrl_scope.sub_org.email = "jb.smooth@be.com";
        ctrl_scope.submit_form(true);

        // assertions
        expect(mock_organization_service.create_sub_org)
            .toHaveBeenCalledWith(
                {
                    organization_id: 1
                },
                {
                    name: "my shiny new org",
                    email: "jb.smooth@be.com"
                }
            );
    });
    
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: data_upload_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_uploader_service, scope, controller, modal_state;
    var edit_ctrl, data_upload_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label, mock_mapping_service, mock_matching_service;
    var global_step = 1;
    var global_dataset = {};
    var return_labels = [
        {
            "name": 'compliant',
            "color": 'green',
            "id": 1
        },
        {
            "name": "new label",
            "color": "blue",
            "id": 2
        }
    ];

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, uploader_service, mapping_service, matching_service) {
            controller = $controller;
            scope = $rootScope;
            data_upload_ctrl_scope = $rootScope.$new();
            modal_state = "";

            // mock the uploader_service factory methods used in the controller
            // and return their promises
            mock_uploader_service = uploader_service;
            mock_mapping_service = mapping_service;
            mock_matching_service = matching_service;
            spyOn(mock_uploader_service, "get_AWS_creds")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "AWS_CLIENT_ACCESS_KEY": "123",
                            "AWS_UPLOAD_BUCKET_NAME": "test-bucket"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "check_progress")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "progress": "25.0"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "create_dataset")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "id": 3,
                                "name": dataset_name

                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error",
                                "message": "name already in use"
                            }
                        );
                    }
                }
            );
            spyOn(mock_uploader_service, "save_raw_data")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "file_id": 3
                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error"
                            }
                        );
                    }
                }
            );
            spyOn(mock_mapping_service, "start_mapping")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "file_id": 3
                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error"
                            }
                        );
                    }
                }
            );
            spyOn(mock_matching_service, "start_system_matching")
            .andCallFake(function(file_id){
                // return $q.reject for error scenario
                return $q.when(
                    {
                        "status": "success",
                        "file_id": 3
                    }
                );
            });

        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_data_upload_modal_controller(){
        edit_ctrl = controller('data_upload_modal_ctrl', {
            $scope: data_upload_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            step: global_step,
            dataset: global_dataset
        });
    }

    /*
     * Test scenarios
     */

    it("should close the modal when the close function is called", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.close();
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel function is called", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.cancel();
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

    it("should start at the step provided", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(1);

        // arrange
        global_step = 2;
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(2);
    });

    it("should goto different steps", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var step;
        step = 2;
        data_upload_ctrl_scope.goto_step(step);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(step);
    });

    it("disables the 'Name it' button if no text is entered", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(true);
    });
    it("disables the 'Name it' button if no text is entered, then cleared",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.dataset.name = undefined;
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(true);
    });
    it("enables the 'Name it' button if text is entered", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.dataset.name = "my dataset name";
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(false);
    });
    it("should show an alert if the dataset name is already in use",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.create_dataset("fail");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.alert).toBe(true);
    });
    it("should not show an alert if the dataset name is not already in use",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.create_dataset("my shiny new dataset");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.alert).toBe(false);
    });
    it("after creating a dataset, stores the dataset id", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var ds_name = "my shiny new dataset";
        data_upload_ctrl_scope.create_dataset(ds_name);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.id).toBe(3);
        expect(data_upload_ctrl_scope.dataset.name).toBe(ds_name);
    });
    it("after uploading a file, stores the file id", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var message, filename;
        message = "upload_complete";
        filename = "file1.csv";

        // act
        data_upload_ctrl_scope.uploaderfunc(message, {
            filename: filename,
            file_id: 20140313
        });
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.import_file_id).toBe(20140313);
    });
    it("should show an invalid extension alert if a file with an invalid" +
        "extension is loaded", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.uploaderfunc("invalid_extension");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.invalid_extension_alert)
            .toBe(true);
    });
    it("should hide the upload button after the user selects a file",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename;
        message = "upload_submitted";
        filename = "file1.csv";

        // act
        data_upload_ctrl_scope.uploaderfunc(message, {filename: filename});
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.filename).toBe(filename);
        expect(data_upload_ctrl_scope.uploader.in_progress).toBe(true);
    });
    it("should show the progressbar during upload",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename, progress;
        message = "upload_in_progress";
        filename = "file1.csv";
        progress = {
            loaded: 10,
            total: 100
        };

        // act
        data_upload_ctrl_scope.uploaderfunc(message, filename, progress);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.in_progress).toBe(true);
        expect(data_upload_ctrl_scope.uploader.progress).toBe(2.5);
    });
    it("should start saving the energy data when the file has been uploaded",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename;
        message = "upload_complete";
        filename = "file1.csv";
        data_upload_ctrl_scope.step.number = 4;

        // act
        data_upload_ctrl_scope.uploaderfunc(message, filename);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.status_message)
            .toBe("saving energy data");
    });

    it("should take an dataset payload", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.name).toBe("");
        expect(data_upload_ctrl_scope.dataset.filename).toBe("");
        expect(data_upload_ctrl_scope.dataset.id).toBe(0);
    });

    it("should extend a custom dataset payload", function() {
        // arrange
        global_dataset = {
            id: 100,
            filename: "seed_data.csv",
            name: "Compliance Project"
        };
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.name).toBe("Compliance Project");
        expect(data_upload_ctrl_scope.dataset.filename).toBe("seed_data.csv");
        expect(data_upload_ctrl_scope.dataset.id).toBe(100);
        expect(data_upload_ctrl_scope.dataset.alert).toBe(false);

    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: dataset_detail_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, ngFilter, delete_called;
    var dataset_detail_ctrl, dataset_detail_ctrl_scope, modalInstance, labels;

    

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, dataset_service, $filter) {
            controller = $controller;
            scope = $rootScope;
            ngFilter = $filter;
            dataset_detail_ctrl_scope = $rootScope.$new();
            modal_state = "";
            delete_called = false;

            // mock the dataset_service factory methods used in the controller
            // and return their promises
            mock_dataset_service = dataset_service;
            spyOn(mock_dataset_service, "get_dataset")
                .andCallFake(function(dataset_id){
                    // return $q.reject for error scenario
                    var fake_importfiles = [
                        {
                            name: "DC_CoveredBuildings_50k.csv",
                            number_of_buildings: 511,
                            number_of_mappings: 511,
                            number_of_cleanings: 1349,
                            source_type: "Assessed Raw",
                            number_of_matchings: 403
                        },
                        {
                            name: "DC_ESPM_Report.csv",
                            number_of_buildings: 511,
                            number_of_matchings: 403,
                            source_type: "Portfolio Raw"
                        }
                    ];
                    var fake_dataset = {
                        name: "DC 2013 data",
                        last_modified: (new Date()).getTime(),
                        last_modified_by: "john.s@buildingenergy.com",
                        number_of_buildings: 89,
                        id: 1,
                        importfiles: fake_importfiles
                    };
                    var fake_payload = {
                        "status": "success",
                        "dataset": fake_dataset
                    };
                    if (delete_called) {
                        fake_payload.dataset.importfiles.pop();
                    }
                    console.log({delete_called: delete_called, ds: fake_payload});
                    return $q.when(fake_payload);
                }
            );

            spyOn(mock_dataset_service, "delete_file")
                .andCallFake(function(import_file){
                    delete_called = true;
                    console.log({d: "delete_called"});
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_detail_controller(){
        var fake_importfiles = [
            {
                name: "DC_CoveredBuildings_50k.csv",
                number_of_buildings: 511,
                number_of_mappings: 511,
                number_of_cleanings: 1349,
                source_type: "Assessed Raw",
                number_of_matchings: 403
            },
            {
                name: "DC_ESPM_Report.csv",
                number_of_buildings: 511,
                number_of_matchings: 403,
                source_type: "Portfolio Raw"
            }
        ];
        var fake_dataset = {
            name: "DC 2013 data",
            last_modified: (new Date()).getTime(),
            last_modified_by: "john.s@buildingenergy.com",
            number_of_buildings: 89,
            id: 1,
            importfiles: fake_importfiles
        };
        var fake_payload = {
            "status": "success",
            "dataset": fake_dataset
        };
        dataset_detail_ctrl = controller('dataset_detail_controller', {
            $scope: dataset_detail_ctrl_scope,
            dataset_payload: fake_payload
        });
    }

    /*
     * Test scenarios
     */

    it("should have an data set payload with import files", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        dataset_detail_ctrl_scope.$digest();

        // assertions
        expect(dataset_detail_ctrl_scope.dataset.importfiles.length).toBe(2);
    });

    it("should show an alert when the delete icon is clicked", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        dataset_detail_ctrl_scope.$digest();
        var importfiles = dataset_detail_ctrl_scope.dataset.importfiles;
        dataset_detail_ctrl_scope.delete_file(importfiles[0]);
        dataset_detail_ctrl_scope.$digest();

        // assertions
        expect(dataset_detail_ctrl_scope.dataset.importfiles.length).toBe(1);
    });
   
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: dataset_list_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, modal_state;
    var edit_ctrl, dataset_list_ctrl_scope, modalInstance, labels;
    var location;

    

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, uploader_service,
            $location) {
            controller = $controller;
            scope = $rootScope;
            dataset_list_ctrl_scope = $rootScope.$new();
            modal_state = "";
            location = $location;

            // mock the uploader_service factory methods used in the controller
            // and return their promises
            mock_uploader_service = uploader_service;
            spyOn(mock_uploader_service, "get_AWS_creds")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "AWS_CLIENT_ACCESS_KEY": "123",
                            "AWS_UPLOAD_BUCKET_NAME": "test-bucket"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "create_dataset")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "import_record_id": 3,
                                "import_record_name": dataset_name

                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error",
                                "message": "name already in use"
                            }
                        );
                    }
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_list_controller(){
        var fake_datasets_payload = {
            "status": "success",
            "datasets": [
                {
                    name: "DC 2013 data",
                    last_modified: (new Date()).getTime(),
                    last_modified_by: "john.s@buildingenergy.com",
                    number_of_buildings: 89
                },
                {
                    name: "DC 2014 data",
                    last_modified: (new Date()).getTime() -
                        1550 * 60 * 60 * 1000,
                    last_modified_by: "gavin.m@buildingenergy.com",
                    number_of_buildings: 70
                }
            ]
        };
        edit_ctrl = controller('dataset_list_controller', {
            $scope: dataset_list_ctrl_scope,
            datasets_payload: fake_datasets_payload
        });
    }

    /*
     * Test scenarios
     */

    it("should have a dataset_payload", function() {
        // arrange
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();

        // assertions
        expect(dataset_list_ctrl_scope.datasets.length).toEqual(2);
    });

    it("should disable the mapping button if the dataset has no" +
        " Assessor files", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Portfolio Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_assessor_files(dataset);

        // assertions
        expect(disabled).toEqual(true);
    });

    it("should enable the mapping button if the dataset has at least one" +
        " Assessor file", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_assessor_files(dataset);

        // assertions
        expect(disabled).toEqual(false);
    });
    it("should disable the matching button if the dataset has no" +
        " Portfolio Manger files", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Assessed Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_pm_files(dataset);

        // assertions
        expect(disabled).toEqual(true);
    });
    it("should enable the matching button if the dataset has at least one" +
        " Portfolio Manger file", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_pm_files(dataset);

        // assertions
        expect(disabled).toEqual(false);
    });
    it("should navigate to the mapping page of the first assessed" +
        " import file when the ``Mapping`` button is clicked", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Assessed Raw",
                    id: 3
                },
                {
                    source_type: "Assessed Raw",
                    id: 5
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        dataset_list_ctrl_scope.goto_mapping(dataset);

        // assertions
        expect(location.path()).toBe('/data/mapping/3');
    });
    it("should navigate to the matching page of the first Portfolio Manager" +
        " import file when the ``Matching`` button is clicked", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw",
                    id: 3
                },
                {
                    source_type: "Portfolio Raw",
                    id: 5
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        dataset_list_ctrl_scope.goto_matching(dataset);

        // assertions
        expect(location.path()).toBe('/data/matching/3');
    });

   
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: delete_modal_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, building_services, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        // mock the export_service factory methods used in the controller
        // and return their promises
        mock_building_services = building_services;
        spyOn(mock_building_services, "delete_buildings")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_delete_modal_controller(){
        ctrl = ctrl('delete_modal_controller', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            search: { 
                selected_buildings: [1,2],
                filter_params: {},
                select_all_checkbox: false,
                order_by: "",
                sort_reverse: false,
                number_matching_search: 1000
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should start at the delete page", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.delete_state).toEqual("delete"); 
    });
    it("should save the search paramaters",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.delete_payload;
        expect(b.selected_buildings).toEqual([1,2]);
        expect(b.filter_params).toEqual({});
        expect(b.order_by).toEqual("");
        expect(b.sort_reverse).toEqual(false);
        expect(b.select_all_checkbox).toEqual(false);
    });
    it("should delete when the delete button is clicked",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.delete_buildings();

        // assertions
        expect(ctrl_scope.delete_state).toEqual("prepare");
        expect(mock_building_services.delete_buildings).toHaveBeenCalled();
    });
    it("should show the success page when the delete is finished",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.delete_buildings();
        ctrl_scope.$digest();

        // assertions
        expect(mock_building_services.delete_buildings).toHaveBeenCalled();
        expect(ctrl_scope.delete_state).toEqual("success");
    });
    it("should show the number of buildings to be deleted",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        var number_to_delete = ctrl_scope.number_to_delete();

        // assertions
        expect(number_to_delete).toEqual(2);
    });
    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.close();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.cancel();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

  
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myDistrictApp = angular.module('myDistrictApp', ['district']);

describe("The district filter", function() {
    beforeEach(module('myDistrictApp'));
    it('replaces `district` with `County/District/Ward/Borough`',
        inject(function(districtFilter) {
            // normal cases
            expect(districtFilter('district')).toBe('County/District/Ward/Borough');
            expect(districtFilter('District')).toBe('County/District/Ward/Borough');
            expect(districtFilter('DistRict')).toBe('County/District/Ward/Borough');
            expect(districtFilter('DISTRICT')).toBe('County/District/Ward/Borough');
            expect(districtFilter('aDISTRICT')).toBe('aDISTRICT');
            expect(districtFilter('')).toBe('');
            expect(districtFilter('district ')).toBe('district ');
            expect(districtFilter('ok')).toBe('ok');
            expect(districtFilter(undefined)).toBe(undefined);
            expect(districtFilter(null)).toBe(null);
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: edit_label_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, modal_state;
    var edit_ctrl, edit_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label;
    var return_labels = [
        {
            "name": 'compliant',
            "color": 'green',
            "id": 1
        },
        {
            "name": "new label",
            "color": "blue",
            "id": 2
        }
    ];

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, urls, $q, project_service) {
        controller = $controller;
        scope = $rootScope;
        edit_ctrl_scope = $rootScope.$new();
        modal_state = "";

        // mock the project_service factory methods used in the controller
        // and return their promises
        mock_project_service = project_service;
        spyOn(mock_project_service, "get_labels")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success", "labels": return_labels});
            }
        );
        spyOn(mock_project_service, "add_label")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
        spyOn(mock_project_service, "delete_label")
            .andCallFake(function(label){
                deleted_label = label;
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
        spyOn(mock_project_service, "update_label")
            .andCallFake(function(label){
                updated_label = label;
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );

    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_edit_modal_controller(){
        var labels = [
            {
                "name": 'compliant',
                "color": 'green',
                "id": 1
            }
        ];

        edit_ctrl = controller('edit_label_modal_ctrl', {
            $scope: edit_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            labels: labels
        });
    }

    /*
     * Test scenarios
     */

    it("should initialize the default label", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.$digest();
        edit_ctrl_scope.initialize_label_modal();

        // assertions
        expect(edit_ctrl_scope.label_modal.color).toBe("gray");
        expect(edit_ctrl_scope.label_modal.label).toBe("default");
        expect(edit_ctrl_scope.label_modal.name).toBe("");
        expect(edit_ctrl_scope.modal.label.state).toBe("create");
    });

    it("should get the labels available to an organization", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.add_label({});  // calls private get_labels
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.labels.length).toBe(2);
    });

    it("should add a label in the user's organization", function() {
        // arrange
        create_edit_modal_controller();
        var label_to_add = {
            color: "blue",
            label: "primary",
            name: "new label"
        };

        // act
        edit_ctrl_scope.add_label(label_to_add);
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.labels.length).toBe(2);
        expect(edit_ctrl_scope.labels[1].color).toBe("blue");
        expect(edit_ctrl_scope.labels[1].name).toBe("new label");
    });

    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.close();
        edit_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.cancel();
        edit_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

    it("sets the label_modal to the label when its edit button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.edit_label(label);
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.label_modal.color).toBe(label.color);
        expect(edit_ctrl_scope.label_modal.name).toBe(label.name);
        expect(edit_ctrl_scope.modal.label.state).toBe("edit");

        // assert that edit_ctrl_scope.label_modal is a copy and not a reference to label
        edit_ctrl_scope.label_modal.name = "random name here";
        expect(edit_ctrl_scope.label_modal.name).not.toBe(label.name);
    });
    
    it("deletes the appropriate label when the delete button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.delete_label(label);
        edit_ctrl_scope.$digest();

        // assertions
        expect(deleted_label).toBe(label);
    });

    it("updates the appropriate label when the update label button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.edit_label(label);
        edit_ctrl_scope.$digest();
        edit_ctrl_scope.label_modal.name = "harry";
        edit_ctrl_scope.label_modal.color = "blue";
        edit_ctrl_scope.update_label(edit_ctrl_scope.label_modal);
        edit_ctrl_scope.$digest();

        // assertions
        expect(mock_project_service.update_label).toHaveBeenCalledWith(edit_ctrl_scope.label_modal);
        expect(updated_label).toBe(edit_ctrl_scope.label_modal);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: export_modal_controller", function(){
    // globals set up and used in each test scenario
    var mock_export_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, export_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        // mock the export_service factory methods used in the controller
        // and return their promises
        mock_export_service = export_service;
        spyOn(mock_export_service, "export_buildings")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success", "export_id": "123456"});
            }
        );
        spyOn(mock_export_service, "export_buildings_progress")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({
                    "status": "success",
                    "buildings_processed": 1000
                });
            }
        );
            spyOn(mock_export_service, "export_buildings_download")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({
                    "status": "success",
                    "url": "#"
                });
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_export_modal_controller(){
        ctrl = ctrl('export_modal_controller', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            search: { 
                selected_buildings: [],
                filter_params: {},
                select_all_checkbox: false,
                order_by: "",
                sort_reverse: false,
                number_matching_search: 1000
            },
            selected_fields: ['tax_lot_id', 'postal_code'],
            project: {
                id: 11
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should start at the create page", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.export_state).toEqual("create"); 
    });
    it("should start with an empty name and default file type of 'xls'",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.building_export;
        expect(b.export_name).toEqual("");
        expect(b.export_type).toEqual("xls");
    });
    it("should save the search paramaters",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.building_export;
        expect(b.selected_buildings).toEqual([]);
        expect(b.filter_params).toEqual({});
        expect(b.order_by).toEqual("");
        expect(b.sort_reverse).toEqual(false);
        expect(b.select_all_checkbox).toEqual(false);
        expect(b.selected_fields).toEqual(['tax_lot_id', 'postal_code']);
        expect(b.project_id).toEqual(11);
        expect(ctrl_scope.progress_denominator).toEqual(0);
    });
    it("should kick off the export process when the export button is clicked",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.export_buildings();

        // assertions
        expect(ctrl_scope.export_state).toEqual("prepare");
        expect(mock_export_service.export_buildings).toHaveBeenCalled();
    });
    it("should show the success page when the data is ready",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.show_success_page("123");
        ctrl_scope.$digest();

        // assertions
        expect(mock_export_service.export_buildings_download).toHaveBeenCalled();
        expect(ctrl_scope.export_state).toEqual("success");
    });
    it("should update the progress bar",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.monitor_progress("123", 1000);
        ctrl_scope.$digest();
        timeout.flush();

        // assertions
        expect(mock_export_service.export_buildings_progress).toHaveBeenCalled();
        expect(ctrl_scope.progress_percentage).toEqual(100);
        expect(ctrl_scope.progress_numerator).toEqual(1000);
        expect(ctrl_scope.progress_denominator).toEqual(1000);
    });
    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.close();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.cancel();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

  
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
/**
 * tests fromNow angularjs filter wrapper of moment.js
 * uses epoch milliseconds as that is what the back-end returns
 */

// create dummy angularJS app to attach filter(s)
var myfromNowFilterApp = angular.module('myfromNowFilterApp', ['fromNow']);

describe("The fromNow filter", function() {
    beforeEach(module('myfromNowFilterApp'));

    it('shows the present time as "a few seconds ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('a few seconds ago');
        })
    );

    it('shows 5 minutes ago as "5 minutes ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 5  * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('5 minutes ago');
        })
    );

    it('shows 4 hours ago as "4 hours ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 4 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('4 hours ago');
        })
    );

    it('shows 24 hours ago as "a day ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 24 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('a day ago');
        })
    );

    it('shows 36 hours ago as "2 days ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 36 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('2 days ago');
        })
    );

    it('shows 1550 hours ago as "2 months ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 1550 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('2 months ago');
        })
    );

    it('defaults to "a few seconds ago" for undefined values',
        inject(function(fromNowFilter) {
            // arrange

            // act

            // assert
            expect(fromNowFilter(undefined)).toBe('a few seconds ago');
            expect(fromNowFilter(null)).toBe('a few seconds ago');
            expect(fromNowFilter("some text")).toBe('a few seconds ago');
            expect(fromNowFilter({})).toBe('a few seconds ago');
            expect(fromNowFilter({time: "not time"})).toBe('a few seconds ago');
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myignoremapApp = angular.module('myignoremapApp', ['ignoremap']);

describe("The ignoremap filter", function() {
    beforeEach(module('myignoremapApp'));
    it('replaces `""` with `------ Ignore Row ------`',
        inject(function(ignoremapFilter) {
            // normal cases
            expect(ignoremapFilter('')).toBe('------ Ignore Row ------');
            expect(ignoremapFilter(' ')).toBe(' ');
            expect(ignoremapFilter('aignoremap')).toBe('aignoremap');
            expect(ignoremapFilter('ignoremap ')).toBe('ignoremap ');
            expect(ignoremapFilter('ok')).toBe('ok');
            expect(ignoremapFilter(undefined)).toBe('------ Ignore Row ------');
            expect(ignoremapFilter(null)).toBe('------ Ignore Row ------');
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: mapping_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, modal_state;
    var mapping_ctrl, mapping_ctrl_scope, modalInstance, labels;
    var timeout, mock_user_service, mock_search_service;



    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, building_services, $timeout, user_service, search_service) {
            controller = $controller;
            scope = $rootScope;
            mapping_ctrl_scope = $rootScope.$new();
            modal_state = "";
            timeout = $timeout;
            mock_user_service = user_service;
            mock_search_service = search_service;

            spyOn(mock_user_service, 'set_default_columns')
                .andCallFake(function(mapped_columns){
                    return undefined;
                });
            spyOn(mock_search_service, 'search_buildings')
                .andCallFake(function(){
                    return [1,2,3];
                });
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_mapping_controller(){
        var mock_datasets = [
            {
                name: "DC 2013 data",
                last_modified: (new Date()).getTime(),
                last_modified_by: "john.s@buildingenergy.com",
                number_of_buildings: 89,
                id: 1
            },
            {
                name: "DC 2014 data",
                last_modified: (new Date()).getTime() -
                    1550 * 60 * 60 * 1000,
                last_modified_by: "gavin.m@buildingenergy.com",
                number_of_buildings: 70,
                id: 2
            }
        ];
        var fake_import_file_payload = {
            "status": "success",
            "import_file": {
                        file_name: "assessor_fun.csv",
                        last_modified: (new Date()).getTime(),
                        last_modified_by: "john.s@buildingenergy.com",
                        source_type: 'AssessorRaw',
                        dataset: mock_datasets[0],
                        id: 1
                    }
        };

        var mock_be_building_columns = [
            'pm_property_id',
            'property_name',
            'property_notes',
            'tax_lot_id',
            'gross_floor_area',
            'My New non-BEDES field'
        ];

        var mock_be_building_types = {
            'gross_floor_area': {
                unit_type: 'float',
                schema: 'BEDES'
            }
        };

        var mock_mapping_suggestions_payload = {
            'status': 'success',
            'suggested_column_mappings': {
                // key(django model attribute): [csv_header1, ... csv_header3]
                'property id': ['pm_property_id', 89],
                'lot number': ['tax_lot_id' , 54]
            },
            "building_columns": mock_be_building_columns,
            "building_column_types": mock_be_building_types
        };

        var mock_raw_column_names = [
            'property id',
            'property_name',
            'property_notes',
            'lot number',
            'lot size'
        ];

        var mock_first_five_rows = [];
        for (var i=0; i < 4; i++) {
            mock_first_five_rows.push({
                'property id': i,
                'property_name': 'Property ' + i,
                'property_notes': 'Nup.',
                'lot number': i * 2,
                'lot size': 454 * i
            });
        }

        mock_first_five_rows.push({
            'property id': '121L',
            'property_name': 'Inconsistent Property',
            'property_notes': 'N/A',
            'lot number': 'N/A',
            'lot size': 45
        });

        var raw_columns_payload = {
            "status": "success",
            "raw_columns": mock_raw_column_names
        };
        var first_five_rows_payload = {
            "status": "success",
            "first_five_rows": mock_first_five_rows
        };
        mapping_ctrl = controller('mapping_controller', {
            $scope: mapping_ctrl_scope,
            import_file_payload: fake_import_file_payload,
            suggested_mappings_payload: mock_mapping_suggestions_payload,
            raw_columns_payload: raw_columns_payload,
            first_five_rows_payload: first_five_rows_payload,
            all_columns: {fields: []},
            building_services: mock_building_services,
            $timeout: timeout
        });
    }

    /*
     * Test scenarios
     */

    it("should have a import_file_payload", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        expect(mapping_ctrl_scope.import_file.dataset.name).toBe("DC 2013 data");
    });

    it("should show suggested mappings and confidence", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        var raw_columns = mapping_ctrl_scope.raw_columns;
        var first_column = raw_columns[0];

        expect(first_column.confidence).toBe(89);
        expect(first_column.suggestion).toBe("Pm Property Id");
    });

    it("should show 'low', 'med', 'high', or '' confidence text", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        var raw_columns = mapping_ctrl_scope.raw_columns;
        var first_column = raw_columns[0];
        expect(first_column.confidence_text()).toBe("high");
        first_column.confidence = 70;
        expect(first_column.confidence_text()).toBe("med");
        first_column.confidence = 35;
        expect(first_column.confidence_text()).toBe("low");
        delete(first_column.confidence);
        expect(first_column.confidence_text()).toBe("");
    });

    it("should validate initial data", function() {
        create_mapping_controller();
        // act
        mapping_ctrl_scope.$digest();
        // assertions
        angular.forEach(mapping_ctrl_scope.raw_columns, function(rc) {
            if (rc.suggestion !== '' && typeof(rc.suggestion) !== "undefined") {
                expect(rc.validity).toBe('valid');
            }
        });
    });

    it("should invalidate bad suggestions", function() {
        // Simulate a change on the tcm, make it fail.
        create_mapping_controller();
        // act
        mapping_ctrl_scope.$digest();
        // assertions
        //
        // We change the suggested mapping for the "property name" column
        // to "gross_floor_area" (which validates as float) to
        // purposesly cause a failing change.
        mapping_ctrl_scope.raw_columns[1].suggestion = 'gross_floor_area';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[1]);
        expect(mapping_ctrl_scope.raw_columns[1].validity).toBe('invalid');

    });

    it("should set td_class appropriately", function() {
        var tcm;

        create_mapping_controller();

        mapping_ctrl_scope.$digest();
        tcm = mapping_ctrl_scope.raw_columns[0];
        var good_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[0]
        );

        // First raw column is mapped up as pm_property_id <-> property_id
        // Any kind of string will be valid.
        expect(good_val).toBe('success');

        // Now set it to one that expects float values.
        // Only one of these will *not* validate.
        mapping_ctrl_scope.raw_columns[0].suggestion = 'gross_floor_area';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[0]);

        tcm = mapping_ctrl_scope.raw_columns[0];
        var warning_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[4]
        );

        expect(warning_val).toBe('warning');

        // We don't want the warning style to be applied to neighboring cells
        // in the same row. Check that the cell next to our invalid one is
        // unstyled (undefined).
        tcm = mapping_ctrl_scope.raw_columns[0];
        var adjacent_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[3]
        );

        expect(adjacent_val).toBe(undefined);

        // Now we're saying the suggestion is to not map.
        // Check that we don't have any class set for this row now.
        mapping_ctrl_scope.raw_columns[0].suggestion = '';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[0]);

        tcm = mapping_ctrl_scope.raw_columns[0];
        var blank_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[4]
        );

        expect(blank_val).toBe('');

    });

    it("should detect duplicates of mapped rows", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // raw_columns[0] and raw_columns[3] should be the only mapped rows
        var column = mapping_ctrl_scope.raw_columns[3];
        var test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

        // Set the property_name tcm's suggestion to the same as
        // the property_id tcm (raw_columns[0])
        column.suggestion = 'Pm Property Id';

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(true);

        // Since we mark both duplicates as duplicates, the other
        // TCM that has the 'pm_property_id' suggestion should also get
        // 'danger' as its duplicate class.
        var other_dup = mapping_ctrl_scope.is_tcm_duplicate(
            mapping_ctrl_scope.raw_columns[0]
        );
        expect(other_dup).toBe(true);

        // Shows that mapped_row is the sole determinant of
        // column ignoring
        column.mapped_row = false;

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

    });

    it("should ignore duplicates of unmapped rows", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // raw_columns[0] and raw_columns[3] should be the only mapped rows
        var column = mapping_ctrl_scope.raw_columns[1];
        var test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

        // Set the property_name tcm's suggestion to the same as
        // the property_id tcm (raw_columns[0])
        column.suggestion = 'Pm Property Id';

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);
    });

    it("should get mapped buildings", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        mapping_ctrl_scope.get_mapped_buildings();
        mapping_ctrl_scope.$digest();

        // assertions
        expect(mapping_ctrl_scope.search.search_buildings).toHaveBeenCalled();
        expect(mock_user_service.set_default_columns).toHaveBeenCalled();
    });

    it("should enbale the 'show & review buildings' button if duplicates are" +
        " not present", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        for (var i = mapping_ctrl_scope.raw_columns.length - 1; i >= 0; i--) {
            mapping_ctrl_scope.change(mapping_ctrl_scope.raw_columns[i]);
        }
        var duplicates_found = mapping_ctrl_scope.duplicates_present();

        // assertions
        expect(duplicates_found).toBe(false);
    });

    it("should disable the 'show & review buildings' button if duplicates " +
        "are present", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        for (var i = mapping_ctrl_scope.raw_columns.length - 1; i >= 0; i--) {
            mapping_ctrl_scope.raw_columns[i].suggestion = "pm_property_id";
            mapping_ctrl_scope.change(mapping_ctrl_scope.raw_columns[i]);
        }
        var duplicates_found = mapping_ctrl_scope.duplicates_present();

        // assertions
        expect(duplicates_found).toBe(true);
    });

    it("should get mappings in an API friendly way", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();
        var mappings = mapping_ctrl_scope.get_mappings();
        expect(mappings.length).toBe(5);
        expect(mappings[0]).toEqual(['Pm Property Id', 'property id']);
        // everything in between is empty since we we're using only
        // suggested mappings.
        expect(mappings[3]).toEqual(['Tax Lot Id', 'lot number']);
    });

    it("should show the 'STEP 2' tab when reviewing mappings", function() {
        // arrange
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // act
        var mappings = mapping_ctrl_scope.get_mapped_buildings();

        // assert
        expect(mapping_ctrl_scope.tabs).toEqual({
            'one_active': false,
            'two_active': true,
            'three_active': false
        });
    });

    it("should show BEDES fields with a checkbox", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assert
        expect(mapping_ctrl_scope.is_suggestion_BEDES('gross_floor_area')).toBe(true);
        expect(mapping_ctrl_scope.is_suggestion_BEDES('Gross Floor Area')).toBe(true);
        expect(mapping_ctrl_scope.is_suggestion_BEDES('My New non-BEDES field')).toBe(false);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: matching_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, delete_called;
    var matching_ctrl, matching_ctrl_scope, modalInstance, labels;


    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, building_services) {
            controller = $controller;
            scope = $rootScope;
            matching_ctrl_scope = $rootScope.$new();

            mock_building_services = building_services;
            spyOn(mock_building_services, "get_PM_filter_by_counts")
                .andCallFake(function(import_file){
                    return $q.when(
                        {
                            "status": "success",
                            "unmatched": 5,
                            "matched": 10
                        }
                    );
                }
            );
            spyOn(mock_building_services, "save_match")
                .andCallFake(function(b1, b2, create){
                    return $q.when(
                        {
                            "status": "success",
                            "child_id": 3
                        }
                    );
                }
            );
            spyOn(mock_building_services, "search_matching_buildings")
                .andCallFake(function(q, number_per_page, current_page, order_by, sort_reverse, 
                                        filter_params, file_id ){
                    
                    switch(filter_params.children__isnull){
                        case undefined:
                            var bldgs = [
                                {
                                    pm_property_id: 1
                                },
                                {
                                    pm_property_id: 2
                                }
                                ,
                                {
                                    pm_property_id: 3
                                }
                            ];
                            break;
                        case false:
                            var bldgs = [
                                {
                                    pm_property_id: 1
                                }
                            ];
                            break;
                        case true:
                            var bldgs = [
                                {
                                    pm_property_id: 3
                                },
                                {
                                    pm_property_id: 4
                                }
                            ];
                            break;
                    }

                    return $q.when(
                        {
                            status: "success",
                            number_returned: buildings_payload.length,
                            number_matching_search: buildings_payload.length,
                            buildings: bldgs
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_detail_controller(){
        var buildings_payload = {
            buildings: [
                {
                    pm_property_id: 1,
                    tax_lot_id: null,
                    custom_id_1: 2,
                    gross_floor_area: 111,
                    matched: true,
                    id: 1,
                    children: [3],
                    coparent: {
                        pm_property_id: null,
                        tax_lot_id: 2,
                        custom_id_1: null,
                        gross_floor_area: 111,
                        id: 2,
                        children: [3]
                    }
                }
            ],
            number_matching_search: 1,
            number_returned: 1
        };
        matching_ctrl = controller('matching_controller', {
            $scope: matching_ctrl_scope,
            buildings_payload: buildings_payload,
            all_columns: {
                fields: [{sort_column: 'pm_property_id'}]
            },
            default_columns: {
                columns: ['pm_property_id']
            },
            import_file_payload: {
                import_file: {
                    id: 1,
                    dataset: {
                        importfiles: [
                            {
                                id: 1,
                                name: "file_1.csv"
                            },
                            {
                                id: 2,
                                name: "file_2.csv"
                            }
                        ]
                    }
                }
            }
        });
    }



    /*
     * Test scenarios
     */

    it("should have a buildings payload with potential matches", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();
        var b = matching_ctrl_scope.buildings[0];

        // assertions
        expect(matching_ctrl_scope.buildings.length).toBe(1);
        expect(b.coparent.children).toEqual(b.children);
    });

    it("should provide to the view scope variables representing the number matched and the number of unmatched buildings", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();

        // assertions
        expect(matching_ctrl_scope.matched_buildings).toEqual(10);
        expect(matching_ctrl_scope.unmatched_buildings).toEqual(5);
    });

    it("should jump back to the matching list when the 'Back to list' button" +
        " is clicked", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.show_building_list = false;
        matching_ctrl_scope.back_to_list();

        // assertions
        expect(matching_ctrl_scope.show_building_list).toEqual(true);
    });

    it("should present an initial state with the matching buildings table",
        function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();

        // assertions
        expect(matching_ctrl_scope.columns).toEqual([{ sort_column : 'pm_property_id' }]);
        expect(matching_ctrl_scope.number_matching_search).toEqual(1);
        expect(matching_ctrl_scope.number_returned).toEqual(1);
        expect(matching_ctrl_scope.num_pages).toEqual(1);
        expect(mock_building_services.get_PM_filter_by_counts).toHaveBeenCalled();
    });
    it("should match a building in the matching list", function() {
        // arrange
        create_dataset_detail_controller();
        var b1, b2;
        b2 = {
            id: 2,
            children: [],
            matched: false
        };
        b1 = {
            id: 1,
            children: [],
            matched: true,
            coparent: b2
        };

        // act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.toggle_match(b1);
        matching_ctrl_scope.$digest();

        // assertions
        expect(mock_building_services.save_match).toHaveBeenCalledWith(b1.id, b2.id, true);
        expect(mock_building_services.get_PM_filter_by_counts).toHaveBeenCalled();
        expect(b1.children[0]).toEqual(3);
    });
    it("Should update the list of buildings correctly when 'Show Matched' is selected", 
        function() {
        //arrange
        create_dataset_detail_controller();

        //act
        controller.update_show_filter(controller.SHOW_MATCHED)

        //assertions
        expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(1);
        expect(matching_ctrl_scope.number_returned).toEqual(1);
    });
    it("Should update the list of buildings correctly when 'Show Unmatched' is selected", 
        function() {
        //arrange
        create_dataset_detail_controller();

        //act
        controller.update_show_filter(controller.SHOW_UNMATCHED)

        //assertions
        expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(2);
        expect(matching_ctrl_scope.number_returned).toEqual(2);
    });
    it("Should update the list of buildings correctly when 'Show All' is selected", 
        function() {
        //arrange
        create_dataset_detail_controller();

        //act
        controller.update_show_filter(controller.SHOW_ALL)

        //assertions
        expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(3);
        expect(matching_ctrl_scope.number_returned).toEqual(3);
    });



});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: members_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller;
    var ctrl, ctrl_scope, modalInstance;
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          $q,
          organization_service) {
            ctrl = $controller;
            scope = $rootScope;
            ctrl_scope = $rootScope.$new();

            mock_organization_service = organization_service;
            
            spyOn(mock_organization_service, "remove_user")
                .andCallFake(function(user_id, org_id){
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
            spyOn(mock_organization_service, "get_organization_users")
                .andCallFake(function(org){
                    return $q.when(
                        {
                            "status": "success",
                            "users": [{id:1, first_name:"Bob", last_name:"D"}]
                        }
                    );
                }
            );
            spyOn(mock_organization_service, "update_role")
                .andCallFake(function(org_id, user_id, role){
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_members_controller(){
        ctrl = ctrl('members_controller', {
            $scope: ctrl_scope,
            users_payload: {users: [
                {first_name: 'J', last_name: 'S'},
                {first_name: undefined, last_name: null}
            ]},
            organization_payload: {
                organization: {name: 'my org', id: 4}
            },
            auth_payload: {
                auth: {
                    'can_invite_member': true,
                    'can_remove_member': true
                }
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should accepts its payload", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.org).toEqual({name : 'my org', id : 4});
        expect(ctrl_scope.users[0].name).toEqual("J S");
        expect(ctrl_scope.users[1].name).toEqual(" ");
    });
    it("clicking remove should remove a user", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.remove_member({user_id: 2});

        // assertions
        expect(mock_organization_service.remove_user)
            .toHaveBeenCalledWith(2, 4);
        
        ctrl_scope.$digest();
        expect(mock_organization_service.get_organization_users)
            .toHaveBeenCalledWith({org_id: 4});
    });
    it("clicking a new role should update the user's role", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.update_role({user_id: 2, role: "viewer"});

        // assertions
        expect(mock_organization_service.update_role)
            .toHaveBeenCalledWith(2, 4, 'viewer');
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: new_member_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_user_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, user_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        mock_user_service = user_service;
        spyOn(mock_user_service, "add")
            .andCallFake(function(user){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_new_member_controller(){
        ctrl = ctrl('new_member_modal_ctrl', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            organization: {organization_id: 1}
        });
    }

    /*
     * Test scenarios
     */

    it("should set the default role to 'member'", function() {
        // arrange
        create_new_member_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.user.role.value).toEqual("member"); 
    });
    it("should call the user service to add a new user to the org",
        function() {
        // arrange
        create_new_member_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.user.first_name = "JB";
        ctrl_scope.user.last_name = "Smooth";
        ctrl_scope.user.email = "jb.smooth@be.com";
        ctrl_scope.submit_form(true);

        // assertions
        expect(mock_user_service.add)
            .toHaveBeenCalledWith({
                first_name: "JB",
                last_name: "Smooth",
                email: "jb.smooth@be.com",
                role: ctrl_scope.roles[0],
                organization: {
                    organization_id: 1
                }
            });
    });
    
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
/**
 * run_jasmine.js: runs the jasmine JS test runner
 */
(function() {
    var jasmineEnv = jasmine.getEnv();
    jasmineEnv.updateInterval = 1000;

    var htmlReporter = new jasmine.HtmlReporter();

    jasmineEnv.addReporter(htmlReporter);

    jasmineEnv.specFilter = function(spec) {
        return htmlReporter.specFilter(spec);
    };

    var currentWindowOnload = window.onload;

    window.onload = function() {
        if (currentWindowOnload) {
        currentWindowOnload();
        }
        execJasmine();
    };
    function execJasmine() {
        jasmineEnv.execute();
    }
})();

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var searchTestApp = angular.module(
    'searchTestApp', ['BE.seed.service.search']
);

describe("The search_service service", function() {
    var saas, httpBackend, test_url;

    beforeEach(function () {
        module("searchTestApp");
        inject(function (search_service, $httpBackend) {
            saas = search_service;
            httpBackend = $httpBackend;
            httpBackend.when("POST", test_url).respond("ok");
        });

    });

    /**
     * sanitize_params tests
     */
    it('removes null and undefined values from filter_params', function () {
        // arrange
        saas.filter_params = {
          'National Median Site Energy Use__gte': 4,
          'National Median Site Energy Use__lte': null,
          'National Median Source EUI__gte': undefined
        };

        // act
        saas.sanitize_params();

        // assert
        expect(saas.filter_params).toEqual({'National Median Site Energy Use__gte': 4});
    });

    /**
     * search_buildings tests
     */
    it('has sane defaults', function() {
        expect(saas.url).toEqual("");
        expect(saas.error_message).toEqual("");
        expect(saas.alert).toEqual(false);
        expect(saas.buildings).toEqual([]);
        expect(saas.current_page).toEqual(1);
        expect(saas.number_per_page).toEqual(10);
        expect(saas.order_by).toEqual("");
        expect(saas.sort_column).toEqual("tax_lot_id");
        expect(saas.sort_reverse).toEqual(false);
        expect(saas.select_all_checkbox).toEqual(false);
        expect(saas.prev_page_disabled).toEqual(true);
        expect(saas.next_page_disabled).toEqual(true);
        expect(saas.num_pages).toEqual(0);
        expect(saas.query).toEqual("");
        expect(saas.showing).toEqual({
            'start': 1,
            'end': 0
        });
    });

    it('search_buildings uses the argument `query`', function() {
        saas.query = "hotels";
        saas.search_buildings("not hotels");

        expect(saas.query).toEqual("not hotels");
    });
    it('filter search resets the current page', function() {
        // arrange
        saas.current_page = 22;
        spyOn(saas, 'search_buildings');

        // act
        saas.filter_search();

        // assert
        expect(saas.current_page).toEqual(1);
        expect(saas.search_buildings).toHaveBeenCalled();
    });

    it('search_buildings function will default to its query if' +
        ' no query is passed as an argument', function() {
        saas.query = "hotels";
        saas.search_buildings();

        expect(saas.query).toEqual("hotels");
    });

    it('search_buildings hits the set url', function() {
        test_url = "/my-search-url";
        saas.url = test_url;
        saas.search_buildings();
        httpBackend.expectPOST(test_url);
        httpBackend.flush();
    });

    it('search_buildings POSTs the query data as `q`', function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.query = "hotel chains";
        saas.number_per_page = 25;
        saas.order_by = "gross_floor_area";
        saas.sort_reverse = true;
        saas.filter_params = {
            project: '2012 data'
        };

        // act
        saas.search_buildings();

        // assert
        httpBackend.expectPOST(test_url,
            {
                "q": "hotel chains",
                "number_per_page": 25,
                "order_by": "gross_floor_area",
                "sort_reverse": true,
                "filter_params": {
                    "project": "2012 data"
                },
                "page":1
            }
        ).respond(201, "");
        httpBackend.flush();
    });
    it('search_buildings updates its `buildings` model', function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.query = "hotel chains";
        saas.number_per_page = 25;
        saas.order_by = "gross_floor_area";
        saas.sort_reverse = true;
        saas.filter_params = {
            project: '2012 data'
        };

        // act
        saas.search_buildings();

        // assert
        httpBackend.expectPOST(test_url,
            {
                "q": "hotel chains",
                "number_per_page": 25,
                "order_by": "gross_floor_area",
                "sort_reverse": true,
                "filter_params": {
                    "project": "2012 data"
                },
                "page":1
            }
        ).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        expect(saas.buildings).toEqual([
            {
                name: "one",
                id: 1,
                checked: false
            },
            {
                name: "two",
                id: 2,
                checked: false
            }
        ]);
    });
    it('should clear the error and alert after a successful search',
        function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.error_message = "help";
        saas.alert = true;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {
            'buildings': [
                {
                    name: "one",
                    id: 1
                },
                {
                    name: "two",
                    id: 2
                }],
            'number_matching_search': 101
            });
        httpBackend.flush();

        // assert
        expect(saas.alert).toEqual(false);
        expect(saas.error_message).toEqual("");
    });

    /**
     * pagination tests
     */
    it('increments the page when the `next` button is clicked',
        function() {
        // arrange
        saas.num_pages = 1000;
        saas.current_page = 100;
        spyOn(saas, 'search_buildings');
        // act
        saas.next_page();

        // assert
        expect(saas.current_page).toEqual(101);
        expect(saas.search_buildings).toHaveBeenCalled();
        expect(saas.search_buildings.callCount).toEqual(1);

    });
    it('doesn\'t increment past the last page when the `next` button is' +
        ' clicked', function() {
        // arrange
        saas.num_pages = 2;
        saas.current_page = 2;
        spyOn(saas, 'search_buildings');
        // act
        saas.next_page();

        // assert
        expect(saas.current_page).toEqual(2);
        expect(saas.search_buildings).toHaveBeenCalled();
        expect(saas.search_buildings.callCount).toEqual(1);

    });
    it('decrements the page when the `previous` button is clicked',
        function() {
        // arrange
        saas.num_pages = 1000;
        saas.current_page = 100;
        spyOn(saas, 'search_buildings');
        // act
        saas.prev_page();

        // assert
        expect(saas.current_page).toEqual(99);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('does not decrement below the first page when the `previous` button' +
        ' is clicked', function() {
        // arrange
        saas.num_pages = 1;
        saas.current_page = 1;
        spyOn(saas, 'search_buildings');
        // act
        saas.prev_page();

        // assert
        expect(saas.current_page).toEqual(1);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('fetches more or less results per page when a user selects an option' +
        ' from the number per page select',
        function() {
        // arrange
        saas.number_per_page_options_model = 50;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_number_per_page();

        // assert
        expect(saas.number_per_page).toEqual(50);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('updates the number of results displayed text after a successful '+
        'search', function() {
        // standard case
        // page 2 of 3 with 10/page, so should display 11 of 20
        // arrange
        saas.current_page = 2;
        saas.num_pages = 3;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_start_end_paging();

        // assert
        expect(saas.showing.start).toEqual(11);
        expect(saas.showing.end).toEqual(20);
        expect(saas.search_buildings).not.toHaveBeenCalled();
    });
    it('displays the number matching the query if on the last page of results',
        function() {
        // standard case
        // page 3 of 3 with 10/page and 34 results, so should display 21 of 34
        // arrange
        saas.current_page = 3;
        saas.number_matching_search = 34;
        saas.num_pages = 3;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_start_end_paging();

        // assert
        expect(saas.showing.start).toEqual(21);
        expect(saas.showing.end).toEqual(34);
    });
    it('should call update_start_end_paging after a successful search',
        function() {
        // arrange
        spyOn(saas, 'update_start_end_paging');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_start_end_paging).toHaveBeenCalled();
    });
    it('should call update_buttons after a successful search',
        function() {
        // arrange
        spyOn(saas, 'update_buttons');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_buttons).toHaveBeenCalled();
    });
    it('should disable prev paging buttons at the first page',
        function() {
        // arrange
        saas.current_page = 1;
        saas.num_pages = 5;

        // act
        saas.update_buttons();

        // assert
        expect(saas.prev_page_disabled).toEqual(true);
        expect(saas.next_page_disabled).toEqual(false);
    });
    it('should disable next paging buttons at the last page',
        function() {
        // arrange
        saas.current_page = 5;
        saas.num_pages = 5;

        // act
        saas.update_buttons();

        // assert
        expect(saas.prev_page_disabled).toEqual(false);
        expect(saas.next_page_disabled).toEqual(true);
    });
    it('should calculate the number of pages after a successful search',
        function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {
            'buildings': [
                {
                    name: "one",
                    id: 1
                },
                {
                    name: "two",
                    id: 2
                }],
            'number_matching_search': 101
            });
        httpBackend.flush();

        // assert
        expect(saas.number_matching_search).toEqual(101);
        expect(saas.num_pages).toEqual(11);
    });

    /**
     * checkbox logic tests
     */
    it('should select or unselect all the viewed results when the select all' +
        ' checkbox is checked or unchecked', function() {
        // arrange
        saas.selected_buildings = [1,2,3];
        saas.select_all_checkbox = true;
        saas.buildings = [
            {
                checked: false
            },
            {
                checked: true
            }
        ];
        spyOn(saas, 'select_or_deselect_all_buildings').andCallThrough();

        // act
        saas.select_all_changed();

        // assert
        expect(saas.selected_buildings).toEqual([]);
        expect(saas.buildings).toEqual([
                {
                    checked: true
                },
                {
                    checked: true
                }
            ]);
        expect(saas.select_or_deselect_all_buildings).toHaveBeenCalled();
    });
    it('should call select_or_deselect_all_buildings after a search',
        function() {
        // arrange
        spyOn(saas, 'select_or_deselect_all_buildings');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.select_or_deselect_all_buildings).toHaveBeenCalled();
    });
    it('should add a building to the selected list when checked',
        function() {
        // arrange
        var building = {
            id: 5,
            checked: true
        };

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([5]);
    });
    it('should add a building to the selected list when unchecked and the ' +
        'select all checkbox is checked', function() {
        // arrange
        var building = {
            id: 5,
            checked: false
        };
        saas.select_all_checkbox = true;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([5]);
    });
    it('should remove a building to the selected list when unchecked',
        function() {
        // arrange
        var building = {
            id: 5,
            checked: false
        };
        saas.selected_buildings = [5,6,7];
        saas.select_all_checkbox = false;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([6,7]);
    });
    it('should remove a building to the selected list when checked if the ' +
        'select all checkbox is checked', function() {
        // arrange
        var building = {
            id: 5,
            checked: true
        };
        saas.selected_buildings = [5,6,7];
        saas.select_all_checkbox = true;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([6,7]);
    });
    it('should call load_state_from_selected_buildings after a successful ' +
        'search', function() {
        // arrange
        spyOn(saas, 'load_state_from_selected_buildings').andCallThrough();
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.load_state_from_selected_buildings).toHaveBeenCalled();
    });
    it('should call update_results after a successful ' +
        'search', function() {
        // arrange
        var select_or_deselect_all_buildings_time,
            load_state_from_selected_buildings_time;
        spyOn(saas, 'update_results').andCallThrough();
        spyOn(saas, 'select_or_deselect_all_buildings')
            .andCallFake(function() {
                select_or_deselect_all_buildings_time = new Date();
            }
        );
        spyOn(saas, 'load_state_from_selected_buildings')
            .andCallFake(function() {
                // wait for a sec, otherwise both have the same timestamp
                for(var y=0;y<100000;y++){
                    var x = new Date();
                    x = x+y;
                }
                load_state_from_selected_buildings_time = new Date();
            }
        );
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_results).toHaveBeenCalled();
        expect(select_or_deselect_all_buildings_time <
               load_state_from_selected_buildings_time).toBe(true);
    });
    it('check selected buildings successful', function() {
        // arrange
        saas.selected_buildings = [2];
        saas.buildings = [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ];

        // act
        saas.load_state_from_selected_buildings();

        // assert
        expect(saas.buildings[1]).toEqual({
            name: "two",
            id: 2,
            checked: true
        });
    });
    it('should generate columns', function() {
        // arrange
        var all_columns, column_headers, columns;
        all_columns = [
            {
                sort_column: "name"
            },
            {
                sort_column: "id"
            }
        ];
        column_headers = ["id"];
        saas.sort_column = "something else";
        saas.update_results({});
        // act
        columns = saas.generate_columns(
            all_columns, column_headers, saas.column_prototype
        );

        // assert that columns are extended off the prototype and only have
        // "id"
        expect(columns.length).toEqual(1);
        expect(columns[0].sort_column).toEqual("id");
        expect(columns[0].is_unsorted()).toEqual(true);
        saas.sort_column = "id";
        expect(columns[0].is_unsorted()).toEqual(false);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: settings_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller;
    var ctrl, ctrl_scope, modalInstance;
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          $q,
          organization_service) {
            ctrl = $controller;
            scope = $rootScope;
            ctrl_scope = $rootScope.$new();

            mock_organization_service = organization_service;
            
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_settings_controller(){
        ctrl = ctrl('settings_controller', {
            $scope: ctrl_scope,
            all_columns: {fields: [
                {checked: false, title: 'PM Property ID', sort_column: 'pm_property_id'},
                {checked: false, title: 'G', sort_column: 'g'},
                {checked: false, title: "Gross Floor Area", sort_column: 'gross_floor_area'}
            ]},
            organization_payload: {
                organization: {name: 'my org', id: 4}
            },
            query_threshold_payload: {
                query_threshold: 10
            },
            shared_fields_payload: {
                shared_fields: [
                    {
                        title: "PM Property Id",
                        sort_column: "pm_property_id"
                    }
                ],
                public_fields: [
                {
                    title: "Gross Floor Area",
                    sort_column: "gross_floor_area"
                }]
            },
            auth_payload: {
                auth: {
                    'is_owner': true,
                    'is_parent_org_owner': false
                }
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should accepts its payload", function() {
        // arrange
        create_settings_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.org).toEqual({
            name : 'my org',
            id : 4,
            query_threshold: 10
        });
        expect(ctrl_scope.fields[0].checked).toEqual(true);
        expect(ctrl_scope.fields[1].checked).toEqual(false);
        expect(ctrl_scope.fields[0].title).toEqual('PM Property ID');
    });
    it("should select all", function() {
        // arrange
        create_settings_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.controls.select_all = true;
        ctrl_scope.select_all_clicked();
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.infinite_fields[0].checked).toEqual(true);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myStripFilterApp = angular.module('myStripFilterApp', ['stripImportPrefix']);

describe("The stripImportPrefix filter", function() {
    beforeEach(module('myStripFilterApp'));
    it('Strips out the import prefix from building ids',
        // e.g. remove the 'IMP12-' from the id 'IMP12-1321/123'
        inject(function(stripImportPrefixFilter) {
            // normal cases
            expect(stripImportPrefixFilter('IMP134-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP134555-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP1-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP0-134')).toBe('134');
            // deals with `-`
            expect(stripImportPrefixFilter('IMP134-abc-dev')).toBe('abc-dev');
            // deals with `/`
            expect(stripImportPrefixFilter('IMP134-00/11')).toBe('00/11');
            // only strips first prefix
            expect(stripImportPrefixFilter('IMP134-IMP134-123')).toBe('IMP134-123');
        })
    );
    it("Does not strip out anything if there is not a prefix",
        inject(function(stripImportPrefixFilter) {
            // normal cases
            expect(stripImportPrefixFilter('123-123')).toBe('123-123');
            expect(stripImportPrefixFilter('0123/123')).toBe('0123/123');
        })
    );
    it("Is case sensitive to the import prefix",
        inject(function(stripImportPrefixFilter) {
            expect(stripImportPrefixFilter('imp123-abc')).toBe('imp123-abc');
            expect(stripImportPrefixFilter('iMp123-abc')).toBe('iMp123-abc');
            expect(stripImportPrefixFilter('iMP123-abc')).toBe('iMP123-abc');
        })
    );
    it("Handles undefined or null inputs",
        inject(function(stripImportPrefixFilter) {
            expect(stripImportPrefixFilter(undefined)).toBe(undefined);
            expect(stripImportPrefixFilter(null)).toBe(null);
        })
    );
    it("Only strips out the prefix if it has at least one digit and a hyphen",
        inject(function(stripImportPrefixFilter) {
            // must have the 'IMP' folowed by a digit then a hyphen
            expect(stripImportPrefixFilter('IMP-123')).toBe('IMP-123');
            expect(stripImportPrefixFilter('IMP1123')).toBe('IMP1123');
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myTitleCaseApp = angular.module('myTitleCaseApp', ['titleCase']);

describe("The TitleCase filter", function() {
    beforeEach(module('myTitleCaseApp'));
    it('Strips out ``_`` characters from strings and capitalizes the rest',
        inject(function(titleCaseFilter) {
            // normal cases
            expect(titleCaseFilter('super_data')).toBe('Super Data');
            expect(titleCaseFilter('super_data_45')).toBe('Super Data 45');
            expect(titleCaseFilter(undefined)).toBe(undefined);
            expect(titleCaseFilter(null)).toBe(null);
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myTypedNumberFilterApp = angular.module('myTypedNumberFilterApp', ['typedNumber']);

describe("The typedNumber filter", function() {
    beforeEach(module('myTypedNumberFilterApp'));
    it('should parse strings as strings and return them',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('tester')).toBe('tester');
        })
    );
    it('should parse strings as strings and return them, even if they look like numbers',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.1456')).toBe('123.1456');
        })
    );

    it('should parse numbers as numbers and return them',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.00001', 'number')).toBe("123");
        })
    );

    it('should allow the user to set the number of sig digits',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.321', 'number', 'not_year', 1)).toBe("123.3");
        })
    );

    it('should add commas to number greater than 999',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123456789', 'number', 'not_year', 0)).toBe("123,456,789");
        })
    );

    it('should parse year_built and not add commas',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('1946', 'number', 'year_built', 1)).toBe("1946");
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var validationTestApp = angular.module(
    'validationTestApp', ['mappingValidatorService']
);

describe("The MappingValidatorService", function() {
    var mvs;

    beforeEach(function () {
        module("validationTestApp");
        inject(function (mappingValidatorService) {
            mvs = mappingValidatorService;

        });

    });

    it('validates good string, float and date data', function() {
        // normal cases
        // Here ``type`` is undefined. Should still work.
        var str_data = ['Fun', 'fun2', 'fun3', 'fun4'];
        var float_data = ['12.34', '144.5', '234'];
        var date_data = ['2014/02/02', '03/13/2013', '03-14-2004'];

        expect(mvs.validate(str_data)).toEqual([]);
        expect(mvs.validate(float_data, 'float')).toEqual([]);
        expect(mvs.validate(date_data, 'date')).toEqual([]);
    });

    it('recognizes semivalid data', function() {
        // Cases where the data is /almost/ right.
        var float_data = ['12.34', '144.5', 'NaN'];
        var date_data = ['2014/02/02', 'huh?', '03-14-2004'];
        expect(mvs.validate(float_data, 'float')).toEqual(['NaN']);
        expect(mvs.validate(date_data, 'date')).toEqual(['huh?']);
    });

    it('recognizes invalid data', function() {
        // Cases where the data is *all* wrong.
        var float_data = ['', 'not a float', 'NaN'];
        var date_data = ['', 'huh?', 'what?'];
        // Cases where the data are correct.
        var good_float_data = ['12.34', '144.5', '234'];
        var good_date_data = ['2014/02/02', '03/13/2013', '03-14-2004'];

        // Data is wrong
        expect(mvs.validate(float_data, 'float')).toEqual(float_data);
        expect(mvs.validate(date_data, 'date')).toEqual(date_data);

        // Type is wrong
        // N.B. we use semivalid here, because Date is pretty forgiving w/ nums.
        expect(mvs.validate(good_float_data, 'date')).toEqual(['12.34']);
        expect(mvs.validate(good_date_data, 'float')).toEqual(good_date_data);


    });

});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// taken from the angularjs testing page
// http://docs.angularjs.org/guide/dev_guide.unit-testing

// create dummy angularJS app to attach filter(s)
var myBELabelDirectiveApp = angular.module('myBELabelDirectiveApp', ['beLabel']);

describe("The beLabel directive", function() {
    var $compile;
    var $rootScope;
    beforeEach(module('myBELabelDirectiveApp'));
    // Store references to $rootScope and $compile
    // so they are available to all tests in this describe block
    beforeEach(inject(function(_$compile_, _$rootScope_){
      // The injector unwraps the underscores (_) from around the parameter names when matching
      $compile = _$compile_;
      $rootScope = _$rootScope_;
    }));

    it('Replaces the element with the appropriate content', function() {
        // Compile a piece of HTML containing the directive
        var element = $compile('<be-label name="compliant" color="blue"></be-label>')($rootScope);
        // fire all the watches
        $rootScope.$digest();
        // Check that the compiled element contains the templated content
        expect(element.hasClass('label-primary')).toBe(true);
        expect(element.hasClass('label')).toBe(true);
        expect(element.html()).toContain("compliant");
    });

        // 'red': 'danger',
        // 'gray': 'default',
        // 'orange': 'warning',
        // 'green': 'success',
        // 'blue': 'primary',
        // 'light blue': 'info'
    it('Maps colors to semantic bootstrap class names', function() {
        var element = $compile('<be-label name="compliant" color="red"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-danger')).toBe(true);

        element = $compile('<be-label name="compliant" color="gray"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-default')).toBe(true);

        element = $compile('<be-label name="compliant" color="orange"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-warning')).toBe(true);

        element = $compile('<be-label name="compliant" color="green"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-success')).toBe(true);

        element = $compile('<be-label name="compliant" color="blue"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-primary')).toBe(true);

        element = $compile('<be-label name="compliant" color="light blue"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-info')).toBe(true);
    });


});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// taken from the angularjs testing page
// http://docs.angularjs.org/guide/dev_guide.unit-testing

// create dummy angularJS app to attach filter(s)
var myBEUploaderDirectiveApp = angular.module('myBEUploaderDirectiveApp', ['beUploader']);

describe("The beUploader directive", function() {
    var g_message, g_file, g_progress;
    var $compile;
    var $rootScope;
    var uploader_html = '<div be-uploader sourcetype="assessor" importrecord="5" buttontext="Upload your building list .csv file" eventfunc="uploaderfunc(message, filename, progress)" ng-hide="uploader.in_progress"></div>';
    beforeEach(module('myBEUploaderDirectiveApp'));
    // Store references to $rootScope and $compile
    // so they are available to all tests in this describe block
    beforeEach(inject(function(_$compile_, _$rootScope_){
      // The injector unwraps the underscores (_) from around the parameter names when matching
      $compile = _$compile_;
      $rootScope = _$rootScope_;
      $rootScope.eventfunc = function (fine_object) {
        console.log({fin: fine_object});
        g_message = fine_object.message;
        g_file = fine_object.file;
        g_progress = fine_object.progress;
      };
      window.BE = window.BE || {};
      window.BE.FILE_UPLOAD_DESTINATION = 'S3';
    }));

    it('Creates the fineuploader element', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        
        // act
        $rootScope.$digest();

        // assert
        expect(element.html()).toContain("qq-uploader");
        expect(element.html()).toContain("qq-upload-button");
    });

    it('Contains the buttontext specified', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);

        // act
        $rootScope.$digest();

        // assert
        expect(element.html()).toContain("Upload your building list .csv file");
    });

    it('Only allows one file to be uploaded at a time', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");

        // act
        $rootScope.$digest();

        // assert
        expect(func._options.multiple).toBe(false);
    });

    it('Uses the callback function for invalid file types', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.jpeg");

        // act
        $rootScope.$digest();
        func._options.showMessage("there was an invalid extension. Valid extension(s): .csv");


        // assert
        expect(g_message).toBe("invalid_extension");
    });

    it('Uses the callback function to share its state: upload started',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';
        
        // act
        $rootScope.$digest();
        func._options.callbacks.onSubmitted(1, filename);


        // assert
        expect(g_message).toBe("upload_submitted");
        expect(g_file.filename).toBe(filename);
    });

    it('Uses the callback function to share its state: in progress',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';
        var loaded = 10;
        var total = 100;
        
        // act
        $rootScope.$digest();
        func._options.callbacks.onProgress(1, filename, loaded, total);


        // assert
        expect(g_message).toBe("upload_in_progress");
        expect(g_file.filename).toBe(filename);
        expect(g_progress.loaded).toBe(loaded);
        expect(g_progress.total).toBe(total);
    });

    it('Uses the callback function to share its state: complete',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';

        
        // act
        $rootScope.$digest();
        func._options.callbacks.onComplete(1, filename, {success: true});


        // assert        
        expect(g_message).toBe("upload_complete");
        expect(g_file.filename).toBe(filename);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: building_detail_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, ngFilter, delete_called;
    var building_detail_ctrl, building_detail_ctrl_scope, modalInstance, labels;
    var mock_building_services, mock_project_service;
    var mock_building;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          urls,
          $q,
          building_services,
          project_service,
          $filter) {
            controller = $controller;
            scope = $rootScope;
            ngFilter = $filter;
            building_detail_ctrl_scope = $rootScope.$new();
            modal_state = "";
            delete_called = false;

            // mock the building_services factory methods used in the controller
            // and return their promises
            mock_building_services = building_services;
            mock_project_service = project_service;

            spyOn(mock_project_service, "get_project")
                .andCallFake(function(project_slug){
                    return $q.when(
                        {
                            "status": "success",
                            "project": {
                                id: 33,
                                name: "test project",
                                slug: project_slug
                            }
                        }
                    );
                }
            );
            spyOn(mock_project_service, "get_labels")
                .andCallFake(function(){
                    return $q.when(
                        {
                            "status": "success",
                            "labels": [{
                                id: 44,
                                name: "bad label",
                                color: "red"
                            }]
                        }
                    );
                }
            );
            spyOn(mock_project_service, "update_project_building")
                .andCallFake(function(building_id, project, label){
                    return $q.when(
                        {
                            "status": "success",
                            "approver": "bob doe",
                            "approved_date": "01/01/2012"
                        }
                    );
                }
            );
            spyOn(mock_building_services, "update_building")
                .andCallFake(function (building, org_id){
                    mock_building = building;
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_building_detail_controller(){
        var fake_building = {
            id: 511,
            pk: 511,
            gross_floor_area: 123456,
            gross_floor_area_source: 2,
            city: "DC",
            city_source: 4,
            tax_lot_id: "11/22",
            tax_lot_id_source: 3,
            extra_data: {
                'some other key': 12344,
                'some other key that is not in a parent': 223
            },
            extra_data_sources: {
                'some other key': 2,
                'some other key that is not in a parent': 3
            },
            created: "at some point"
        };
        var fake_imported_buildings = [
            {
                id: 2,
                pk: 2,
                gross_floor_area: 123456,
                gross_floor_area_source: null,
                city: "Washington, DC",
                city_source: null,
                extra_data: {
                    'some other key': 123,
                    'some other key that is not in a child': 333,
                    'some floor area': 444
                },
                extra_data_sources: {
                    'some other key': null,
                    'some other key that is not in a child': 111,
                    'some floor area': 444
                },
                created: "test"
            },
            {
                id: 3,
                pk: 3,
                gross_floor_area: 2111111,
                gross_floor_area_source: null,
                city: "Washington",
                city_source: null,
                tax_lot_id: "11/22",
                tax_lot_id_source: null,
                extra_data: {
                    'make it four': 4
                },
                extra_data_sources: {
                    'make it four': null
                }
            },{
                id: 4,
                pk: 4,
                gross_floor_area: 2111111,
                gross_floor_area_source: null,
                city: "Washington",
                city_source: null,
                tax_lot_id: "11/22",
                tax_lot_id_source: null,
                extra_data: {
                    'make it four': 5
                },
                extra_data_sources: {
                    'make it four': null
                }
            }
        ];
        var fake_payload = {
            "status": "success",
            "building": fake_building,
            "imported_buildings": fake_imported_buildings,
            "projects": [],
            "user_org_id": 42
        };
        var fake_all_columns = [{
            "title": "PM Property ID",
            "sort_column": "pm_property_id",
            "class": "is_aligned_right",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Tax Lot ID",
            "sort_column": "tax_lot_id",
            "class": "is_aligned_right",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Custom ID 1",
            "sort_column": "custom_id_1",
            "class": "is_aligned_right whitespace",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Property Name",
            "sort_column": "property_name",
            "class": "",
            "title_class": "",
            "type": "string",
            "field_type": "building_information",
            "sortable": true,
            "checked": false
        }];
        building_detail_ctrl = controller('building_detail_controller', {
            $scope: building_detail_ctrl_scope,
            $routeParams: {
                building_id: 1,
                project_id: 2
            },
            building_payload: fake_payload,
            all_columns: {
                fields: fake_all_columns
            },
            audit_payload: {
                audit_logs: []
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should have an building payload", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.building.id).toBe(511);
        expect(building_detail_ctrl_scope.imported_buildings[0].id).toBe(2);
    });

    it("should get labels on load", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.labels[0].id).toBe(44);
        expect(building_detail_ctrl_scope.labels[0].name).toBe("bad label");
        expect(building_detail_ctrl_scope.labels[0].color).toBe("red");
    });

    it("should highlight the active project", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.is_active_project({id:33}))
        .toBe(true);
        expect(building_detail_ctrl_scope.is_active_project({id:34}))
        .toBe(false);
        building_detail_ctrl_scope.project = undefined;
        expect(building_detail_ctrl_scope.is_active_project({id:34}))
        .toBe(false);
    });

    it("should make a copy of building while making edits", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.save_building_state();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;

        // assertions
        expect(building_detail_ctrl_scope.building_copy.gross_floor_area)
        .toBe(123456);
    });
    it("should restore the copy of building if a user clicks cancel",
        function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.save_building_state();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;
        building_detail_ctrl_scope.restore_building();

        // assertions
        expect(building_detail_ctrl_scope.building.gross_floor_area)
        .toBe(123456);
        expect(building_detail_ctrl_scope.building.edit_form_showing).toBe(false);
    });
    it("should save a building when a user clicks the save button", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;
        building_detail_ctrl_scope.save_building();

        // assertions
        expect(mock_building_services.update_building)
        .toHaveBeenCalledWith(building_detail_ctrl_scope.building, 42);
        expect(mock_building.gross_floor_area).toEqual(43214);
    });
    it("should show a default label if a building doesn't have one", function() {
        // arrange
        create_building_detail_controller();
        var building_with_label = {
            label: {
                name: "hello",
                label: "success"
            }
        };
        var building_without_label = {};
        var label_with, label_without;

        // act
        building_detail_ctrl_scope.$digest();
        label_with = building_detail_ctrl_scope.get_label(building_with_label);
        label_without = building_detail_ctrl_scope.get_label(building_without_label);

        // assertions
        expect(label_with).toEqual({
                name: "hello",
                label: "success"
            });
        expect(label_without).toEqual({
                name: "Add Label",
                label: "default"
            });
    });

    it("should show a project or buildings breadcrumb", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.user.project_slug = "project_1";

        // assertions
        expect(building_detail_ctrl_scope.is_project()).toEqual(true);
        building_detail_ctrl_scope.user.project_slug = undefined;
        expect(building_detail_ctrl_scope.is_project()).toEqual(false);

    });
    it("should show the default projects table if a user has no compliance" +
        " projects", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.user.has_projects()).toEqual(false);
        building_detail_ctrl_scope.projects = [{id: 1, name: "a"}];
        expect(building_detail_ctrl_scope.user.has_projects()).toEqual(true);

    });

    it("should set only building attribute to master, not ids or children", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.is_valid_key('id')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('pk')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('pk_source')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key(' extra_data ')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('gross_floor_area'))
          .toEqual(true);
    });
    it("should update a project-building label", function() {
        // arrange
        create_building_detail_controller();
        var project = {
            id: 2,
            building: {}
        };

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.update_project_building(project,
            {
                name: "label name",
                color: "red"
            });
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(mock_project_service.update_project_building).toHaveBeenCalled();
        expect(project.building.approver).toEqual("bob doe");
        expect(project.building.approved_date).toEqual("01/01/2012");
        expect(project.building.label.name).toEqual("label name");
        expect(project.building.label.color).toEqual("red");

    });
    it("should set a field as source when clicked", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[0].is_master = true;
        expect(building_detail_ctrl_scope.building.gross_floor_area_source)
          .not.toEqual(building_detail_ctrl_scope.building.id);
        building_detail_ctrl_scope.set_self_as_source('gross_floor_area');
        building_detail_ctrl_scope.set_self_as_source('some other key', true);
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.building.gross_floor_area_source)
          .toEqual(building_detail_ctrl_scope.building.id);
        expect(building_detail_ctrl_scope.imported_buildings[0].is_master)
          .toEqual(false);
    });
    it("should set a column as the dominant source when clicked", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[1].is_master = true;
        building_detail_ctrl_scope.make_source_default(
            building_detail_ctrl_scope.imported_buildings[0]);
        building_detail_ctrl_scope.$digest();

        // assertions
        var b = building_detail_ctrl_scope.building,
            i = building_detail_ctrl_scope.imported_buildings[0],
            i_other = building_detail_ctrl_scope.imported_buildings[1];

        expect(b.gross_floor_area_source).toEqual(i.id);
        expect(b.id).not.toEqual(i.id);
        expect(b.pk).not.toEqual(i.id);
        expect(b.city).toEqual(i.city);
        expect(b.city_source).toEqual(i.id);
        expect(b.tax_lot_id).toEqual("11/22");
        expect(b.tax_lot_id_source).toEqual(i_other.id);
        expect(b.extra_data['some other key']).toEqual(123);
        expect(b.extra_data_sources['some other key']).toEqual(i.id);
        expect(b.extra_data['some other key that is not in a child']).toEqual(333);
        expect(b.extra_data_sources['some other key that is not in a child']).toEqual(i.id);
        expect(b.extra_data['some other key that is not in a parent']).toEqual(223);
        expect(b.extra_data_sources['some other key that is not in a parent']).toEqual(i_other.id);
        expect(b.created).toEqual("at some point");

        expect(i.is_master).toEqual(true);
        expect(i_other.is_master).toEqual(false);
    });
    it("should set the master building value when parent's value is clicked",
        function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[1].is_master = true;
        building_detail_ctrl_scope.set_building_attribute(
            building_detail_ctrl_scope.imported_buildings[0], 'city');
        building_detail_ctrl_scope.set_building_attribute(
            building_detail_ctrl_scope.imported_buildings[0], 'some other key', true);
        building_detail_ctrl_scope.$digest();

        // assertions
        var b = building_detail_ctrl_scope.building,
            i = building_detail_ctrl_scope.imported_buildings[0],
            i_other = building_detail_ctrl_scope.imported_buildings[1];

        expect(b.id).not.toEqual(i.id);
        expect(b.pk).not.toEqual(i.id);
        expect(b.city).toEqual(i.city);
        expect(b.city_source).toEqual(i.id);
        expect(b.tax_lot_id).toEqual("11/22");
        expect(b.tax_lot_id_source).toEqual(i_other.id);
        expect(b.extra_data['some other key']).toEqual(123);
        expect(b.extra_data_sources['some other key']).toEqual(i.id);

        expect(i.is_master).toEqual(false);
        expect(i_other.is_master).toEqual(false);
    });

    it("should display all the data within all the buildings", function() {
        // arrange
        create_building_detail_controller();
        var keys;

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        var edc = building_detail_ctrl_scope.data_columns;

        // should not duplicate keys
        expect(edc.length).toEqual(8);
        keys = edc.map(function ( d ) {
            return d.key;
        });
        expect(keys.indexOf('make it four')).toEqual(4);
    });

    it("should display Floor Areas", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.$digest();

        // assertions
        var area_fields = building_detail_ctrl_scope.floor_area_fields;
        expect(area_fields.length).toEqual(1);
    });

    it("should display Floor Areas with number", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.get_number("")).toEqual(0);
        expect(building_detail_ctrl_scope.get_number("123,123,123")).toEqual(123123123);
        expect(building_detail_ctrl_scope.get_number("123,123,123.123")).toEqual(123123123.123);
        expect(building_detail_ctrl_scope.get_number("-123,123,123")).toEqual(-123123123);
        expect(building_detail_ctrl_scope.get_number(-123123123)).toEqual(-123123123);


    });
});

describe("controller: concat_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var scope, controller, modal_state;
    var edit_ctrl, concat_modal_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label, mock_mapping_service, mock_matching_service;
    var global_step = 1;
    var global_dataset = {};

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
            $controller, $rootScope, $modal, urls, $q
        ) {
            controller = $controller;
            scope = $rootScope;
            concat_modal_ctrl_scope = $rootScope.$new();
            concat_modal_ctrl_scope.concat_columns = [];
            modal_state = "";
        }
    ));

    var mock_building_column_types = [
        'address1', 'city', 'state', 'postal_code'
    ];

    var mock_raw_columns = [
        {
            name: 'Address',
            suggestion: 'address1',
            confidence: 1,
            raw_data: [
                '234 Database way',
                '23444 Huh hwy',
                '23444 Huh hwy',
                '23444 Huh hwy',
                '1223 face pl.'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        },
        {
            name: 'City',
            suggestion: 'city',
            confidence: 1,
            raw_data: [
                'Mega City', 'Mega City', 'Mega City', 'Mega City', 'Mega City'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        },
        {
            name: 'Zip',
            suggestion: '',
            confidence: 0,
            raw_data: [
                '234233', '234233', '234233', '234233', '234233'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        }
    ];

    // this is outside the beforeEach so it can be configured by each unit test
    function create_concat_modal_controller(){
        edit_ctrl = controller('concat_modal_ctrl', {
            $scope: concat_modal_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            building_column_types: mock_building_column_types,
            raw_columns: mock_raw_columns
        });
    }

    /*
     * Test scenarios
     */

    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.close_concat_modal();
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should mangle scope appropriately during concatenation", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(3);

        // arrange
        concat_modal_ctrl_scope.concat_columns =
            concat_modal_ctrl_scope.raw_columns.slice(0);
        concat_modal_ctrl_scope.raw_columns = [];

        // act
        concat_modal_ctrl_scope.$digest();
        concat_modal_ctrl_scope.save_concat();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(1);
        expect(
            concat_modal_ctrl_scope.raw_columns[0].is_concatenated
        ).toEqual(true);
    });

    it("should modify the raw_data of our modified TCM correctly", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(3);

        // arrange
        concat_modal_ctrl_scope.concat_columns =
            concat_modal_ctrl_scope.raw_columns.slice(0);
        concat_modal_ctrl_scope.raw_columns = [];

        // act
        concat_modal_ctrl_scope.$digest();
        concat_modal_ctrl_scope.save_concat();

        var expected_raw = [
            '234 Database way Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '1223 face pl. Mega City 234233'
        ];

        // assertions
        expect(
            concat_modal_ctrl_scope.raw_columns[0].raw_data
        ).toEqual(expected_raw);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: create_organization_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_organization_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, organization_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        mock_organization_service = organization_service;
        spyOn(mock_organization_service, "create_sub_org")
            .andCallFake(function(org, sub_org){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_organization_modal_ctrl(){
        ctrl = ctrl('create_organization_modal_ctrl', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            organization: {organization_id: 1}
        });
    }

    /*
     * Test scenarios
     */

    it("should call the organization service to add a new sub_org",
        function() {
        // arrange
        create_organization_modal_ctrl();

        // act
        ctrl_scope.$digest();
        ctrl_scope.sub_org.name = "my shiny new org";
        ctrl_scope.sub_org.email = "jb.smooth@be.com";
        ctrl_scope.submit_form(true);

        // assertions
        expect(mock_organization_service.create_sub_org)
            .toHaveBeenCalledWith(
                {
                    organization_id: 1
                },
                {
                    name: "my shiny new org",
                    email: "jb.smooth@be.com"
                }
            );
    });
    
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: data_upload_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_uploader_service, scope, controller, modal_state;
    var edit_ctrl, data_upload_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label, mock_mapping_service, mock_matching_service;
    var global_step = 1;
    var global_dataset = {};
    var return_labels = [
        {
            "name": 'compliant',
            "color": 'green',
            "id": 1
        },
        {
            "name": "new label",
            "color": "blue",
            "id": 2
        }
    ];

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, uploader_service, mapping_service, matching_service) {
            controller = $controller;
            scope = $rootScope;
            data_upload_ctrl_scope = $rootScope.$new();
            modal_state = "";

            // mock the uploader_service factory methods used in the controller
            // and return their promises
            mock_uploader_service = uploader_service;
            mock_mapping_service = mapping_service;
            mock_matching_service = matching_service;
            spyOn(mock_uploader_service, "get_AWS_creds")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "AWS_CLIENT_ACCESS_KEY": "123",
                            "AWS_UPLOAD_BUCKET_NAME": "test-bucket"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "check_progress")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "progress": "25.0"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "create_dataset")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "id": 3,
                                "name": dataset_name

                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error",
                                "message": "name already in use"
                            }
                        );
                    }
                }
            );
            spyOn(mock_uploader_service, "save_raw_data")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "file_id": 3
                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error"
                            }
                        );
                    }
                }
            );
            spyOn(mock_mapping_service, "start_mapping")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "file_id": 3
                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error"
                            }
                        );
                    }
                }
            );
            spyOn(mock_matching_service, "start_system_matching")
            .andCallFake(function(file_id){
                // return $q.reject for error scenario
                return $q.when(
                    {
                        "status": "success",
                        "file_id": 3
                    }
                );
            });

        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_data_upload_modal_controller(){
        edit_ctrl = controller('data_upload_modal_ctrl', {
            $scope: data_upload_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            step: global_step,
            dataset: global_dataset
        });
    }

    /*
     * Test scenarios
     */

    it("should close the modal when the close function is called", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.close();
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel function is called", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.cancel();
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

    it("should start at the step provided", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(1);

        // arrange
        global_step = 2;
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(2);
    });

    it("should goto different steps", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var step;
        step = 2;
        data_upload_ctrl_scope.goto_step(step);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(step);
    });

    it("disables the 'Name it' button if no text is entered", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(true);
    });
    it("disables the 'Name it' button if no text is entered, then cleared",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.dataset.name = undefined;
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(true);
    });
    it("enables the 'Name it' button if text is entered", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.dataset.name = "my dataset name";
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(false);
    });
    it("should show an alert if the dataset name is already in use",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.create_dataset("fail");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.alert).toBe(true);
    });
    it("should not show an alert if the dataset name is not already in use",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.create_dataset("my shiny new dataset");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.alert).toBe(false);
    });
    it("after creating a dataset, stores the dataset id", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var ds_name = "my shiny new dataset";
        data_upload_ctrl_scope.create_dataset(ds_name);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.id).toBe(3);
        expect(data_upload_ctrl_scope.dataset.name).toBe(ds_name);
    });
    it("after uploading a file, stores the file id", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var message, filename;
        message = "upload_complete";
        filename = "file1.csv";

        // act
        data_upload_ctrl_scope.uploaderfunc(message, {
            filename: filename,
            file_id: 20140313
        });
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.import_file_id).toBe(20140313);
    });
    it("should show an invalid extension alert if a file with an invalid" +
        "extension is loaded", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.uploaderfunc("invalid_extension");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.invalid_extension_alert)
            .toBe(true);
    });
    it("should hide the upload button after the user selects a file",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename;
        message = "upload_submitted";
        filename = "file1.csv";

        // act
        data_upload_ctrl_scope.uploaderfunc(message, {filename: filename});
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.filename).toBe(filename);
        expect(data_upload_ctrl_scope.uploader.in_progress).toBe(true);
    });
    it("should show the progressbar during upload",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename, progress;
        message = "upload_in_progress";
        filename = "file1.csv";
        progress = {
            loaded: 10,
            total: 100
        };

        // act
        data_upload_ctrl_scope.uploaderfunc(message, filename, progress);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.in_progress).toBe(true);
        expect(data_upload_ctrl_scope.uploader.progress).toBe(2.5);
    });
    it("should start saving the energy data when the file has been uploaded",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename;
        message = "upload_complete";
        filename = "file1.csv";
        data_upload_ctrl_scope.step.number = 4;

        // act
        data_upload_ctrl_scope.uploaderfunc(message, filename);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.status_message)
            .toBe("saving energy data");
    });

    it("should take an dataset payload", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.name).toBe("");
        expect(data_upload_ctrl_scope.dataset.filename).toBe("");
        expect(data_upload_ctrl_scope.dataset.id).toBe(0);
    });

    it("should extend a custom dataset payload", function() {
        // arrange
        global_dataset = {
            id: 100,
            filename: "seed_data.csv",
            name: "Compliance Project"
        };
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.name).toBe("Compliance Project");
        expect(data_upload_ctrl_scope.dataset.filename).toBe("seed_data.csv");
        expect(data_upload_ctrl_scope.dataset.id).toBe(100);
        expect(data_upload_ctrl_scope.dataset.alert).toBe(false);

    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: dataset_detail_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, ngFilter, delete_called;
    var dataset_detail_ctrl, dataset_detail_ctrl_scope, modalInstance, labels;

    

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, dataset_service, $filter) {
            controller = $controller;
            scope = $rootScope;
            ngFilter = $filter;
            dataset_detail_ctrl_scope = $rootScope.$new();
            modal_state = "";
            delete_called = false;

            // mock the dataset_service factory methods used in the controller
            // and return their promises
            mock_dataset_service = dataset_service;
            spyOn(mock_dataset_service, "get_dataset")
                .andCallFake(function(dataset_id){
                    // return $q.reject for error scenario
                    var fake_importfiles = [
                        {
                            name: "DC_CoveredBuildings_50k.csv",
                            number_of_buildings: 511,
                            number_of_mappings: 511,
                            number_of_cleanings: 1349,
                            source_type: "Assessed Raw",
                            number_of_matchings: 403
                        },
                        {
                            name: "DC_ESPM_Report.csv",
                            number_of_buildings: 511,
                            number_of_matchings: 403,
                            source_type: "Portfolio Raw"
                        }
                    ];
                    var fake_dataset = {
                        name: "DC 2013 data",
                        last_modified: (new Date()).getTime(),
                        last_modified_by: "john.s@buildingenergy.com",
                        number_of_buildings: 89,
                        id: 1,
                        importfiles: fake_importfiles
                    };
                    var fake_payload = {
                        "status": "success",
                        "dataset": fake_dataset
                    };
                    if (delete_called) {
                        fake_payload.dataset.importfiles.pop();
                    }
                    console.log({delete_called: delete_called, ds: fake_payload});
                    return $q.when(fake_payload);
                }
            );

            spyOn(mock_dataset_service, "delete_file")
                .andCallFake(function(import_file){
                    delete_called = true;
                    console.log({d: "delete_called"});
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_detail_controller(){
        var fake_importfiles = [
            {
                name: "DC_CoveredBuildings_50k.csv",
                number_of_buildings: 511,
                number_of_mappings: 511,
                number_of_cleanings: 1349,
                source_type: "Assessed Raw",
                number_of_matchings: 403
            },
            {
                name: "DC_ESPM_Report.csv",
                number_of_buildings: 511,
                number_of_matchings: 403,
                source_type: "Portfolio Raw"
            }
        ];
        var fake_dataset = {
            name: "DC 2013 data",
            last_modified: (new Date()).getTime(),
            last_modified_by: "john.s@buildingenergy.com",
            number_of_buildings: 89,
            id: 1,
            importfiles: fake_importfiles
        };
        var fake_payload = {
            "status": "success",
            "dataset": fake_dataset
        };
        dataset_detail_ctrl = controller('dataset_detail_controller', {
            $scope: dataset_detail_ctrl_scope,
            dataset_payload: fake_payload
        });
    }

    /*
     * Test scenarios
     */

    it("should have an data set payload with import files", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        dataset_detail_ctrl_scope.$digest();

        // assertions
        expect(dataset_detail_ctrl_scope.dataset.importfiles.length).toBe(2);
    });

    it("should show an alert when the delete icon is clicked", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        dataset_detail_ctrl_scope.$digest();
        var importfiles = dataset_detail_ctrl_scope.dataset.importfiles;
        dataset_detail_ctrl_scope.delete_file(importfiles[0]);
        dataset_detail_ctrl_scope.$digest();

        // assertions
        expect(dataset_detail_ctrl_scope.dataset.importfiles.length).toBe(1);
    });
   
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: dataset_list_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, modal_state;
    var edit_ctrl, dataset_list_ctrl_scope, modalInstance, labels;
    var location;

    

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, uploader_service,
            $location) {
            controller = $controller;
            scope = $rootScope;
            dataset_list_ctrl_scope = $rootScope.$new();
            modal_state = "";
            location = $location;

            // mock the uploader_service factory methods used in the controller
            // and return their promises
            mock_uploader_service = uploader_service;
            spyOn(mock_uploader_service, "get_AWS_creds")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "AWS_CLIENT_ACCESS_KEY": "123",
                            "AWS_UPLOAD_BUCKET_NAME": "test-bucket"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "create_dataset")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "import_record_id": 3,
                                "import_record_name": dataset_name

                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error",
                                "message": "name already in use"
                            }
                        );
                    }
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_list_controller(){
        var fake_datasets_payload = {
            "status": "success",
            "datasets": [
                {
                    name: "DC 2013 data",
                    last_modified: (new Date()).getTime(),
                    last_modified_by: "john.s@buildingenergy.com",
                    number_of_buildings: 89
                },
                {
                    name: "DC 2014 data",
                    last_modified: (new Date()).getTime() -
                        1550 * 60 * 60 * 1000,
                    last_modified_by: "gavin.m@buildingenergy.com",
                    number_of_buildings: 70
                }
            ]
        };
        edit_ctrl = controller('dataset_list_controller', {
            $scope: dataset_list_ctrl_scope,
            datasets_payload: fake_datasets_payload
        });
    }

    /*
     * Test scenarios
     */

    it("should have a dataset_payload", function() {
        // arrange
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();

        // assertions
        expect(dataset_list_ctrl_scope.datasets.length).toEqual(2);
    });

    it("should disable the mapping button if the dataset has no" +
        " Assessor files", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Portfolio Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_assessor_files(dataset);

        // assertions
        expect(disabled).toEqual(true);
    });

    it("should enable the mapping button if the dataset has at least one" +
        " Assessor file", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_assessor_files(dataset);

        // assertions
        expect(disabled).toEqual(false);
    });
    it("should disable the matching button if the dataset has no" +
        " Portfolio Manger files", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Assessed Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_pm_files(dataset);

        // assertions
        expect(disabled).toEqual(true);
    });
    it("should enable the matching button if the dataset has at least one" +
        " Portfolio Manger file", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_pm_files(dataset);

        // assertions
        expect(disabled).toEqual(false);
    });
    it("should navigate to the mapping page of the first assessed" +
        " import file when the ``Mapping`` button is clicked", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Assessed Raw",
                    id: 3
                },
                {
                    source_type: "Assessed Raw",
                    id: 5
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        dataset_list_ctrl_scope.goto_mapping(dataset);

        // assertions
        expect(location.path()).toBe('/data/mapping/3');
    });
    it("should navigate to the matching page of the first Portfolio Manager" +
        " import file when the ``Matching`` button is clicked", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw",
                    id: 3
                },
                {
                    source_type: "Portfolio Raw",
                    id: 5
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        dataset_list_ctrl_scope.goto_matching(dataset);

        // assertions
        expect(location.path()).toBe('/data/matching/3');
    });

   
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: delete_modal_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, building_services, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        // mock the export_service factory methods used in the controller
        // and return their promises
        mock_building_services = building_services;
        spyOn(mock_building_services, "delete_buildings")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_delete_modal_controller(){
        ctrl = ctrl('delete_modal_controller', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            search: { 
                selected_buildings: [1,2],
                filter_params: {},
                select_all_checkbox: false,
                order_by: "",
                sort_reverse: false,
                number_matching_search: 1000
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should start at the delete page", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.delete_state).toEqual("delete"); 
    });
    it("should save the search paramaters",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.delete_payload;
        expect(b.selected_buildings).toEqual([1,2]);
        expect(b.filter_params).toEqual({});
        expect(b.order_by).toEqual("");
        expect(b.sort_reverse).toEqual(false);
        expect(b.select_all_checkbox).toEqual(false);
    });
    it("should delete when the delete button is clicked",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.delete_buildings();

        // assertions
        expect(ctrl_scope.delete_state).toEqual("prepare");
        expect(mock_building_services.delete_buildings).toHaveBeenCalled();
    });
    it("should show the success page when the delete is finished",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.delete_buildings();
        ctrl_scope.$digest();

        // assertions
        expect(mock_building_services.delete_buildings).toHaveBeenCalled();
        expect(ctrl_scope.delete_state).toEqual("success");
    });
    it("should show the number of buildings to be deleted",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        var number_to_delete = ctrl_scope.number_to_delete();

        // assertions
        expect(number_to_delete).toEqual(2);
    });
    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.close();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.cancel();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

  
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myDistrictApp = angular.module('myDistrictApp', ['district']);

describe("The district filter", function() {
    beforeEach(module('myDistrictApp'));
    it('replaces `district` with `County/District/Ward/Borough`',
        inject(function(districtFilter) {
            // normal cases
            expect(districtFilter('district')).toBe('County/District/Ward/Borough');
            expect(districtFilter('District')).toBe('County/District/Ward/Borough');
            expect(districtFilter('DistRict')).toBe('County/District/Ward/Borough');
            expect(districtFilter('DISTRICT')).toBe('County/District/Ward/Borough');
            expect(districtFilter('aDISTRICT')).toBe('aDISTRICT');
            expect(districtFilter('')).toBe('');
            expect(districtFilter('district ')).toBe('district ');
            expect(districtFilter('ok')).toBe('ok');
            expect(districtFilter(undefined)).toBe(undefined);
            expect(districtFilter(null)).toBe(null);
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: edit_label_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, modal_state;
    var edit_ctrl, edit_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label;
    var return_labels = [
        {
            "name": 'compliant',
            "color": 'green',
            "id": 1
        },
        {
            "name": "new label",
            "color": "blue",
            "id": 2
        }
    ];

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, urls, $q, project_service) {
        controller = $controller;
        scope = $rootScope;
        edit_ctrl_scope = $rootScope.$new();
        modal_state = "";

        // mock the project_service factory methods used in the controller
        // and return their promises
        mock_project_service = project_service;
        spyOn(mock_project_service, "get_labels")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success", "labels": return_labels});
            }
        );
        spyOn(mock_project_service, "add_label")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
        spyOn(mock_project_service, "delete_label")
            .andCallFake(function(label){
                deleted_label = label;
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
        spyOn(mock_project_service, "update_label")
            .andCallFake(function(label){
                updated_label = label;
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );

    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_edit_modal_controller(){
        var labels = [
            {
                "name": 'compliant',
                "color": 'green',
                "id": 1
            }
        ];

        edit_ctrl = controller('edit_label_modal_ctrl', {
            $scope: edit_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            labels: labels
        });
    }

    /*
     * Test scenarios
     */

    it("should initialize the default label", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.$digest();
        edit_ctrl_scope.initialize_label_modal();

        // assertions
        expect(edit_ctrl_scope.label_modal.color).toBe("gray");
        expect(edit_ctrl_scope.label_modal.label).toBe("default");
        expect(edit_ctrl_scope.label_modal.name).toBe("");
        expect(edit_ctrl_scope.modal.label.state).toBe("create");
    });

    it("should get the labels available to an organization", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.add_label({});  // calls private get_labels
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.labels.length).toBe(2);
    });

    it("should add a label in the user's organization", function() {
        // arrange
        create_edit_modal_controller();
        var label_to_add = {
            color: "blue",
            label: "primary",
            name: "new label"
        };

        // act
        edit_ctrl_scope.add_label(label_to_add);
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.labels.length).toBe(2);
        expect(edit_ctrl_scope.labels[1].color).toBe("blue");
        expect(edit_ctrl_scope.labels[1].name).toBe("new label");
    });

    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.close();
        edit_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.cancel();
        edit_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

    it("sets the label_modal to the label when its edit button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.edit_label(label);
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.label_modal.color).toBe(label.color);
        expect(edit_ctrl_scope.label_modal.name).toBe(label.name);
        expect(edit_ctrl_scope.modal.label.state).toBe("edit");

        // assert that edit_ctrl_scope.label_modal is a copy and not a reference to label
        edit_ctrl_scope.label_modal.name = "random name here";
        expect(edit_ctrl_scope.label_modal.name).not.toBe(label.name);
    });
    
    it("deletes the appropriate label when the delete button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.delete_label(label);
        edit_ctrl_scope.$digest();

        // assertions
        expect(deleted_label).toBe(label);
    });

    it("updates the appropriate label when the update label button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.edit_label(label);
        edit_ctrl_scope.$digest();
        edit_ctrl_scope.label_modal.name = "harry";
        edit_ctrl_scope.label_modal.color = "blue";
        edit_ctrl_scope.update_label(edit_ctrl_scope.label_modal);
        edit_ctrl_scope.$digest();

        // assertions
        expect(mock_project_service.update_label).toHaveBeenCalledWith(edit_ctrl_scope.label_modal);
        expect(updated_label).toBe(edit_ctrl_scope.label_modal);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: export_modal_controller", function(){
    // globals set up and used in each test scenario
    var mock_export_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, export_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        // mock the export_service factory methods used in the controller
        // and return their promises
        mock_export_service = export_service;
        spyOn(mock_export_service, "export_buildings")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success", "export_id": "123456"});
            }
        );
        spyOn(mock_export_service, "export_buildings_progress")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({
                    "status": "success",
                    "buildings_processed": 1000
                });
            }
        );
            spyOn(mock_export_service, "export_buildings_download")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({
                    "status": "success",
                    "url": "#"
                });
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_export_modal_controller(){
        ctrl = ctrl('export_modal_controller', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            search: { 
                selected_buildings: [],
                filter_params: {},
                select_all_checkbox: false,
                order_by: "",
                sort_reverse: false,
                number_matching_search: 1000
            },
            selected_fields: ['tax_lot_id', 'postal_code'],
            project: {
                id: 11
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should start at the create page", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.export_state).toEqual("create"); 
    });
    it("should start with an empty name and default file type of 'xls'",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.building_export;
        expect(b.export_name).toEqual("");
        expect(b.export_type).toEqual("xls");
    });
    it("should save the search paramaters",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.building_export;
        expect(b.selected_buildings).toEqual([]);
        expect(b.filter_params).toEqual({});
        expect(b.order_by).toEqual("");
        expect(b.sort_reverse).toEqual(false);
        expect(b.select_all_checkbox).toEqual(false);
        expect(b.selected_fields).toEqual(['tax_lot_id', 'postal_code']);
        expect(b.project_id).toEqual(11);
        expect(ctrl_scope.progress_denominator).toEqual(0);
    });
    it("should kick off the export process when the export button is clicked",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.export_buildings();

        // assertions
        expect(ctrl_scope.export_state).toEqual("prepare");
        expect(mock_export_service.export_buildings).toHaveBeenCalled();
    });
    it("should show the success page when the data is ready",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.show_success_page("123");
        ctrl_scope.$digest();

        // assertions
        expect(mock_export_service.export_buildings_download).toHaveBeenCalled();
        expect(ctrl_scope.export_state).toEqual("success");
    });
    it("should update the progress bar",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.monitor_progress("123", 1000);
        ctrl_scope.$digest();
        timeout.flush();

        // assertions
        expect(mock_export_service.export_buildings_progress).toHaveBeenCalled();
        expect(ctrl_scope.progress_percentage).toEqual(100);
        expect(ctrl_scope.progress_numerator).toEqual(1000);
        expect(ctrl_scope.progress_denominator).toEqual(1000);
    });
    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.close();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.cancel();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

  
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
/**
 * tests fromNow angularjs filter wrapper of moment.js
 * uses epoch milliseconds as that is what the back-end returns
 */

// create dummy angularJS app to attach filter(s)
var myfromNowFilterApp = angular.module('myfromNowFilterApp', ['fromNow']);

describe("The fromNow filter", function() {
    beforeEach(module('myfromNowFilterApp'));

    it('shows the present time as "a few seconds ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('a few seconds ago');
        })
    );

    it('shows 5 minutes ago as "5 minutes ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 5  * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('5 minutes ago');
        })
    );

    it('shows 4 hours ago as "4 hours ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 4 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('4 hours ago');
        })
    );

    it('shows 24 hours ago as "a day ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 24 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('a day ago');
        })
    );

    it('shows 36 hours ago as "2 days ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 36 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('2 days ago');
        })
    );

    it('shows 1550 hours ago as "2 months ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 1550 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('2 months ago');
        })
    );

    it('defaults to "a few seconds ago" for undefined values',
        inject(function(fromNowFilter) {
            // arrange

            // act

            // assert
            expect(fromNowFilter(undefined)).toBe('a few seconds ago');
            expect(fromNowFilter(null)).toBe('a few seconds ago');
            expect(fromNowFilter("some text")).toBe('a few seconds ago');
            expect(fromNowFilter({})).toBe('a few seconds ago');
            expect(fromNowFilter({time: "not time"})).toBe('a few seconds ago');
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myignoremapApp = angular.module('myignoremapApp', ['ignoremap']);

describe("The ignoremap filter", function() {
    beforeEach(module('myignoremapApp'));
    it('replaces `""` with `------ Ignore Row ------`',
        inject(function(ignoremapFilter) {
            // normal cases
            expect(ignoremapFilter('')).toBe('------ Ignore Row ------');
            expect(ignoremapFilter(' ')).toBe(' ');
            expect(ignoremapFilter('aignoremap')).toBe('aignoremap');
            expect(ignoremapFilter('ignoremap ')).toBe('ignoremap ');
            expect(ignoremapFilter('ok')).toBe('ok');
            expect(ignoremapFilter(undefined)).toBe('------ Ignore Row ------');
            expect(ignoremapFilter(null)).toBe('------ Ignore Row ------');
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: mapping_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, modal_state;
    var mapping_ctrl, mapping_ctrl_scope, modalInstance, labels;
    var timeout, mock_user_service, mock_search_service;



    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, building_services, $timeout, user_service, search_service) {
            controller = $controller;
            scope = $rootScope;
            mapping_ctrl_scope = $rootScope.$new();
            modal_state = "";
            timeout = $timeout;
            mock_user_service = user_service;
            mock_search_service = search_service;

            spyOn(mock_user_service, 'set_default_columns')
                .andCallFake(function(mapped_columns){
                    return undefined;
                });
            spyOn(mock_search_service, 'search_buildings')
                .andCallFake(function(){
                    return [1,2,3];
                });
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_mapping_controller(){
        var mock_datasets = [
            {
                name: "DC 2013 data",
                last_modified: (new Date()).getTime(),
                last_modified_by: "john.s@buildingenergy.com",
                number_of_buildings: 89,
                id: 1
            },
            {
                name: "DC 2014 data",
                last_modified: (new Date()).getTime() -
                    1550 * 60 * 60 * 1000,
                last_modified_by: "gavin.m@buildingenergy.com",
                number_of_buildings: 70,
                id: 2
            }
        ];
        var fake_import_file_payload = {
            "status": "success",
            "import_file": {
                        file_name: "assessor_fun.csv",
                        last_modified: (new Date()).getTime(),
                        last_modified_by: "john.s@buildingenergy.com",
                        source_type: 'AssessorRaw',
                        dataset: mock_datasets[0],
                        id: 1
                    }
        };

        var mock_be_building_columns = [
            'pm_property_id',
            'property_name',
            'property_notes',
            'tax_lot_id',
            'gross_floor_area',
            'My New non-BEDES field'
        ];

        var mock_be_building_types = {
            'gross_floor_area': {
                unit_type: 'float',
                schema: 'BEDES'
            }
        };

        var mock_mapping_suggestions_payload = {
            'status': 'success',
            'suggested_column_mappings': {
                // key(django model attribute): [csv_header1, ... csv_header3]
                'property id': ['pm_property_id', 89],
                'lot number': ['tax_lot_id' , 54]
            },
            "building_columns": mock_be_building_columns,
            "building_column_types": mock_be_building_types
        };

        var mock_raw_column_names = [
            'property id',
            'property_name',
            'property_notes',
            'lot number',
            'lot size'
        ];

        var mock_first_five_rows = [];
        for (var i=0; i < 4; i++) {
            mock_first_five_rows.push({
                'property id': i,
                'property_name': 'Property ' + i,
                'property_notes': 'Nup.',
                'lot number': i * 2,
                'lot size': 454 * i
            });
        }

        mock_first_five_rows.push({
            'property id': '121L',
            'property_name': 'Inconsistent Property',
            'property_notes': 'N/A',
            'lot number': 'N/A',
            'lot size': 45
        });

        var raw_columns_payload = {
            "status": "success",
            "raw_columns": mock_raw_column_names
        };
        var first_five_rows_payload = {
            "status": "success",
            "first_five_rows": mock_first_five_rows
        };
        mapping_ctrl = controller('mapping_controller', {
            $scope: mapping_ctrl_scope,
            import_file_payload: fake_import_file_payload,
            suggested_mappings_payload: mock_mapping_suggestions_payload,
            raw_columns_payload: raw_columns_payload,
            first_five_rows_payload: first_five_rows_payload,
            all_columns: {fields: []},
            building_services: mock_building_services,
            $timeout: timeout
        });
    }

    /*
     * Test scenarios
     */

    it("should have a import_file_payload", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        expect(mapping_ctrl_scope.import_file.dataset.name).toBe("DC 2013 data");
    });

    it("should show suggested mappings and confidence", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        var raw_columns = mapping_ctrl_scope.raw_columns;
        var first_column = raw_columns[0];

        expect(first_column.confidence).toBe(89);
        expect(first_column.suggestion).toBe("Pm Property Id");
    });

    it("should show 'low', 'med', 'high', or '' confidence text", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        var raw_columns = mapping_ctrl_scope.raw_columns;
        var first_column = raw_columns[0];
        expect(first_column.confidence_text()).toBe("high");
        first_column.confidence = 70;
        expect(first_column.confidence_text()).toBe("med");
        first_column.confidence = 35;
        expect(first_column.confidence_text()).toBe("low");
        delete(first_column.confidence);
        expect(first_column.confidence_text()).toBe("");
    });

    it("should validate initial data", function() {
        create_mapping_controller();
        // act
        mapping_ctrl_scope.$digest();
        // assertions
        angular.forEach(mapping_ctrl_scope.raw_columns, function(rc) {
            if (rc.suggestion !== '' && typeof(rc.suggestion) !== "undefined") {
                expect(rc.validity).toBe('valid');
            }
        });
    });

    it("should invalidate bad suggestions", function() {
        // Simulate a change on the tcm, make it fail.
        create_mapping_controller();
        // act
        mapping_ctrl_scope.$digest();
        // assertions
        //
        // We change the suggested mapping for the "property name" column
        // to "gross_floor_area" (which validates as float) to
        // purposesly cause a failing change.
        mapping_ctrl_scope.raw_columns[1].suggestion = 'gross_floor_area';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[1]);
        expect(mapping_ctrl_scope.raw_columns[1].validity).toBe('invalid');

    });

    it("should set td_class appropriately", function() {
        var tcm;

        create_mapping_controller();

        mapping_ctrl_scope.$digest();
        tcm = mapping_ctrl_scope.raw_columns[0];
        var good_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[0]
        );

        // First raw column is mapped up as pm_property_id <-> property_id
        // Any kind of string will be valid.
        expect(good_val).toBe('success');

        // Now set it to one that expects float values.
        // Only one of these will *not* validate.
        mapping_ctrl_scope.raw_columns[0].suggestion = 'gross_floor_area';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[0]);

        tcm = mapping_ctrl_scope.raw_columns[0];
        var warning_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[4]
        );

        expect(warning_val).toBe('warning');

        // We don't want the warning style to be applied to neighboring cells
        // in the same row. Check that the cell next to our invalid one is
        // unstyled (undefined).
        tcm = mapping_ctrl_scope.raw_columns[0];
        var adjacent_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[3]
        );

        expect(adjacent_val).toBe(undefined);

        // Now we're saying the suggestion is to not map.
        // Check that we don't have any class set for this row now.
        mapping_ctrl_scope.raw_columns[0].suggestion = '';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[0]);

        tcm = mapping_ctrl_scope.raw_columns[0];
        var blank_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[4]
        );

        expect(blank_val).toBe('');

    });

    it("should detect duplicates of mapped rows", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // raw_columns[0] and raw_columns[3] should be the only mapped rows
        var column = mapping_ctrl_scope.raw_columns[3];
        var test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

        // Set the property_name tcm's suggestion to the same as
        // the property_id tcm (raw_columns[0])
        column.suggestion = 'Pm Property Id';

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(true);

        // Since we mark both duplicates as duplicates, the other
        // TCM that has the 'pm_property_id' suggestion should also get
        // 'danger' as its duplicate class.
        var other_dup = mapping_ctrl_scope.is_tcm_duplicate(
            mapping_ctrl_scope.raw_columns[0]
        );
        expect(other_dup).toBe(true);

        // Shows that mapped_row is the sole determinant of
        // column ignoring
        column.mapped_row = false;

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

    });

    it("should ignore duplicates of unmapped rows", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // raw_columns[0] and raw_columns[3] should be the only mapped rows
        var column = mapping_ctrl_scope.raw_columns[1];
        var test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

        // Set the property_name tcm's suggestion to the same as
        // the property_id tcm (raw_columns[0])
        column.suggestion = 'Pm Property Id';

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);
    });

    it("should get mapped buildings", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        mapping_ctrl_scope.get_mapped_buildings();
        mapping_ctrl_scope.$digest();

        // assertions
        expect(mapping_ctrl_scope.search.search_buildings).toHaveBeenCalled();
        expect(mock_user_service.set_default_columns).toHaveBeenCalled();
    });

    it("should enbale the 'show & review buildings' button if duplicates are" +
        " not present", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        for (var i = mapping_ctrl_scope.raw_columns.length - 1; i >= 0; i--) {
            mapping_ctrl_scope.change(mapping_ctrl_scope.raw_columns[i]);
        }
        var duplicates_found = mapping_ctrl_scope.duplicates_present();

        // assertions
        expect(duplicates_found).toBe(false);
    });

    it("should disable the 'show & review buildings' button if duplicates " +
        "are present", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        for (var i = mapping_ctrl_scope.raw_columns.length - 1; i >= 0; i--) {
            mapping_ctrl_scope.raw_columns[i].suggestion = "pm_property_id";
            mapping_ctrl_scope.change(mapping_ctrl_scope.raw_columns[i]);
        }
        var duplicates_found = mapping_ctrl_scope.duplicates_present();

        // assertions
        expect(duplicates_found).toBe(true);
    });

    it("should get mappings in an API friendly way", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();
        var mappings = mapping_ctrl_scope.get_mappings();
        expect(mappings.length).toBe(5);
        expect(mappings[0]).toEqual(['Pm Property Id', 'property id']);
        // everything in between is empty since we we're using only
        // suggested mappings.
        expect(mappings[3]).toEqual(['Tax Lot Id', 'lot number']);
    });

    it("should show the 'STEP 2' tab when reviewing mappings", function() {
        // arrange
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // act
        var mappings = mapping_ctrl_scope.get_mapped_buildings();

        // assert
        expect(mapping_ctrl_scope.tabs).toEqual({
            'one_active': false,
            'two_active': true,
            'three_active': false
        });
    });

    it("should show BEDES fields with a checkbox", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assert
        expect(mapping_ctrl_scope.is_suggestion_BEDES('gross_floor_area')).toBe(true);
        expect(mapping_ctrl_scope.is_suggestion_BEDES('Gross Floor Area')).toBe(true);
        expect(mapping_ctrl_scope.is_suggestion_BEDES('My New non-BEDES field')).toBe(false);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: matching_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, delete_called;
    var matching_ctrl, matching_ctrl_scope, modalInstance, labels;


    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, building_services) {
            controller = $controller;
            scope = $rootScope;
            matching_ctrl_scope = $rootScope.$new();

            mock_building_services = building_services;
            spyOn(mock_building_services, "get_PM_filter_by_counts")
                .andCallFake(function(import_file){
                    return $q.when(
                        {
                            "status": "success",
                            "unmatched": 5,
                            "matched": 10
                        }
                    );
                }
            );
            spyOn(mock_building_services, "save_match")
                .andCallFake(function(b1, b2, create){
                    return $q.when(
                        {
                            "status": "success",
                            "child_id": 3
                        }
                    );
                }
            );
            spyOn(mock_building_services, "search_matching_buildings")
                .andCallFake(function(q, number_per_page, current_page, order_by, sort_reverse, 
                                        filter_params, file_id ){
                    
                    switch(filter_params.children__isnull){
                        case undefined:
                            var bldgs = [
                                {
                                    pm_property_id: 1
                                },
                                {
                                    pm_property_id: 2
                                }
                                ,
                                {
                                    pm_property_id: 3
                                }
                            ];
                            break;
                        case false:
                            var bldgs = [
                                {
                                    pm_property_id: 1
                                }
                            ];
                            break;
                        case true:
                            var bldgs = [
                                {
                                    pm_property_id: 3
                                },
                                {
                                    pm_property_id: 4
                                }
                            ];
                            break;
                    }

                    return $q.when(
                        {
                            status: "success",
                            number_returned: buildings_payload.length,
                            number_matching_search: buildings_payload.length,
                            buildings: bldgs
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_detail_controller(){
        var buildings_payload = {
            buildings: [
                {
                    pm_property_id: 1,
                    tax_lot_id: null,
                    custom_id_1: 2,
                    gross_floor_area: 111,
                    matched: true,
                    id: 1,
                    children: [3],
                    coparent: {
                        pm_property_id: null,
                        tax_lot_id: 2,
                        custom_id_1: null,
                        gross_floor_area: 111,
                        id: 2,
                        children: [3]
                    }
                }
            ],
            number_matching_search: 1,
            number_returned: 1
        };
        matching_ctrl = controller('matching_controller', {
            $scope: matching_ctrl_scope,
            buildings_payload: buildings_payload,
            all_columns: {
                fields: [{sort_column: 'pm_property_id'}]
            },
            default_columns: {
                columns: ['pm_property_id']
            },
            import_file_payload: {
                import_file: {
                    id: 1,
                    dataset: {
                        importfiles: [
                            {
                                id: 1,
                                name: "file_1.csv"
                            },
                            {
                                id: 2,
                                name: "file_2.csv"
                            }
                        ]
                    }
                }
            }
        });
    }



    /*
     * Test scenarios
     */

    it("should have a buildings payload with potential matches", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();
        var b = matching_ctrl_scope.buildings[0];

        // assertions
        expect(matching_ctrl_scope.buildings.length).toBe(1);
        expect(b.coparent.children).toEqual(b.children);
    });

    it("should provide to the view scope variables representing the number matched and the number of unmatched buildings", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();

        // assertions
        expect(matching_ctrl_scope.matched_buildings).toEqual(10);
        expect(matching_ctrl_scope.unmatched_buildings).toEqual(5);
    });

    it("should jump back to the matching list when the 'Back to list' button" +
        " is clicked", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.show_building_list = false;
        matching_ctrl_scope.back_to_list();

        // assertions
        expect(matching_ctrl_scope.show_building_list).toEqual(true);
    });

    it("should present an initial state with the matching buildings table",
        function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();

        // assertions
        expect(matching_ctrl_scope.columns).toEqual([{ sort_column : 'pm_property_id' }]);
        expect(matching_ctrl_scope.number_matching_search).toEqual(1);
        expect(matching_ctrl_scope.number_returned).toEqual(1);
        expect(matching_ctrl_scope.num_pages).toEqual(1);
        expect(mock_building_services.get_PM_filter_by_counts).toHaveBeenCalled();
    });
    it("should match a building in the matching list", function() {
        // arrange
        create_dataset_detail_controller();
        var b1, b2;
        b2 = {
            id: 2,
            children: [],
            matched: false
        };
        b1 = {
            id: 1,
            children: [],
            matched: true,
            coparent: b2
        };

        // act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.toggle_match(b1);
        matching_ctrl_scope.$digest();

        // assertions
        expect(mock_building_services.save_match).toHaveBeenCalledWith(b1.id, b2.id, true);
        expect(mock_building_services.get_PM_filter_by_counts).toHaveBeenCalled();
        expect(b1.children[0]).toEqual(3);
    });
    it("Should update the list of buildings correctly when 'Show Matched' is selected", 
        function() {
        //arrange
        create_dataset_detail_controller();

        //act
         matching_ctrl_scope.$digest();
        controller.update_show_filter(controller.SHOW_MATCHED)

        //assertions
        expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(1);
        expect(matching_ctrl_scope.number_returned).toEqual(1);
    });
    it("Should update the list of buildings correctly when 'Show Unmatched' is selected", 
        function() {
        //arrange
        create_dataset_detail_controller();

        //act
        matching_ctrl_scope.$digest();
        controller.update_show_filter(controller.SHOW_UNMATCHED)

        //assertions
        expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(2);
        expect(matching_ctrl_scope.number_returned).toEqual(2);
    });
    it("Should update the list of buildings correctly when 'Show All' is selected", 
        function() {
        //arrange
        create_dataset_detail_controller();

        //act
        matching_ctrl_scope.$digest();
        controller.update_show_filter(controller.SHOW_ALL)

        //assertions
        expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(3);
        expect(matching_ctrl_scope.number_returned).toEqual(3);
    });



});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: members_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller;
    var ctrl, ctrl_scope, modalInstance;
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          $q,
          organization_service) {
            ctrl = $controller;
            scope = $rootScope;
            ctrl_scope = $rootScope.$new();

            mock_organization_service = organization_service;
            
            spyOn(mock_organization_service, "remove_user")
                .andCallFake(function(user_id, org_id){
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
            spyOn(mock_organization_service, "get_organization_users")
                .andCallFake(function(org){
                    return $q.when(
                        {
                            "status": "success",
                            "users": [{id:1, first_name:"Bob", last_name:"D"}]
                        }
                    );
                }
            );
            spyOn(mock_organization_service, "update_role")
                .andCallFake(function(org_id, user_id, role){
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_members_controller(){
        ctrl = ctrl('members_controller', {
            $scope: ctrl_scope,
            users_payload: {users: [
                {first_name: 'J', last_name: 'S'},
                {first_name: undefined, last_name: null}
            ]},
            organization_payload: {
                organization: {name: 'my org', id: 4}
            },
            auth_payload: {
                auth: {
                    'can_invite_member': true,
                    'can_remove_member': true
                }
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should accepts its payload", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.org).toEqual({name : 'my org', id : 4});
        expect(ctrl_scope.users[0].name).toEqual("J S");
        expect(ctrl_scope.users[1].name).toEqual(" ");
    });
    it("clicking remove should remove a user", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.remove_member({user_id: 2});

        // assertions
        expect(mock_organization_service.remove_user)
            .toHaveBeenCalledWith(2, 4);
        
        ctrl_scope.$digest();
        expect(mock_organization_service.get_organization_users)
            .toHaveBeenCalledWith({org_id: 4});
    });
    it("clicking a new role should update the user's role", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.update_role({user_id: 2, role: "viewer"});

        // assertions
        expect(mock_organization_service.update_role)
            .toHaveBeenCalledWith(2, 4, 'viewer');
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: new_member_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_user_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, user_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        mock_user_service = user_service;
        spyOn(mock_user_service, "add")
            .andCallFake(function(user){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_new_member_controller(){
        ctrl = ctrl('new_member_modal_ctrl', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            organization: {organization_id: 1}
        });
    }

    /*
     * Test scenarios
     */

    it("should set the default role to 'member'", function() {
        // arrange
        create_new_member_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.user.role.value).toEqual("member"); 
    });
    it("should call the user service to add a new user to the org",
        function() {
        // arrange
        create_new_member_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.user.first_name = "JB";
        ctrl_scope.user.last_name = "Smooth";
        ctrl_scope.user.email = "jb.smooth@be.com";
        ctrl_scope.submit_form(true);

        // assertions
        expect(mock_user_service.add)
            .toHaveBeenCalledWith({
                first_name: "JB",
                last_name: "Smooth",
                email: "jb.smooth@be.com",
                role: ctrl_scope.roles[0],
                organization: {
                    organization_id: 1
                }
            });
    });
    
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
/**
 * run_jasmine.js: runs the jasmine JS test runner
 */
(function() {
    var jasmineEnv = jasmine.getEnv();
    jasmineEnv.updateInterval = 1000;

    var htmlReporter = new jasmine.HtmlReporter();

    jasmineEnv.addReporter(htmlReporter);

    jasmineEnv.specFilter = function(spec) {
        return htmlReporter.specFilter(spec);
    };

    var currentWindowOnload = window.onload;

    window.onload = function() {
        if (currentWindowOnload) {
        currentWindowOnload();
        }
        execJasmine();
    };
    function execJasmine() {
        jasmineEnv.execute();
    }
})();

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var searchTestApp = angular.module(
    'searchTestApp', ['BE.seed.service.search']
);

describe("The search_service service", function() {
    var saas, httpBackend, test_url;

    beforeEach(function () {
        module("searchTestApp");
        inject(function (search_service, $httpBackend) {
            saas = search_service;
            httpBackend = $httpBackend;
            httpBackend.when("POST", test_url).respond("ok");
        });

    });

    /**
     * sanitize_params tests
     */
    it('removes null and undefined values from filter_params', function () {
        // arrange
        saas.filter_params = {
          'National Median Site Energy Use__gte': 4,
          'National Median Site Energy Use__lte': null,
          'National Median Source EUI__gte': undefined
        };

        // act
        saas.sanitize_params();

        // assert
        expect(saas.filter_params).toEqual({'National Median Site Energy Use__gte': 4});
    });

    /**
     * search_buildings tests
     */
    it('has sane defaults', function() {
        expect(saas.url).toEqual("");
        expect(saas.error_message).toEqual("");
        expect(saas.alert).toEqual(false);
        expect(saas.buildings).toEqual([]);
        expect(saas.current_page).toEqual(1);
        expect(saas.number_per_page).toEqual(10);
        expect(saas.order_by).toEqual("");
        expect(saas.sort_column).toEqual("tax_lot_id");
        expect(saas.sort_reverse).toEqual(false);
        expect(saas.select_all_checkbox).toEqual(false);
        expect(saas.prev_page_disabled).toEqual(true);
        expect(saas.next_page_disabled).toEqual(true);
        expect(saas.num_pages).toEqual(0);
        expect(saas.query).toEqual("");
        expect(saas.showing).toEqual({
            'start': 1,
            'end': 0
        });
    });

    it('search_buildings uses the argument `query`', function() {
        saas.query = "hotels";
        saas.search_buildings("not hotels");

        expect(saas.query).toEqual("not hotels");
    });
    it('filter search resets the current page', function() {
        // arrange
        saas.current_page = 22;
        spyOn(saas, 'search_buildings');

        // act
        saas.filter_search();

        // assert
        expect(saas.current_page).toEqual(1);
        expect(saas.search_buildings).toHaveBeenCalled();
    });

    it('search_buildings function will default to its query if' +
        ' no query is passed as an argument', function() {
        saas.query = "hotels";
        saas.search_buildings();

        expect(saas.query).toEqual("hotels");
    });

    it('search_buildings hits the set url', function() {
        test_url = "/my-search-url";
        saas.url = test_url;
        saas.search_buildings();
        httpBackend.expectPOST(test_url);
        httpBackend.flush();
    });

    it('search_buildings POSTs the query data as `q`', function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.query = "hotel chains";
        saas.number_per_page = 25;
        saas.order_by = "gross_floor_area";
        saas.sort_reverse = true;
        saas.filter_params = {
            project: '2012 data'
        };

        // act
        saas.search_buildings();

        // assert
        httpBackend.expectPOST(test_url,
            {
                "q": "hotel chains",
                "number_per_page": 25,
                "order_by": "gross_floor_area",
                "sort_reverse": true,
                "filter_params": {
                    "project": "2012 data"
                },
                "page":1
            }
        ).respond(201, "");
        httpBackend.flush();
    });
    it('search_buildings updates its `buildings` model', function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.query = "hotel chains";
        saas.number_per_page = 25;
        saas.order_by = "gross_floor_area";
        saas.sort_reverse = true;
        saas.filter_params = {
            project: '2012 data'
        };

        // act
        saas.search_buildings();

        // assert
        httpBackend.expectPOST(test_url,
            {
                "q": "hotel chains",
                "number_per_page": 25,
                "order_by": "gross_floor_area",
                "sort_reverse": true,
                "filter_params": {
                    "project": "2012 data"
                },
                "page":1
            }
        ).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        expect(saas.buildings).toEqual([
            {
                name: "one",
                id: 1,
                checked: false
            },
            {
                name: "two",
                id: 2,
                checked: false
            }
        ]);
    });
    it('should clear the error and alert after a successful search',
        function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.error_message = "help";
        saas.alert = true;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {
            'buildings': [
                {
                    name: "one",
                    id: 1
                },
                {
                    name: "two",
                    id: 2
                }],
            'number_matching_search': 101
            });
        httpBackend.flush();

        // assert
        expect(saas.alert).toEqual(false);
        expect(saas.error_message).toEqual("");
    });

    /**
     * pagination tests
     */
    it('increments the page when the `next` button is clicked',
        function() {
        // arrange
        saas.num_pages = 1000;
        saas.current_page = 100;
        spyOn(saas, 'search_buildings');
        // act
        saas.next_page();

        // assert
        expect(saas.current_page).toEqual(101);
        expect(saas.search_buildings).toHaveBeenCalled();
        expect(saas.search_buildings.callCount).toEqual(1);

    });
    it('doesn\'t increment past the last page when the `next` button is' +
        ' clicked', function() {
        // arrange
        saas.num_pages = 2;
        saas.current_page = 2;
        spyOn(saas, 'search_buildings');
        // act
        saas.next_page();

        // assert
        expect(saas.current_page).toEqual(2);
        expect(saas.search_buildings).toHaveBeenCalled();
        expect(saas.search_buildings.callCount).toEqual(1);

    });
    it('decrements the page when the `previous` button is clicked',
        function() {
        // arrange
        saas.num_pages = 1000;
        saas.current_page = 100;
        spyOn(saas, 'search_buildings');
        // act
        saas.prev_page();

        // assert
        expect(saas.current_page).toEqual(99);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('does not decrement below the first page when the `previous` button' +
        ' is clicked', function() {
        // arrange
        saas.num_pages = 1;
        saas.current_page = 1;
        spyOn(saas, 'search_buildings');
        // act
        saas.prev_page();

        // assert
        expect(saas.current_page).toEqual(1);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('fetches more or less results per page when a user selects an option' +
        ' from the number per page select',
        function() {
        // arrange
        saas.number_per_page_options_model = 50;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_number_per_page();

        // assert
        expect(saas.number_per_page).toEqual(50);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('updates the number of results displayed text after a successful '+
        'search', function() {
        // standard case
        // page 2 of 3 with 10/page, so should display 11 of 20
        // arrange
        saas.current_page = 2;
        saas.num_pages = 3;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_start_end_paging();

        // assert
        expect(saas.showing.start).toEqual(11);
        expect(saas.showing.end).toEqual(20);
        expect(saas.search_buildings).not.toHaveBeenCalled();
    });
    it('displays the number matching the query if on the last page of results',
        function() {
        // standard case
        // page 3 of 3 with 10/page and 34 results, so should display 21 of 34
        // arrange
        saas.current_page = 3;
        saas.number_matching_search = 34;
        saas.num_pages = 3;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_start_end_paging();

        // assert
        expect(saas.showing.start).toEqual(21);
        expect(saas.showing.end).toEqual(34);
    });
    it('should call update_start_end_paging after a successful search',
        function() {
        // arrange
        spyOn(saas, 'update_start_end_paging');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_start_end_paging).toHaveBeenCalled();
    });
    it('should call update_buttons after a successful search',
        function() {
        // arrange
        spyOn(saas, 'update_buttons');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_buttons).toHaveBeenCalled();
    });
    it('should disable prev paging buttons at the first page',
        function() {
        // arrange
        saas.current_page = 1;
        saas.num_pages = 5;

        // act
        saas.update_buttons();

        // assert
        expect(saas.prev_page_disabled).toEqual(true);
        expect(saas.next_page_disabled).toEqual(false);
    });
    it('should disable next paging buttons at the last page',
        function() {
        // arrange
        saas.current_page = 5;
        saas.num_pages = 5;

        // act
        saas.update_buttons();

        // assert
        expect(saas.prev_page_disabled).toEqual(false);
        expect(saas.next_page_disabled).toEqual(true);
    });
    it('should calculate the number of pages after a successful search',
        function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {
            'buildings': [
                {
                    name: "one",
                    id: 1
                },
                {
                    name: "two",
                    id: 2
                }],
            'number_matching_search': 101
            });
        httpBackend.flush();

        // assert
        expect(saas.number_matching_search).toEqual(101);
        expect(saas.num_pages).toEqual(11);
    });

    /**
     * checkbox logic tests
     */
    it('should select or unselect all the viewed results when the select all' +
        ' checkbox is checked or unchecked', function() {
        // arrange
        saas.selected_buildings = [1,2,3];
        saas.select_all_checkbox = true;
        saas.buildings = [
            {
                checked: false
            },
            {
                checked: true
            }
        ];
        spyOn(saas, 'select_or_deselect_all_buildings').andCallThrough();

        // act
        saas.select_all_changed();

        // assert
        expect(saas.selected_buildings).toEqual([]);
        expect(saas.buildings).toEqual([
                {
                    checked: true
                },
                {
                    checked: true
                }
            ]);
        expect(saas.select_or_deselect_all_buildings).toHaveBeenCalled();
    });
    it('should call select_or_deselect_all_buildings after a search',
        function() {
        // arrange
        spyOn(saas, 'select_or_deselect_all_buildings');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.select_or_deselect_all_buildings).toHaveBeenCalled();
    });
    it('should add a building to the selected list when checked',
        function() {
        // arrange
        var building = {
            id: 5,
            checked: true
        };

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([5]);
    });
    it('should add a building to the selected list when unchecked and the ' +
        'select all checkbox is checked', function() {
        // arrange
        var building = {
            id: 5,
            checked: false
        };
        saas.select_all_checkbox = true;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([5]);
    });
    it('should remove a building to the selected list when unchecked',
        function() {
        // arrange
        var building = {
            id: 5,
            checked: false
        };
        saas.selected_buildings = [5,6,7];
        saas.select_all_checkbox = false;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([6,7]);
    });
    it('should remove a building to the selected list when checked if the ' +
        'select all checkbox is checked', function() {
        // arrange
        var building = {
            id: 5,
            checked: true
        };
        saas.selected_buildings = [5,6,7];
        saas.select_all_checkbox = true;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([6,7]);
    });
    it('should call load_state_from_selected_buildings after a successful ' +
        'search', function() {
        // arrange
        spyOn(saas, 'load_state_from_selected_buildings').andCallThrough();
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.load_state_from_selected_buildings).toHaveBeenCalled();
    });
    it('should call update_results after a successful ' +
        'search', function() {
        // arrange
        var select_or_deselect_all_buildings_time,
            load_state_from_selected_buildings_time;
        spyOn(saas, 'update_results').andCallThrough();
        spyOn(saas, 'select_or_deselect_all_buildings')
            .andCallFake(function() {
                select_or_deselect_all_buildings_time = new Date();
            }
        );
        spyOn(saas, 'load_state_from_selected_buildings')
            .andCallFake(function() {
                // wait for a sec, otherwise both have the same timestamp
                for(var y=0;y<100000;y++){
                    var x = new Date();
                    x = x+y;
                }
                load_state_from_selected_buildings_time = new Date();
            }
        );
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_results).toHaveBeenCalled();
        expect(select_or_deselect_all_buildings_time <
               load_state_from_selected_buildings_time).toBe(true);
    });
    it('check selected buildings successful', function() {
        // arrange
        saas.selected_buildings = [2];
        saas.buildings = [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ];

        // act
        saas.load_state_from_selected_buildings();

        // assert
        expect(saas.buildings[1]).toEqual({
            name: "two",
            id: 2,
            checked: true
        });
    });
    it('should generate columns', function() {
        // arrange
        var all_columns, column_headers, columns;
        all_columns = [
            {
                sort_column: "name"
            },
            {
                sort_column: "id"
            }
        ];
        column_headers = ["id"];
        saas.sort_column = "something else";
        saas.update_results({});
        // act
        columns = saas.generate_columns(
            all_columns, column_headers, saas.column_prototype
        );

        // assert that columns are extended off the prototype and only have
        // "id"
        expect(columns.length).toEqual(1);
        expect(columns[0].sort_column).toEqual("id");
        expect(columns[0].is_unsorted()).toEqual(true);
        saas.sort_column = "id";
        expect(columns[0].is_unsorted()).toEqual(false);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: settings_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller;
    var ctrl, ctrl_scope, modalInstance;
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          $q,
          organization_service) {
            ctrl = $controller;
            scope = $rootScope;
            ctrl_scope = $rootScope.$new();

            mock_organization_service = organization_service;
            
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_settings_controller(){
        ctrl = ctrl('settings_controller', {
            $scope: ctrl_scope,
            all_columns: {fields: [
                {checked: false, title: 'PM Property ID', sort_column: 'pm_property_id'},
                {checked: false, title: 'G', sort_column: 'g'},
                {checked: false, title: "Gross Floor Area", sort_column: 'gross_floor_area'}
            ]},
            organization_payload: {
                organization: {name: 'my org', id: 4}
            },
            query_threshold_payload: {
                query_threshold: 10
            },
            shared_fields_payload: {
                shared_fields: [
                    {
                        title: "PM Property Id",
                        sort_column: "pm_property_id"
                    }
                ],
                public_fields: [
                {
                    title: "Gross Floor Area",
                    sort_column: "gross_floor_area"
                }]
            },
            auth_payload: {
                auth: {
                    'is_owner': true,
                    'is_parent_org_owner': false
                }
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should accepts its payload", function() {
        // arrange
        create_settings_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.org).toEqual({
            name : 'my org',
            id : 4,
            query_threshold: 10
        });
        expect(ctrl_scope.fields[0].checked).toEqual(true);
        expect(ctrl_scope.fields[1].checked).toEqual(false);
        expect(ctrl_scope.fields[0].title).toEqual('PM Property ID');
    });
    it("should select all", function() {
        // arrange
        create_settings_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.controls.select_all = true;
        ctrl_scope.select_all_clicked();
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.infinite_fields[0].checked).toEqual(true);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myStripFilterApp = angular.module('myStripFilterApp', ['stripImportPrefix']);

describe("The stripImportPrefix filter", function() {
    beforeEach(module('myStripFilterApp'));
    it('Strips out the import prefix from building ids',
        // e.g. remove the 'IMP12-' from the id 'IMP12-1321/123'
        inject(function(stripImportPrefixFilter) {
            // normal cases
            expect(stripImportPrefixFilter('IMP134-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP134555-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP1-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP0-134')).toBe('134');
            // deals with `-`
            expect(stripImportPrefixFilter('IMP134-abc-dev')).toBe('abc-dev');
            // deals with `/`
            expect(stripImportPrefixFilter('IMP134-00/11')).toBe('00/11');
            // only strips first prefix
            expect(stripImportPrefixFilter('IMP134-IMP134-123')).toBe('IMP134-123');
        })
    );
    it("Does not strip out anything if there is not a prefix",
        inject(function(stripImportPrefixFilter) {
            // normal cases
            expect(stripImportPrefixFilter('123-123')).toBe('123-123');
            expect(stripImportPrefixFilter('0123/123')).toBe('0123/123');
        })
    );
    it("Is case sensitive to the import prefix",
        inject(function(stripImportPrefixFilter) {
            expect(stripImportPrefixFilter('imp123-abc')).toBe('imp123-abc');
            expect(stripImportPrefixFilter('iMp123-abc')).toBe('iMp123-abc');
            expect(stripImportPrefixFilter('iMP123-abc')).toBe('iMP123-abc');
        })
    );
    it("Handles undefined or null inputs",
        inject(function(stripImportPrefixFilter) {
            expect(stripImportPrefixFilter(undefined)).toBe(undefined);
            expect(stripImportPrefixFilter(null)).toBe(null);
        })
    );
    it("Only strips out the prefix if it has at least one digit and a hyphen",
        inject(function(stripImportPrefixFilter) {
            // must have the 'IMP' folowed by a digit then a hyphen
            expect(stripImportPrefixFilter('IMP-123')).toBe('IMP-123');
            expect(stripImportPrefixFilter('IMP1123')).toBe('IMP1123');
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myTitleCaseApp = angular.module('myTitleCaseApp', ['titleCase']);

describe("The TitleCase filter", function() {
    beforeEach(module('myTitleCaseApp'));
    it('Strips out ``_`` characters from strings and capitalizes the rest',
        inject(function(titleCaseFilter) {
            // normal cases
            expect(titleCaseFilter('super_data')).toBe('Super Data');
            expect(titleCaseFilter('super_data_45')).toBe('Super Data 45');
            expect(titleCaseFilter(undefined)).toBe(undefined);
            expect(titleCaseFilter(null)).toBe(null);
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myTypedNumberFilterApp = angular.module('myTypedNumberFilterApp', ['typedNumber']);

describe("The typedNumber filter", function() {
    beforeEach(module('myTypedNumberFilterApp'));
    it('should parse strings as strings and return them',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('tester')).toBe('tester');
        })
    );
    it('should parse strings as strings and return them, even if they look like numbers',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.1456')).toBe('123.1456');
        })
    );

    it('should parse numbers as numbers and return them',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.00001', 'number')).toBe("123");
        })
    );

    it('should allow the user to set the number of sig digits',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.321', 'number', 'not_year', 1)).toBe("123.3");
        })
    );

    it('should add commas to number greater than 999',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123456789', 'number', 'not_year', 0)).toBe("123,456,789");
        })
    );

    it('should parse year_built and not add commas',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('1946', 'number', 'year_built', 1)).toBe("1946");
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var validationTestApp = angular.module(
    'validationTestApp', ['mappingValidatorService']
);

describe("The MappingValidatorService", function() {
    var mvs;

    beforeEach(function () {
        module("validationTestApp");
        inject(function (mappingValidatorService) {
            mvs = mappingValidatorService;

        });

    });

    it('validates good string, float and date data', function() {
        // normal cases
        // Here ``type`` is undefined. Should still work.
        var str_data = ['Fun', 'fun2', 'fun3', 'fun4'];
        var float_data = ['12.34', '144.5', '234'];
        var date_data = ['2014/02/02', '03/13/2013', '03-14-2004'];

        expect(mvs.validate(str_data)).toEqual([]);
        expect(mvs.validate(float_data, 'float')).toEqual([]);
        expect(mvs.validate(date_data, 'date')).toEqual([]);
    });

    it('recognizes semivalid data', function() {
        // Cases where the data is /almost/ right.
        var float_data = ['12.34', '144.5', 'NaN'];
        var date_data = ['2014/02/02', 'huh?', '03-14-2004'];
        expect(mvs.validate(float_data, 'float')).toEqual(['NaN']);
        expect(mvs.validate(date_data, 'date')).toEqual(['huh?']);
    });

    it('recognizes invalid data', function() {
        // Cases where the data is *all* wrong.
        var float_data = ['', 'not a float', 'NaN'];
        var date_data = ['', 'huh?', 'what?'];
        // Cases where the data are correct.
        var good_float_data = ['12.34', '144.5', '234'];
        var good_date_data = ['2014/02/02', '03/13/2013', '03-14-2004'];

        // Data is wrong
        expect(mvs.validate(float_data, 'float')).toEqual(float_data);
        expect(mvs.validate(date_data, 'date')).toEqual(date_data);

        // Type is wrong
        // N.B. we use semivalid here, because Date is pretty forgiving w/ nums.
        expect(mvs.validate(good_float_data, 'date')).toEqual(['12.34']);
        expect(mvs.validate(good_date_data, 'float')).toEqual(good_date_data);


    });

});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// taken from the angularjs testing page
// http://docs.angularjs.org/guide/dev_guide.unit-testing

// create dummy angularJS app to attach filter(s)
var myBELabelDirectiveApp = angular.module('myBELabelDirectiveApp', ['beLabel']);

describe("The beLabel directive", function() {
    var $compile;
    var $rootScope;
    beforeEach(module('myBELabelDirectiveApp'));
    // Store references to $rootScope and $compile
    // so they are available to all tests in this describe block
    beforeEach(inject(function(_$compile_, _$rootScope_){
      // The injector unwraps the underscores (_) from around the parameter names when matching
      $compile = _$compile_;
      $rootScope = _$rootScope_;
    }));

    it('Replaces the element with the appropriate content', function() {
        // Compile a piece of HTML containing the directive
        var element = $compile('<be-label name="compliant" color="blue"></be-label>')($rootScope);
        // fire all the watches
        $rootScope.$digest();
        // Check that the compiled element contains the templated content
        expect(element.hasClass('label-primary')).toBe(true);
        expect(element.hasClass('label')).toBe(true);
        expect(element.html()).toContain("compliant");
    });

        // 'red': 'danger',
        // 'gray': 'default',
        // 'orange': 'warning',
        // 'green': 'success',
        // 'blue': 'primary',
        // 'light blue': 'info'
    it('Maps colors to semantic bootstrap class names', function() {
        var element = $compile('<be-label name="compliant" color="red"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-danger')).toBe(true);

        element = $compile('<be-label name="compliant" color="gray"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-default')).toBe(true);

        element = $compile('<be-label name="compliant" color="orange"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-warning')).toBe(true);

        element = $compile('<be-label name="compliant" color="green"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-success')).toBe(true);

        element = $compile('<be-label name="compliant" color="blue"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-primary')).toBe(true);

        element = $compile('<be-label name="compliant" color="light blue"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-info')).toBe(true);
    });


});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// taken from the angularjs testing page
// http://docs.angularjs.org/guide/dev_guide.unit-testing

// create dummy angularJS app to attach filter(s)
var myBEUploaderDirectiveApp = angular.module('myBEUploaderDirectiveApp', ['beUploader']);

describe("The beUploader directive", function() {
    var g_message, g_file, g_progress;
    var $compile;
    var $rootScope;
    var uploader_html = '<div be-uploader sourcetype="assessor" importrecord="5" buttontext="Upload your building list .csv file" eventfunc="uploaderfunc(message, filename, progress)" ng-hide="uploader.in_progress"></div>';
    beforeEach(module('myBEUploaderDirectiveApp'));
    // Store references to $rootScope and $compile
    // so they are available to all tests in this describe block
    beforeEach(inject(function(_$compile_, _$rootScope_){
      // The injector unwraps the underscores (_) from around the parameter names when matching
      $compile = _$compile_;
      $rootScope = _$rootScope_;
      $rootScope.eventfunc = function (fine_object) {
        console.log({fin: fine_object});
        g_message = fine_object.message;
        g_file = fine_object.file;
        g_progress = fine_object.progress;
      };
      window.BE = window.BE || {};
      window.BE.FILE_UPLOAD_DESTINATION = 'S3';
    }));

    it('Creates the fineuploader element', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        
        // act
        $rootScope.$digest();

        // assert
        expect(element.html()).toContain("qq-uploader");
        expect(element.html()).toContain("qq-upload-button");
    });

    it('Contains the buttontext specified', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);

        // act
        $rootScope.$digest();

        // assert
        expect(element.html()).toContain("Upload your building list .csv file");
    });

    it('Only allows one file to be uploaded at a time', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");

        // act
        $rootScope.$digest();

        // assert
        expect(func._options.multiple).toBe(false);
    });

    it('Uses the callback function for invalid file types', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.jpeg");

        // act
        $rootScope.$digest();
        func._options.showMessage("there was an invalid extension. Valid extension(s): .csv");


        // assert
        expect(g_message).toBe("invalid_extension");
    });

    it('Uses the callback function to share its state: upload started',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';
        
        // act
        $rootScope.$digest();
        func._options.callbacks.onSubmitted(1, filename);


        // assert
        expect(g_message).toBe("upload_submitted");
        expect(g_file.filename).toBe(filename);
    });

    it('Uses the callback function to share its state: in progress',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';
        var loaded = 10;
        var total = 100;
        
        // act
        $rootScope.$digest();
        func._options.callbacks.onProgress(1, filename, loaded, total);


        // assert
        expect(g_message).toBe("upload_in_progress");
        expect(g_file.filename).toBe(filename);
        expect(g_progress.loaded).toBe(loaded);
        expect(g_progress.total).toBe(total);
    });

    it('Uses the callback function to share its state: complete',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';

        
        // act
        $rootScope.$digest();
        func._options.callbacks.onComplete(1, filename, {success: true});


        // assert        
        expect(g_message).toBe("upload_complete");
        expect(g_file.filename).toBe(filename);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: building_detail_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, ngFilter, delete_called;
    var building_detail_ctrl, building_detail_ctrl_scope, modalInstance, labels;
    var mock_building_services, mock_project_service;
    var mock_building;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          urls,
          $q,
          building_services,
          project_service,
          $filter) {
            controller = $controller;
            scope = $rootScope;
            ngFilter = $filter;
            building_detail_ctrl_scope = $rootScope.$new();
            modal_state = "";
            delete_called = false;

            // mock the building_services factory methods used in the controller
            // and return their promises
            mock_building_services = building_services;
            mock_project_service = project_service;

            spyOn(mock_project_service, "get_project")
                .andCallFake(function(project_slug){
                    return $q.when(
                        {
                            "status": "success",
                            "project": {
                                id: 33,
                                name: "test project",
                                slug: project_slug
                            }
                        }
                    );
                }
            );
            spyOn(mock_project_service, "get_labels")
                .andCallFake(function(){
                    return $q.when(
                        {
                            "status": "success",
                            "labels": [{
                                id: 44,
                                name: "bad label",
                                color: "red"
                            }]
                        }
                    );
                }
            );
            spyOn(mock_project_service, "update_project_building")
                .andCallFake(function(building_id, project, label){
                    return $q.when(
                        {
                            "status": "success",
                            "approver": "bob doe",
                            "approved_date": "01/01/2012"
                        }
                    );
                }
            );
            spyOn(mock_building_services, "update_building")
                .andCallFake(function (building, org_id){
                    mock_building = building;
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_building_detail_controller(){
        var fake_building = {
            id: 511,
            pk: 511,
            gross_floor_area: 123456,
            gross_floor_area_source: 2,
            city: "DC",
            city_source: 4,
            tax_lot_id: "11/22",
            tax_lot_id_source: 3,
            extra_data: {
                'some other key': 12344,
                'some other key that is not in a parent': 223
            },
            extra_data_sources: {
                'some other key': 2,
                'some other key that is not in a parent': 3
            },
            created: "at some point"
        };
        var fake_imported_buildings = [
            {
                id: 2,
                pk: 2,
                gross_floor_area: 123456,
                gross_floor_area_source: null,
                city: "Washington, DC",
                city_source: null,
                extra_data: {
                    'some other key': 123,
                    'some other key that is not in a child': 333,
                    'some floor area': 444
                },
                extra_data_sources: {
                    'some other key': null,
                    'some other key that is not in a child': 111,
                    'some floor area': 444
                },
                created: "test"
            },
            {
                id: 3,
                pk: 3,
                gross_floor_area: 2111111,
                gross_floor_area_source: null,
                city: "Washington",
                city_source: null,
                tax_lot_id: "11/22",
                tax_lot_id_source: null,
                extra_data: {
                    'make it four': 4
                },
                extra_data_sources: {
                    'make it four': null
                }
            },{
                id: 4,
                pk: 4,
                gross_floor_area: 2111111,
                gross_floor_area_source: null,
                city: "Washington",
                city_source: null,
                tax_lot_id: "11/22",
                tax_lot_id_source: null,
                extra_data: {
                    'make it four': 5
                },
                extra_data_sources: {
                    'make it four': null
                }
            }
        ];
        var fake_payload = {
            "status": "success",
            "building": fake_building,
            "imported_buildings": fake_imported_buildings,
            "projects": [],
            "user_org_id": 42
        };
        var fake_all_columns = [{
            "title": "PM Property ID",
            "sort_column": "pm_property_id",
            "class": "is_aligned_right",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Tax Lot ID",
            "sort_column": "tax_lot_id",
            "class": "is_aligned_right",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Custom ID 1",
            "sort_column": "custom_id_1",
            "class": "is_aligned_right whitespace",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Property Name",
            "sort_column": "property_name",
            "class": "",
            "title_class": "",
            "type": "string",
            "field_type": "building_information",
            "sortable": true,
            "checked": false
        }];
        building_detail_ctrl = controller('building_detail_controller', {
            $scope: building_detail_ctrl_scope,
            $routeParams: {
                building_id: 1,
                project_id: 2
            },
            building_payload: fake_payload,
            all_columns: {
                fields: fake_all_columns
            },
            audit_payload: {
                audit_logs: []
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should have an building payload", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.building.id).toBe(511);
        expect(building_detail_ctrl_scope.imported_buildings[0].id).toBe(2);
    });

    it("should get labels on load", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.labels[0].id).toBe(44);
        expect(building_detail_ctrl_scope.labels[0].name).toBe("bad label");
        expect(building_detail_ctrl_scope.labels[0].color).toBe("red");
    });

    it("should highlight the active project", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.is_active_project({id:33}))
        .toBe(true);
        expect(building_detail_ctrl_scope.is_active_project({id:34}))
        .toBe(false);
        building_detail_ctrl_scope.project = undefined;
        expect(building_detail_ctrl_scope.is_active_project({id:34}))
        .toBe(false);
    });

    it("should make a copy of building while making edits", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.save_building_state();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;

        // assertions
        expect(building_detail_ctrl_scope.building_copy.gross_floor_area)
        .toBe(123456);
    });
    it("should restore the copy of building if a user clicks cancel",
        function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.save_building_state();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;
        building_detail_ctrl_scope.restore_building();

        // assertions
        expect(building_detail_ctrl_scope.building.gross_floor_area)
        .toBe(123456);
        expect(building_detail_ctrl_scope.building.edit_form_showing).toBe(false);
    });
    it("should save a building when a user clicks the save button", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;
        building_detail_ctrl_scope.save_building();

        // assertions
        expect(mock_building_services.update_building)
        .toHaveBeenCalledWith(building_detail_ctrl_scope.building, 42);
        expect(mock_building.gross_floor_area).toEqual(43214);
    });
    it("should show a default label if a building doesn't have one", function() {
        // arrange
        create_building_detail_controller();
        var building_with_label = {
            label: {
                name: "hello",
                label: "success"
            }
        };
        var building_without_label = {};
        var label_with, label_without;

        // act
        building_detail_ctrl_scope.$digest();
        label_with = building_detail_ctrl_scope.get_label(building_with_label);
        label_without = building_detail_ctrl_scope.get_label(building_without_label);

        // assertions
        expect(label_with).toEqual({
                name: "hello",
                label: "success"
            });
        expect(label_without).toEqual({
                name: "Add Label",
                label: "default"
            });
    });

    it("should show a project or buildings breadcrumb", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.user.project_slug = "project_1";

        // assertions
        expect(building_detail_ctrl_scope.is_project()).toEqual(true);
        building_detail_ctrl_scope.user.project_slug = undefined;
        expect(building_detail_ctrl_scope.is_project()).toEqual(false);

    });
    it("should show the default projects table if a user has no compliance" +
        " projects", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.user.has_projects()).toEqual(false);
        building_detail_ctrl_scope.projects = [{id: 1, name: "a"}];
        expect(building_detail_ctrl_scope.user.has_projects()).toEqual(true);

    });

    it("should set only building attribute to master, not ids or children", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.is_valid_key('id')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('pk')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('pk_source')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key(' extra_data ')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('gross_floor_area'))
          .toEqual(true);
    });
    it("should update a project-building label", function() {
        // arrange
        create_building_detail_controller();
        var project = {
            id: 2,
            building: {}
        };

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.update_project_building(project,
            {
                name: "label name",
                color: "red"
            });
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(mock_project_service.update_project_building).toHaveBeenCalled();
        expect(project.building.approver).toEqual("bob doe");
        expect(project.building.approved_date).toEqual("01/01/2012");
        expect(project.building.label.name).toEqual("label name");
        expect(project.building.label.color).toEqual("red");

    });
    it("should set a field as source when clicked", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[0].is_master = true;
        expect(building_detail_ctrl_scope.building.gross_floor_area_source)
          .not.toEqual(building_detail_ctrl_scope.building.id);
        building_detail_ctrl_scope.set_self_as_source('gross_floor_area');
        building_detail_ctrl_scope.set_self_as_source('some other key', true);
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.building.gross_floor_area_source)
          .toEqual(building_detail_ctrl_scope.building.id);
        expect(building_detail_ctrl_scope.imported_buildings[0].is_master)
          .toEqual(false);
    });
    it("should set a column as the dominant source when clicked", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[1].is_master = true;
        building_detail_ctrl_scope.make_source_default(
            building_detail_ctrl_scope.imported_buildings[0]);
        building_detail_ctrl_scope.$digest();

        // assertions
        var b = building_detail_ctrl_scope.building,
            i = building_detail_ctrl_scope.imported_buildings[0],
            i_other = building_detail_ctrl_scope.imported_buildings[1];

        expect(b.gross_floor_area_source).toEqual(i.id);
        expect(b.id).not.toEqual(i.id);
        expect(b.pk).not.toEqual(i.id);
        expect(b.city).toEqual(i.city);
        expect(b.city_source).toEqual(i.id);
        expect(b.tax_lot_id).toEqual("11/22");
        expect(b.tax_lot_id_source).toEqual(i_other.id);
        expect(b.extra_data['some other key']).toEqual(123);
        expect(b.extra_data_sources['some other key']).toEqual(i.id);
        expect(b.extra_data['some other key that is not in a child']).toEqual(333);
        expect(b.extra_data_sources['some other key that is not in a child']).toEqual(i.id);
        expect(b.extra_data['some other key that is not in a parent']).toEqual(223);
        expect(b.extra_data_sources['some other key that is not in a parent']).toEqual(i_other.id);
        expect(b.created).toEqual("at some point");

        expect(i.is_master).toEqual(true);
        expect(i_other.is_master).toEqual(false);
    });
    it("should set the master building value when parent's value is clicked",
        function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[1].is_master = true;
        building_detail_ctrl_scope.set_building_attribute(
            building_detail_ctrl_scope.imported_buildings[0], 'city');
        building_detail_ctrl_scope.set_building_attribute(
            building_detail_ctrl_scope.imported_buildings[0], 'some other key', true);
        building_detail_ctrl_scope.$digest();

        // assertions
        var b = building_detail_ctrl_scope.building,
            i = building_detail_ctrl_scope.imported_buildings[0],
            i_other = building_detail_ctrl_scope.imported_buildings[1];

        expect(b.id).not.toEqual(i.id);
        expect(b.pk).not.toEqual(i.id);
        expect(b.city).toEqual(i.city);
        expect(b.city_source).toEqual(i.id);
        expect(b.tax_lot_id).toEqual("11/22");
        expect(b.tax_lot_id_source).toEqual(i_other.id);
        expect(b.extra_data['some other key']).toEqual(123);
        expect(b.extra_data_sources['some other key']).toEqual(i.id);

        expect(i.is_master).toEqual(false);
        expect(i_other.is_master).toEqual(false);
    });

    it("should display all the data within all the buildings", function() {
        // arrange
        create_building_detail_controller();
        var keys;

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        var edc = building_detail_ctrl_scope.data_columns;

        // should not duplicate keys
        expect(edc.length).toEqual(8);
        keys = edc.map(function ( d ) {
            return d.key;
        });
        expect(keys.indexOf('make it four')).toEqual(4);
    });

    it("should display Floor Areas", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.$digest();

        // assertions
        var area_fields = building_detail_ctrl_scope.floor_area_fields;
        expect(area_fields.length).toEqual(1);
    });

    it("should display Floor Areas with number", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.get_number("")).toEqual(0);
        expect(building_detail_ctrl_scope.get_number("123,123,123")).toEqual(123123123);
        expect(building_detail_ctrl_scope.get_number("123,123,123.123")).toEqual(123123123.123);
        expect(building_detail_ctrl_scope.get_number("-123,123,123")).toEqual(-123123123);
        expect(building_detail_ctrl_scope.get_number(-123123123)).toEqual(-123123123);


    });
});

describe("controller: concat_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var scope, controller, modal_state;
    var edit_ctrl, concat_modal_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label, mock_mapping_service, mock_matching_service;
    var global_step = 1;
    var global_dataset = {};

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
            $controller, $rootScope, $modal, urls, $q
        ) {
            controller = $controller;
            scope = $rootScope;
            concat_modal_ctrl_scope = $rootScope.$new();
            concat_modal_ctrl_scope.concat_columns = [];
            modal_state = "";
        }
    ));

    var mock_building_column_types = [
        'address1', 'city', 'state', 'postal_code'
    ];

    var mock_raw_columns = [
        {
            name: 'Address',
            suggestion: 'address1',
            confidence: 1,
            raw_data: [
                '234 Database way',
                '23444 Huh hwy',
                '23444 Huh hwy',
                '23444 Huh hwy',
                '1223 face pl.'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        },
        {
            name: 'City',
            suggestion: 'city',
            confidence: 1,
            raw_data: [
                'Mega City', 'Mega City', 'Mega City', 'Mega City', 'Mega City'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        },
        {
            name: 'Zip',
            suggestion: '',
            confidence: 0,
            raw_data: [
                '234233', '234233', '234233', '234233', '234233'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        }
    ];

    // this is outside the beforeEach so it can be configured by each unit test
    function create_concat_modal_controller(){
        edit_ctrl = controller('concat_modal_ctrl', {
            $scope: concat_modal_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            building_column_types: mock_building_column_types,
            raw_columns: mock_raw_columns
        });
    }

    /*
     * Test scenarios
     */

    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.close_concat_modal();
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should mangle scope appropriately during concatenation", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(3);

        // arrange
        concat_modal_ctrl_scope.concat_columns =
            concat_modal_ctrl_scope.raw_columns.slice(0);
        concat_modal_ctrl_scope.raw_columns = [];

        // act
        concat_modal_ctrl_scope.$digest();
        concat_modal_ctrl_scope.save_concat();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(1);
        expect(
            concat_modal_ctrl_scope.raw_columns[0].is_concatenated
        ).toEqual(true);
    });

    it("should modify the raw_data of our modified TCM correctly", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(3);

        // arrange
        concat_modal_ctrl_scope.concat_columns =
            concat_modal_ctrl_scope.raw_columns.slice(0);
        concat_modal_ctrl_scope.raw_columns = [];

        // act
        concat_modal_ctrl_scope.$digest();
        concat_modal_ctrl_scope.save_concat();

        var expected_raw = [
            '234 Database way Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '1223 face pl. Mega City 234233'
        ];

        // assertions
        expect(
            concat_modal_ctrl_scope.raw_columns[0].raw_data
        ).toEqual(expected_raw);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: create_organization_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_organization_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, organization_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        mock_organization_service = organization_service;
        spyOn(mock_organization_service, "create_sub_org")
            .andCallFake(function(org, sub_org){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_organization_modal_ctrl(){
        ctrl = ctrl('create_organization_modal_ctrl', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            organization: {organization_id: 1}
        });
    }

    /*
     * Test scenarios
     */

    it("should call the organization service to add a new sub_org",
        function() {
        // arrange
        create_organization_modal_ctrl();

        // act
        ctrl_scope.$digest();
        ctrl_scope.sub_org.name = "my shiny new org";
        ctrl_scope.sub_org.email = "jb.smooth@be.com";
        ctrl_scope.submit_form(true);

        // assertions
        expect(mock_organization_service.create_sub_org)
            .toHaveBeenCalledWith(
                {
                    organization_id: 1
                },
                {
                    name: "my shiny new org",
                    email: "jb.smooth@be.com"
                }
            );
    });
    
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: data_upload_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_uploader_service, scope, controller, modal_state;
    var edit_ctrl, data_upload_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label, mock_mapping_service, mock_matching_service;
    var global_step = 1;
    var global_dataset = {};
    var return_labels = [
        {
            "name": 'compliant',
            "color": 'green',
            "id": 1
        },
        {
            "name": "new label",
            "color": "blue",
            "id": 2
        }
    ];

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, uploader_service, mapping_service, matching_service) {
            controller = $controller;
            scope = $rootScope;
            data_upload_ctrl_scope = $rootScope.$new();
            modal_state = "";

            // mock the uploader_service factory methods used in the controller
            // and return their promises
            mock_uploader_service = uploader_service;
            mock_mapping_service = mapping_service;
            mock_matching_service = matching_service;
            spyOn(mock_uploader_service, "get_AWS_creds")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "AWS_CLIENT_ACCESS_KEY": "123",
                            "AWS_UPLOAD_BUCKET_NAME": "test-bucket"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "check_progress")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "progress": "25.0"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "create_dataset")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "id": 3,
                                "name": dataset_name

                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error",
                                "message": "name already in use"
                            }
                        );
                    }
                }
            );
            spyOn(mock_uploader_service, "save_raw_data")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "file_id": 3
                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error"
                            }
                        );
                    }
                }
            );
            spyOn(mock_mapping_service, "start_mapping")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "file_id": 3
                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error"
                            }
                        );
                    }
                }
            );
            spyOn(mock_matching_service, "start_system_matching")
            .andCallFake(function(file_id){
                // return $q.reject for error scenario
                return $q.when(
                    {
                        "status": "success",
                        "file_id": 3
                    }
                );
            });

        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_data_upload_modal_controller(){
        edit_ctrl = controller('data_upload_modal_ctrl', {
            $scope: data_upload_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            step: global_step,
            dataset: global_dataset
        });
    }

    /*
     * Test scenarios
     */

    it("should close the modal when the close function is called", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.close();
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel function is called", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.cancel();
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

    it("should start at the step provided", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(1);

        // arrange
        global_step = 2;
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(2);
    });

    it("should goto different steps", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var step;
        step = 2;
        data_upload_ctrl_scope.goto_step(step);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(step);
    });

    it("disables the 'Name it' button if no text is entered", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(true);
    });
    it("disables the 'Name it' button if no text is entered, then cleared",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.dataset.name = undefined;
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(true);
    });
    it("enables the 'Name it' button if text is entered", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.dataset.name = "my dataset name";
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(false);
    });
    it("should show an alert if the dataset name is already in use",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.create_dataset("fail");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.alert).toBe(true);
    });
    it("should not show an alert if the dataset name is not already in use",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.create_dataset("my shiny new dataset");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.alert).toBe(false);
    });
    it("after creating a dataset, stores the dataset id", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var ds_name = "my shiny new dataset";
        data_upload_ctrl_scope.create_dataset(ds_name);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.id).toBe(3);
        expect(data_upload_ctrl_scope.dataset.name).toBe(ds_name);
    });
    it("after uploading a file, stores the file id", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var message, filename;
        message = "upload_complete";
        filename = "file1.csv";

        // act
        data_upload_ctrl_scope.uploaderfunc(message, {
            filename: filename,
            file_id: 20140313
        });
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.import_file_id).toBe(20140313);
    });
    it("should show an invalid extension alert if a file with an invalid" +
        "extension is loaded", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.uploaderfunc("invalid_extension");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.invalid_extension_alert)
            .toBe(true);
    });
    it("should hide the upload button after the user selects a file",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename;
        message = "upload_submitted";
        filename = "file1.csv";

        // act
        data_upload_ctrl_scope.uploaderfunc(message, {filename: filename});
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.filename).toBe(filename);
        expect(data_upload_ctrl_scope.uploader.in_progress).toBe(true);
    });
    it("should show the progressbar during upload",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename, progress;
        message = "upload_in_progress";
        filename = "file1.csv";
        progress = {
            loaded: 10,
            total: 100
        };

        // act
        data_upload_ctrl_scope.uploaderfunc(message, filename, progress);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.in_progress).toBe(true);
        expect(data_upload_ctrl_scope.uploader.progress).toBe(2.5);
    });
    it("should start saving the energy data when the file has been uploaded",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename;
        message = "upload_complete";
        filename = "file1.csv";
        data_upload_ctrl_scope.step.number = 4;

        // act
        data_upload_ctrl_scope.uploaderfunc(message, filename);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.status_message)
            .toBe("saving energy data");
    });

    it("should take an dataset payload", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.name).toBe("");
        expect(data_upload_ctrl_scope.dataset.filename).toBe("");
        expect(data_upload_ctrl_scope.dataset.id).toBe(0);
    });

    it("should extend a custom dataset payload", function() {
        // arrange
        global_dataset = {
            id: 100,
            filename: "seed_data.csv",
            name: "Compliance Project"
        };
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.name).toBe("Compliance Project");
        expect(data_upload_ctrl_scope.dataset.filename).toBe("seed_data.csv");
        expect(data_upload_ctrl_scope.dataset.id).toBe(100);
        expect(data_upload_ctrl_scope.dataset.alert).toBe(false);

    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: dataset_detail_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, ngFilter, delete_called;
    var dataset_detail_ctrl, dataset_detail_ctrl_scope, modalInstance, labels;

    

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, dataset_service, $filter) {
            controller = $controller;
            scope = $rootScope;
            ngFilter = $filter;
            dataset_detail_ctrl_scope = $rootScope.$new();
            modal_state = "";
            delete_called = false;

            // mock the dataset_service factory methods used in the controller
            // and return their promises
            mock_dataset_service = dataset_service;
            spyOn(mock_dataset_service, "get_dataset")
                .andCallFake(function(dataset_id){
                    // return $q.reject for error scenario
                    var fake_importfiles = [
                        {
                            name: "DC_CoveredBuildings_50k.csv",
                            number_of_buildings: 511,
                            number_of_mappings: 511,
                            number_of_cleanings: 1349,
                            source_type: "Assessed Raw",
                            number_of_matchings: 403
                        },
                        {
                            name: "DC_ESPM_Report.csv",
                            number_of_buildings: 511,
                            number_of_matchings: 403,
                            source_type: "Portfolio Raw"
                        }
                    ];
                    var fake_dataset = {
                        name: "DC 2013 data",
                        last_modified: (new Date()).getTime(),
                        last_modified_by: "john.s@buildingenergy.com",
                        number_of_buildings: 89,
                        id: 1,
                        importfiles: fake_importfiles
                    };
                    var fake_payload = {
                        "status": "success",
                        "dataset": fake_dataset
                    };
                    if (delete_called) {
                        fake_payload.dataset.importfiles.pop();
                    }
                    console.log({delete_called: delete_called, ds: fake_payload});
                    return $q.when(fake_payload);
                }
            );

            spyOn(mock_dataset_service, "delete_file")
                .andCallFake(function(import_file){
                    delete_called = true;
                    console.log({d: "delete_called"});
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_detail_controller(){
        var fake_importfiles = [
            {
                name: "DC_CoveredBuildings_50k.csv",
                number_of_buildings: 511,
                number_of_mappings: 511,
                number_of_cleanings: 1349,
                source_type: "Assessed Raw",
                number_of_matchings: 403
            },
            {
                name: "DC_ESPM_Report.csv",
                number_of_buildings: 511,
                number_of_matchings: 403,
                source_type: "Portfolio Raw"
            }
        ];
        var fake_dataset = {
            name: "DC 2013 data",
            last_modified: (new Date()).getTime(),
            last_modified_by: "john.s@buildingenergy.com",
            number_of_buildings: 89,
            id: 1,
            importfiles: fake_importfiles
        };
        var fake_payload = {
            "status": "success",
            "dataset": fake_dataset
        };
        dataset_detail_ctrl = controller('dataset_detail_controller', {
            $scope: dataset_detail_ctrl_scope,
            dataset_payload: fake_payload
        });
    }

    /*
     * Test scenarios
     */

    it("should have an data set payload with import files", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        dataset_detail_ctrl_scope.$digest();

        // assertions
        expect(dataset_detail_ctrl_scope.dataset.importfiles.length).toBe(2);
    });

    it("should show an alert when the delete icon is clicked", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        dataset_detail_ctrl_scope.$digest();
        var importfiles = dataset_detail_ctrl_scope.dataset.importfiles;
        dataset_detail_ctrl_scope.delete_file(importfiles[0]);
        dataset_detail_ctrl_scope.$digest();

        // assertions
        expect(dataset_detail_ctrl_scope.dataset.importfiles.length).toBe(1);
    });
   
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: dataset_list_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, modal_state;
    var edit_ctrl, dataset_list_ctrl_scope, modalInstance, labels;
    var location;

    

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, uploader_service,
            $location) {
            controller = $controller;
            scope = $rootScope;
            dataset_list_ctrl_scope = $rootScope.$new();
            modal_state = "";
            location = $location;

            // mock the uploader_service factory methods used in the controller
            // and return their promises
            mock_uploader_service = uploader_service;
            spyOn(mock_uploader_service, "get_AWS_creds")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "AWS_CLIENT_ACCESS_KEY": "123",
                            "AWS_UPLOAD_BUCKET_NAME": "test-bucket"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "create_dataset")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "import_record_id": 3,
                                "import_record_name": dataset_name

                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error",
                                "message": "name already in use"
                            }
                        );
                    }
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_list_controller(){
        var fake_datasets_payload = {
            "status": "success",
            "datasets": [
                {
                    name: "DC 2013 data",
                    last_modified: (new Date()).getTime(),
                    last_modified_by: "john.s@buildingenergy.com",
                    number_of_buildings: 89
                },
                {
                    name: "DC 2014 data",
                    last_modified: (new Date()).getTime() -
                        1550 * 60 * 60 * 1000,
                    last_modified_by: "gavin.m@buildingenergy.com",
                    number_of_buildings: 70
                }
            ]
        };
        edit_ctrl = controller('dataset_list_controller', {
            $scope: dataset_list_ctrl_scope,
            datasets_payload: fake_datasets_payload
        });
    }

    /*
     * Test scenarios
     */

    it("should have a dataset_payload", function() {
        // arrange
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();

        // assertions
        expect(dataset_list_ctrl_scope.datasets.length).toEqual(2);
    });

    it("should disable the mapping button if the dataset has no" +
        " Assessor files", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Portfolio Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_assessor_files(dataset);

        // assertions
        expect(disabled).toEqual(true);
    });

    it("should enable the mapping button if the dataset has at least one" +
        " Assessor file", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_assessor_files(dataset);

        // assertions
        expect(disabled).toEqual(false);
    });
    it("should disable the matching button if the dataset has no" +
        " Portfolio Manger files", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Assessed Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_pm_files(dataset);

        // assertions
        expect(disabled).toEqual(true);
    });
    it("should enable the matching button if the dataset has at least one" +
        " Portfolio Manger file", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_pm_files(dataset);

        // assertions
        expect(disabled).toEqual(false);
    });
    it("should navigate to the mapping page of the first assessed" +
        " import file when the ``Mapping`` button is clicked", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Assessed Raw",
                    id: 3
                },
                {
                    source_type: "Assessed Raw",
                    id: 5
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        dataset_list_ctrl_scope.goto_mapping(dataset);

        // assertions
        expect(location.path()).toBe('/data/mapping/3');
    });
    it("should navigate to the matching page of the first Portfolio Manager" +
        " import file when the ``Matching`` button is clicked", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw",
                    id: 3
                },
                {
                    source_type: "Portfolio Raw",
                    id: 5
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        dataset_list_ctrl_scope.goto_matching(dataset);

        // assertions
        expect(location.path()).toBe('/data/matching/3');
    });

   
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: delete_modal_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, building_services, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        // mock the export_service factory methods used in the controller
        // and return their promises
        mock_building_services = building_services;
        spyOn(mock_building_services, "delete_buildings")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_delete_modal_controller(){
        ctrl = ctrl('delete_modal_controller', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            search: { 
                selected_buildings: [1,2],
                filter_params: {},
                select_all_checkbox: false,
                order_by: "",
                sort_reverse: false,
                number_matching_search: 1000
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should start at the delete page", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.delete_state).toEqual("delete"); 
    });
    it("should save the search paramaters",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.delete_payload;
        expect(b.selected_buildings).toEqual([1,2]);
        expect(b.filter_params).toEqual({});
        expect(b.order_by).toEqual("");
        expect(b.sort_reverse).toEqual(false);
        expect(b.select_all_checkbox).toEqual(false);
    });
    it("should delete when the delete button is clicked",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.delete_buildings();

        // assertions
        expect(ctrl_scope.delete_state).toEqual("prepare");
        expect(mock_building_services.delete_buildings).toHaveBeenCalled();
    });
    it("should show the success page when the delete is finished",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.delete_buildings();
        ctrl_scope.$digest();

        // assertions
        expect(mock_building_services.delete_buildings).toHaveBeenCalled();
        expect(ctrl_scope.delete_state).toEqual("success");
    });
    it("should show the number of buildings to be deleted",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        var number_to_delete = ctrl_scope.number_to_delete();

        // assertions
        expect(number_to_delete).toEqual(2);
    });
    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.close();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.cancel();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

  
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myDistrictApp = angular.module('myDistrictApp', ['district']);

describe("The district filter", function() {
    beforeEach(module('myDistrictApp'));
    it('replaces `district` with `County/District/Ward/Borough`',
        inject(function(districtFilter) {
            // normal cases
            expect(districtFilter('district')).toBe('County/District/Ward/Borough');
            expect(districtFilter('District')).toBe('County/District/Ward/Borough');
            expect(districtFilter('DistRict')).toBe('County/District/Ward/Borough');
            expect(districtFilter('DISTRICT')).toBe('County/District/Ward/Borough');
            expect(districtFilter('aDISTRICT')).toBe('aDISTRICT');
            expect(districtFilter('')).toBe('');
            expect(districtFilter('district ')).toBe('district ');
            expect(districtFilter('ok')).toBe('ok');
            expect(districtFilter(undefined)).toBe(undefined);
            expect(districtFilter(null)).toBe(null);
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: edit_label_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, modal_state;
    var edit_ctrl, edit_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label;
    var return_labels = [
        {
            "name": 'compliant',
            "color": 'green',
            "id": 1
        },
        {
            "name": "new label",
            "color": "blue",
            "id": 2
        }
    ];

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, urls, $q, project_service) {
        controller = $controller;
        scope = $rootScope;
        edit_ctrl_scope = $rootScope.$new();
        modal_state = "";

        // mock the project_service factory methods used in the controller
        // and return their promises
        mock_project_service = project_service;
        spyOn(mock_project_service, "get_labels")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success", "labels": return_labels});
            }
        );
        spyOn(mock_project_service, "add_label")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
        spyOn(mock_project_service, "delete_label")
            .andCallFake(function(label){
                deleted_label = label;
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
        spyOn(mock_project_service, "update_label")
            .andCallFake(function(label){
                updated_label = label;
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );

    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_edit_modal_controller(){
        var labels = [
            {
                "name": 'compliant',
                "color": 'green',
                "id": 1
            }
        ];

        edit_ctrl = controller('edit_label_modal_ctrl', {
            $scope: edit_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            labels: labels
        });
    }

    /*
     * Test scenarios
     */

    it("should initialize the default label", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.$digest();
        edit_ctrl_scope.initialize_label_modal();

        // assertions
        expect(edit_ctrl_scope.label_modal.color).toBe("gray");
        expect(edit_ctrl_scope.label_modal.label).toBe("default");
        expect(edit_ctrl_scope.label_modal.name).toBe("");
        expect(edit_ctrl_scope.modal.label.state).toBe("create");
    });

    it("should get the labels available to an organization", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.add_label({});  // calls private get_labels
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.labels.length).toBe(2);
    });

    it("should add a label in the user's organization", function() {
        // arrange
        create_edit_modal_controller();
        var label_to_add = {
            color: "blue",
            label: "primary",
            name: "new label"
        };

        // act
        edit_ctrl_scope.add_label(label_to_add);
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.labels.length).toBe(2);
        expect(edit_ctrl_scope.labels[1].color).toBe("blue");
        expect(edit_ctrl_scope.labels[1].name).toBe("new label");
    });

    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.close();
        edit_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.cancel();
        edit_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

    it("sets the label_modal to the label when its edit button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.edit_label(label);
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.label_modal.color).toBe(label.color);
        expect(edit_ctrl_scope.label_modal.name).toBe(label.name);
        expect(edit_ctrl_scope.modal.label.state).toBe("edit");

        // assert that edit_ctrl_scope.label_modal is a copy and not a reference to label
        edit_ctrl_scope.label_modal.name = "random name here";
        expect(edit_ctrl_scope.label_modal.name).not.toBe(label.name);
    });
    
    it("deletes the appropriate label when the delete button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.delete_label(label);
        edit_ctrl_scope.$digest();

        // assertions
        expect(deleted_label).toBe(label);
    });

    it("updates the appropriate label when the update label button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.edit_label(label);
        edit_ctrl_scope.$digest();
        edit_ctrl_scope.label_modal.name = "harry";
        edit_ctrl_scope.label_modal.color = "blue";
        edit_ctrl_scope.update_label(edit_ctrl_scope.label_modal);
        edit_ctrl_scope.$digest();

        // assertions
        expect(mock_project_service.update_label).toHaveBeenCalledWith(edit_ctrl_scope.label_modal);
        expect(updated_label).toBe(edit_ctrl_scope.label_modal);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: export_modal_controller", function(){
    // globals set up and used in each test scenario
    var mock_export_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, export_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        // mock the export_service factory methods used in the controller
        // and return their promises
        mock_export_service = export_service;
        spyOn(mock_export_service, "export_buildings")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success", "export_id": "123456"});
            }
        );
        spyOn(mock_export_service, "export_buildings_progress")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({
                    "status": "success",
                    "buildings_processed": 1000
                });
            }
        );
            spyOn(mock_export_service, "export_buildings_download")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({
                    "status": "success",
                    "url": "#"
                });
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_export_modal_controller(){
        ctrl = ctrl('export_modal_controller', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            search: { 
                selected_buildings: [],
                filter_params: {},
                select_all_checkbox: false,
                order_by: "",
                sort_reverse: false,
                number_matching_search: 1000
            },
            selected_fields: ['tax_lot_id', 'postal_code'],
            project: {
                id: 11
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should start at the create page", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.export_state).toEqual("create"); 
    });
    it("should start with an empty name and default file type of 'xls'",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.building_export;
        expect(b.export_name).toEqual("");
        expect(b.export_type).toEqual("xls");
    });
    it("should save the search paramaters",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.building_export;
        expect(b.selected_buildings).toEqual([]);
        expect(b.filter_params).toEqual({});
        expect(b.order_by).toEqual("");
        expect(b.sort_reverse).toEqual(false);
        expect(b.select_all_checkbox).toEqual(false);
        expect(b.selected_fields).toEqual(['tax_lot_id', 'postal_code']);
        expect(b.project_id).toEqual(11);
        expect(ctrl_scope.progress_denominator).toEqual(0);
    });
    it("should kick off the export process when the export button is clicked",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.export_buildings();

        // assertions
        expect(ctrl_scope.export_state).toEqual("prepare");
        expect(mock_export_service.export_buildings).toHaveBeenCalled();
    });
    it("should show the success page when the data is ready",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.show_success_page("123");
        ctrl_scope.$digest();

        // assertions
        expect(mock_export_service.export_buildings_download).toHaveBeenCalled();
        expect(ctrl_scope.export_state).toEqual("success");
    });
    it("should update the progress bar",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.monitor_progress("123", 1000);
        ctrl_scope.$digest();
        timeout.flush();

        // assertions
        expect(mock_export_service.export_buildings_progress).toHaveBeenCalled();
        expect(ctrl_scope.progress_percentage).toEqual(100);
        expect(ctrl_scope.progress_numerator).toEqual(1000);
        expect(ctrl_scope.progress_denominator).toEqual(1000);
    });
    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.close();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.cancel();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

  
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
/**
 * tests fromNow angularjs filter wrapper of moment.js
 * uses epoch milliseconds as that is what the back-end returns
 */

// create dummy angularJS app to attach filter(s)
var myfromNowFilterApp = angular.module('myfromNowFilterApp', ['fromNow']);

describe("The fromNow filter", function() {
    beforeEach(module('myfromNowFilterApp'));

    it('shows the present time as "a few seconds ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('a few seconds ago');
        })
    );

    it('shows 5 minutes ago as "5 minutes ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 5  * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('5 minutes ago');
        })
    );

    it('shows 4 hours ago as "4 hours ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 4 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('4 hours ago');
        })
    );

    it('shows 24 hours ago as "a day ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 24 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('a day ago');
        })
    );

    it('shows 36 hours ago as "2 days ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 36 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('2 days ago');
        })
    );

    it('shows 1550 hours ago as "2 months ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 1550 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('2 months ago');
        })
    );

    it('defaults to "a few seconds ago" for undefined values',
        inject(function(fromNowFilter) {
            // arrange

            // act

            // assert
            expect(fromNowFilter(undefined)).toBe('a few seconds ago');
            expect(fromNowFilter(null)).toBe('a few seconds ago');
            expect(fromNowFilter("some text")).toBe('a few seconds ago');
            expect(fromNowFilter({})).toBe('a few seconds ago');
            expect(fromNowFilter({time: "not time"})).toBe('a few seconds ago');
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myignoremapApp = angular.module('myignoremapApp', ['ignoremap']);

describe("The ignoremap filter", function() {
    beforeEach(module('myignoremapApp'));
    it('replaces `""` with `------ Ignore Row ------`',
        inject(function(ignoremapFilter) {
            // normal cases
            expect(ignoremapFilter('')).toBe('------ Ignore Row ------');
            expect(ignoremapFilter(' ')).toBe(' ');
            expect(ignoremapFilter('aignoremap')).toBe('aignoremap');
            expect(ignoremapFilter('ignoremap ')).toBe('ignoremap ');
            expect(ignoremapFilter('ok')).toBe('ok');
            expect(ignoremapFilter(undefined)).toBe('------ Ignore Row ------');
            expect(ignoremapFilter(null)).toBe('------ Ignore Row ------');
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: mapping_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, modal_state;
    var mapping_ctrl, mapping_ctrl_scope, modalInstance, labels;
    var timeout, mock_user_service, mock_search_service;



    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, building_services, $timeout, user_service, search_service) {
            controller = $controller;
            scope = $rootScope;
            mapping_ctrl_scope = $rootScope.$new();
            modal_state = "";
            timeout = $timeout;
            mock_user_service = user_service;
            mock_search_service = search_service;

            spyOn(mock_user_service, 'set_default_columns')
                .andCallFake(function(mapped_columns){
                    return undefined;
                });
            spyOn(mock_search_service, 'search_buildings')
                .andCallFake(function(){
                    return [1,2,3];
                });
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_mapping_controller(){
        var mock_datasets = [
            {
                name: "DC 2013 data",
                last_modified: (new Date()).getTime(),
                last_modified_by: "john.s@buildingenergy.com",
                number_of_buildings: 89,
                id: 1
            },
            {
                name: "DC 2014 data",
                last_modified: (new Date()).getTime() -
                    1550 * 60 * 60 * 1000,
                last_modified_by: "gavin.m@buildingenergy.com",
                number_of_buildings: 70,
                id: 2
            }
        ];
        var fake_import_file_payload = {
            "status": "success",
            "import_file": {
                        file_name: "assessor_fun.csv",
                        last_modified: (new Date()).getTime(),
                        last_modified_by: "john.s@buildingenergy.com",
                        source_type: 'AssessorRaw',
                        dataset: mock_datasets[0],
                        id: 1
                    }
        };

        var mock_be_building_columns = [
            'pm_property_id',
            'property_name',
            'property_notes',
            'tax_lot_id',
            'gross_floor_area',
            'My New non-BEDES field'
        ];

        var mock_be_building_types = {
            'gross_floor_area': {
                unit_type: 'float',
                schema: 'BEDES'
            }
        };

        var mock_mapping_suggestions_payload = {
            'status': 'success',
            'suggested_column_mappings': {
                // key(django model attribute): [csv_header1, ... csv_header3]
                'property id': ['pm_property_id', 89],
                'lot number': ['tax_lot_id' , 54]
            },
            "building_columns": mock_be_building_columns,
            "building_column_types": mock_be_building_types
        };

        var mock_raw_column_names = [
            'property id',
            'property_name',
            'property_notes',
            'lot number',
            'lot size'
        ];

        var mock_first_five_rows = [];
        for (var i=0; i < 4; i++) {
            mock_first_five_rows.push({
                'property id': i,
                'property_name': 'Property ' + i,
                'property_notes': 'Nup.',
                'lot number': i * 2,
                'lot size': 454 * i
            });
        }

        mock_first_five_rows.push({
            'property id': '121L',
            'property_name': 'Inconsistent Property',
            'property_notes': 'N/A',
            'lot number': 'N/A',
            'lot size': 45
        });

        var raw_columns_payload = {
            "status": "success",
            "raw_columns": mock_raw_column_names
        };
        var first_five_rows_payload = {
            "status": "success",
            "first_five_rows": mock_first_five_rows
        };
        mapping_ctrl = controller('mapping_controller', {
            $scope: mapping_ctrl_scope,
            import_file_payload: fake_import_file_payload,
            suggested_mappings_payload: mock_mapping_suggestions_payload,
            raw_columns_payload: raw_columns_payload,
            first_five_rows_payload: first_five_rows_payload,
            all_columns: {fields: []},
            building_services: mock_building_services,
            $timeout: timeout
        });
    }

    /*
     * Test scenarios
     */

    it("should have a import_file_payload", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        expect(mapping_ctrl_scope.import_file.dataset.name).toBe("DC 2013 data");
    });

    it("should show suggested mappings and confidence", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        var raw_columns = mapping_ctrl_scope.raw_columns;
        var first_column = raw_columns[0];

        expect(first_column.confidence).toBe(89);
        expect(first_column.suggestion).toBe("Pm Property Id");
    });

    it("should show 'low', 'med', 'high', or '' confidence text", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        var raw_columns = mapping_ctrl_scope.raw_columns;
        var first_column = raw_columns[0];
        expect(first_column.confidence_text()).toBe("high");
        first_column.confidence = 70;
        expect(first_column.confidence_text()).toBe("med");
        first_column.confidence = 35;
        expect(first_column.confidence_text()).toBe("low");
        delete(first_column.confidence);
        expect(first_column.confidence_text()).toBe("");
    });

    it("should validate initial data", function() {
        create_mapping_controller();
        // act
        mapping_ctrl_scope.$digest();
        // assertions
        angular.forEach(mapping_ctrl_scope.raw_columns, function(rc) {
            if (rc.suggestion !== '' && typeof(rc.suggestion) !== "undefined") {
                expect(rc.validity).toBe('valid');
            }
        });
    });

    it("should invalidate bad suggestions", function() {
        // Simulate a change on the tcm, make it fail.
        create_mapping_controller();
        // act
        mapping_ctrl_scope.$digest();
        // assertions
        //
        // We change the suggested mapping for the "property name" column
        // to "gross_floor_area" (which validates as float) to
        // purposesly cause a failing change.
        mapping_ctrl_scope.raw_columns[1].suggestion = 'gross_floor_area';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[1]);
        expect(mapping_ctrl_scope.raw_columns[1].validity).toBe('invalid');

    });

    it("should set td_class appropriately", function() {
        var tcm;

        create_mapping_controller();

        mapping_ctrl_scope.$digest();
        tcm = mapping_ctrl_scope.raw_columns[0];
        var good_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[0]
        );

        // First raw column is mapped up as pm_property_id <-> property_id
        // Any kind of string will be valid.
        expect(good_val).toBe('success');

        // Now set it to one that expects float values.
        // Only one of these will *not* validate.
        mapping_ctrl_scope.raw_columns[0].suggestion = 'gross_floor_area';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[0]);

        tcm = mapping_ctrl_scope.raw_columns[0];
        var warning_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[4]
        );

        expect(warning_val).toBe('warning');

        // We don't want the warning style to be applied to neighboring cells
        // in the same row. Check that the cell next to our invalid one is
        // unstyled (undefined).
        tcm = mapping_ctrl_scope.raw_columns[0];
        var adjacent_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[3]
        );

        expect(adjacent_val).toBe(undefined);

        // Now we're saying the suggestion is to not map.
        // Check that we don't have any class set for this row now.
        mapping_ctrl_scope.raw_columns[0].suggestion = '';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[0]);

        tcm = mapping_ctrl_scope.raw_columns[0];
        var blank_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[4]
        );

        expect(blank_val).toBe('');

    });

    it("should detect duplicates of mapped rows", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // raw_columns[0] and raw_columns[3] should be the only mapped rows
        var column = mapping_ctrl_scope.raw_columns[3];
        var test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

        // Set the property_name tcm's suggestion to the same as
        // the property_id tcm (raw_columns[0])
        column.suggestion = 'Pm Property Id';

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(true);

        // Since we mark both duplicates as duplicates, the other
        // TCM that has the 'pm_property_id' suggestion should also get
        // 'danger' as its duplicate class.
        var other_dup = mapping_ctrl_scope.is_tcm_duplicate(
            mapping_ctrl_scope.raw_columns[0]
        );
        expect(other_dup).toBe(true);

        // Shows that mapped_row is the sole determinant of
        // column ignoring
        column.mapped_row = false;

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

    });

    it("should ignore duplicates of unmapped rows", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // raw_columns[0] and raw_columns[3] should be the only mapped rows
        var column = mapping_ctrl_scope.raw_columns[1];
        var test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

        // Set the property_name tcm's suggestion to the same as
        // the property_id tcm (raw_columns[0])
        column.suggestion = 'Pm Property Id';

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);
    });

    it("should get mapped buildings", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        mapping_ctrl_scope.get_mapped_buildings();
        mapping_ctrl_scope.$digest();

        // assertions
        expect(mapping_ctrl_scope.search.search_buildings).toHaveBeenCalled();
        expect(mock_user_service.set_default_columns).toHaveBeenCalled();
    });

    it("should enbale the 'show & review buildings' button if duplicates are" +
        " not present", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        for (var i = mapping_ctrl_scope.raw_columns.length - 1; i >= 0; i--) {
            mapping_ctrl_scope.change(mapping_ctrl_scope.raw_columns[i]);
        }
        var duplicates_found = mapping_ctrl_scope.duplicates_present();

        // assertions
        expect(duplicates_found).toBe(false);
    });

    it("should disable the 'show & review buildings' button if duplicates " +
        "are present", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        for (var i = mapping_ctrl_scope.raw_columns.length - 1; i >= 0; i--) {
            mapping_ctrl_scope.raw_columns[i].suggestion = "pm_property_id";
            mapping_ctrl_scope.change(mapping_ctrl_scope.raw_columns[i]);
        }
        var duplicates_found = mapping_ctrl_scope.duplicates_present();

        // assertions
        expect(duplicates_found).toBe(true);
    });

    it("should get mappings in an API friendly way", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();
        var mappings = mapping_ctrl_scope.get_mappings();
        expect(mappings.length).toBe(5);
        expect(mappings[0]).toEqual(['Pm Property Id', 'property id']);
        // everything in between is empty since we we're using only
        // suggested mappings.
        expect(mappings[3]).toEqual(['Tax Lot Id', 'lot number']);
    });

    it("should show the 'STEP 2' tab when reviewing mappings", function() {
        // arrange
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // act
        var mappings = mapping_ctrl_scope.get_mapped_buildings();

        // assert
        expect(mapping_ctrl_scope.tabs).toEqual({
            'one_active': false,
            'two_active': true,
            'three_active': false
        });
    });

    it("should show BEDES fields with a checkbox", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assert
        expect(mapping_ctrl_scope.is_suggestion_BEDES('gross_floor_area')).toBe(true);
        expect(mapping_ctrl_scope.is_suggestion_BEDES('Gross Floor Area')).toBe(true);
        expect(mapping_ctrl_scope.is_suggestion_BEDES('My New non-BEDES field')).toBe(false);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: matching_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, delete_called;
    var matching_ctrl, matching_ctrl_scope, modalInstance, labels;


    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, building_services) {
            controller = $controller;
            scope = $rootScope;
            matching_ctrl_scope = $rootScope.$new();

            mock_building_services = building_services;
            spyOn(mock_building_services, "get_PM_filter_by_counts")
                .andCallFake(function(import_file){
                    return $q.when(
                        {
                            "status": "success",
                            "unmatched": 5,
                            "matched": 10
                        }
                    );
                }
            );
            spyOn(mock_building_services, "save_match")
                .andCallFake(function(b1, b2, create){
                    return $q.when(
                        {
                            "status": "success",
                            "child_id": 3
                        }
                    );
                }
            );
            spyOn(mock_building_services, "search_matching_buildings")
                .andCallFake(function(q, number_per_page, current_page, order_by, sort_reverse, 
                                        filter_params, file_id ){
                    
                    switch(filter_params.children__isnull){
                        case undefined:
                            var bldgs = [
                                {
                                    pm_property_id: 1
                                },
                                {
                                    pm_property_id: 2
                                }
                                ,
                                {
                                    pm_property_id: 3
                                }
                            ];
                            break;
                        case false:
                            var bldgs = [
                                {
                                    pm_property_id: 1
                                }
                            ];
                            break;
                        case true:
                            var bldgs = [
                                {
                                    pm_property_id: 3
                                },
                                {
                                    pm_property_id: 4
                                }
                            ];
                            break;
                    }

                    return $q.when(
                        {
                            status: "success",
                            number_returned: buildings_payload.length,
                            number_matching_search: buildings_payload.length,
                            buildings: bldgs
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_detail_controller(){
        var buildings_payload = {
            buildings: [
                {
                    pm_property_id: 1,
                    tax_lot_id: null,
                    custom_id_1: 2,
                    gross_floor_area: 111,
                    matched: true,
                    id: 1,
                    children: [3],
                    coparent: {
                        pm_property_id: null,
                        tax_lot_id: 2,
                        custom_id_1: null,
                        gross_floor_area: 111,
                        id: 2,
                        children: [3]
                    }
                }
            ],
            number_matching_search: 1,
            number_returned: 1
        };
        matching_ctrl = controller('matching_controller', {
            $scope: matching_ctrl_scope,
            buildings_payload: buildings_payload,
            all_columns: {
                fields: [{sort_column: 'pm_property_id'}]
            },
            default_columns: {
                columns: ['pm_property_id']
            },
            import_file_payload: {
                import_file: {
                    id: 1,
                    dataset: {
                        importfiles: [
                            {
                                id: 1,
                                name: "file_1.csv"
                            },
                            {
                                id: 2,
                                name: "file_2.csv"
                            }
                        ]
                    }
                }
            }
        });
    }



    /*
     * Test scenarios
     */

    it("should have a buildings payload with potential matches", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();
        var b = matching_ctrl_scope.buildings[0];

        // assertions
        expect(matching_ctrl_scope.buildings.length).toBe(1);
        expect(b.coparent.children).toEqual(b.children);
    });

    it("should provide to the view scope variables representing the number matched and the number of unmatched buildings", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();

        // assertions
        expect(matching_ctrl_scope.matched_buildings).toEqual(10);
        expect(matching_ctrl_scope.unmatched_buildings).toEqual(5);
    });

    it("should jump back to the matching list when the 'Back to list' button" +
        " is clicked", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.show_building_list = false;
        matching_ctrl_scope.back_to_list();

        // assertions
        expect(matching_ctrl_scope.show_building_list).toEqual(true);
    });

    it("should present an initial state with the matching buildings table",
        function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();

        // assertions
        expect(matching_ctrl_scope.columns).toEqual([{ sort_column : 'pm_property_id' }]);
        expect(matching_ctrl_scope.number_matching_search).toEqual(1);
        expect(matching_ctrl_scope.number_returned).toEqual(1);
        expect(matching_ctrl_scope.num_pages).toEqual(1);
        expect(mock_building_services.get_PM_filter_by_counts).toHaveBeenCalled();
    });
    it("should match a building in the matching list", function() {
        // arrange
        create_dataset_detail_controller();
        var b1, b2;
        b2 = {
            id: 2,
            children: [],
            matched: false
        };
        b1 = {
            id: 1,
            children: [],
            matched: true,
            coparent: b2
        };

        // act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.toggle_match(b1);
        matching_ctrl_scope.$digest();

        // assertions
        expect(mock_building_services.save_match).toHaveBeenCalledWith(b1.id, b2.id, true);
        expect(mock_building_services.get_PM_filter_by_counts).toHaveBeenCalled();
        expect(b1.children[0]).toEqual(3);
    });
    it("Should update the list of buildings correctly when 'Show Matched' is selected", function() {
        //arrange
        create_dataset_detail_controller();

        //act
         matching_ctrl_scope.$digest();
        controller.update_show_filter(controller.SHOW_MATCHED)

        //assertions
        expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(1);
        expect(matching_ctrl_scope.number_returned).toEqual(1);
    });
    it("Should update the list of buildings correctly when 'Show Unmatched' is selected",  function() {
        //arrange
        create_dataset_detail_controller();

        //act
        matching_ctrl_scope.$digest();
        controller.update_show_filter(controller.SHOW_UNMATCHED)

        //assertions
        expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(2);
        expect(matching_ctrl_scope.number_returned).toEqual(2);
    });
    it("Should update the list of buildings correctly when 'Show All' is selected", function() {
        //arrange
        create_dataset_detail_controller();

        //act
        matching_ctrl_scope.$digest();
        controller.update_show_filter(controller.SHOW_ALL)

        //assertions
        expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(3);
        expect(matching_ctrl_scope.number_returned).toEqual(3);
    });



});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: members_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller;
    var ctrl, ctrl_scope, modalInstance;
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          $q,
          organization_service) {
            ctrl = $controller;
            scope = $rootScope;
            ctrl_scope = $rootScope.$new();

            mock_organization_service = organization_service;
            
            spyOn(mock_organization_service, "remove_user")
                .andCallFake(function(user_id, org_id){
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
            spyOn(mock_organization_service, "get_organization_users")
                .andCallFake(function(org){
                    return $q.when(
                        {
                            "status": "success",
                            "users": [{id:1, first_name:"Bob", last_name:"D"}]
                        }
                    );
                }
            );
            spyOn(mock_organization_service, "update_role")
                .andCallFake(function(org_id, user_id, role){
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_members_controller(){
        ctrl = ctrl('members_controller', {
            $scope: ctrl_scope,
            users_payload: {users: [
                {first_name: 'J', last_name: 'S'},
                {first_name: undefined, last_name: null}
            ]},
            organization_payload: {
                organization: {name: 'my org', id: 4}
            },
            auth_payload: {
                auth: {
                    'can_invite_member': true,
                    'can_remove_member': true
                }
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should accepts its payload", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.org).toEqual({name : 'my org', id : 4});
        expect(ctrl_scope.users[0].name).toEqual("J S");
        expect(ctrl_scope.users[1].name).toEqual(" ");
    });
    it("clicking remove should remove a user", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.remove_member({user_id: 2});

        // assertions
        expect(mock_organization_service.remove_user)
            .toHaveBeenCalledWith(2, 4);
        
        ctrl_scope.$digest();
        expect(mock_organization_service.get_organization_users)
            .toHaveBeenCalledWith({org_id: 4});
    });
    it("clicking a new role should update the user's role", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.update_role({user_id: 2, role: "viewer"});

        // assertions
        expect(mock_organization_service.update_role)
            .toHaveBeenCalledWith(2, 4, 'viewer');
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: new_member_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_user_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, user_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        mock_user_service = user_service;
        spyOn(mock_user_service, "add")
            .andCallFake(function(user){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_new_member_controller(){
        ctrl = ctrl('new_member_modal_ctrl', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            organization: {organization_id: 1}
        });
    }

    /*
     * Test scenarios
     */

    it("should set the default role to 'member'", function() {
        // arrange
        create_new_member_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.user.role.value).toEqual("member"); 
    });
    it("should call the user service to add a new user to the org",
        function() {
        // arrange
        create_new_member_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.user.first_name = "JB";
        ctrl_scope.user.last_name = "Smooth";
        ctrl_scope.user.email = "jb.smooth@be.com";
        ctrl_scope.submit_form(true);

        // assertions
        expect(mock_user_service.add)
            .toHaveBeenCalledWith({
                first_name: "JB",
                last_name: "Smooth",
                email: "jb.smooth@be.com",
                role: ctrl_scope.roles[0],
                organization: {
                    organization_id: 1
                }
            });
    });
    
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
/**
 * run_jasmine.js: runs the jasmine JS test runner
 */
(function() {
    var jasmineEnv = jasmine.getEnv();
    jasmineEnv.updateInterval = 1000;

    var htmlReporter = new jasmine.HtmlReporter();

    jasmineEnv.addReporter(htmlReporter);

    jasmineEnv.specFilter = function(spec) {
        return htmlReporter.specFilter(spec);
    };

    var currentWindowOnload = window.onload;

    window.onload = function() {
        if (currentWindowOnload) {
        currentWindowOnload();
        }
        execJasmine();
    };
    function execJasmine() {
        jasmineEnv.execute();
    }
})();

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var searchTestApp = angular.module(
    'searchTestApp', ['BE.seed.service.search']
);

describe("The search_service service", function() {
    var saas, httpBackend, test_url;

    beforeEach(function () {
        module("searchTestApp");
        inject(function (search_service, $httpBackend) {
            saas = search_service;
            httpBackend = $httpBackend;
            httpBackend.when("POST", test_url).respond("ok");
        });

    });

    /**
     * sanitize_params tests
     */
    it('removes null and undefined values from filter_params', function () {
        // arrange
        saas.filter_params = {
          'National Median Site Energy Use__gte': 4,
          'National Median Site Energy Use__lte': null,
          'National Median Source EUI__gte': undefined
        };

        // act
        saas.sanitize_params();

        // assert
        expect(saas.filter_params).toEqual({'National Median Site Energy Use__gte': 4});
    });

    /**
     * search_buildings tests
     */
    it('has sane defaults', function() {
        expect(saas.url).toEqual("");
        expect(saas.error_message).toEqual("");
        expect(saas.alert).toEqual(false);
        expect(saas.buildings).toEqual([]);
        expect(saas.current_page).toEqual(1);
        expect(saas.number_per_page).toEqual(10);
        expect(saas.order_by).toEqual("");
        expect(saas.sort_column).toEqual("tax_lot_id");
        expect(saas.sort_reverse).toEqual(false);
        expect(saas.select_all_checkbox).toEqual(false);
        expect(saas.prev_page_disabled).toEqual(true);
        expect(saas.next_page_disabled).toEqual(true);
        expect(saas.num_pages).toEqual(0);
        expect(saas.query).toEqual("");
        expect(saas.showing).toEqual({
            'start': 1,
            'end': 0
        });
    });

    it('search_buildings uses the argument `query`', function() {
        saas.query = "hotels";
        saas.search_buildings("not hotels");

        expect(saas.query).toEqual("not hotels");
    });
    it('filter search resets the current page', function() {
        // arrange
        saas.current_page = 22;
        spyOn(saas, 'search_buildings');

        // act
        saas.filter_search();

        // assert
        expect(saas.current_page).toEqual(1);
        expect(saas.search_buildings).toHaveBeenCalled();
    });

    it('search_buildings function will default to its query if' +
        ' no query is passed as an argument', function() {
        saas.query = "hotels";
        saas.search_buildings();

        expect(saas.query).toEqual("hotels");
    });

    it('search_buildings hits the set url', function() {
        test_url = "/my-search-url";
        saas.url = test_url;
        saas.search_buildings();
        httpBackend.expectPOST(test_url);
        httpBackend.flush();
    });

    it('search_buildings POSTs the query data as `q`', function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.query = "hotel chains";
        saas.number_per_page = 25;
        saas.order_by = "gross_floor_area";
        saas.sort_reverse = true;
        saas.filter_params = {
            project: '2012 data'
        };

        // act
        saas.search_buildings();

        // assert
        httpBackend.expectPOST(test_url,
            {
                "q": "hotel chains",
                "number_per_page": 25,
                "order_by": "gross_floor_area",
                "sort_reverse": true,
                "filter_params": {
                    "project": "2012 data"
                },
                "page":1
            }
        ).respond(201, "");
        httpBackend.flush();
    });
    it('search_buildings updates its `buildings` model', function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.query = "hotel chains";
        saas.number_per_page = 25;
        saas.order_by = "gross_floor_area";
        saas.sort_reverse = true;
        saas.filter_params = {
            project: '2012 data'
        };

        // act
        saas.search_buildings();

        // assert
        httpBackend.expectPOST(test_url,
            {
                "q": "hotel chains",
                "number_per_page": 25,
                "order_by": "gross_floor_area",
                "sort_reverse": true,
                "filter_params": {
                    "project": "2012 data"
                },
                "page":1
            }
        ).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        expect(saas.buildings).toEqual([
            {
                name: "one",
                id: 1,
                checked: false
            },
            {
                name: "two",
                id: 2,
                checked: false
            }
        ]);
    });
    it('should clear the error and alert after a successful search',
        function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.error_message = "help";
        saas.alert = true;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {
            'buildings': [
                {
                    name: "one",
                    id: 1
                },
                {
                    name: "two",
                    id: 2
                }],
            'number_matching_search': 101
            });
        httpBackend.flush();

        // assert
        expect(saas.alert).toEqual(false);
        expect(saas.error_message).toEqual("");
    });

    /**
     * pagination tests
     */
    it('increments the page when the `next` button is clicked',
        function() {
        // arrange
        saas.num_pages = 1000;
        saas.current_page = 100;
        spyOn(saas, 'search_buildings');
        // act
        saas.next_page();

        // assert
        expect(saas.current_page).toEqual(101);
        expect(saas.search_buildings).toHaveBeenCalled();
        expect(saas.search_buildings.callCount).toEqual(1);

    });
    it('doesn\'t increment past the last page when the `next` button is' +
        ' clicked', function() {
        // arrange
        saas.num_pages = 2;
        saas.current_page = 2;
        spyOn(saas, 'search_buildings');
        // act
        saas.next_page();

        // assert
        expect(saas.current_page).toEqual(2);
        expect(saas.search_buildings).toHaveBeenCalled();
        expect(saas.search_buildings.callCount).toEqual(1);

    });
    it('decrements the page when the `previous` button is clicked',
        function() {
        // arrange
        saas.num_pages = 1000;
        saas.current_page = 100;
        spyOn(saas, 'search_buildings');
        // act
        saas.prev_page();

        // assert
        expect(saas.current_page).toEqual(99);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('does not decrement below the first page when the `previous` button' +
        ' is clicked', function() {
        // arrange
        saas.num_pages = 1;
        saas.current_page = 1;
        spyOn(saas, 'search_buildings');
        // act
        saas.prev_page();

        // assert
        expect(saas.current_page).toEqual(1);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('fetches more or less results per page when a user selects an option' +
        ' from the number per page select',
        function() {
        // arrange
        saas.number_per_page_options_model = 50;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_number_per_page();

        // assert
        expect(saas.number_per_page).toEqual(50);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('updates the number of results displayed text after a successful '+
        'search', function() {
        // standard case
        // page 2 of 3 with 10/page, so should display 11 of 20
        // arrange
        saas.current_page = 2;
        saas.num_pages = 3;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_start_end_paging();

        // assert
        expect(saas.showing.start).toEqual(11);
        expect(saas.showing.end).toEqual(20);
        expect(saas.search_buildings).not.toHaveBeenCalled();
    });
    it('displays the number matching the query if on the last page of results',
        function() {
        // standard case
        // page 3 of 3 with 10/page and 34 results, so should display 21 of 34
        // arrange
        saas.current_page = 3;
        saas.number_matching_search = 34;
        saas.num_pages = 3;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_start_end_paging();

        // assert
        expect(saas.showing.start).toEqual(21);
        expect(saas.showing.end).toEqual(34);
    });
    it('should call update_start_end_paging after a successful search',
        function() {
        // arrange
        spyOn(saas, 'update_start_end_paging');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_start_end_paging).toHaveBeenCalled();
    });
    it('should call update_buttons after a successful search',
        function() {
        // arrange
        spyOn(saas, 'update_buttons');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_buttons).toHaveBeenCalled();
    });
    it('should disable prev paging buttons at the first page',
        function() {
        // arrange
        saas.current_page = 1;
        saas.num_pages = 5;

        // act
        saas.update_buttons();

        // assert
        expect(saas.prev_page_disabled).toEqual(true);
        expect(saas.next_page_disabled).toEqual(false);
    });
    it('should disable next paging buttons at the last page',
        function() {
        // arrange
        saas.current_page = 5;
        saas.num_pages = 5;

        // act
        saas.update_buttons();

        // assert
        expect(saas.prev_page_disabled).toEqual(false);
        expect(saas.next_page_disabled).toEqual(true);
    });
    it('should calculate the number of pages after a successful search',
        function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {
            'buildings': [
                {
                    name: "one",
                    id: 1
                },
                {
                    name: "two",
                    id: 2
                }],
            'number_matching_search': 101
            });
        httpBackend.flush();

        // assert
        expect(saas.number_matching_search).toEqual(101);
        expect(saas.num_pages).toEqual(11);
    });

    /**
     * checkbox logic tests
     */
    it('should select or unselect all the viewed results when the select all' +
        ' checkbox is checked or unchecked', function() {
        // arrange
        saas.selected_buildings = [1,2,3];
        saas.select_all_checkbox = true;
        saas.buildings = [
            {
                checked: false
            },
            {
                checked: true
            }
        ];
        spyOn(saas, 'select_or_deselect_all_buildings').andCallThrough();

        // act
        saas.select_all_changed();

        // assert
        expect(saas.selected_buildings).toEqual([]);
        expect(saas.buildings).toEqual([
                {
                    checked: true
                },
                {
                    checked: true
                }
            ]);
        expect(saas.select_or_deselect_all_buildings).toHaveBeenCalled();
    });
    it('should call select_or_deselect_all_buildings after a search',
        function() {
        // arrange
        spyOn(saas, 'select_or_deselect_all_buildings');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.select_or_deselect_all_buildings).toHaveBeenCalled();
    });
    it('should add a building to the selected list when checked',
        function() {
        // arrange
        var building = {
            id: 5,
            checked: true
        };

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([5]);
    });
    it('should add a building to the selected list when unchecked and the ' +
        'select all checkbox is checked', function() {
        // arrange
        var building = {
            id: 5,
            checked: false
        };
        saas.select_all_checkbox = true;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([5]);
    });
    it('should remove a building to the selected list when unchecked',
        function() {
        // arrange
        var building = {
            id: 5,
            checked: false
        };
        saas.selected_buildings = [5,6,7];
        saas.select_all_checkbox = false;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([6,7]);
    });
    it('should remove a building to the selected list when checked if the ' +
        'select all checkbox is checked', function() {
        // arrange
        var building = {
            id: 5,
            checked: true
        };
        saas.selected_buildings = [5,6,7];
        saas.select_all_checkbox = true;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([6,7]);
    });
    it('should call load_state_from_selected_buildings after a successful ' +
        'search', function() {
        // arrange
        spyOn(saas, 'load_state_from_selected_buildings').andCallThrough();
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.load_state_from_selected_buildings).toHaveBeenCalled();
    });
    it('should call update_results after a successful ' +
        'search', function() {
        // arrange
        var select_or_deselect_all_buildings_time,
            load_state_from_selected_buildings_time;
        spyOn(saas, 'update_results').andCallThrough();
        spyOn(saas, 'select_or_deselect_all_buildings')
            .andCallFake(function() {
                select_or_deselect_all_buildings_time = new Date();
            }
        );
        spyOn(saas, 'load_state_from_selected_buildings')
            .andCallFake(function() {
                // wait for a sec, otherwise both have the same timestamp
                for(var y=0;y<100000;y++){
                    var x = new Date();
                    x = x+y;
                }
                load_state_from_selected_buildings_time = new Date();
            }
        );
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_results).toHaveBeenCalled();
        expect(select_or_deselect_all_buildings_time <
               load_state_from_selected_buildings_time).toBe(true);
    });
    it('check selected buildings successful', function() {
        // arrange
        saas.selected_buildings = [2];
        saas.buildings = [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ];

        // act
        saas.load_state_from_selected_buildings();

        // assert
        expect(saas.buildings[1]).toEqual({
            name: "two",
            id: 2,
            checked: true
        });
    });
    it('should generate columns', function() {
        // arrange
        var all_columns, column_headers, columns;
        all_columns = [
            {
                sort_column: "name"
            },
            {
                sort_column: "id"
            }
        ];
        column_headers = ["id"];
        saas.sort_column = "something else";
        saas.update_results({});
        // act
        columns = saas.generate_columns(
            all_columns, column_headers, saas.column_prototype
        );

        // assert that columns are extended off the prototype and only have
        // "id"
        expect(columns.length).toEqual(1);
        expect(columns[0].sort_column).toEqual("id");
        expect(columns[0].is_unsorted()).toEqual(true);
        saas.sort_column = "id";
        expect(columns[0].is_unsorted()).toEqual(false);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: settings_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller;
    var ctrl, ctrl_scope, modalInstance;
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          $q,
          organization_service) {
            ctrl = $controller;
            scope = $rootScope;
            ctrl_scope = $rootScope.$new();

            mock_organization_service = organization_service;
            
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_settings_controller(){
        ctrl = ctrl('settings_controller', {
            $scope: ctrl_scope,
            all_columns: {fields: [
                {checked: false, title: 'PM Property ID', sort_column: 'pm_property_id'},
                {checked: false, title: 'G', sort_column: 'g'},
                {checked: false, title: "Gross Floor Area", sort_column: 'gross_floor_area'}
            ]},
            organization_payload: {
                organization: {name: 'my org', id: 4}
            },
            query_threshold_payload: {
                query_threshold: 10
            },
            shared_fields_payload: {
                shared_fields: [
                    {
                        title: "PM Property Id",
                        sort_column: "pm_property_id"
                    }
                ],
                public_fields: [
                {
                    title: "Gross Floor Area",
                    sort_column: "gross_floor_area"
                }]
            },
            auth_payload: {
                auth: {
                    'is_owner': true,
                    'is_parent_org_owner': false
                }
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should accepts its payload", function() {
        // arrange
        create_settings_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.org).toEqual({
            name : 'my org',
            id : 4,
            query_threshold: 10
        });
        expect(ctrl_scope.fields[0].checked).toEqual(true);
        expect(ctrl_scope.fields[1].checked).toEqual(false);
        expect(ctrl_scope.fields[0].title).toEqual('PM Property ID');
    });
    it("should select all", function() {
        // arrange
        create_settings_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.controls.select_all = true;
        ctrl_scope.select_all_clicked();
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.infinite_fields[0].checked).toEqual(true);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myStripFilterApp = angular.module('myStripFilterApp', ['stripImportPrefix']);

describe("The stripImportPrefix filter", function() {
    beforeEach(module('myStripFilterApp'));
    it('Strips out the import prefix from building ids',
        // e.g. remove the 'IMP12-' from the id 'IMP12-1321/123'
        inject(function(stripImportPrefixFilter) {
            // normal cases
            expect(stripImportPrefixFilter('IMP134-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP134555-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP1-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP0-134')).toBe('134');
            // deals with `-`
            expect(stripImportPrefixFilter('IMP134-abc-dev')).toBe('abc-dev');
            // deals with `/`
            expect(stripImportPrefixFilter('IMP134-00/11')).toBe('00/11');
            // only strips first prefix
            expect(stripImportPrefixFilter('IMP134-IMP134-123')).toBe('IMP134-123');
        })
    );
    it("Does not strip out anything if there is not a prefix",
        inject(function(stripImportPrefixFilter) {
            // normal cases
            expect(stripImportPrefixFilter('123-123')).toBe('123-123');
            expect(stripImportPrefixFilter('0123/123')).toBe('0123/123');
        })
    );
    it("Is case sensitive to the import prefix",
        inject(function(stripImportPrefixFilter) {
            expect(stripImportPrefixFilter('imp123-abc')).toBe('imp123-abc');
            expect(stripImportPrefixFilter('iMp123-abc')).toBe('iMp123-abc');
            expect(stripImportPrefixFilter('iMP123-abc')).toBe('iMP123-abc');
        })
    );
    it("Handles undefined or null inputs",
        inject(function(stripImportPrefixFilter) {
            expect(stripImportPrefixFilter(undefined)).toBe(undefined);
            expect(stripImportPrefixFilter(null)).toBe(null);
        })
    );
    it("Only strips out the prefix if it has at least one digit and a hyphen",
        inject(function(stripImportPrefixFilter) {
            // must have the 'IMP' folowed by a digit then a hyphen
            expect(stripImportPrefixFilter('IMP-123')).toBe('IMP-123');
            expect(stripImportPrefixFilter('IMP1123')).toBe('IMP1123');
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myTitleCaseApp = angular.module('myTitleCaseApp', ['titleCase']);

describe("The TitleCase filter", function() {
    beforeEach(module('myTitleCaseApp'));
    it('Strips out ``_`` characters from strings and capitalizes the rest',
        inject(function(titleCaseFilter) {
            // normal cases
            expect(titleCaseFilter('super_data')).toBe('Super Data');
            expect(titleCaseFilter('super_data_45')).toBe('Super Data 45');
            expect(titleCaseFilter(undefined)).toBe(undefined);
            expect(titleCaseFilter(null)).toBe(null);
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myTypedNumberFilterApp = angular.module('myTypedNumberFilterApp', ['typedNumber']);

describe("The typedNumber filter", function() {
    beforeEach(module('myTypedNumberFilterApp'));
    it('should parse strings as strings and return them',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('tester')).toBe('tester');
        })
    );
    it('should parse strings as strings and return them, even if they look like numbers',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.1456')).toBe('123.1456');
        })
    );

    it('should parse numbers as numbers and return them',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.00001', 'number')).toBe("123");
        })
    );

    it('should allow the user to set the number of sig digits',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.321', 'number', 'not_year', 1)).toBe("123.3");
        })
    );

    it('should add commas to number greater than 999',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123456789', 'number', 'not_year', 0)).toBe("123,456,789");
        })
    );

    it('should parse year_built and not add commas',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('1946', 'number', 'year_built', 1)).toBe("1946");
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var validationTestApp = angular.module(
    'validationTestApp', ['mappingValidatorService']
);

describe("The MappingValidatorService", function() {
    var mvs;

    beforeEach(function () {
        module("validationTestApp");
        inject(function (mappingValidatorService) {
            mvs = mappingValidatorService;

        });

    });

    it('validates good string, float and date data', function() {
        // normal cases
        // Here ``type`` is undefined. Should still work.
        var str_data = ['Fun', 'fun2', 'fun3', 'fun4'];
        var float_data = ['12.34', '144.5', '234'];
        var date_data = ['2014/02/02', '03/13/2013', '03-14-2004'];

        expect(mvs.validate(str_data)).toEqual([]);
        expect(mvs.validate(float_data, 'float')).toEqual([]);
        expect(mvs.validate(date_data, 'date')).toEqual([]);
    });

    it('recognizes semivalid data', function() {
        // Cases where the data is /almost/ right.
        var float_data = ['12.34', '144.5', 'NaN'];
        var date_data = ['2014/02/02', 'huh?', '03-14-2004'];
        expect(mvs.validate(float_data, 'float')).toEqual(['NaN']);
        expect(mvs.validate(date_data, 'date')).toEqual(['huh?']);
    });

    it('recognizes invalid data', function() {
        // Cases where the data is *all* wrong.
        var float_data = ['', 'not a float', 'NaN'];
        var date_data = ['', 'huh?', 'what?'];
        // Cases where the data are correct.
        var good_float_data = ['12.34', '144.5', '234'];
        var good_date_data = ['2014/02/02', '03/13/2013', '03-14-2004'];

        // Data is wrong
        expect(mvs.validate(float_data, 'float')).toEqual(float_data);
        expect(mvs.validate(date_data, 'date')).toEqual(date_data);

        // Type is wrong
        // N.B. we use semivalid here, because Date is pretty forgiving w/ nums.
        expect(mvs.validate(good_float_data, 'date')).toEqual(['12.34']);
        expect(mvs.validate(good_date_data, 'float')).toEqual(good_date_data);


    });

});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// taken from the angularjs testing page
// http://docs.angularjs.org/guide/dev_guide.unit-testing

// create dummy angularJS app to attach filter(s)
var myBELabelDirectiveApp = angular.module('myBELabelDirectiveApp', ['beLabel']);

describe("The beLabel directive", function() {
    var $compile;
    var $rootScope;
    beforeEach(module('myBELabelDirectiveApp'));
    // Store references to $rootScope and $compile
    // so they are available to all tests in this describe block
    beforeEach(inject(function(_$compile_, _$rootScope_){
      // The injector unwraps the underscores (_) from around the parameter names when matching
      $compile = _$compile_;
      $rootScope = _$rootScope_;
    }));

    it('Replaces the element with the appropriate content', function() {
        // Compile a piece of HTML containing the directive
        var element = $compile('<be-label name="compliant" color="blue"></be-label>')($rootScope);
        // fire all the watches
        $rootScope.$digest();
        // Check that the compiled element contains the templated content
        expect(element.hasClass('label-primary')).toBe(true);
        expect(element.hasClass('label')).toBe(true);
        expect(element.html()).toContain("compliant");
    });

        // 'red': 'danger',
        // 'gray': 'default',
        // 'orange': 'warning',
        // 'green': 'success',
        // 'blue': 'primary',
        // 'light blue': 'info'
    it('Maps colors to semantic bootstrap class names', function() {
        var element = $compile('<be-label name="compliant" color="red"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-danger')).toBe(true);

        element = $compile('<be-label name="compliant" color="gray"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-default')).toBe(true);

        element = $compile('<be-label name="compliant" color="orange"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-warning')).toBe(true);

        element = $compile('<be-label name="compliant" color="green"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-success')).toBe(true);

        element = $compile('<be-label name="compliant" color="blue"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-primary')).toBe(true);

        element = $compile('<be-label name="compliant" color="light blue"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-info')).toBe(true);
    });


});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// taken from the angularjs testing page
// http://docs.angularjs.org/guide/dev_guide.unit-testing

// create dummy angularJS app to attach filter(s)
var myBEUploaderDirectiveApp = angular.module('myBEUploaderDirectiveApp', ['beUploader']);

describe("The beUploader directive", function() {
    var g_message, g_file, g_progress;
    var $compile;
    var $rootScope;
    var uploader_html = '<div be-uploader sourcetype="assessor" importrecord="5" buttontext="Upload your building list .csv file" eventfunc="uploaderfunc(message, filename, progress)" ng-hide="uploader.in_progress"></div>';
    beforeEach(module('myBEUploaderDirectiveApp'));
    // Store references to $rootScope and $compile
    // so they are available to all tests in this describe block
    beforeEach(inject(function(_$compile_, _$rootScope_){
      // The injector unwraps the underscores (_) from around the parameter names when matching
      $compile = _$compile_;
      $rootScope = _$rootScope_;
      $rootScope.eventfunc = function (fine_object) {
        console.log({fin: fine_object});
        g_message = fine_object.message;
        g_file = fine_object.file;
        g_progress = fine_object.progress;
      };
      window.BE = window.BE || {};
      window.BE.FILE_UPLOAD_DESTINATION = 'S3';
    }));

    it('Creates the fineuploader element', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        
        // act
        $rootScope.$digest();

        // assert
        expect(element.html()).toContain("qq-uploader");
        expect(element.html()).toContain("qq-upload-button");
    });

    it('Contains the buttontext specified', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);

        // act
        $rootScope.$digest();

        // assert
        expect(element.html()).toContain("Upload your building list .csv file");
    });

    it('Only allows one file to be uploaded at a time', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");

        // act
        $rootScope.$digest();

        // assert
        expect(func._options.multiple).toBe(false);
    });

    it('Uses the callback function for invalid file types', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.jpeg");

        // act
        $rootScope.$digest();
        func._options.showMessage("there was an invalid extension. Valid extension(s): .csv");


        // assert
        expect(g_message).toBe("invalid_extension");
    });

    it('Uses the callback function to share its state: upload started',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';
        
        // act
        $rootScope.$digest();
        func._options.callbacks.onSubmitted(1, filename);


        // assert
        expect(g_message).toBe("upload_submitted");
        expect(g_file.filename).toBe(filename);
    });

    it('Uses the callback function to share its state: in progress',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';
        var loaded = 10;
        var total = 100;
        
        // act
        $rootScope.$digest();
        func._options.callbacks.onProgress(1, filename, loaded, total);


        // assert
        expect(g_message).toBe("upload_in_progress");
        expect(g_file.filename).toBe(filename);
        expect(g_progress.loaded).toBe(loaded);
        expect(g_progress.total).toBe(total);
    });

    it('Uses the callback function to share its state: complete',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';

        
        // act
        $rootScope.$digest();
        func._options.callbacks.onComplete(1, filename, {success: true});


        // assert        
        expect(g_message).toBe("upload_complete");
        expect(g_file.filename).toBe(filename);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: building_detail_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, ngFilter, delete_called;
    var building_detail_ctrl, building_detail_ctrl_scope, modalInstance, labels;
    var mock_building_services, mock_project_service;
    var mock_building;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          urls,
          $q,
          building_services,
          project_service,
          $filter) {
            controller = $controller;
            scope = $rootScope;
            ngFilter = $filter;
            building_detail_ctrl_scope = $rootScope.$new();
            modal_state = "";
            delete_called = false;

            // mock the building_services factory methods used in the controller
            // and return their promises
            mock_building_services = building_services;
            mock_project_service = project_service;

            spyOn(mock_project_service, "get_project")
                .andCallFake(function(project_slug){
                    return $q.when(
                        {
                            "status": "success",
                            "project": {
                                id: 33,
                                name: "test project",
                                slug: project_slug
                            }
                        }
                    );
                }
            );
            spyOn(mock_project_service, "get_labels")
                .andCallFake(function(){
                    return $q.when(
                        {
                            "status": "success",
                            "labels": [{
                                id: 44,
                                name: "bad label",
                                color: "red"
                            }]
                        }
                    );
                }
            );
            spyOn(mock_project_service, "update_project_building")
                .andCallFake(function(building_id, project, label){
                    return $q.when(
                        {
                            "status": "success",
                            "approver": "bob doe",
                            "approved_date": "01/01/2012"
                        }
                    );
                }
            );
            spyOn(mock_building_services, "update_building")
                .andCallFake(function (building, org_id){
                    mock_building = building;
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_building_detail_controller(){
        var fake_building = {
            id: 511,
            pk: 511,
            gross_floor_area: 123456,
            gross_floor_area_source: 2,
            city: "DC",
            city_source: 4,
            tax_lot_id: "11/22",
            tax_lot_id_source: 3,
            extra_data: {
                'some other key': 12344,
                'some other key that is not in a parent': 223
            },
            extra_data_sources: {
                'some other key': 2,
                'some other key that is not in a parent': 3
            },
            created: "at some point"
        };
        var fake_imported_buildings = [
            {
                id: 2,
                pk: 2,
                gross_floor_area: 123456,
                gross_floor_area_source: null,
                city: "Washington, DC",
                city_source: null,
                extra_data: {
                    'some other key': 123,
                    'some other key that is not in a child': 333,
                    'some floor area': 444
                },
                extra_data_sources: {
                    'some other key': null,
                    'some other key that is not in a child': 111,
                    'some floor area': 444
                },
                created: "test"
            },
            {
                id: 3,
                pk: 3,
                gross_floor_area: 2111111,
                gross_floor_area_source: null,
                city: "Washington",
                city_source: null,
                tax_lot_id: "11/22",
                tax_lot_id_source: null,
                extra_data: {
                    'make it four': 4
                },
                extra_data_sources: {
                    'make it four': null
                }
            },{
                id: 4,
                pk: 4,
                gross_floor_area: 2111111,
                gross_floor_area_source: null,
                city: "Washington",
                city_source: null,
                tax_lot_id: "11/22",
                tax_lot_id_source: null,
                extra_data: {
                    'make it four': 5
                },
                extra_data_sources: {
                    'make it four': null
                }
            }
        ];
        var fake_payload = {
            "status": "success",
            "building": fake_building,
            "imported_buildings": fake_imported_buildings,
            "projects": [],
            "user_org_id": 42
        };
        var fake_all_columns = [{
            "title": "PM Property ID",
            "sort_column": "pm_property_id",
            "class": "is_aligned_right",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Tax Lot ID",
            "sort_column": "tax_lot_id",
            "class": "is_aligned_right",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Custom ID 1",
            "sort_column": "custom_id_1",
            "class": "is_aligned_right whitespace",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Property Name",
            "sort_column": "property_name",
            "class": "",
            "title_class": "",
            "type": "string",
            "field_type": "building_information",
            "sortable": true,
            "checked": false
        }];
        building_detail_ctrl = controller('building_detail_controller', {
            $scope: building_detail_ctrl_scope,
            $routeParams: {
                building_id: 1,
                project_id: 2
            },
            building_payload: fake_payload,
            all_columns: {
                fields: fake_all_columns
            },
            audit_payload: {
                audit_logs: []
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should have an building payload", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.building.id).toBe(511);
        expect(building_detail_ctrl_scope.imported_buildings[0].id).toBe(2);
    });

    it("should get labels on load", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.labels[0].id).toBe(44);
        expect(building_detail_ctrl_scope.labels[0].name).toBe("bad label");
        expect(building_detail_ctrl_scope.labels[0].color).toBe("red");
    });

    it("should highlight the active project", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.is_active_project({id:33}))
        .toBe(true);
        expect(building_detail_ctrl_scope.is_active_project({id:34}))
        .toBe(false);
        building_detail_ctrl_scope.project = undefined;
        expect(building_detail_ctrl_scope.is_active_project({id:34}))
        .toBe(false);
    });

    it("should make a copy of building while making edits", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.save_building_state();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;

        // assertions
        expect(building_detail_ctrl_scope.building_copy.gross_floor_area)
        .toBe(123456);
    });
    it("should restore the copy of building if a user clicks cancel",
        function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.save_building_state();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;
        building_detail_ctrl_scope.restore_building();

        // assertions
        expect(building_detail_ctrl_scope.building.gross_floor_area)
        .toBe(123456);
        expect(building_detail_ctrl_scope.building.edit_form_showing).toBe(false);
    });
    it("should save a building when a user clicks the save button", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;
        building_detail_ctrl_scope.save_building();

        // assertions
        expect(mock_building_services.update_building)
        .toHaveBeenCalledWith(building_detail_ctrl_scope.building, 42);
        expect(mock_building.gross_floor_area).toEqual(43214);
    });
    it("should show a default label if a building doesn't have one", function() {
        // arrange
        create_building_detail_controller();
        var building_with_label = {
            label: {
                name: "hello",
                label: "success"
            }
        };
        var building_without_label = {};
        var label_with, label_without;

        // act
        building_detail_ctrl_scope.$digest();
        label_with = building_detail_ctrl_scope.get_label(building_with_label);
        label_without = building_detail_ctrl_scope.get_label(building_without_label);

        // assertions
        expect(label_with).toEqual({
                name: "hello",
                label: "success"
            });
        expect(label_without).toEqual({
                name: "Add Label",
                label: "default"
            });
    });

    it("should show a project or buildings breadcrumb", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.user.project_slug = "project_1";

        // assertions
        expect(building_detail_ctrl_scope.is_project()).toEqual(true);
        building_detail_ctrl_scope.user.project_slug = undefined;
        expect(building_detail_ctrl_scope.is_project()).toEqual(false);

    });
    it("should show the default projects table if a user has no compliance" +
        " projects", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.user.has_projects()).toEqual(false);
        building_detail_ctrl_scope.projects = [{id: 1, name: "a"}];
        expect(building_detail_ctrl_scope.user.has_projects()).toEqual(true);

    });

    it("should set only building attribute to master, not ids or children", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.is_valid_key('id')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('pk')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('pk_source')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key(' extra_data ')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('gross_floor_area'))
          .toEqual(true);
    });
    it("should update a project-building label", function() {
        // arrange
        create_building_detail_controller();
        var project = {
            id: 2,
            building: {}
        };

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.update_project_building(project,
            {
                name: "label name",
                color: "red"
            });
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(mock_project_service.update_project_building).toHaveBeenCalled();
        expect(project.building.approver).toEqual("bob doe");
        expect(project.building.approved_date).toEqual("01/01/2012");
        expect(project.building.label.name).toEqual("label name");
        expect(project.building.label.color).toEqual("red");

    });
    it("should set a field as source when clicked", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[0].is_master = true;
        expect(building_detail_ctrl_scope.building.gross_floor_area_source)
          .not.toEqual(building_detail_ctrl_scope.building.id);
        building_detail_ctrl_scope.set_self_as_source('gross_floor_area');
        building_detail_ctrl_scope.set_self_as_source('some other key', true);
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.building.gross_floor_area_source)
          .toEqual(building_detail_ctrl_scope.building.id);
        expect(building_detail_ctrl_scope.imported_buildings[0].is_master)
          .toEqual(false);
    });
    it("should set a column as the dominant source when clicked", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[1].is_master = true;
        building_detail_ctrl_scope.make_source_default(
            building_detail_ctrl_scope.imported_buildings[0]);
        building_detail_ctrl_scope.$digest();

        // assertions
        var b = building_detail_ctrl_scope.building,
            i = building_detail_ctrl_scope.imported_buildings[0],
            i_other = building_detail_ctrl_scope.imported_buildings[1];

        expect(b.gross_floor_area_source).toEqual(i.id);
        expect(b.id).not.toEqual(i.id);
        expect(b.pk).not.toEqual(i.id);
        expect(b.city).toEqual(i.city);
        expect(b.city_source).toEqual(i.id);
        expect(b.tax_lot_id).toEqual("11/22");
        expect(b.tax_lot_id_source).toEqual(i_other.id);
        expect(b.extra_data['some other key']).toEqual(123);
        expect(b.extra_data_sources['some other key']).toEqual(i.id);
        expect(b.extra_data['some other key that is not in a child']).toEqual(333);
        expect(b.extra_data_sources['some other key that is not in a child']).toEqual(i.id);
        expect(b.extra_data['some other key that is not in a parent']).toEqual(223);
        expect(b.extra_data_sources['some other key that is not in a parent']).toEqual(i_other.id);
        expect(b.created).toEqual("at some point");

        expect(i.is_master).toEqual(true);
        expect(i_other.is_master).toEqual(false);
    });
    it("should set the master building value when parent's value is clicked",
        function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[1].is_master = true;
        building_detail_ctrl_scope.set_building_attribute(
            building_detail_ctrl_scope.imported_buildings[0], 'city');
        building_detail_ctrl_scope.set_building_attribute(
            building_detail_ctrl_scope.imported_buildings[0], 'some other key', true);
        building_detail_ctrl_scope.$digest();

        // assertions
        var b = building_detail_ctrl_scope.building,
            i = building_detail_ctrl_scope.imported_buildings[0],
            i_other = building_detail_ctrl_scope.imported_buildings[1];

        expect(b.id).not.toEqual(i.id);
        expect(b.pk).not.toEqual(i.id);
        expect(b.city).toEqual(i.city);
        expect(b.city_source).toEqual(i.id);
        expect(b.tax_lot_id).toEqual("11/22");
        expect(b.tax_lot_id_source).toEqual(i_other.id);
        expect(b.extra_data['some other key']).toEqual(123);
        expect(b.extra_data_sources['some other key']).toEqual(i.id);

        expect(i.is_master).toEqual(false);
        expect(i_other.is_master).toEqual(false);
    });

    it("should display all the data within all the buildings", function() {
        // arrange
        create_building_detail_controller();
        var keys;

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        var edc = building_detail_ctrl_scope.data_columns;

        // should not duplicate keys
        expect(edc.length).toEqual(8);
        keys = edc.map(function ( d ) {
            return d.key;
        });
        expect(keys.indexOf('make it four')).toEqual(4);
    });

    it("should display Floor Areas", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.$digest();

        // assertions
        var area_fields = building_detail_ctrl_scope.floor_area_fields;
        expect(area_fields.length).toEqual(1);
    });

    it("should display Floor Areas with number", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.get_number("")).toEqual(0);
        expect(building_detail_ctrl_scope.get_number("123,123,123")).toEqual(123123123);
        expect(building_detail_ctrl_scope.get_number("123,123,123.123")).toEqual(123123123.123);
        expect(building_detail_ctrl_scope.get_number("-123,123,123")).toEqual(-123123123);
        expect(building_detail_ctrl_scope.get_number(-123123123)).toEqual(-123123123);


    });
});

describe("controller: concat_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var scope, controller, modal_state;
    var edit_ctrl, concat_modal_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label, mock_mapping_service, mock_matching_service;
    var global_step = 1;
    var global_dataset = {};

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
            $controller, $rootScope, $modal, urls, $q
        ) {
            controller = $controller;
            scope = $rootScope;
            concat_modal_ctrl_scope = $rootScope.$new();
            concat_modal_ctrl_scope.concat_columns = [];
            modal_state = "";
        }
    ));

    var mock_building_column_types = [
        'address1', 'city', 'state', 'postal_code'
    ];

    var mock_raw_columns = [
        {
            name: 'Address',
            suggestion: 'address1',
            confidence: 1,
            raw_data: [
                '234 Database way',
                '23444 Huh hwy',
                '23444 Huh hwy',
                '23444 Huh hwy',
                '1223 face pl.'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        },
        {
            name: 'City',
            suggestion: 'city',
            confidence: 1,
            raw_data: [
                'Mega City', 'Mega City', 'Mega City', 'Mega City', 'Mega City'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        },
        {
            name: 'Zip',
            suggestion: '',
            confidence: 0,
            raw_data: [
                '234233', '234233', '234233', '234233', '234233'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        }
    ];

    // this is outside the beforeEach so it can be configured by each unit test
    function create_concat_modal_controller(){
        edit_ctrl = controller('concat_modal_ctrl', {
            $scope: concat_modal_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            building_column_types: mock_building_column_types,
            raw_columns: mock_raw_columns
        });
    }

    /*
     * Test scenarios
     */

    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.close_concat_modal();
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should mangle scope appropriately during concatenation", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(3);

        // arrange
        concat_modal_ctrl_scope.concat_columns =
            concat_modal_ctrl_scope.raw_columns.slice(0);
        concat_modal_ctrl_scope.raw_columns = [];

        // act
        concat_modal_ctrl_scope.$digest();
        concat_modal_ctrl_scope.save_concat();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(1);
        expect(
            concat_modal_ctrl_scope.raw_columns[0].is_concatenated
        ).toEqual(true);
    });

    it("should modify the raw_data of our modified TCM correctly", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(3);

        // arrange
        concat_modal_ctrl_scope.concat_columns =
            concat_modal_ctrl_scope.raw_columns.slice(0);
        concat_modal_ctrl_scope.raw_columns = [];

        // act
        concat_modal_ctrl_scope.$digest();
        concat_modal_ctrl_scope.save_concat();

        var expected_raw = [
            '234 Database way Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '1223 face pl. Mega City 234233'
        ];

        // assertions
        expect(
            concat_modal_ctrl_scope.raw_columns[0].raw_data
        ).toEqual(expected_raw);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: create_organization_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_organization_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, organization_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        mock_organization_service = organization_service;
        spyOn(mock_organization_service, "create_sub_org")
            .andCallFake(function(org, sub_org){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_organization_modal_ctrl(){
        ctrl = ctrl('create_organization_modal_ctrl', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            organization: {organization_id: 1}
        });
    }

    /*
     * Test scenarios
     */

    it("should call the organization service to add a new sub_org",
        function() {
        // arrange
        create_organization_modal_ctrl();

        // act
        ctrl_scope.$digest();
        ctrl_scope.sub_org.name = "my shiny new org";
        ctrl_scope.sub_org.email = "jb.smooth@be.com";
        ctrl_scope.submit_form(true);

        // assertions
        expect(mock_organization_service.create_sub_org)
            .toHaveBeenCalledWith(
                {
                    organization_id: 1
                },
                {
                    name: "my shiny new org",
                    email: "jb.smooth@be.com"
                }
            );
    });
    
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: data_upload_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_uploader_service, scope, controller, modal_state;
    var edit_ctrl, data_upload_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label, mock_mapping_service, mock_matching_service;
    var global_step = 1;
    var global_dataset = {};
    var return_labels = [
        {
            "name": 'compliant',
            "color": 'green',
            "id": 1
        },
        {
            "name": "new label",
            "color": "blue",
            "id": 2
        }
    ];

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, uploader_service, mapping_service, matching_service) {
            controller = $controller;
            scope = $rootScope;
            data_upload_ctrl_scope = $rootScope.$new();
            modal_state = "";

            // mock the uploader_service factory methods used in the controller
            // and return their promises
            mock_uploader_service = uploader_service;
            mock_mapping_service = mapping_service;
            mock_matching_service = matching_service;
            spyOn(mock_uploader_service, "get_AWS_creds")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "AWS_CLIENT_ACCESS_KEY": "123",
                            "AWS_UPLOAD_BUCKET_NAME": "test-bucket"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "check_progress")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "progress": "25.0"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "create_dataset")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "id": 3,
                                "name": dataset_name

                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error",
                                "message": "name already in use"
                            }
                        );
                    }
                }
            );
            spyOn(mock_uploader_service, "save_raw_data")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "file_id": 3
                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error"
                            }
                        );
                    }
                }
            );
            spyOn(mock_mapping_service, "start_mapping")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "file_id": 3
                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error"
                            }
                        );
                    }
                }
            );
            spyOn(mock_matching_service, "start_system_matching")
            .andCallFake(function(file_id){
                // return $q.reject for error scenario
                return $q.when(
                    {
                        "status": "success",
                        "file_id": 3
                    }
                );
            });

        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_data_upload_modal_controller(){
        edit_ctrl = controller('data_upload_modal_ctrl', {
            $scope: data_upload_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            step: global_step,
            dataset: global_dataset
        });
    }

    /*
     * Test scenarios
     */

    it("should close the modal when the close function is called", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.close();
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel function is called", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.cancel();
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

    it("should start at the step provided", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(1);

        // arrange
        global_step = 2;
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(2);
    });

    it("should goto different steps", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var step;
        step = 2;
        data_upload_ctrl_scope.goto_step(step);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(step);
    });

    it("disables the 'Name it' button if no text is entered", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(true);
    });
    it("disables the 'Name it' button if no text is entered, then cleared",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.dataset.name = undefined;
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(true);
    });
    it("enables the 'Name it' button if text is entered", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.dataset.name = "my dataset name";
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(false);
    });
    it("should show an alert if the dataset name is already in use",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.create_dataset("fail");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.alert).toBe(true);
    });
    it("should not show an alert if the dataset name is not already in use",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.create_dataset("my shiny new dataset");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.alert).toBe(false);
    });
    it("after creating a dataset, stores the dataset id", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var ds_name = "my shiny new dataset";
        data_upload_ctrl_scope.create_dataset(ds_name);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.id).toBe(3);
        expect(data_upload_ctrl_scope.dataset.name).toBe(ds_name);
    });
    it("after uploading a file, stores the file id", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var message, filename;
        message = "upload_complete";
        filename = "file1.csv";

        // act
        data_upload_ctrl_scope.uploaderfunc(message, {
            filename: filename,
            file_id: 20140313
        });
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.import_file_id).toBe(20140313);
    });
    it("should show an invalid extension alert if a file with an invalid" +
        "extension is loaded", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.uploaderfunc("invalid_extension");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.invalid_extension_alert)
            .toBe(true);
    });
    it("should hide the upload button after the user selects a file",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename;
        message = "upload_submitted";
        filename = "file1.csv";

        // act
        data_upload_ctrl_scope.uploaderfunc(message, {filename: filename});
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.filename).toBe(filename);
        expect(data_upload_ctrl_scope.uploader.in_progress).toBe(true);
    });
    it("should show the progressbar during upload",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename, progress;
        message = "upload_in_progress";
        filename = "file1.csv";
        progress = {
            loaded: 10,
            total: 100
        };

        // act
        data_upload_ctrl_scope.uploaderfunc(message, filename, progress);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.in_progress).toBe(true);
        expect(data_upload_ctrl_scope.uploader.progress).toBe(2.5);
    });
    it("should start saving the energy data when the file has been uploaded",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename;
        message = "upload_complete";
        filename = "file1.csv";
        data_upload_ctrl_scope.step.number = 4;

        // act
        data_upload_ctrl_scope.uploaderfunc(message, filename);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.status_message)
            .toBe("saving energy data");
    });

    it("should take an dataset payload", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.name).toBe("");
        expect(data_upload_ctrl_scope.dataset.filename).toBe("");
        expect(data_upload_ctrl_scope.dataset.id).toBe(0);
    });

    it("should extend a custom dataset payload", function() {
        // arrange
        global_dataset = {
            id: 100,
            filename: "seed_data.csv",
            name: "Compliance Project"
        };
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.name).toBe("Compliance Project");
        expect(data_upload_ctrl_scope.dataset.filename).toBe("seed_data.csv");
        expect(data_upload_ctrl_scope.dataset.id).toBe(100);
        expect(data_upload_ctrl_scope.dataset.alert).toBe(false);

    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: dataset_detail_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, ngFilter, delete_called;
    var dataset_detail_ctrl, dataset_detail_ctrl_scope, modalInstance, labels;

    

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, dataset_service, $filter) {
            controller = $controller;
            scope = $rootScope;
            ngFilter = $filter;
            dataset_detail_ctrl_scope = $rootScope.$new();
            modal_state = "";
            delete_called = false;

            // mock the dataset_service factory methods used in the controller
            // and return their promises
            mock_dataset_service = dataset_service;
            spyOn(mock_dataset_service, "get_dataset")
                .andCallFake(function(dataset_id){
                    // return $q.reject for error scenario
                    var fake_importfiles = [
                        {
                            name: "DC_CoveredBuildings_50k.csv",
                            number_of_buildings: 511,
                            number_of_mappings: 511,
                            number_of_cleanings: 1349,
                            source_type: "Assessed Raw",
                            number_of_matchings: 403
                        },
                        {
                            name: "DC_ESPM_Report.csv",
                            number_of_buildings: 511,
                            number_of_matchings: 403,
                            source_type: "Portfolio Raw"
                        }
                    ];
                    var fake_dataset = {
                        name: "DC 2013 data",
                        last_modified: (new Date()).getTime(),
                        last_modified_by: "john.s@buildingenergy.com",
                        number_of_buildings: 89,
                        id: 1,
                        importfiles: fake_importfiles
                    };
                    var fake_payload = {
                        "status": "success",
                        "dataset": fake_dataset
                    };
                    if (delete_called) {
                        fake_payload.dataset.importfiles.pop();
                    }
                    console.log({delete_called: delete_called, ds: fake_payload});
                    return $q.when(fake_payload);
                }
            );

            spyOn(mock_dataset_service, "delete_file")
                .andCallFake(function(import_file){
                    delete_called = true;
                    console.log({d: "delete_called"});
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_detail_controller(){
        var fake_importfiles = [
            {
                name: "DC_CoveredBuildings_50k.csv",
                number_of_buildings: 511,
                number_of_mappings: 511,
                number_of_cleanings: 1349,
                source_type: "Assessed Raw",
                number_of_matchings: 403
            },
            {
                name: "DC_ESPM_Report.csv",
                number_of_buildings: 511,
                number_of_matchings: 403,
                source_type: "Portfolio Raw"
            }
        ];
        var fake_dataset = {
            name: "DC 2013 data",
            last_modified: (new Date()).getTime(),
            last_modified_by: "john.s@buildingenergy.com",
            number_of_buildings: 89,
            id: 1,
            importfiles: fake_importfiles
        };
        var fake_payload = {
            "status": "success",
            "dataset": fake_dataset
        };
        dataset_detail_ctrl = controller('dataset_detail_controller', {
            $scope: dataset_detail_ctrl_scope,
            dataset_payload: fake_payload
        });
    }

    /*
     * Test scenarios
     */

    it("should have an data set payload with import files", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        dataset_detail_ctrl_scope.$digest();

        // assertions
        expect(dataset_detail_ctrl_scope.dataset.importfiles.length).toBe(2);
    });

    it("should show an alert when the delete icon is clicked", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        dataset_detail_ctrl_scope.$digest();
        var importfiles = dataset_detail_ctrl_scope.dataset.importfiles;
        dataset_detail_ctrl_scope.delete_file(importfiles[0]);
        dataset_detail_ctrl_scope.$digest();

        // assertions
        expect(dataset_detail_ctrl_scope.dataset.importfiles.length).toBe(1);
    });
   
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: dataset_list_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, modal_state;
    var edit_ctrl, dataset_list_ctrl_scope, modalInstance, labels;
    var location;

    

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, uploader_service,
            $location) {
            controller = $controller;
            scope = $rootScope;
            dataset_list_ctrl_scope = $rootScope.$new();
            modal_state = "";
            location = $location;

            // mock the uploader_service factory methods used in the controller
            // and return their promises
            mock_uploader_service = uploader_service;
            spyOn(mock_uploader_service, "get_AWS_creds")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "AWS_CLIENT_ACCESS_KEY": "123",
                            "AWS_UPLOAD_BUCKET_NAME": "test-bucket"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "create_dataset")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "import_record_id": 3,
                                "import_record_name": dataset_name

                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error",
                                "message": "name already in use"
                            }
                        );
                    }
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_list_controller(){
        var fake_datasets_payload = {
            "status": "success",
            "datasets": [
                {
                    name: "DC 2013 data",
                    last_modified: (new Date()).getTime(),
                    last_modified_by: "john.s@buildingenergy.com",
                    number_of_buildings: 89
                },
                {
                    name: "DC 2014 data",
                    last_modified: (new Date()).getTime() -
                        1550 * 60 * 60 * 1000,
                    last_modified_by: "gavin.m@buildingenergy.com",
                    number_of_buildings: 70
                }
            ]
        };
        edit_ctrl = controller('dataset_list_controller', {
            $scope: dataset_list_ctrl_scope,
            datasets_payload: fake_datasets_payload
        });
    }

    /*
     * Test scenarios
     */

    it("should have a dataset_payload", function() {
        // arrange
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();

        // assertions
        expect(dataset_list_ctrl_scope.datasets.length).toEqual(2);
    });

    it("should disable the mapping button if the dataset has no" +
        " Assessor files", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Portfolio Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_assessor_files(dataset);

        // assertions
        expect(disabled).toEqual(true);
    });

    it("should enable the mapping button if the dataset has at least one" +
        " Assessor file", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_assessor_files(dataset);

        // assertions
        expect(disabled).toEqual(false);
    });
    it("should disable the matching button if the dataset has no" +
        " Portfolio Manger files", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Assessed Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_pm_files(dataset);

        // assertions
        expect(disabled).toEqual(true);
    });
    it("should enable the matching button if the dataset has at least one" +
        " Portfolio Manger file", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_pm_files(dataset);

        // assertions
        expect(disabled).toEqual(false);
    });
    it("should navigate to the mapping page of the first assessed" +
        " import file when the ``Mapping`` button is clicked", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Assessed Raw",
                    id: 3
                },
                {
                    source_type: "Assessed Raw",
                    id: 5
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        dataset_list_ctrl_scope.goto_mapping(dataset);

        // assertions
        expect(location.path()).toBe('/data/mapping/3');
    });
    it("should navigate to the matching page of the first Portfolio Manager" +
        " import file when the ``Matching`` button is clicked", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw",
                    id: 3
                },
                {
                    source_type: "Portfolio Raw",
                    id: 5
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        dataset_list_ctrl_scope.goto_matching(dataset);

        // assertions
        expect(location.path()).toBe('/data/matching/3');
    });

   
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: delete_modal_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, building_services, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        // mock the export_service factory methods used in the controller
        // and return their promises
        mock_building_services = building_services;
        spyOn(mock_building_services, "delete_buildings")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_delete_modal_controller(){
        ctrl = ctrl('delete_modal_controller', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            search: { 
                selected_buildings: [1,2],
                filter_params: {},
                select_all_checkbox: false,
                order_by: "",
                sort_reverse: false,
                number_matching_search: 1000
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should start at the delete page", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.delete_state).toEqual("delete"); 
    });
    it("should save the search paramaters",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.delete_payload;
        expect(b.selected_buildings).toEqual([1,2]);
        expect(b.filter_params).toEqual({});
        expect(b.order_by).toEqual("");
        expect(b.sort_reverse).toEqual(false);
        expect(b.select_all_checkbox).toEqual(false);
    });
    it("should delete when the delete button is clicked",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.delete_buildings();

        // assertions
        expect(ctrl_scope.delete_state).toEqual("prepare");
        expect(mock_building_services.delete_buildings).toHaveBeenCalled();
    });
    it("should show the success page when the delete is finished",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.delete_buildings();
        ctrl_scope.$digest();

        // assertions
        expect(mock_building_services.delete_buildings).toHaveBeenCalled();
        expect(ctrl_scope.delete_state).toEqual("success");
    });
    it("should show the number of buildings to be deleted",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        var number_to_delete = ctrl_scope.number_to_delete();

        // assertions
        expect(number_to_delete).toEqual(2);
    });
    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.close();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.cancel();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

  
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myDistrictApp = angular.module('myDistrictApp', ['district']);

describe("The district filter", function() {
    beforeEach(module('myDistrictApp'));
    it('replaces `district` with `County/District/Ward/Borough`',
        inject(function(districtFilter) {
            // normal cases
            expect(districtFilter('district')).toBe('County/District/Ward/Borough');
            expect(districtFilter('District')).toBe('County/District/Ward/Borough');
            expect(districtFilter('DistRict')).toBe('County/District/Ward/Borough');
            expect(districtFilter('DISTRICT')).toBe('County/District/Ward/Borough');
            expect(districtFilter('aDISTRICT')).toBe('aDISTRICT');
            expect(districtFilter('')).toBe('');
            expect(districtFilter('district ')).toBe('district ');
            expect(districtFilter('ok')).toBe('ok');
            expect(districtFilter(undefined)).toBe(undefined);
            expect(districtFilter(null)).toBe(null);
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: edit_label_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, modal_state;
    var edit_ctrl, edit_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label;
    var return_labels = [
        {
            "name": 'compliant',
            "color": 'green',
            "id": 1
        },
        {
            "name": "new label",
            "color": "blue",
            "id": 2
        }
    ];

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, urls, $q, project_service) {
        controller = $controller;
        scope = $rootScope;
        edit_ctrl_scope = $rootScope.$new();
        modal_state = "";

        // mock the project_service factory methods used in the controller
        // and return their promises
        mock_project_service = project_service;
        spyOn(mock_project_service, "get_labels")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success", "labels": return_labels});
            }
        );
        spyOn(mock_project_service, "add_label")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
        spyOn(mock_project_service, "delete_label")
            .andCallFake(function(label){
                deleted_label = label;
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
        spyOn(mock_project_service, "update_label")
            .andCallFake(function(label){
                updated_label = label;
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );

    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_edit_modal_controller(){
        var labels = [
            {
                "name": 'compliant',
                "color": 'green',
                "id": 1
            }
        ];

        edit_ctrl = controller('edit_label_modal_ctrl', {
            $scope: edit_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            labels: labels
        });
    }

    /*
     * Test scenarios
     */

    it("should initialize the default label", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.$digest();
        edit_ctrl_scope.initialize_label_modal();

        // assertions
        expect(edit_ctrl_scope.label_modal.color).toBe("gray");
        expect(edit_ctrl_scope.label_modal.label).toBe("default");
        expect(edit_ctrl_scope.label_modal.name).toBe("");
        expect(edit_ctrl_scope.modal.label.state).toBe("create");
    });

    it("should get the labels available to an organization", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.add_label({});  // calls private get_labels
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.labels.length).toBe(2);
    });

    it("should add a label in the user's organization", function() {
        // arrange
        create_edit_modal_controller();
        var label_to_add = {
            color: "blue",
            label: "primary",
            name: "new label"
        };

        // act
        edit_ctrl_scope.add_label(label_to_add);
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.labels.length).toBe(2);
        expect(edit_ctrl_scope.labels[1].color).toBe("blue");
        expect(edit_ctrl_scope.labels[1].name).toBe("new label");
    });

    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.close();
        edit_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.cancel();
        edit_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

    it("sets the label_modal to the label when its edit button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.edit_label(label);
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.label_modal.color).toBe(label.color);
        expect(edit_ctrl_scope.label_modal.name).toBe(label.name);
        expect(edit_ctrl_scope.modal.label.state).toBe("edit");

        // assert that edit_ctrl_scope.label_modal is a copy and not a reference to label
        edit_ctrl_scope.label_modal.name = "random name here";
        expect(edit_ctrl_scope.label_modal.name).not.toBe(label.name);
    });
    
    it("deletes the appropriate label when the delete button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.delete_label(label);
        edit_ctrl_scope.$digest();

        // assertions
        expect(deleted_label).toBe(label);
    });

    it("updates the appropriate label when the update label button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.edit_label(label);
        edit_ctrl_scope.$digest();
        edit_ctrl_scope.label_modal.name = "harry";
        edit_ctrl_scope.label_modal.color = "blue";
        edit_ctrl_scope.update_label(edit_ctrl_scope.label_modal);
        edit_ctrl_scope.$digest();

        // assertions
        expect(mock_project_service.update_label).toHaveBeenCalledWith(edit_ctrl_scope.label_modal);
        expect(updated_label).toBe(edit_ctrl_scope.label_modal);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: export_modal_controller", function(){
    // globals set up and used in each test scenario
    var mock_export_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, export_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        // mock the export_service factory methods used in the controller
        // and return their promises
        mock_export_service = export_service;
        spyOn(mock_export_service, "export_buildings")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success", "export_id": "123456"});
            }
        );
        spyOn(mock_export_service, "export_buildings_progress")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({
                    "status": "success",
                    "buildings_processed": 1000
                });
            }
        );
            spyOn(mock_export_service, "export_buildings_download")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({
                    "status": "success",
                    "url": "#"
                });
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_export_modal_controller(){
        ctrl = ctrl('export_modal_controller', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            search: { 
                selected_buildings: [],
                filter_params: {},
                select_all_checkbox: false,
                order_by: "",
                sort_reverse: false,
                number_matching_search: 1000
            },
            selected_fields: ['tax_lot_id', 'postal_code'],
            project: {
                id: 11
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should start at the create page", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.export_state).toEqual("create"); 
    });
    it("should start with an empty name and default file type of 'xls'",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.building_export;
        expect(b.export_name).toEqual("");
        expect(b.export_type).toEqual("xls");
    });
    it("should save the search paramaters",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.building_export;
        expect(b.selected_buildings).toEqual([]);
        expect(b.filter_params).toEqual({});
        expect(b.order_by).toEqual("");
        expect(b.sort_reverse).toEqual(false);
        expect(b.select_all_checkbox).toEqual(false);
        expect(b.selected_fields).toEqual(['tax_lot_id', 'postal_code']);
        expect(b.project_id).toEqual(11);
        expect(ctrl_scope.progress_denominator).toEqual(0);
    });
    it("should kick off the export process when the export button is clicked",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.export_buildings();

        // assertions
        expect(ctrl_scope.export_state).toEqual("prepare");
        expect(mock_export_service.export_buildings).toHaveBeenCalled();
    });
    it("should show the success page when the data is ready",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.show_success_page("123");
        ctrl_scope.$digest();

        // assertions
        expect(mock_export_service.export_buildings_download).toHaveBeenCalled();
        expect(ctrl_scope.export_state).toEqual("success");
    });
    it("should update the progress bar",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.monitor_progress("123", 1000);
        ctrl_scope.$digest();
        timeout.flush();

        // assertions
        expect(mock_export_service.export_buildings_progress).toHaveBeenCalled();
        expect(ctrl_scope.progress_percentage).toEqual(100);
        expect(ctrl_scope.progress_numerator).toEqual(1000);
        expect(ctrl_scope.progress_denominator).toEqual(1000);
    });
    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.close();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.cancel();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

  
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
/**
 * tests fromNow angularjs filter wrapper of moment.js
 * uses epoch milliseconds as that is what the back-end returns
 */

// create dummy angularJS app to attach filter(s)
var myfromNowFilterApp = angular.module('myfromNowFilterApp', ['fromNow']);

describe("The fromNow filter", function() {
    beforeEach(module('myfromNowFilterApp'));

    it('shows the present time as "a few seconds ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('a few seconds ago');
        })
    );

    it('shows 5 minutes ago as "5 minutes ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 5  * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('5 minutes ago');
        })
    );

    it('shows 4 hours ago as "4 hours ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 4 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('4 hours ago');
        })
    );

    it('shows 24 hours ago as "a day ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 24 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('a day ago');
        })
    );

    it('shows 36 hours ago as "2 days ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 36 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('2 days ago');
        })
    );

    it('shows 1550 hours ago as "2 months ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 1550 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('2 months ago');
        })
    );

    it('defaults to "a few seconds ago" for undefined values',
        inject(function(fromNowFilter) {
            // arrange

            // act

            // assert
            expect(fromNowFilter(undefined)).toBe('a few seconds ago');
            expect(fromNowFilter(null)).toBe('a few seconds ago');
            expect(fromNowFilter("some text")).toBe('a few seconds ago');
            expect(fromNowFilter({})).toBe('a few seconds ago');
            expect(fromNowFilter({time: "not time"})).toBe('a few seconds ago');
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myignoremapApp = angular.module('myignoremapApp', ['ignoremap']);

describe("The ignoremap filter", function() {
    beforeEach(module('myignoremapApp'));
    it('replaces `""` with `------ Ignore Row ------`',
        inject(function(ignoremapFilter) {
            // normal cases
            expect(ignoremapFilter('')).toBe('------ Ignore Row ------');
            expect(ignoremapFilter(' ')).toBe(' ');
            expect(ignoremapFilter('aignoremap')).toBe('aignoremap');
            expect(ignoremapFilter('ignoremap ')).toBe('ignoremap ');
            expect(ignoremapFilter('ok')).toBe('ok');
            expect(ignoremapFilter(undefined)).toBe('------ Ignore Row ------');
            expect(ignoremapFilter(null)).toBe('------ Ignore Row ------');
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: mapping_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, modal_state;
    var mapping_ctrl, mapping_ctrl_scope, modalInstance, labels;
    var timeout, mock_user_service, mock_search_service;



    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, building_services, $timeout, user_service, search_service) {
            controller = $controller;
            scope = $rootScope;
            mapping_ctrl_scope = $rootScope.$new();
            modal_state = "";
            timeout = $timeout;
            mock_user_service = user_service;
            mock_search_service = search_service;

            spyOn(mock_user_service, 'set_default_columns')
                .andCallFake(function(mapped_columns){
                    return undefined;
                });
            spyOn(mock_search_service, 'search_buildings')
                .andCallFake(function(){
                    return [1,2,3];
                });
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_mapping_controller(){
        var mock_datasets = [
            {
                name: "DC 2013 data",
                last_modified: (new Date()).getTime(),
                last_modified_by: "john.s@buildingenergy.com",
                number_of_buildings: 89,
                id: 1
            },
            {
                name: "DC 2014 data",
                last_modified: (new Date()).getTime() -
                    1550 * 60 * 60 * 1000,
                last_modified_by: "gavin.m@buildingenergy.com",
                number_of_buildings: 70,
                id: 2
            }
        ];
        var fake_import_file_payload = {
            "status": "success",
            "import_file": {
                        file_name: "assessor_fun.csv",
                        last_modified: (new Date()).getTime(),
                        last_modified_by: "john.s@buildingenergy.com",
                        source_type: 'AssessorRaw',
                        dataset: mock_datasets[0],
                        id: 1
                    }
        };

        var mock_be_building_columns = [
            'pm_property_id',
            'property_name',
            'property_notes',
            'tax_lot_id',
            'gross_floor_area',
            'My New non-BEDES field'
        ];

        var mock_be_building_types = {
            'gross_floor_area': {
                unit_type: 'float',
                schema: 'BEDES'
            }
        };

        var mock_mapping_suggestions_payload = {
            'status': 'success',
            'suggested_column_mappings': {
                // key(django model attribute): [csv_header1, ... csv_header3]
                'property id': ['pm_property_id', 89],
                'lot number': ['tax_lot_id' , 54]
            },
            "building_columns": mock_be_building_columns,
            "building_column_types": mock_be_building_types
        };

        var mock_raw_column_names = [
            'property id',
            'property_name',
            'property_notes',
            'lot number',
            'lot size'
        ];

        var mock_first_five_rows = [];
        for (var i=0; i < 4; i++) {
            mock_first_five_rows.push({
                'property id': i,
                'property_name': 'Property ' + i,
                'property_notes': 'Nup.',
                'lot number': i * 2,
                'lot size': 454 * i
            });
        }

        mock_first_five_rows.push({
            'property id': '121L',
            'property_name': 'Inconsistent Property',
            'property_notes': 'N/A',
            'lot number': 'N/A',
            'lot size': 45
        });

        var raw_columns_payload = {
            "status": "success",
            "raw_columns": mock_raw_column_names
        };
        var first_five_rows_payload = {
            "status": "success",
            "first_five_rows": mock_first_five_rows
        };
        mapping_ctrl = controller('mapping_controller', {
            $scope: mapping_ctrl_scope,
            import_file_payload: fake_import_file_payload,
            suggested_mappings_payload: mock_mapping_suggestions_payload,
            raw_columns_payload: raw_columns_payload,
            first_five_rows_payload: first_five_rows_payload,
            all_columns: {fields: []},
            building_services: mock_building_services,
            $timeout: timeout
        });
    }

    /*
     * Test scenarios
     */

    it("should have a import_file_payload", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        expect(mapping_ctrl_scope.import_file.dataset.name).toBe("DC 2013 data");
    });

    it("should show suggested mappings and confidence", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        var raw_columns = mapping_ctrl_scope.raw_columns;
        var first_column = raw_columns[0];

        expect(first_column.confidence).toBe(89);
        expect(first_column.suggestion).toBe("Pm Property Id");
    });

    it("should show 'low', 'med', 'high', or '' confidence text", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        var raw_columns = mapping_ctrl_scope.raw_columns;
        var first_column = raw_columns[0];
        expect(first_column.confidence_text()).toBe("high");
        first_column.confidence = 70;
        expect(first_column.confidence_text()).toBe("med");
        first_column.confidence = 35;
        expect(first_column.confidence_text()).toBe("low");
        delete(first_column.confidence);
        expect(first_column.confidence_text()).toBe("");
    });

    it("should validate initial data", function() {
        create_mapping_controller();
        // act
        mapping_ctrl_scope.$digest();
        // assertions
        angular.forEach(mapping_ctrl_scope.raw_columns, function(rc) {
            if (rc.suggestion !== '' && typeof(rc.suggestion) !== "undefined") {
                expect(rc.validity).toBe('valid');
            }
        });
    });

    it("should invalidate bad suggestions", function() {
        // Simulate a change on the tcm, make it fail.
        create_mapping_controller();
        // act
        mapping_ctrl_scope.$digest();
        // assertions
        //
        // We change the suggested mapping for the "property name" column
        // to "gross_floor_area" (which validates as float) to
        // purposesly cause a failing change.
        mapping_ctrl_scope.raw_columns[1].suggestion = 'gross_floor_area';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[1]);
        expect(mapping_ctrl_scope.raw_columns[1].validity).toBe('invalid');

    });

    it("should set td_class appropriately", function() {
        var tcm;

        create_mapping_controller();

        mapping_ctrl_scope.$digest();
        tcm = mapping_ctrl_scope.raw_columns[0];
        var good_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[0]
        );

        // First raw column is mapped up as pm_property_id <-> property_id
        // Any kind of string will be valid.
        expect(good_val).toBe('success');

        // Now set it to one that expects float values.
        // Only one of these will *not* validate.
        mapping_ctrl_scope.raw_columns[0].suggestion = 'gross_floor_area';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[0]);

        tcm = mapping_ctrl_scope.raw_columns[0];
        var warning_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[4]
        );

        expect(warning_val).toBe('warning');

        // We don't want the warning style to be applied to neighboring cells
        // in the same row. Check that the cell next to our invalid one is
        // unstyled (undefined).
        tcm = mapping_ctrl_scope.raw_columns[0];
        var adjacent_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[3]
        );

        expect(adjacent_val).toBe(undefined);

        // Now we're saying the suggestion is to not map.
        // Check that we don't have any class set for this row now.
        mapping_ctrl_scope.raw_columns[0].suggestion = '';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[0]);

        tcm = mapping_ctrl_scope.raw_columns[0];
        var blank_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[4]
        );

        expect(blank_val).toBe('');

    });

    it("should detect duplicates of mapped rows", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // raw_columns[0] and raw_columns[3] should be the only mapped rows
        var column = mapping_ctrl_scope.raw_columns[3];
        var test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

        // Set the property_name tcm's suggestion to the same as
        // the property_id tcm (raw_columns[0])
        column.suggestion = 'Pm Property Id';

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(true);

        // Since we mark both duplicates as duplicates, the other
        // TCM that has the 'pm_property_id' suggestion should also get
        // 'danger' as its duplicate class.
        var other_dup = mapping_ctrl_scope.is_tcm_duplicate(
            mapping_ctrl_scope.raw_columns[0]
        );
        expect(other_dup).toBe(true);

        // Shows that mapped_row is the sole determinant of
        // column ignoring
        column.mapped_row = false;

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

    });

    it("should ignore duplicates of unmapped rows", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // raw_columns[0] and raw_columns[3] should be the only mapped rows
        var column = mapping_ctrl_scope.raw_columns[1];
        var test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

        // Set the property_name tcm's suggestion to the same as
        // the property_id tcm (raw_columns[0])
        column.suggestion = 'Pm Property Id';

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);
    });

    it("should get mapped buildings", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        mapping_ctrl_scope.get_mapped_buildings();
        mapping_ctrl_scope.$digest();

        // assertions
        expect(mapping_ctrl_scope.search.search_buildings).toHaveBeenCalled();
        expect(mock_user_service.set_default_columns).toHaveBeenCalled();
    });

    it("should enbale the 'show & review buildings' button if duplicates are" +
        " not present", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        for (var i = mapping_ctrl_scope.raw_columns.length - 1; i >= 0; i--) {
            mapping_ctrl_scope.change(mapping_ctrl_scope.raw_columns[i]);
        }
        var duplicates_found = mapping_ctrl_scope.duplicates_present();

        // assertions
        expect(duplicates_found).toBe(false);
    });

    it("should disable the 'show & review buildings' button if duplicates " +
        "are present", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        for (var i = mapping_ctrl_scope.raw_columns.length - 1; i >= 0; i--) {
            mapping_ctrl_scope.raw_columns[i].suggestion = "pm_property_id";
            mapping_ctrl_scope.change(mapping_ctrl_scope.raw_columns[i]);
        }
        var duplicates_found = mapping_ctrl_scope.duplicates_present();

        // assertions
        expect(duplicates_found).toBe(true);
    });

    it("should get mappings in an API friendly way", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();
        var mappings = mapping_ctrl_scope.get_mappings();
        expect(mappings.length).toBe(5);
        expect(mappings[0]).toEqual(['Pm Property Id', 'property id']);
        // everything in between is empty since we we're using only
        // suggested mappings.
        expect(mappings[3]).toEqual(['Tax Lot Id', 'lot number']);
    });

    it("should show the 'STEP 2' tab when reviewing mappings", function() {
        // arrange
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // act
        var mappings = mapping_ctrl_scope.get_mapped_buildings();

        // assert
        expect(mapping_ctrl_scope.tabs).toEqual({
            'one_active': false,
            'two_active': true,
            'three_active': false
        });
    });

    it("should show BEDES fields with a checkbox", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assert
        expect(mapping_ctrl_scope.is_suggestion_BEDES('gross_floor_area')).toBe(true);
        expect(mapping_ctrl_scope.is_suggestion_BEDES('Gross Floor Area')).toBe(true);
        expect(mapping_ctrl_scope.is_suggestion_BEDES('My New non-BEDES field')).toBe(false);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: matching_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, delete_called;
    var matching_ctrl, matching_ctrl_scope, modalInstance, labels;


    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, building_services) {
            controller = $controller;
            scope = $rootScope;
            matching_ctrl_scope = $rootScope.$new();

            mock_building_services = building_services;
            spyOn(mock_building_services, "get_PM_filter_by_counts")
                .andCallFake(function(import_file){
                    return $q.when(
                        {
                            "status": "success",
                            "unmatched": 5,
                            "matched": 10
                        }
                    );
                }
            );
            spyOn(mock_building_services, "save_match")
                .andCallFake(function(b1, b2, create){
                    return $q.when(
                        {
                            "status": "success",
                            "child_id": 3
                        }
                    );
                }
            );
            spyOn(mock_building_services, "search_matching_buildings")
                .andCallFake(function(q, number_per_page, current_page, order_by, sort_reverse, 
                                        filter_params, file_id ){
                    
                    switch(filter_params.children__isnull){
                        case undefined:
                            var bldgs = [
                                {
                                    pm_property_id: 1
                                },
                                {
                                    pm_property_id: 2
                                }
                                ,
                                {
                                    pm_property_id: 3
                                }
                            ];
                            break;
                        case false:
                            var bldgs = [
                                {
                                    pm_property_id: 1
                                }
                            ];
                            break;
                        case true:
                            var bldgs = [
                                {
                                    pm_property_id: 3
                                },
                                {
                                    pm_property_id: 4
                                }
                            ];
                            break;
                    }

                    return $q.when(
                        {
                            status: "success",
                            number_returned: buildings_payload.length,
                            number_matching_search: buildings_payload.length,
                            buildings: bldgs
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_detail_controller(){
        var buildings_payload = {
            buildings: [
                {
                    pm_property_id: 1,
                    tax_lot_id: null,
                    custom_id_1: 2,
                    gross_floor_area: 111,
                    matched: true,
                    id: 1,
                    children: [3],
                    coparent: {
                        pm_property_id: null,
                        tax_lot_id: 2,
                        custom_id_1: null,
                        gross_floor_area: 111,
                        id: 2,
                        children: [3]
                    }
                }
            ],
            number_matching_search: 1,
            number_returned: 1
        };
        matching_ctrl = controller('matching_controller', {
            $scope: matching_ctrl_scope,
            buildings_payload: buildings_payload,
            all_columns: {
                fields: [{sort_column: 'pm_property_id'}]
            },
            default_columns: {
                columns: ['pm_property_id']
            },
            import_file_payload: {
                import_file: {
                    id: 1,
                    dataset: {
                        importfiles: [
                            {
                                id: 1,
                                name: "file_1.csv"
                            },
                            {
                                id: 2,
                                name: "file_2.csv"
                            }
                        ]
                    }
                }
            }
        });
    }



    /*
     * Test scenarios
     */

    it("should have a buildings payload with potential matches", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();
        var b = matching_ctrl_scope.buildings[0];

        // assertions
        expect(matching_ctrl_scope.buildings.length).toBe(1);
        expect(b.coparent.children).toEqual(b.children);
    });

    it("should provide to the view scope variables representing the number matched and the number of unmatched buildings", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();

        // assertions
        expect(matching_ctrl_scope.matched_buildings).toEqual(10);
        expect(matching_ctrl_scope.unmatched_buildings).toEqual(5);
    });

    it("should jump back to the matching list when the 'Back to list' button" +
        " is clicked", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.show_building_list = false;
        matching_ctrl_scope.back_to_list();

        // assertions
        expect(matching_ctrl_scope.show_building_list).toEqual(true);
    });

    it("should present an initial state with the matching buildings table",
        function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();

        // assertions
        expect(matching_ctrl_scope.columns).toEqual([{ sort_column : 'pm_property_id' }]);
        expect(matching_ctrl_scope.number_matching_search).toEqual(1);
        expect(matching_ctrl_scope.number_returned).toEqual(1);
        expect(matching_ctrl_scope.num_pages).toEqual(1);
        expect(mock_building_services.get_PM_filter_by_counts).toHaveBeenCalled();
    });
    it("should match a building in the matching list", function() {
        // arrange
        create_dataset_detail_controller();
        var b1, b2;
        b2 = {
            id: 2,
            children: [],
            matched: false
        };
        b1 = {
            id: 1,
            children: [],
            matched: true,
            coparent: b2
        };

        // act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.toggle_match(b1);
        matching_ctrl_scope.$digest();

        // assertions
        expect(mock_building_services.save_match).toHaveBeenCalledWith(b1.id, b2.id, true);
        expect(mock_building_services.get_PM_filter_by_counts).toHaveBeenCalled();
        expect(b1.children[0]).toEqual(3);
    });
    it("Should update the list of buildings correctly when 'Show Matched' is selected", function() {
        //arrange
        create_dataset_detail_controller();

        //act
        matching_ctrl_scope.$digest();
        controller.update_show_filter(controller.SHOW_MATCHED)

        //assertions
        expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(1);
        expect(matching_ctrl_scope.number_returned).toEqual(1);
    });
    it("Should update the list of buildings correctly when 'Show Unmatched' is selected",  function() {
        //arrange
        create_dataset_detail_controller();

        //act
        matching_ctrl_scope.$digest();
        controller.update_show_filter(controller.SHOW_UNMATCHED)

        //assertions
        expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(2);
        expect(matching_ctrl_scope.number_returned).toEqual(2);
    });
    it("Should update the list of buildings correctly when 'Show All' is selected", function() {
        //arrange
        create_dataset_detail_controller();

        //act
        matching_ctrl_scope.$digest();
        controller.update_show_filter(controller.SHOW_ALL)

        //assertions
        expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(3);
        expect(matching_ctrl_scope.number_returned).toEqual(3);
    });



});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: members_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller;
    var ctrl, ctrl_scope, modalInstance;
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          $q,
          organization_service) {
            ctrl = $controller;
            scope = $rootScope;
            ctrl_scope = $rootScope.$new();

            mock_organization_service = organization_service;
            
            spyOn(mock_organization_service, "remove_user")
                .andCallFake(function(user_id, org_id){
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
            spyOn(mock_organization_service, "get_organization_users")
                .andCallFake(function(org){
                    return $q.when(
                        {
                            "status": "success",
                            "users": [{id:1, first_name:"Bob", last_name:"D"}]
                        }
                    );
                }
            );
            spyOn(mock_organization_service, "update_role")
                .andCallFake(function(org_id, user_id, role){
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_members_controller(){
        ctrl = ctrl('members_controller', {
            $scope: ctrl_scope,
            users_payload: {users: [
                {first_name: 'J', last_name: 'S'},
                {first_name: undefined, last_name: null}
            ]},
            organization_payload: {
                organization: {name: 'my org', id: 4}
            },
            auth_payload: {
                auth: {
                    'can_invite_member': true,
                    'can_remove_member': true
                }
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should accepts its payload", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.org).toEqual({name : 'my org', id : 4});
        expect(ctrl_scope.users[0].name).toEqual("J S");
        expect(ctrl_scope.users[1].name).toEqual(" ");
    });
    it("clicking remove should remove a user", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.remove_member({user_id: 2});

        // assertions
        expect(mock_organization_service.remove_user)
            .toHaveBeenCalledWith(2, 4);
        
        ctrl_scope.$digest();
        expect(mock_organization_service.get_organization_users)
            .toHaveBeenCalledWith({org_id: 4});
    });
    it("clicking a new role should update the user's role", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.update_role({user_id: 2, role: "viewer"});

        // assertions
        expect(mock_organization_service.update_role)
            .toHaveBeenCalledWith(2, 4, 'viewer');
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: new_member_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_user_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, user_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        mock_user_service = user_service;
        spyOn(mock_user_service, "add")
            .andCallFake(function(user){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_new_member_controller(){
        ctrl = ctrl('new_member_modal_ctrl', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            organization: {organization_id: 1}
        });
    }

    /*
     * Test scenarios
     */

    it("should set the default role to 'member'", function() {
        // arrange
        create_new_member_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.user.role.value).toEqual("member"); 
    });
    it("should call the user service to add a new user to the org",
        function() {
        // arrange
        create_new_member_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.user.first_name = "JB";
        ctrl_scope.user.last_name = "Smooth";
        ctrl_scope.user.email = "jb.smooth@be.com";
        ctrl_scope.submit_form(true);

        // assertions
        expect(mock_user_service.add)
            .toHaveBeenCalledWith({
                first_name: "JB",
                last_name: "Smooth",
                email: "jb.smooth@be.com",
                role: ctrl_scope.roles[0],
                organization: {
                    organization_id: 1
                }
            });
    });
    
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
/**
 * run_jasmine.js: runs the jasmine JS test runner
 */
(function() {
    var jasmineEnv = jasmine.getEnv();
    jasmineEnv.updateInterval = 1000;

    var htmlReporter = new jasmine.HtmlReporter();

    jasmineEnv.addReporter(htmlReporter);

    jasmineEnv.specFilter = function(spec) {
        return htmlReporter.specFilter(spec);
    };

    var currentWindowOnload = window.onload;

    window.onload = function() {
        if (currentWindowOnload) {
        currentWindowOnload();
        }
        execJasmine();
    };
    function execJasmine() {
        jasmineEnv.execute();
    }
})();

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var searchTestApp = angular.module(
    'searchTestApp', ['BE.seed.service.search']
);

describe("The search_service service", function() {
    var saas, httpBackend, test_url;

    beforeEach(function () {
        module("searchTestApp");
        inject(function (search_service, $httpBackend) {
            saas = search_service;
            httpBackend = $httpBackend;
            httpBackend.when("POST", test_url).respond("ok");
        });

    });

    /**
     * sanitize_params tests
     */
    it('removes null and undefined values from filter_params', function () {
        // arrange
        saas.filter_params = {
          'National Median Site Energy Use__gte': 4,
          'National Median Site Energy Use__lte': null,
          'National Median Source EUI__gte': undefined
        };

        // act
        saas.sanitize_params();

        // assert
        expect(saas.filter_params).toEqual({'National Median Site Energy Use__gte': 4});
    });

    /**
     * search_buildings tests
     */
    it('has sane defaults', function() {
        expect(saas.url).toEqual("");
        expect(saas.error_message).toEqual("");
        expect(saas.alert).toEqual(false);
        expect(saas.buildings).toEqual([]);
        expect(saas.current_page).toEqual(1);
        expect(saas.number_per_page).toEqual(10);
        expect(saas.order_by).toEqual("");
        expect(saas.sort_column).toEqual("tax_lot_id");
        expect(saas.sort_reverse).toEqual(false);
        expect(saas.select_all_checkbox).toEqual(false);
        expect(saas.prev_page_disabled).toEqual(true);
        expect(saas.next_page_disabled).toEqual(true);
        expect(saas.num_pages).toEqual(0);
        expect(saas.query).toEqual("");
        expect(saas.showing).toEqual({
            'start': 1,
            'end': 0
        });
    });

    it('search_buildings uses the argument `query`', function() {
        saas.query = "hotels";
        saas.search_buildings("not hotels");

        expect(saas.query).toEqual("not hotels");
    });
    it('filter search resets the current page', function() {
        // arrange
        saas.current_page = 22;
        spyOn(saas, 'search_buildings');

        // act
        saas.filter_search();

        // assert
        expect(saas.current_page).toEqual(1);
        expect(saas.search_buildings).toHaveBeenCalled();
    });

    it('search_buildings function will default to its query if' +
        ' no query is passed as an argument', function() {
        saas.query = "hotels";
        saas.search_buildings();

        expect(saas.query).toEqual("hotels");
    });

    it('search_buildings hits the set url', function() {
        test_url = "/my-search-url";
        saas.url = test_url;
        saas.search_buildings();
        httpBackend.expectPOST(test_url);
        httpBackend.flush();
    });

    it('search_buildings POSTs the query data as `q`', function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.query = "hotel chains";
        saas.number_per_page = 25;
        saas.order_by = "gross_floor_area";
        saas.sort_reverse = true;
        saas.filter_params = {
            project: '2012 data'
        };

        // act
        saas.search_buildings();

        // assert
        httpBackend.expectPOST(test_url,
            {
                "q": "hotel chains",
                "number_per_page": 25,
                "order_by": "gross_floor_area",
                "sort_reverse": true,
                "filter_params": {
                    "project": "2012 data"
                },
                "page":1
            }
        ).respond(201, "");
        httpBackend.flush();
    });
    it('search_buildings updates its `buildings` model', function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.query = "hotel chains";
        saas.number_per_page = 25;
        saas.order_by = "gross_floor_area";
        saas.sort_reverse = true;
        saas.filter_params = {
            project: '2012 data'
        };

        // act
        saas.search_buildings();

        // assert
        httpBackend.expectPOST(test_url,
            {
                "q": "hotel chains",
                "number_per_page": 25,
                "order_by": "gross_floor_area",
                "sort_reverse": true,
                "filter_params": {
                    "project": "2012 data"
                },
                "page":1
            }
        ).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        expect(saas.buildings).toEqual([
            {
                name: "one",
                id: 1,
                checked: false
            },
            {
                name: "two",
                id: 2,
                checked: false
            }
        ]);
    });
    it('should clear the error and alert after a successful search',
        function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.error_message = "help";
        saas.alert = true;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {
            'buildings': [
                {
                    name: "one",
                    id: 1
                },
                {
                    name: "two",
                    id: 2
                }],
            'number_matching_search': 101
            });
        httpBackend.flush();

        // assert
        expect(saas.alert).toEqual(false);
        expect(saas.error_message).toEqual("");
    });

    /**
     * pagination tests
     */
    it('increments the page when the `next` button is clicked',
        function() {
        // arrange
        saas.num_pages = 1000;
        saas.current_page = 100;
        spyOn(saas, 'search_buildings');
        // act
        saas.next_page();

        // assert
        expect(saas.current_page).toEqual(101);
        expect(saas.search_buildings).toHaveBeenCalled();
        expect(saas.search_buildings.callCount).toEqual(1);

    });
    it('doesn\'t increment past the last page when the `next` button is' +
        ' clicked', function() {
        // arrange
        saas.num_pages = 2;
        saas.current_page = 2;
        spyOn(saas, 'search_buildings');
        // act
        saas.next_page();

        // assert
        expect(saas.current_page).toEqual(2);
        expect(saas.search_buildings).toHaveBeenCalled();
        expect(saas.search_buildings.callCount).toEqual(1);

    });
    it('decrements the page when the `previous` button is clicked',
        function() {
        // arrange
        saas.num_pages = 1000;
        saas.current_page = 100;
        spyOn(saas, 'search_buildings');
        // act
        saas.prev_page();

        // assert
        expect(saas.current_page).toEqual(99);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('does not decrement below the first page when the `previous` button' +
        ' is clicked', function() {
        // arrange
        saas.num_pages = 1;
        saas.current_page = 1;
        spyOn(saas, 'search_buildings');
        // act
        saas.prev_page();

        // assert
        expect(saas.current_page).toEqual(1);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('fetches more or less results per page when a user selects an option' +
        ' from the number per page select',
        function() {
        // arrange
        saas.number_per_page_options_model = 50;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_number_per_page();

        // assert
        expect(saas.number_per_page).toEqual(50);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('updates the number of results displayed text after a successful '+
        'search', function() {
        // standard case
        // page 2 of 3 with 10/page, so should display 11 of 20
        // arrange
        saas.current_page = 2;
        saas.num_pages = 3;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_start_end_paging();

        // assert
        expect(saas.showing.start).toEqual(11);
        expect(saas.showing.end).toEqual(20);
        expect(saas.search_buildings).not.toHaveBeenCalled();
    });
    it('displays the number matching the query if on the last page of results',
        function() {
        // standard case
        // page 3 of 3 with 10/page and 34 results, so should display 21 of 34
        // arrange
        saas.current_page = 3;
        saas.number_matching_search = 34;
        saas.num_pages = 3;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_start_end_paging();

        // assert
        expect(saas.showing.start).toEqual(21);
        expect(saas.showing.end).toEqual(34);
    });
    it('should call update_start_end_paging after a successful search',
        function() {
        // arrange
        spyOn(saas, 'update_start_end_paging');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_start_end_paging).toHaveBeenCalled();
    });
    it('should call update_buttons after a successful search',
        function() {
        // arrange
        spyOn(saas, 'update_buttons');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_buttons).toHaveBeenCalled();
    });
    it('should disable prev paging buttons at the first page',
        function() {
        // arrange
        saas.current_page = 1;
        saas.num_pages = 5;

        // act
        saas.update_buttons();

        // assert
        expect(saas.prev_page_disabled).toEqual(true);
        expect(saas.next_page_disabled).toEqual(false);
    });
    it('should disable next paging buttons at the last page',
        function() {
        // arrange
        saas.current_page = 5;
        saas.num_pages = 5;

        // act
        saas.update_buttons();

        // assert
        expect(saas.prev_page_disabled).toEqual(false);
        expect(saas.next_page_disabled).toEqual(true);
    });
    it('should calculate the number of pages after a successful search',
        function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {
            'buildings': [
                {
                    name: "one",
                    id: 1
                },
                {
                    name: "two",
                    id: 2
                }],
            'number_matching_search': 101
            });
        httpBackend.flush();

        // assert
        expect(saas.number_matching_search).toEqual(101);
        expect(saas.num_pages).toEqual(11);
    });

    /**
     * checkbox logic tests
     */
    it('should select or unselect all the viewed results when the select all' +
        ' checkbox is checked or unchecked', function() {
        // arrange
        saas.selected_buildings = [1,2,3];
        saas.select_all_checkbox = true;
        saas.buildings = [
            {
                checked: false
            },
            {
                checked: true
            }
        ];
        spyOn(saas, 'select_or_deselect_all_buildings').andCallThrough();

        // act
        saas.select_all_changed();

        // assert
        expect(saas.selected_buildings).toEqual([]);
        expect(saas.buildings).toEqual([
                {
                    checked: true
                },
                {
                    checked: true
                }
            ]);
        expect(saas.select_or_deselect_all_buildings).toHaveBeenCalled();
    });
    it('should call select_or_deselect_all_buildings after a search',
        function() {
        // arrange
        spyOn(saas, 'select_or_deselect_all_buildings');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.select_or_deselect_all_buildings).toHaveBeenCalled();
    });
    it('should add a building to the selected list when checked',
        function() {
        // arrange
        var building = {
            id: 5,
            checked: true
        };

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([5]);
    });
    it('should add a building to the selected list when unchecked and the ' +
        'select all checkbox is checked', function() {
        // arrange
        var building = {
            id: 5,
            checked: false
        };
        saas.select_all_checkbox = true;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([5]);
    });
    it('should remove a building to the selected list when unchecked',
        function() {
        // arrange
        var building = {
            id: 5,
            checked: false
        };
        saas.selected_buildings = [5,6,7];
        saas.select_all_checkbox = false;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([6,7]);
    });
    it('should remove a building to the selected list when checked if the ' +
        'select all checkbox is checked', function() {
        // arrange
        var building = {
            id: 5,
            checked: true
        };
        saas.selected_buildings = [5,6,7];
        saas.select_all_checkbox = true;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([6,7]);
    });
    it('should call load_state_from_selected_buildings after a successful ' +
        'search', function() {
        // arrange
        spyOn(saas, 'load_state_from_selected_buildings').andCallThrough();
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.load_state_from_selected_buildings).toHaveBeenCalled();
    });
    it('should call update_results after a successful ' +
        'search', function() {
        // arrange
        var select_or_deselect_all_buildings_time,
            load_state_from_selected_buildings_time;
        spyOn(saas, 'update_results').andCallThrough();
        spyOn(saas, 'select_or_deselect_all_buildings')
            .andCallFake(function() {
                select_or_deselect_all_buildings_time = new Date();
            }
        );
        spyOn(saas, 'load_state_from_selected_buildings')
            .andCallFake(function() {
                // wait for a sec, otherwise both have the same timestamp
                for(var y=0;y<100000;y++){
                    var x = new Date();
                    x = x+y;
                }
                load_state_from_selected_buildings_time = new Date();
            }
        );
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_results).toHaveBeenCalled();
        expect(select_or_deselect_all_buildings_time <
               load_state_from_selected_buildings_time).toBe(true);
    });
    it('check selected buildings successful', function() {
        // arrange
        saas.selected_buildings = [2];
        saas.buildings = [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ];

        // act
        saas.load_state_from_selected_buildings();

        // assert
        expect(saas.buildings[1]).toEqual({
            name: "two",
            id: 2,
            checked: true
        });
    });
    it('should generate columns', function() {
        // arrange
        var all_columns, column_headers, columns;
        all_columns = [
            {
                sort_column: "name"
            },
            {
                sort_column: "id"
            }
        ];
        column_headers = ["id"];
        saas.sort_column = "something else";
        saas.update_results({});
        // act
        columns = saas.generate_columns(
            all_columns, column_headers, saas.column_prototype
        );

        // assert that columns are extended off the prototype and only have
        // "id"
        expect(columns.length).toEqual(1);
        expect(columns[0].sort_column).toEqual("id");
        expect(columns[0].is_unsorted()).toEqual(true);
        saas.sort_column = "id";
        expect(columns[0].is_unsorted()).toEqual(false);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: settings_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller;
    var ctrl, ctrl_scope, modalInstance;
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          $q,
          organization_service) {
            ctrl = $controller;
            scope = $rootScope;
            ctrl_scope = $rootScope.$new();

            mock_organization_service = organization_service;
            
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_settings_controller(){
        ctrl = ctrl('settings_controller', {
            $scope: ctrl_scope,
            all_columns: {fields: [
                {checked: false, title: 'PM Property ID', sort_column: 'pm_property_id'},
                {checked: false, title: 'G', sort_column: 'g'},
                {checked: false, title: "Gross Floor Area", sort_column: 'gross_floor_area'}
            ]},
            organization_payload: {
                organization: {name: 'my org', id: 4}
            },
            query_threshold_payload: {
                query_threshold: 10
            },
            shared_fields_payload: {
                shared_fields: [
                    {
                        title: "PM Property Id",
                        sort_column: "pm_property_id"
                    }
                ],
                public_fields: [
                {
                    title: "Gross Floor Area",
                    sort_column: "gross_floor_area"
                }]
            },
            auth_payload: {
                auth: {
                    'is_owner': true,
                    'is_parent_org_owner': false
                }
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should accepts its payload", function() {
        // arrange
        create_settings_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.org).toEqual({
            name : 'my org',
            id : 4,
            query_threshold: 10
        });
        expect(ctrl_scope.fields[0].checked).toEqual(true);
        expect(ctrl_scope.fields[1].checked).toEqual(false);
        expect(ctrl_scope.fields[0].title).toEqual('PM Property ID');
    });
    it("should select all", function() {
        // arrange
        create_settings_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.controls.select_all = true;
        ctrl_scope.select_all_clicked();
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.infinite_fields[0].checked).toEqual(true);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myStripFilterApp = angular.module('myStripFilterApp', ['stripImportPrefix']);

describe("The stripImportPrefix filter", function() {
    beforeEach(module('myStripFilterApp'));
    it('Strips out the import prefix from building ids',
        // e.g. remove the 'IMP12-' from the id 'IMP12-1321/123'
        inject(function(stripImportPrefixFilter) {
            // normal cases
            expect(stripImportPrefixFilter('IMP134-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP134555-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP1-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP0-134')).toBe('134');
            // deals with `-`
            expect(stripImportPrefixFilter('IMP134-abc-dev')).toBe('abc-dev');
            // deals with `/`
            expect(stripImportPrefixFilter('IMP134-00/11')).toBe('00/11');
            // only strips first prefix
            expect(stripImportPrefixFilter('IMP134-IMP134-123')).toBe('IMP134-123');
        })
    );
    it("Does not strip out anything if there is not a prefix",
        inject(function(stripImportPrefixFilter) {
            // normal cases
            expect(stripImportPrefixFilter('123-123')).toBe('123-123');
            expect(stripImportPrefixFilter('0123/123')).toBe('0123/123');
        })
    );
    it("Is case sensitive to the import prefix",
        inject(function(stripImportPrefixFilter) {
            expect(stripImportPrefixFilter('imp123-abc')).toBe('imp123-abc');
            expect(stripImportPrefixFilter('iMp123-abc')).toBe('iMp123-abc');
            expect(stripImportPrefixFilter('iMP123-abc')).toBe('iMP123-abc');
        })
    );
    it("Handles undefined or null inputs",
        inject(function(stripImportPrefixFilter) {
            expect(stripImportPrefixFilter(undefined)).toBe(undefined);
            expect(stripImportPrefixFilter(null)).toBe(null);
        })
    );
    it("Only strips out the prefix if it has at least one digit and a hyphen",
        inject(function(stripImportPrefixFilter) {
            // must have the 'IMP' folowed by a digit then a hyphen
            expect(stripImportPrefixFilter('IMP-123')).toBe('IMP-123');
            expect(stripImportPrefixFilter('IMP1123')).toBe('IMP1123');
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myTitleCaseApp = angular.module('myTitleCaseApp', ['titleCase']);

describe("The TitleCase filter", function() {
    beforeEach(module('myTitleCaseApp'));
    it('Strips out ``_`` characters from strings and capitalizes the rest',
        inject(function(titleCaseFilter) {
            // normal cases
            expect(titleCaseFilter('super_data')).toBe('Super Data');
            expect(titleCaseFilter('super_data_45')).toBe('Super Data 45');
            expect(titleCaseFilter(undefined)).toBe(undefined);
            expect(titleCaseFilter(null)).toBe(null);
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myTypedNumberFilterApp = angular.module('myTypedNumberFilterApp', ['typedNumber']);

describe("The typedNumber filter", function() {
    beforeEach(module('myTypedNumberFilterApp'));
    it('should parse strings as strings and return them',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('tester')).toBe('tester');
        })
    );
    it('should parse strings as strings and return them, even if they look like numbers',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.1456')).toBe('123.1456');
        })
    );

    it('should parse numbers as numbers and return them',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.00001', 'number')).toBe("123");
        })
    );

    it('should allow the user to set the number of sig digits',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.321', 'number', 'not_year', 1)).toBe("123.3");
        })
    );

    it('should add commas to number greater than 999',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123456789', 'number', 'not_year', 0)).toBe("123,456,789");
        })
    );

    it('should parse year_built and not add commas',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('1946', 'number', 'year_built', 1)).toBe("1946");
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var validationTestApp = angular.module(
    'validationTestApp', ['mappingValidatorService']
);

describe("The MappingValidatorService", function() {
    var mvs;

    beforeEach(function () {
        module("validationTestApp");
        inject(function (mappingValidatorService) {
            mvs = mappingValidatorService;

        });

    });

    it('validates good string, float and date data', function() {
        // normal cases
        // Here ``type`` is undefined. Should still work.
        var str_data = ['Fun', 'fun2', 'fun3', 'fun4'];
        var float_data = ['12.34', '144.5', '234'];
        var date_data = ['2014/02/02', '03/13/2013', '03-14-2004'];

        expect(mvs.validate(str_data)).toEqual([]);
        expect(mvs.validate(float_data, 'float')).toEqual([]);
        expect(mvs.validate(date_data, 'date')).toEqual([]);
    });

    it('recognizes semivalid data', function() {
        // Cases where the data is /almost/ right.
        var float_data = ['12.34', '144.5', 'NaN'];
        var date_data = ['2014/02/02', 'huh?', '03-14-2004'];
        expect(mvs.validate(float_data, 'float')).toEqual(['NaN']);
        expect(mvs.validate(date_data, 'date')).toEqual(['huh?']);
    });

    it('recognizes invalid data', function() {
        // Cases where the data is *all* wrong.
        var float_data = ['', 'not a float', 'NaN'];
        var date_data = ['', 'huh?', 'what?'];
        // Cases where the data are correct.
        var good_float_data = ['12.34', '144.5', '234'];
        var good_date_data = ['2014/02/02', '03/13/2013', '03-14-2004'];

        // Data is wrong
        expect(mvs.validate(float_data, 'float')).toEqual(float_data);
        expect(mvs.validate(date_data, 'date')).toEqual(date_data);

        // Type is wrong
        // N.B. we use semivalid here, because Date is pretty forgiving w/ nums.
        expect(mvs.validate(good_float_data, 'date')).toEqual(['12.34']);
        expect(mvs.validate(good_date_data, 'float')).toEqual(good_date_data);


    });

});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// taken from the angularjs testing page
// http://docs.angularjs.org/guide/dev_guide.unit-testing

// create dummy angularJS app to attach filter(s)
var myBELabelDirectiveApp = angular.module('myBELabelDirectiveApp', ['beLabel']);

describe("The beLabel directive", function() {
    var $compile;
    var $rootScope;
    beforeEach(module('myBELabelDirectiveApp'));
    // Store references to $rootScope and $compile
    // so they are available to all tests in this describe block
    beforeEach(inject(function(_$compile_, _$rootScope_){
      // The injector unwraps the underscores (_) from around the parameter names when matching
      $compile = _$compile_;
      $rootScope = _$rootScope_;
    }));

    it('Replaces the element with the appropriate content', function() {
        // Compile a piece of HTML containing the directive
        var element = $compile('<be-label name="compliant" color="blue"></be-label>')($rootScope);
        // fire all the watches
        $rootScope.$digest();
        // Check that the compiled element contains the templated content
        expect(element.hasClass('label-primary')).toBe(true);
        expect(element.hasClass('label')).toBe(true);
        expect(element.html()).toContain("compliant");
    });

        // 'red': 'danger',
        // 'gray': 'default',
        // 'orange': 'warning',
        // 'green': 'success',
        // 'blue': 'primary',
        // 'light blue': 'info'
    it('Maps colors to semantic bootstrap class names', function() {
        var element = $compile('<be-label name="compliant" color="red"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-danger')).toBe(true);

        element = $compile('<be-label name="compliant" color="gray"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-default')).toBe(true);

        element = $compile('<be-label name="compliant" color="orange"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-warning')).toBe(true);

        element = $compile('<be-label name="compliant" color="green"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-success')).toBe(true);

        element = $compile('<be-label name="compliant" color="blue"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-primary')).toBe(true);

        element = $compile('<be-label name="compliant" color="light blue"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-info')).toBe(true);
    });


});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// taken from the angularjs testing page
// http://docs.angularjs.org/guide/dev_guide.unit-testing

// create dummy angularJS app to attach filter(s)
var myBEUploaderDirectiveApp = angular.module('myBEUploaderDirectiveApp', ['beUploader']);

describe("The beUploader directive", function() {
    var g_message, g_file, g_progress;
    var $compile;
    var $rootScope;
    var uploader_html = '<div be-uploader sourcetype="assessor" importrecord="5" buttontext="Upload your building list .csv file" eventfunc="uploaderfunc(message, filename, progress)" ng-hide="uploader.in_progress"></div>';
    beforeEach(module('myBEUploaderDirectiveApp'));
    // Store references to $rootScope and $compile
    // so they are available to all tests in this describe block
    beforeEach(inject(function(_$compile_, _$rootScope_){
      // The injector unwraps the underscores (_) from around the parameter names when matching
      $compile = _$compile_;
      $rootScope = _$rootScope_;
      $rootScope.eventfunc = function (fine_object) {
        console.log({fin: fine_object});
        g_message = fine_object.message;
        g_file = fine_object.file;
        g_progress = fine_object.progress;
      };
      window.BE = window.BE || {};
      window.BE.FILE_UPLOAD_DESTINATION = 'S3';
    }));

    it('Creates the fineuploader element', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        
        // act
        $rootScope.$digest();

        // assert
        expect(element.html()).toContain("qq-uploader");
        expect(element.html()).toContain("qq-upload-button");
    });

    it('Contains the buttontext specified', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);

        // act
        $rootScope.$digest();

        // assert
        expect(element.html()).toContain("Upload your building list .csv file");
    });

    it('Only allows one file to be uploaded at a time', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");

        // act
        $rootScope.$digest();

        // assert
        expect(func._options.multiple).toBe(false);
    });

    it('Uses the callback function for invalid file types', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.jpeg");

        // act
        $rootScope.$digest();
        func._options.showMessage("there was an invalid extension. Valid extension(s): .csv");


        // assert
        expect(g_message).toBe("invalid_extension");
    });

    it('Uses the callback function to share its state: upload started',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';
        
        // act
        $rootScope.$digest();
        func._options.callbacks.onSubmitted(1, filename);


        // assert
        expect(g_message).toBe("upload_submitted");
        expect(g_file.filename).toBe(filename);
    });

    it('Uses the callback function to share its state: in progress',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';
        var loaded = 10;
        var total = 100;
        
        // act
        $rootScope.$digest();
        func._options.callbacks.onProgress(1, filename, loaded, total);


        // assert
        expect(g_message).toBe("upload_in_progress");
        expect(g_file.filename).toBe(filename);
        expect(g_progress.loaded).toBe(loaded);
        expect(g_progress.total).toBe(total);
    });

    it('Uses the callback function to share its state: complete',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';

        
        // act
        $rootScope.$digest();
        func._options.callbacks.onComplete(1, filename, {success: true});


        // assert        
        expect(g_message).toBe("upload_complete");
        expect(g_file.filename).toBe(filename);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: building_detail_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, ngFilter, delete_called;
    var building_detail_ctrl, building_detail_ctrl_scope, modalInstance, labels;
    var mock_building_services, mock_project_service;
    var mock_building;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          urls,
          $q,
          building_services,
          project_service,
          $filter) {
            controller = $controller;
            scope = $rootScope;
            ngFilter = $filter;
            building_detail_ctrl_scope = $rootScope.$new();
            modal_state = "";
            delete_called = false;

            // mock the building_services factory methods used in the controller
            // and return their promises
            mock_building_services = building_services;
            mock_project_service = project_service;

            spyOn(mock_project_service, "get_project")
                .andCallFake(function(project_slug){
                    return $q.when(
                        {
                            "status": "success",
                            "project": {
                                id: 33,
                                name: "test project",
                                slug: project_slug
                            }
                        }
                    );
                }
            );
            spyOn(mock_project_service, "get_labels")
                .andCallFake(function(){
                    return $q.when(
                        {
                            "status": "success",
                            "labels": [{
                                id: 44,
                                name: "bad label",
                                color: "red"
                            }]
                        }
                    );
                }
            );
            spyOn(mock_project_service, "update_project_building")
                .andCallFake(function(building_id, project, label){
                    return $q.when(
                        {
                            "status": "success",
                            "approver": "bob doe",
                            "approved_date": "01/01/2012"
                        }
                    );
                }
            );
            spyOn(mock_building_services, "update_building")
                .andCallFake(function (building, org_id){
                    mock_building = building;
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_building_detail_controller(){
        var fake_building = {
            id: 511,
            pk: 511,
            gross_floor_area: 123456,
            gross_floor_area_source: 2,
            city: "DC",
            city_source: 4,
            tax_lot_id: "11/22",
            tax_lot_id_source: 3,
            extra_data: {
                'some other key': 12344,
                'some other key that is not in a parent': 223
            },
            extra_data_sources: {
                'some other key': 2,
                'some other key that is not in a parent': 3
            },
            created: "at some point"
        };
        var fake_imported_buildings = [
            {
                id: 2,
                pk: 2,
                gross_floor_area: 123456,
                gross_floor_area_source: null,
                city: "Washington, DC",
                city_source: null,
                extra_data: {
                    'some other key': 123,
                    'some other key that is not in a child': 333,
                    'some floor area': 444
                },
                extra_data_sources: {
                    'some other key': null,
                    'some other key that is not in a child': 111,
                    'some floor area': 444
                },
                created: "test"
            },
            {
                id: 3,
                pk: 3,
                gross_floor_area: 2111111,
                gross_floor_area_source: null,
                city: "Washington",
                city_source: null,
                tax_lot_id: "11/22",
                tax_lot_id_source: null,
                extra_data: {
                    'make it four': 4
                },
                extra_data_sources: {
                    'make it four': null
                }
            },{
                id: 4,
                pk: 4,
                gross_floor_area: 2111111,
                gross_floor_area_source: null,
                city: "Washington",
                city_source: null,
                tax_lot_id: "11/22",
                tax_lot_id_source: null,
                extra_data: {
                    'make it four': 5
                },
                extra_data_sources: {
                    'make it four': null
                }
            }
        ];
        var fake_payload = {
            "status": "success",
            "building": fake_building,
            "imported_buildings": fake_imported_buildings,
            "projects": [],
            "user_org_id": 42
        };
        var fake_all_columns = [{
            "title": "PM Property ID",
            "sort_column": "pm_property_id",
            "class": "is_aligned_right",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Tax Lot ID",
            "sort_column": "tax_lot_id",
            "class": "is_aligned_right",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Custom ID 1",
            "sort_column": "custom_id_1",
            "class": "is_aligned_right whitespace",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Property Name",
            "sort_column": "property_name",
            "class": "",
            "title_class": "",
            "type": "string",
            "field_type": "building_information",
            "sortable": true,
            "checked": false
        }];
        building_detail_ctrl = controller('building_detail_controller', {
            $scope: building_detail_ctrl_scope,
            $routeParams: {
                building_id: 1,
                project_id: 2
            },
            building_payload: fake_payload,
            all_columns: {
                fields: fake_all_columns
            },
            audit_payload: {
                audit_logs: []
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should have an building payload", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.building.id).toBe(511);
        expect(building_detail_ctrl_scope.imported_buildings[0].id).toBe(2);
    });

    it("should get labels on load", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.labels[0].id).toBe(44);
        expect(building_detail_ctrl_scope.labels[0].name).toBe("bad label");
        expect(building_detail_ctrl_scope.labels[0].color).toBe("red");
    });

    it("should highlight the active project", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.is_active_project({id:33}))
        .toBe(true);
        expect(building_detail_ctrl_scope.is_active_project({id:34}))
        .toBe(false);
        building_detail_ctrl_scope.project = undefined;
        expect(building_detail_ctrl_scope.is_active_project({id:34}))
        .toBe(false);
    });

    it("should make a copy of building while making edits", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.save_building_state();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;

        // assertions
        expect(building_detail_ctrl_scope.building_copy.gross_floor_area)
        .toBe(123456);
    });
    it("should restore the copy of building if a user clicks cancel",
        function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.save_building_state();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;
        building_detail_ctrl_scope.restore_building();

        // assertions
        expect(building_detail_ctrl_scope.building.gross_floor_area)
        .toBe(123456);
        expect(building_detail_ctrl_scope.building.edit_form_showing).toBe(false);
    });
    it("should save a building when a user clicks the save button", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;
        building_detail_ctrl_scope.save_building();

        // assertions
        expect(mock_building_services.update_building)
        .toHaveBeenCalledWith(building_detail_ctrl_scope.building, 42);
        expect(mock_building.gross_floor_area).toEqual(43214);
    });
    it("should show a default label if a building doesn't have one", function() {
        // arrange
        create_building_detail_controller();
        var building_with_label = {
            label: {
                name: "hello",
                label: "success"
            }
        };
        var building_without_label = {};
        var label_with, label_without;

        // act
        building_detail_ctrl_scope.$digest();
        label_with = building_detail_ctrl_scope.get_label(building_with_label);
        label_without = building_detail_ctrl_scope.get_label(building_without_label);

        // assertions
        expect(label_with).toEqual({
                name: "hello",
                label: "success"
            });
        expect(label_without).toEqual({
                name: "Add Label",
                label: "default"
            });
    });

    it("should show a project or buildings breadcrumb", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.user.project_slug = "project_1";

        // assertions
        expect(building_detail_ctrl_scope.is_project()).toEqual(true);
        building_detail_ctrl_scope.user.project_slug = undefined;
        expect(building_detail_ctrl_scope.is_project()).toEqual(false);

    });
    it("should show the default projects table if a user has no compliance" +
        " projects", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.user.has_projects()).toEqual(false);
        building_detail_ctrl_scope.projects = [{id: 1, name: "a"}];
        expect(building_detail_ctrl_scope.user.has_projects()).toEqual(true);

    });

    it("should set only building attribute to master, not ids or children", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.is_valid_key('id')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('pk')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('pk_source')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key(' extra_data ')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('gross_floor_area'))
          .toEqual(true);
    });
    it("should update a project-building label", function() {
        // arrange
        create_building_detail_controller();
        var project = {
            id: 2,
            building: {}
        };

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.update_project_building(project,
            {
                name: "label name",
                color: "red"
            });
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(mock_project_service.update_project_building).toHaveBeenCalled();
        expect(project.building.approver).toEqual("bob doe");
        expect(project.building.approved_date).toEqual("01/01/2012");
        expect(project.building.label.name).toEqual("label name");
        expect(project.building.label.color).toEqual("red");

    });
    it("should set a field as source when clicked", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[0].is_master = true;
        expect(building_detail_ctrl_scope.building.gross_floor_area_source)
          .not.toEqual(building_detail_ctrl_scope.building.id);
        building_detail_ctrl_scope.set_self_as_source('gross_floor_area');
        building_detail_ctrl_scope.set_self_as_source('some other key', true);
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.building.gross_floor_area_source)
          .toEqual(building_detail_ctrl_scope.building.id);
        expect(building_detail_ctrl_scope.imported_buildings[0].is_master)
          .toEqual(false);
    });
    it("should set a column as the dominant source when clicked", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[1].is_master = true;
        building_detail_ctrl_scope.make_source_default(
            building_detail_ctrl_scope.imported_buildings[0]);
        building_detail_ctrl_scope.$digest();

        // assertions
        var b = building_detail_ctrl_scope.building,
            i = building_detail_ctrl_scope.imported_buildings[0],
            i_other = building_detail_ctrl_scope.imported_buildings[1];

        expect(b.gross_floor_area_source).toEqual(i.id);
        expect(b.id).not.toEqual(i.id);
        expect(b.pk).not.toEqual(i.id);
        expect(b.city).toEqual(i.city);
        expect(b.city_source).toEqual(i.id);
        expect(b.tax_lot_id).toEqual("11/22");
        expect(b.tax_lot_id_source).toEqual(i_other.id);
        expect(b.extra_data['some other key']).toEqual(123);
        expect(b.extra_data_sources['some other key']).toEqual(i.id);
        expect(b.extra_data['some other key that is not in a child']).toEqual(333);
        expect(b.extra_data_sources['some other key that is not in a child']).toEqual(i.id);
        expect(b.extra_data['some other key that is not in a parent']).toEqual(223);
        expect(b.extra_data_sources['some other key that is not in a parent']).toEqual(i_other.id);
        expect(b.created).toEqual("at some point");

        expect(i.is_master).toEqual(true);
        expect(i_other.is_master).toEqual(false);
    });
    it("should set the master building value when parent's value is clicked",
        function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[1].is_master = true;
        building_detail_ctrl_scope.set_building_attribute(
            building_detail_ctrl_scope.imported_buildings[0], 'city');
        building_detail_ctrl_scope.set_building_attribute(
            building_detail_ctrl_scope.imported_buildings[0], 'some other key', true);
        building_detail_ctrl_scope.$digest();

        // assertions
        var b = building_detail_ctrl_scope.building,
            i = building_detail_ctrl_scope.imported_buildings[0],
            i_other = building_detail_ctrl_scope.imported_buildings[1];

        expect(b.id).not.toEqual(i.id);
        expect(b.pk).not.toEqual(i.id);
        expect(b.city).toEqual(i.city);
        expect(b.city_source).toEqual(i.id);
        expect(b.tax_lot_id).toEqual("11/22");
        expect(b.tax_lot_id_source).toEqual(i_other.id);
        expect(b.extra_data['some other key']).toEqual(123);
        expect(b.extra_data_sources['some other key']).toEqual(i.id);

        expect(i.is_master).toEqual(false);
        expect(i_other.is_master).toEqual(false);
    });

    it("should display all the data within all the buildings", function() {
        // arrange
        create_building_detail_controller();
        var keys;

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        var edc = building_detail_ctrl_scope.data_columns;

        // should not duplicate keys
        expect(edc.length).toEqual(8);
        keys = edc.map(function ( d ) {
            return d.key;
        });
        expect(keys.indexOf('make it four')).toEqual(4);
    });

    it("should display Floor Areas", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.$digest();

        // assertions
        var area_fields = building_detail_ctrl_scope.floor_area_fields;
        expect(area_fields.length).toEqual(1);
    });

    it("should display Floor Areas with number", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.get_number("")).toEqual(0);
        expect(building_detail_ctrl_scope.get_number("123,123,123")).toEqual(123123123);
        expect(building_detail_ctrl_scope.get_number("123,123,123.123")).toEqual(123123123.123);
        expect(building_detail_ctrl_scope.get_number("-123,123,123")).toEqual(-123123123);
        expect(building_detail_ctrl_scope.get_number(-123123123)).toEqual(-123123123);


    });
});

describe("controller: concat_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var scope, controller, modal_state;
    var edit_ctrl, concat_modal_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label, mock_mapping_service, mock_matching_service;
    var global_step = 1;
    var global_dataset = {};

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
            $controller, $rootScope, $modal, urls, $q
        ) {
            controller = $controller;
            scope = $rootScope;
            concat_modal_ctrl_scope = $rootScope.$new();
            concat_modal_ctrl_scope.concat_columns = [];
            modal_state = "";
        }
    ));

    var mock_building_column_types = [
        'address1', 'city', 'state', 'postal_code'
    ];

    var mock_raw_columns = [
        {
            name: 'Address',
            suggestion: 'address1',
            confidence: 1,
            raw_data: [
                '234 Database way',
                '23444 Huh hwy',
                '23444 Huh hwy',
                '23444 Huh hwy',
                '1223 face pl.'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        },
        {
            name: 'City',
            suggestion: 'city',
            confidence: 1,
            raw_data: [
                'Mega City', 'Mega City', 'Mega City', 'Mega City', 'Mega City'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        },
        {
            name: 'Zip',
            suggestion: '',
            confidence: 0,
            raw_data: [
                '234233', '234233', '234233', '234233', '234233'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        }
    ];

    // this is outside the beforeEach so it can be configured by each unit test
    function create_concat_modal_controller(){
        edit_ctrl = controller('concat_modal_ctrl', {
            $scope: concat_modal_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            building_column_types: mock_building_column_types,
            raw_columns: mock_raw_columns
        });
    }

    /*
     * Test scenarios
     */

    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.close_concat_modal();
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should mangle scope appropriately during concatenation", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(3);

        // arrange
        concat_modal_ctrl_scope.concat_columns =
            concat_modal_ctrl_scope.raw_columns.slice(0);
        concat_modal_ctrl_scope.raw_columns = [];

        // act
        concat_modal_ctrl_scope.$digest();
        concat_modal_ctrl_scope.save_concat();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(1);
        expect(
            concat_modal_ctrl_scope.raw_columns[0].is_concatenated
        ).toEqual(true);
    });

    it("should modify the raw_data of our modified TCM correctly", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(3);

        // arrange
        concat_modal_ctrl_scope.concat_columns =
            concat_modal_ctrl_scope.raw_columns.slice(0);
        concat_modal_ctrl_scope.raw_columns = [];

        // act
        concat_modal_ctrl_scope.$digest();
        concat_modal_ctrl_scope.save_concat();

        var expected_raw = [
            '234 Database way Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '1223 face pl. Mega City 234233'
        ];

        // assertions
        expect(
            concat_modal_ctrl_scope.raw_columns[0].raw_data
        ).toEqual(expected_raw);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: create_organization_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_organization_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, organization_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        mock_organization_service = organization_service;
        spyOn(mock_organization_service, "create_sub_org")
            .andCallFake(function(org, sub_org){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_organization_modal_ctrl(){
        ctrl = ctrl('create_organization_modal_ctrl', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            organization: {organization_id: 1}
        });
    }

    /*
     * Test scenarios
     */

    it("should call the organization service to add a new sub_org",
        function() {
        // arrange
        create_organization_modal_ctrl();

        // act
        ctrl_scope.$digest();
        ctrl_scope.sub_org.name = "my shiny new org";
        ctrl_scope.sub_org.email = "jb.smooth@be.com";
        ctrl_scope.submit_form(true);

        // assertions
        expect(mock_organization_service.create_sub_org)
            .toHaveBeenCalledWith(
                {
                    organization_id: 1
                },
                {
                    name: "my shiny new org",
                    email: "jb.smooth@be.com"
                }
            );
    });
    
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: data_upload_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_uploader_service, scope, controller, modal_state;
    var edit_ctrl, data_upload_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label, mock_mapping_service, mock_matching_service;
    var global_step = 1;
    var global_dataset = {};
    var return_labels = [
        {
            "name": 'compliant',
            "color": 'green',
            "id": 1
        },
        {
            "name": "new label",
            "color": "blue",
            "id": 2
        }
    ];

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, uploader_service, mapping_service, matching_service) {
            controller = $controller;
            scope = $rootScope;
            data_upload_ctrl_scope = $rootScope.$new();
            modal_state = "";

            // mock the uploader_service factory methods used in the controller
            // and return their promises
            mock_uploader_service = uploader_service;
            mock_mapping_service = mapping_service;
            mock_matching_service = matching_service;
            spyOn(mock_uploader_service, "get_AWS_creds")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "AWS_CLIENT_ACCESS_KEY": "123",
                            "AWS_UPLOAD_BUCKET_NAME": "test-bucket"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "check_progress")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "progress": "25.0"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "create_dataset")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "id": 3,
                                "name": dataset_name

                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error",
                                "message": "name already in use"
                            }
                        );
                    }
                }
            );
            spyOn(mock_uploader_service, "save_raw_data")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "file_id": 3
                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error"
                            }
                        );
                    }
                }
            );
            spyOn(mock_mapping_service, "start_mapping")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "file_id": 3
                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error"
                            }
                        );
                    }
                }
            );
            spyOn(mock_matching_service, "start_system_matching")
            .andCallFake(function(file_id){
                // return $q.reject for error scenario
                return $q.when(
                    {
                        "status": "success",
                        "file_id": 3
                    }
                );
            });

        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_data_upload_modal_controller(){
        edit_ctrl = controller('data_upload_modal_ctrl', {
            $scope: data_upload_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            step: global_step,
            dataset: global_dataset
        });
    }

    /*
     * Test scenarios
     */

    it("should close the modal when the close function is called", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.close();
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel function is called", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.cancel();
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

    it("should start at the step provided", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(1);

        // arrange
        global_step = 2;
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(2);
    });

    it("should goto different steps", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var step;
        step = 2;
        data_upload_ctrl_scope.goto_step(step);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(step);
    });

    it("disables the 'Name it' button if no text is entered", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(true);
    });
    it("disables the 'Name it' button if no text is entered, then cleared",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.dataset.name = undefined;
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(true);
    });
    it("enables the 'Name it' button if text is entered", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.dataset.name = "my dataset name";
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(false);
    });
    it("should show an alert if the dataset name is already in use",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.create_dataset("fail");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.alert).toBe(true);
    });
    it("should not show an alert if the dataset name is not already in use",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.create_dataset("my shiny new dataset");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.alert).toBe(false);
    });
    it("after creating a dataset, stores the dataset id", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var ds_name = "my shiny new dataset";
        data_upload_ctrl_scope.create_dataset(ds_name);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.id).toBe(3);
        expect(data_upload_ctrl_scope.dataset.name).toBe(ds_name);
    });
    it("after uploading a file, stores the file id", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var message, filename;
        message = "upload_complete";
        filename = "file1.csv";

        // act
        data_upload_ctrl_scope.uploaderfunc(message, {
            filename: filename,
            file_id: 20140313
        });
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.import_file_id).toBe(20140313);
    });
    it("should show an invalid extension alert if a file with an invalid" +
        "extension is loaded", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.uploaderfunc("invalid_extension");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.invalid_extension_alert)
            .toBe(true);
    });
    it("should hide the upload button after the user selects a file",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename;
        message = "upload_submitted";
        filename = "file1.csv";

        // act
        data_upload_ctrl_scope.uploaderfunc(message, {filename: filename});
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.filename).toBe(filename);
        expect(data_upload_ctrl_scope.uploader.in_progress).toBe(true);
    });
    it("should show the progressbar during upload",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename, progress;
        message = "upload_in_progress";
        filename = "file1.csv";
        progress = {
            loaded: 10,
            total: 100
        };

        // act
        data_upload_ctrl_scope.uploaderfunc(message, filename, progress);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.in_progress).toBe(true);
        expect(data_upload_ctrl_scope.uploader.progress).toBe(2.5);
    });
    it("should start saving the energy data when the file has been uploaded",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename;
        message = "upload_complete";
        filename = "file1.csv";
        data_upload_ctrl_scope.step.number = 4;

        // act
        data_upload_ctrl_scope.uploaderfunc(message, filename);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.status_message)
            .toBe("saving energy data");
    });

    it("should take an dataset payload", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.name).toBe("");
        expect(data_upload_ctrl_scope.dataset.filename).toBe("");
        expect(data_upload_ctrl_scope.dataset.id).toBe(0);
    });

    it("should extend a custom dataset payload", function() {
        // arrange
        global_dataset = {
            id: 100,
            filename: "seed_data.csv",
            name: "Compliance Project"
        };
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.name).toBe("Compliance Project");
        expect(data_upload_ctrl_scope.dataset.filename).toBe("seed_data.csv");
        expect(data_upload_ctrl_scope.dataset.id).toBe(100);
        expect(data_upload_ctrl_scope.dataset.alert).toBe(false);

    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: dataset_detail_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, ngFilter, delete_called;
    var dataset_detail_ctrl, dataset_detail_ctrl_scope, modalInstance, labels;

    

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, dataset_service, $filter) {
            controller = $controller;
            scope = $rootScope;
            ngFilter = $filter;
            dataset_detail_ctrl_scope = $rootScope.$new();
            modal_state = "";
            delete_called = false;

            // mock the dataset_service factory methods used in the controller
            // and return their promises
            mock_dataset_service = dataset_service;
            spyOn(mock_dataset_service, "get_dataset")
                .andCallFake(function(dataset_id){
                    // return $q.reject for error scenario
                    var fake_importfiles = [
                        {
                            name: "DC_CoveredBuildings_50k.csv",
                            number_of_buildings: 511,
                            number_of_mappings: 511,
                            number_of_cleanings: 1349,
                            source_type: "Assessed Raw",
                            number_of_matchings: 403
                        },
                        {
                            name: "DC_ESPM_Report.csv",
                            number_of_buildings: 511,
                            number_of_matchings: 403,
                            source_type: "Portfolio Raw"
                        }
                    ];
                    var fake_dataset = {
                        name: "DC 2013 data",
                        last_modified: (new Date()).getTime(),
                        last_modified_by: "john.s@buildingenergy.com",
                        number_of_buildings: 89,
                        id: 1,
                        importfiles: fake_importfiles
                    };
                    var fake_payload = {
                        "status": "success",
                        "dataset": fake_dataset
                    };
                    if (delete_called) {
                        fake_payload.dataset.importfiles.pop();
                    }
                    console.log({delete_called: delete_called, ds: fake_payload});
                    return $q.when(fake_payload);
                }
            );

            spyOn(mock_dataset_service, "delete_file")
                .andCallFake(function(import_file){
                    delete_called = true;
                    console.log({d: "delete_called"});
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_detail_controller(){
        var fake_importfiles = [
            {
                name: "DC_CoveredBuildings_50k.csv",
                number_of_buildings: 511,
                number_of_mappings: 511,
                number_of_cleanings: 1349,
                source_type: "Assessed Raw",
                number_of_matchings: 403
            },
            {
                name: "DC_ESPM_Report.csv",
                number_of_buildings: 511,
                number_of_matchings: 403,
                source_type: "Portfolio Raw"
            }
        ];
        var fake_dataset = {
            name: "DC 2013 data",
            last_modified: (new Date()).getTime(),
            last_modified_by: "john.s@buildingenergy.com",
            number_of_buildings: 89,
            id: 1,
            importfiles: fake_importfiles
        };
        var fake_payload = {
            "status": "success",
            "dataset": fake_dataset
        };
        dataset_detail_ctrl = controller('dataset_detail_controller', {
            $scope: dataset_detail_ctrl_scope,
            dataset_payload: fake_payload
        });
    }

    /*
     * Test scenarios
     */

    it("should have an data set payload with import files", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        dataset_detail_ctrl_scope.$digest();

        // assertions
        expect(dataset_detail_ctrl_scope.dataset.importfiles.length).toBe(2);
    });

    it("should show an alert when the delete icon is clicked", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        dataset_detail_ctrl_scope.$digest();
        var importfiles = dataset_detail_ctrl_scope.dataset.importfiles;
        dataset_detail_ctrl_scope.delete_file(importfiles[0]);
        dataset_detail_ctrl_scope.$digest();

        // assertions
        expect(dataset_detail_ctrl_scope.dataset.importfiles.length).toBe(1);
    });
   
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: dataset_list_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, modal_state;
    var edit_ctrl, dataset_list_ctrl_scope, modalInstance, labels;
    var location;

    

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, uploader_service,
            $location) {
            controller = $controller;
            scope = $rootScope;
            dataset_list_ctrl_scope = $rootScope.$new();
            modal_state = "";
            location = $location;

            // mock the uploader_service factory methods used in the controller
            // and return their promises
            mock_uploader_service = uploader_service;
            spyOn(mock_uploader_service, "get_AWS_creds")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "AWS_CLIENT_ACCESS_KEY": "123",
                            "AWS_UPLOAD_BUCKET_NAME": "test-bucket"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "create_dataset")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "import_record_id": 3,
                                "import_record_name": dataset_name

                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error",
                                "message": "name already in use"
                            }
                        );
                    }
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_list_controller(){
        var fake_datasets_payload = {
            "status": "success",
            "datasets": [
                {
                    name: "DC 2013 data",
                    last_modified: (new Date()).getTime(),
                    last_modified_by: "john.s@buildingenergy.com",
                    number_of_buildings: 89
                },
                {
                    name: "DC 2014 data",
                    last_modified: (new Date()).getTime() -
                        1550 * 60 * 60 * 1000,
                    last_modified_by: "gavin.m@buildingenergy.com",
                    number_of_buildings: 70
                }
            ]
        };
        edit_ctrl = controller('dataset_list_controller', {
            $scope: dataset_list_ctrl_scope,
            datasets_payload: fake_datasets_payload
        });
    }

    /*
     * Test scenarios
     */

    it("should have a dataset_payload", function() {
        // arrange
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();

        // assertions
        expect(dataset_list_ctrl_scope.datasets.length).toEqual(2);
    });

    it("should disable the mapping button if the dataset has no" +
        " Assessor files", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Portfolio Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_assessor_files(dataset);

        // assertions
        expect(disabled).toEqual(true);
    });

    it("should enable the mapping button if the dataset has at least one" +
        " Assessor file", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_assessor_files(dataset);

        // assertions
        expect(disabled).toEqual(false);
    });
    it("should disable the matching button if the dataset has no" +
        " Portfolio Manger files", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Assessed Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_pm_files(dataset);

        // assertions
        expect(disabled).toEqual(true);
    });
    it("should enable the matching button if the dataset has at least one" +
        " Portfolio Manger file", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_pm_files(dataset);

        // assertions
        expect(disabled).toEqual(false);
    });
    it("should navigate to the mapping page of the first assessed" +
        " import file when the ``Mapping`` button is clicked", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Assessed Raw",
                    id: 3
                },
                {
                    source_type: "Assessed Raw",
                    id: 5
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        dataset_list_ctrl_scope.goto_mapping(dataset);

        // assertions
        expect(location.path()).toBe('/data/mapping/3');
    });
    it("should navigate to the matching page of the first Portfolio Manager" +
        " import file when the ``Matching`` button is clicked", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw",
                    id: 3
                },
                {
                    source_type: "Portfolio Raw",
                    id: 5
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        dataset_list_ctrl_scope.goto_matching(dataset);

        // assertions
        expect(location.path()).toBe('/data/matching/3');
    });

   
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: delete_modal_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, building_services, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        // mock the export_service factory methods used in the controller
        // and return their promises
        mock_building_services = building_services;
        spyOn(mock_building_services, "delete_buildings")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_delete_modal_controller(){
        ctrl = ctrl('delete_modal_controller', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            search: { 
                selected_buildings: [1,2],
                filter_params: {},
                select_all_checkbox: false,
                order_by: "",
                sort_reverse: false,
                number_matching_search: 1000
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should start at the delete page", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.delete_state).toEqual("delete"); 
    });
    it("should save the search paramaters",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.delete_payload;
        expect(b.selected_buildings).toEqual([1,2]);
        expect(b.filter_params).toEqual({});
        expect(b.order_by).toEqual("");
        expect(b.sort_reverse).toEqual(false);
        expect(b.select_all_checkbox).toEqual(false);
    });
    it("should delete when the delete button is clicked",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.delete_buildings();

        // assertions
        expect(ctrl_scope.delete_state).toEqual("prepare");
        expect(mock_building_services.delete_buildings).toHaveBeenCalled();
    });
    it("should show the success page when the delete is finished",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.delete_buildings();
        ctrl_scope.$digest();

        // assertions
        expect(mock_building_services.delete_buildings).toHaveBeenCalled();
        expect(ctrl_scope.delete_state).toEqual("success");
    });
    it("should show the number of buildings to be deleted",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        var number_to_delete = ctrl_scope.number_to_delete();

        // assertions
        expect(number_to_delete).toEqual(2);
    });
    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.close();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.cancel();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

  
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myDistrictApp = angular.module('myDistrictApp', ['district']);

describe("The district filter", function() {
    beforeEach(module('myDistrictApp'));
    it('replaces `district` with `County/District/Ward/Borough`',
        inject(function(districtFilter) {
            // normal cases
            expect(districtFilter('district')).toBe('County/District/Ward/Borough');
            expect(districtFilter('District')).toBe('County/District/Ward/Borough');
            expect(districtFilter('DistRict')).toBe('County/District/Ward/Borough');
            expect(districtFilter('DISTRICT')).toBe('County/District/Ward/Borough');
            expect(districtFilter('aDISTRICT')).toBe('aDISTRICT');
            expect(districtFilter('')).toBe('');
            expect(districtFilter('district ')).toBe('district ');
            expect(districtFilter('ok')).toBe('ok');
            expect(districtFilter(undefined)).toBe(undefined);
            expect(districtFilter(null)).toBe(null);
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: edit_label_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, modal_state;
    var edit_ctrl, edit_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label;
    var return_labels = [
        {
            "name": 'compliant',
            "color": 'green',
            "id": 1
        },
        {
            "name": "new label",
            "color": "blue",
            "id": 2
        }
    ];

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, urls, $q, project_service) {
        controller = $controller;
        scope = $rootScope;
        edit_ctrl_scope = $rootScope.$new();
        modal_state = "";

        // mock the project_service factory methods used in the controller
        // and return their promises
        mock_project_service = project_service;
        spyOn(mock_project_service, "get_labels")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success", "labels": return_labels});
            }
        );
        spyOn(mock_project_service, "add_label")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
        spyOn(mock_project_service, "delete_label")
            .andCallFake(function(label){
                deleted_label = label;
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
        spyOn(mock_project_service, "update_label")
            .andCallFake(function(label){
                updated_label = label;
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );

    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_edit_modal_controller(){
        var labels = [
            {
                "name": 'compliant',
                "color": 'green',
                "id": 1
            }
        ];

        edit_ctrl = controller('edit_label_modal_ctrl', {
            $scope: edit_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            labels: labels
        });
    }

    /*
     * Test scenarios
     */

    it("should initialize the default label", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.$digest();
        edit_ctrl_scope.initialize_label_modal();

        // assertions
        expect(edit_ctrl_scope.label_modal.color).toBe("gray");
        expect(edit_ctrl_scope.label_modal.label).toBe("default");
        expect(edit_ctrl_scope.label_modal.name).toBe("");
        expect(edit_ctrl_scope.modal.label.state).toBe("create");
    });

    it("should get the labels available to an organization", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.add_label({});  // calls private get_labels
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.labels.length).toBe(2);
    });

    it("should add a label in the user's organization", function() {
        // arrange
        create_edit_modal_controller();
        var label_to_add = {
            color: "blue",
            label: "primary",
            name: "new label"
        };

        // act
        edit_ctrl_scope.add_label(label_to_add);
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.labels.length).toBe(2);
        expect(edit_ctrl_scope.labels[1].color).toBe("blue");
        expect(edit_ctrl_scope.labels[1].name).toBe("new label");
    });

    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.close();
        edit_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.cancel();
        edit_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

    it("sets the label_modal to the label when its edit button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.edit_label(label);
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.label_modal.color).toBe(label.color);
        expect(edit_ctrl_scope.label_modal.name).toBe(label.name);
        expect(edit_ctrl_scope.modal.label.state).toBe("edit");

        // assert that edit_ctrl_scope.label_modal is a copy and not a reference to label
        edit_ctrl_scope.label_modal.name = "random name here";
        expect(edit_ctrl_scope.label_modal.name).not.toBe(label.name);
    });
    
    it("deletes the appropriate label when the delete button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.delete_label(label);
        edit_ctrl_scope.$digest();

        // assertions
        expect(deleted_label).toBe(label);
    });

    it("updates the appropriate label when the update label button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.edit_label(label);
        edit_ctrl_scope.$digest();
        edit_ctrl_scope.label_modal.name = "harry";
        edit_ctrl_scope.label_modal.color = "blue";
        edit_ctrl_scope.update_label(edit_ctrl_scope.label_modal);
        edit_ctrl_scope.$digest();

        // assertions
        expect(mock_project_service.update_label).toHaveBeenCalledWith(edit_ctrl_scope.label_modal);
        expect(updated_label).toBe(edit_ctrl_scope.label_modal);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: export_modal_controller", function(){
    // globals set up and used in each test scenario
    var mock_export_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, export_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        // mock the export_service factory methods used in the controller
        // and return their promises
        mock_export_service = export_service;
        spyOn(mock_export_service, "export_buildings")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success", "export_id": "123456"});
            }
        );
        spyOn(mock_export_service, "export_buildings_progress")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({
                    "status": "success",
                    "buildings_processed": 1000
                });
            }
        );
            spyOn(mock_export_service, "export_buildings_download")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({
                    "status": "success",
                    "url": "#"
                });
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_export_modal_controller(){
        ctrl = ctrl('export_modal_controller', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            search: { 
                selected_buildings: [],
                filter_params: {},
                select_all_checkbox: false,
                order_by: "",
                sort_reverse: false,
                number_matching_search: 1000
            },
            selected_fields: ['tax_lot_id', 'postal_code'],
            project: {
                id: 11
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should start at the create page", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.export_state).toEqual("create"); 
    });
    it("should start with an empty name and default file type of 'xls'",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.building_export;
        expect(b.export_name).toEqual("");
        expect(b.export_type).toEqual("xls");
    });
    it("should save the search paramaters",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.building_export;
        expect(b.selected_buildings).toEqual([]);
        expect(b.filter_params).toEqual({});
        expect(b.order_by).toEqual("");
        expect(b.sort_reverse).toEqual(false);
        expect(b.select_all_checkbox).toEqual(false);
        expect(b.selected_fields).toEqual(['tax_lot_id', 'postal_code']);
        expect(b.project_id).toEqual(11);
        expect(ctrl_scope.progress_denominator).toEqual(0);
    });
    it("should kick off the export process when the export button is clicked",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.export_buildings();

        // assertions
        expect(ctrl_scope.export_state).toEqual("prepare");
        expect(mock_export_service.export_buildings).toHaveBeenCalled();
    });
    it("should show the success page when the data is ready",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.show_success_page("123");
        ctrl_scope.$digest();

        // assertions
        expect(mock_export_service.export_buildings_download).toHaveBeenCalled();
        expect(ctrl_scope.export_state).toEqual("success");
    });
    it("should update the progress bar",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.monitor_progress("123", 1000);
        ctrl_scope.$digest();
        timeout.flush();

        // assertions
        expect(mock_export_service.export_buildings_progress).toHaveBeenCalled();
        expect(ctrl_scope.progress_percentage).toEqual(100);
        expect(ctrl_scope.progress_numerator).toEqual(1000);
        expect(ctrl_scope.progress_denominator).toEqual(1000);
    });
    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.close();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.cancel();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

  
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
/**
 * tests fromNow angularjs filter wrapper of moment.js
 * uses epoch milliseconds as that is what the back-end returns
 */

// create dummy angularJS app to attach filter(s)
var myfromNowFilterApp = angular.module('myfromNowFilterApp', ['fromNow']);

describe("The fromNow filter", function() {
    beforeEach(module('myfromNowFilterApp'));

    it('shows the present time as "a few seconds ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('a few seconds ago');
        })
    );

    it('shows 5 minutes ago as "5 minutes ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 5  * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('5 minutes ago');
        })
    );

    it('shows 4 hours ago as "4 hours ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 4 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('4 hours ago');
        })
    );

    it('shows 24 hours ago as "a day ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 24 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('a day ago');
        })
    );

    it('shows 36 hours ago as "2 days ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 36 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('2 days ago');
        })
    );

    it('shows 1550 hours ago as "2 months ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 1550 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('2 months ago');
        })
    );

    it('defaults to "a few seconds ago" for undefined values',
        inject(function(fromNowFilter) {
            // arrange

            // act

            // assert
            expect(fromNowFilter(undefined)).toBe('a few seconds ago');
            expect(fromNowFilter(null)).toBe('a few seconds ago');
            expect(fromNowFilter("some text")).toBe('a few seconds ago');
            expect(fromNowFilter({})).toBe('a few seconds ago');
            expect(fromNowFilter({time: "not time"})).toBe('a few seconds ago');
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myignoremapApp = angular.module('myignoremapApp', ['ignoremap']);

describe("The ignoremap filter", function() {
    beforeEach(module('myignoremapApp'));
    it('replaces `""` with `------ Ignore Row ------`',
        inject(function(ignoremapFilter) {
            // normal cases
            expect(ignoremapFilter('')).toBe('------ Ignore Row ------');
            expect(ignoremapFilter(' ')).toBe(' ');
            expect(ignoremapFilter('aignoremap')).toBe('aignoremap');
            expect(ignoremapFilter('ignoremap ')).toBe('ignoremap ');
            expect(ignoremapFilter('ok')).toBe('ok');
            expect(ignoremapFilter(undefined)).toBe('------ Ignore Row ------');
            expect(ignoremapFilter(null)).toBe('------ Ignore Row ------');
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: mapping_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, modal_state;
    var mapping_ctrl, mapping_ctrl_scope, modalInstance, labels;
    var timeout, mock_user_service, mock_search_service;



    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, building_services, $timeout, user_service, search_service) {
            controller = $controller;
            scope = $rootScope;
            mapping_ctrl_scope = $rootScope.$new();
            modal_state = "";
            timeout = $timeout;
            mock_user_service = user_service;
            mock_search_service = search_service;

            spyOn(mock_user_service, 'set_default_columns')
                .andCallFake(function(mapped_columns){
                    return undefined;
                });
            spyOn(mock_search_service, 'search_buildings')
                .andCallFake(function(){
                    return [1,2,3];
                });
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_mapping_controller(){
        var mock_datasets = [
            {
                name: "DC 2013 data",
                last_modified: (new Date()).getTime(),
                last_modified_by: "john.s@buildingenergy.com",
                number_of_buildings: 89,
                id: 1
            },
            {
                name: "DC 2014 data",
                last_modified: (new Date()).getTime() -
                    1550 * 60 * 60 * 1000,
                last_modified_by: "gavin.m@buildingenergy.com",
                number_of_buildings: 70,
                id: 2
            }
        ];
        var fake_import_file_payload = {
            "status": "success",
            "import_file": {
                        file_name: "assessor_fun.csv",
                        last_modified: (new Date()).getTime(),
                        last_modified_by: "john.s@buildingenergy.com",
                        source_type: 'AssessorRaw',
                        dataset: mock_datasets[0],
                        id: 1
                    }
        };

        var mock_be_building_columns = [
            'pm_property_id',
            'property_name',
            'property_notes',
            'tax_lot_id',
            'gross_floor_area',
            'My New non-BEDES field'
        ];

        var mock_be_building_types = {
            'gross_floor_area': {
                unit_type: 'float',
                schema: 'BEDES'
            }
        };

        var mock_mapping_suggestions_payload = {
            'status': 'success',
            'suggested_column_mappings': {
                // key(django model attribute): [csv_header1, ... csv_header3]
                'property id': ['pm_property_id', 89],
                'lot number': ['tax_lot_id' , 54]
            },
            "building_columns": mock_be_building_columns,
            "building_column_types": mock_be_building_types
        };

        var mock_raw_column_names = [
            'property id',
            'property_name',
            'property_notes',
            'lot number',
            'lot size'
        ];

        var mock_first_five_rows = [];
        for (var i=0; i < 4; i++) {
            mock_first_five_rows.push({
                'property id': i,
                'property_name': 'Property ' + i,
                'property_notes': 'Nup.',
                'lot number': i * 2,
                'lot size': 454 * i
            });
        }

        mock_first_five_rows.push({
            'property id': '121L',
            'property_name': 'Inconsistent Property',
            'property_notes': 'N/A',
            'lot number': 'N/A',
            'lot size': 45
        });

        var raw_columns_payload = {
            "status": "success",
            "raw_columns": mock_raw_column_names
        };
        var first_five_rows_payload = {
            "status": "success",
            "first_five_rows": mock_first_five_rows
        };
        mapping_ctrl = controller('mapping_controller', {
            $scope: mapping_ctrl_scope,
            import_file_payload: fake_import_file_payload,
            suggested_mappings_payload: mock_mapping_suggestions_payload,
            raw_columns_payload: raw_columns_payload,
            first_five_rows_payload: first_five_rows_payload,
            all_columns: {fields: []},
            building_services: mock_building_services,
            $timeout: timeout
        });
    }

    /*
     * Test scenarios
     */

    it("should have a import_file_payload", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        expect(mapping_ctrl_scope.import_file.dataset.name).toBe("DC 2013 data");
    });

    it("should show suggested mappings and confidence", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        var raw_columns = mapping_ctrl_scope.raw_columns;
        var first_column = raw_columns[0];

        expect(first_column.confidence).toBe(89);
        expect(first_column.suggestion).toBe("Pm Property Id");
    });

    it("should show 'low', 'med', 'high', or '' confidence text", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        var raw_columns = mapping_ctrl_scope.raw_columns;
        var first_column = raw_columns[0];
        expect(first_column.confidence_text()).toBe("high");
        first_column.confidence = 70;
        expect(first_column.confidence_text()).toBe("med");
        first_column.confidence = 35;
        expect(first_column.confidence_text()).toBe("low");
        delete(first_column.confidence);
        expect(first_column.confidence_text()).toBe("");
    });

    it("should validate initial data", function() {
        create_mapping_controller();
        // act
        mapping_ctrl_scope.$digest();
        // assertions
        angular.forEach(mapping_ctrl_scope.raw_columns, function(rc) {
            if (rc.suggestion !== '' && typeof(rc.suggestion) !== "undefined") {
                expect(rc.validity).toBe('valid');
            }
        });
    });

    it("should invalidate bad suggestions", function() {
        // Simulate a change on the tcm, make it fail.
        create_mapping_controller();
        // act
        mapping_ctrl_scope.$digest();
        // assertions
        //
        // We change the suggested mapping for the "property name" column
        // to "gross_floor_area" (which validates as float) to
        // purposesly cause a failing change.
        mapping_ctrl_scope.raw_columns[1].suggestion = 'gross_floor_area';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[1]);
        expect(mapping_ctrl_scope.raw_columns[1].validity).toBe('invalid');

    });

    it("should set td_class appropriately", function() {
        var tcm;

        create_mapping_controller();

        mapping_ctrl_scope.$digest();
        tcm = mapping_ctrl_scope.raw_columns[0];
        var good_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[0]
        );

        // First raw column is mapped up as pm_property_id <-> property_id
        // Any kind of string will be valid.
        expect(good_val).toBe('success');

        // Now set it to one that expects float values.
        // Only one of these will *not* validate.
        mapping_ctrl_scope.raw_columns[0].suggestion = 'gross_floor_area';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[0]);

        tcm = mapping_ctrl_scope.raw_columns[0];
        var warning_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[4]
        );

        expect(warning_val).toBe('warning');

        // We don't want the warning style to be applied to neighboring cells
        // in the same row. Check that the cell next to our invalid one is
        // unstyled (undefined).
        tcm = mapping_ctrl_scope.raw_columns[0];
        var adjacent_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[3]
        );

        expect(adjacent_val).toBe(undefined);

        // Now we're saying the suggestion is to not map.
        // Check that we don't have any class set for this row now.
        mapping_ctrl_scope.raw_columns[0].suggestion = '';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[0]);

        tcm = mapping_ctrl_scope.raw_columns[0];
        var blank_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[4]
        );

        expect(blank_val).toBe('');

    });

    it("should detect duplicates of mapped rows", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // raw_columns[0] and raw_columns[3] should be the only mapped rows
        var column = mapping_ctrl_scope.raw_columns[3];
        var test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

        // Set the property_name tcm's suggestion to the same as
        // the property_id tcm (raw_columns[0])
        column.suggestion = 'Pm Property Id';

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(true);

        // Since we mark both duplicates as duplicates, the other
        // TCM that has the 'pm_property_id' suggestion should also get
        // 'danger' as its duplicate class.
        var other_dup = mapping_ctrl_scope.is_tcm_duplicate(
            mapping_ctrl_scope.raw_columns[0]
        );
        expect(other_dup).toBe(true);

        // Shows that mapped_row is the sole determinant of
        // column ignoring
        column.mapped_row = false;

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

    });

    it("should ignore duplicates of unmapped rows", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // raw_columns[0] and raw_columns[3] should be the only mapped rows
        var column = mapping_ctrl_scope.raw_columns[1];
        var test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

        // Set the property_name tcm's suggestion to the same as
        // the property_id tcm (raw_columns[0])
        column.suggestion = 'Pm Property Id';

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);
    });

    it("should get mapped buildings", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        mapping_ctrl_scope.get_mapped_buildings();
        mapping_ctrl_scope.$digest();

        // assertions
        expect(mapping_ctrl_scope.search.search_buildings).toHaveBeenCalled();
        expect(mock_user_service.set_default_columns).toHaveBeenCalled();
    });

    it("should enbale the 'show & review buildings' button if duplicates are" +
        " not present", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        for (var i = mapping_ctrl_scope.raw_columns.length - 1; i >= 0; i--) {
            mapping_ctrl_scope.change(mapping_ctrl_scope.raw_columns[i]);
        }
        var duplicates_found = mapping_ctrl_scope.duplicates_present();

        // assertions
        expect(duplicates_found).toBe(false);
    });

    it("should disable the 'show & review buildings' button if duplicates " +
        "are present", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        for (var i = mapping_ctrl_scope.raw_columns.length - 1; i >= 0; i--) {
            mapping_ctrl_scope.raw_columns[i].suggestion = "pm_property_id";
            mapping_ctrl_scope.change(mapping_ctrl_scope.raw_columns[i]);
        }
        var duplicates_found = mapping_ctrl_scope.duplicates_present();

        // assertions
        expect(duplicates_found).toBe(true);
    });

    it("should get mappings in an API friendly way", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();
        var mappings = mapping_ctrl_scope.get_mappings();
        expect(mappings.length).toBe(5);
        expect(mappings[0]).toEqual(['Pm Property Id', 'property id']);
        // everything in between is empty since we we're using only
        // suggested mappings.
        expect(mappings[3]).toEqual(['Tax Lot Id', 'lot number']);
    });

    it("should show the 'STEP 2' tab when reviewing mappings", function() {
        // arrange
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // act
        var mappings = mapping_ctrl_scope.get_mapped_buildings();

        // assert
        expect(mapping_ctrl_scope.tabs).toEqual({
            'one_active': false,
            'two_active': true,
            'three_active': false
        });
    });

    it("should show BEDES fields with a checkbox", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assert
        expect(mapping_ctrl_scope.is_suggestion_BEDES('gross_floor_area')).toBe(true);
        expect(mapping_ctrl_scope.is_suggestion_BEDES('Gross Floor Area')).toBe(true);
        expect(mapping_ctrl_scope.is_suggestion_BEDES('My New non-BEDES field')).toBe(false);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: matching_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, delete_called;
    var matching_ctrl, matching_ctrl_scope, modalInstance, labels;


    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, building_services) {
            controller = $controller;
            scope = $rootScope;
            matching_ctrl_scope = $rootScope.$new();

            mock_building_services = building_services;
            spyOn(mock_building_services, "get_PM_filter_by_counts")
                .andCallFake(function(import_file){
                    return $q.when(
                        {
                            "status": "success",
                            "unmatched": 5,
                            "matched": 10
                        }
                    );
                }
            );
            spyOn(mock_building_services, "save_match")
                .andCallFake(function(b1, b2, create){
                    return $q.when(
                        {
                            "status": "success",
                            "child_id": 3
                        }
                    );
                }
            );
            spyOn(mock_building_services, "search_matching_buildings")
                .andCallFake(function(q, number_per_page, current_page, order_by, sort_reverse, 
                                        filter_params, file_id ){
                    
                    switch(filter_params.children__isnull){
                        case undefined:
                            var bldgs = [
                                {
                                    pm_property_id: 1
                                },
                                {
                                    pm_property_id: 2
                                }
                                ,
                                {
                                    pm_property_id: 3
                                }
                            ];
                            break;
                        case false:
                            var bldgs = [
                                {
                                    pm_property_id: 1
                                }
                            ];
                            break;
                        case true:
                            var bldgs = [
                                {
                                    pm_property_id: 3
                                },
                                {
                                    pm_property_id: 4
                                }
                            ];
                            break;
                    }

                    return $q.when(
                        {
                            status: "success",
                            number_returned: buildings_payload.length,
                            number_matching_search: buildings_payload.length,
                            buildings: bldgs
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_detail_controller(){
        var buildings_payload = {
            buildings: [
                {
                    pm_property_id: 1,
                    tax_lot_id: null,
                    custom_id_1: 2,
                    gross_floor_area: 111,
                    matched: true,
                    id: 1,
                    children: [3],
                    coparent: {
                        pm_property_id: null,
                        tax_lot_id: 2,
                        custom_id_1: null,
                        gross_floor_area: 111,
                        id: 2,
                        children: [3]
                    }
                }
            ],
            number_matching_search: 1,
            number_returned: 1
        };
        matching_ctrl = controller('matching_controller', {
            $scope: matching_ctrl_scope,
            buildings_payload: buildings_payload,
            all_columns: {
                fields: [{sort_column: 'pm_property_id'}]
            },
            default_columns: {
                columns: ['pm_property_id']
            },
            import_file_payload: {
                import_file: {
                    id: 1,
                    dataset: {
                        importfiles: [
                            {
                                id: 1,
                                name: "file_1.csv"
                            },
                            {
                                id: 2,
                                name: "file_2.csv"
                            }
                        ]
                    }
                }
            }
        });
    }



    /*
     * Test scenarios
     */

    it("should have a buildings payload with potential matches", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();
        var b = matching_ctrl_scope.buildings[0];

        // assertions
        expect(matching_ctrl_scope.buildings.length).toBe(1);
        expect(b.coparent.children).toEqual(b.children);
    });

    it("should provide to the view scope variables representing the number matched and the number of unmatched buildings", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();

        // assertions
        expect(matching_ctrl_scope.matched_buildings).toEqual(10);
        expect(matching_ctrl_scope.unmatched_buildings).toEqual(5);
    });

    it("should jump back to the matching list when the 'Back to list' button" +
        " is clicked", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.show_building_list = false;
        matching_ctrl_scope.back_to_list();

        // assertions
        expect(matching_ctrl_scope.show_building_list).toEqual(true);
    });

    it("should present an initial state with the matching buildings table",
        function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();

        // assertions
        expect(matching_ctrl_scope.columns).toEqual([{ sort_column : 'pm_property_id' }]);
        expect(matching_ctrl_scope.number_matching_search).toEqual(1);
        expect(matching_ctrl_scope.number_returned).toEqual(1);
        expect(matching_ctrl_scope.num_pages).toEqual(1);
        expect(mock_building_services.get_PM_filter_by_counts).toHaveBeenCalled();
    });
    it("should match a building in the matching list", function() {
        // arrange
        create_dataset_detail_controller();
        var b1, b2;
        b2 = {
            id: 2,
            children: [],
            matched: false
        };
        b1 = {
            id: 1,
            children: [],
            matched: true,
            coparent: b2
        };

        // act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.toggle_match(b1);
        matching_ctrl_scope.$digest();

        // assertions
        expect(mock_building_services.save_match).toHaveBeenCalledWith(b1.id, b2.id, true);
        expect(mock_building_services.get_PM_filter_by_counts).toHaveBeenCalled();
        expect(b1.children[0]).toEqual(3);
    });
    it("Should update the list of buildings correctly when 'Show Matched' is selected", function() {
        //arrange
        create_dataset_detail_controller();

        //act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.update_show_filter(controller.SHOW_MATCHED)

        //assertions
        expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(1);
        expect(matching_ctrl_scope.number_returned).toEqual(1);
    });
    it("Should update the list of buildings correctly when 'Show Unmatched' is selected",  function() {
        //arrange
        create_dataset_detail_controller();

        //act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.update_show_filter(controller.SHOW_UNMATCHED)

        //assertions
        expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(2);
        expect(matching_ctrl_scope.number_returned).toEqual(2);
    });
    it("Should update the list of buildings correctly when 'Show All' is selected", function() {
        //arrange
        create_dataset_detail_controller();

        //act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.update_show_filter(controller.SHOW_ALL)

        //assertions
        expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(3);
        expect(matching_ctrl_scope.number_returned).toEqual(3);
    });



});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: members_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller;
    var ctrl, ctrl_scope, modalInstance;
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          $q,
          organization_service) {
            ctrl = $controller;
            scope = $rootScope;
            ctrl_scope = $rootScope.$new();

            mock_organization_service = organization_service;
            
            spyOn(mock_organization_service, "remove_user")
                .andCallFake(function(user_id, org_id){
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
            spyOn(mock_organization_service, "get_organization_users")
                .andCallFake(function(org){
                    return $q.when(
                        {
                            "status": "success",
                            "users": [{id:1, first_name:"Bob", last_name:"D"}]
                        }
                    );
                }
            );
            spyOn(mock_organization_service, "update_role")
                .andCallFake(function(org_id, user_id, role){
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_members_controller(){
        ctrl = ctrl('members_controller', {
            $scope: ctrl_scope,
            users_payload: {users: [
                {first_name: 'J', last_name: 'S'},
                {first_name: undefined, last_name: null}
            ]},
            organization_payload: {
                organization: {name: 'my org', id: 4}
            },
            auth_payload: {
                auth: {
                    'can_invite_member': true,
                    'can_remove_member': true
                }
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should accepts its payload", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.org).toEqual({name : 'my org', id : 4});
        expect(ctrl_scope.users[0].name).toEqual("J S");
        expect(ctrl_scope.users[1].name).toEqual(" ");
    });
    it("clicking remove should remove a user", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.remove_member({user_id: 2});

        // assertions
        expect(mock_organization_service.remove_user)
            .toHaveBeenCalledWith(2, 4);
        
        ctrl_scope.$digest();
        expect(mock_organization_service.get_organization_users)
            .toHaveBeenCalledWith({org_id: 4});
    });
    it("clicking a new role should update the user's role", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.update_role({user_id: 2, role: "viewer"});

        // assertions
        expect(mock_organization_service.update_role)
            .toHaveBeenCalledWith(2, 4, 'viewer');
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: new_member_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_user_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, user_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        mock_user_service = user_service;
        spyOn(mock_user_service, "add")
            .andCallFake(function(user){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_new_member_controller(){
        ctrl = ctrl('new_member_modal_ctrl', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            organization: {organization_id: 1}
        });
    }

    /*
     * Test scenarios
     */

    it("should set the default role to 'member'", function() {
        // arrange
        create_new_member_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.user.role.value).toEqual("member"); 
    });
    it("should call the user service to add a new user to the org",
        function() {
        // arrange
        create_new_member_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.user.first_name = "JB";
        ctrl_scope.user.last_name = "Smooth";
        ctrl_scope.user.email = "jb.smooth@be.com";
        ctrl_scope.submit_form(true);

        // assertions
        expect(mock_user_service.add)
            .toHaveBeenCalledWith({
                first_name: "JB",
                last_name: "Smooth",
                email: "jb.smooth@be.com",
                role: ctrl_scope.roles[0],
                organization: {
                    organization_id: 1
                }
            });
    });
    
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
/**
 * run_jasmine.js: runs the jasmine JS test runner
 */
(function() {
    var jasmineEnv = jasmine.getEnv();
    jasmineEnv.updateInterval = 1000;

    var htmlReporter = new jasmine.HtmlReporter();

    jasmineEnv.addReporter(htmlReporter);

    jasmineEnv.specFilter = function(spec) {
        return htmlReporter.specFilter(spec);
    };

    var currentWindowOnload = window.onload;

    window.onload = function() {
        if (currentWindowOnload) {
        currentWindowOnload();
        }
        execJasmine();
    };
    function execJasmine() {
        jasmineEnv.execute();
    }
})();

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var searchTestApp = angular.module(
    'searchTestApp', ['BE.seed.service.search']
);

describe("The search_service service", function() {
    var saas, httpBackend, test_url;

    beforeEach(function () {
        module("searchTestApp");
        inject(function (search_service, $httpBackend) {
            saas = search_service;
            httpBackend = $httpBackend;
            httpBackend.when("POST", test_url).respond("ok");
        });

    });

    /**
     * sanitize_params tests
     */
    it('removes null and undefined values from filter_params', function () {
        // arrange
        saas.filter_params = {
          'National Median Site Energy Use__gte': 4,
          'National Median Site Energy Use__lte': null,
          'National Median Source EUI__gte': undefined
        };

        // act
        saas.sanitize_params();

        // assert
        expect(saas.filter_params).toEqual({'National Median Site Energy Use__gte': 4});
    });

    /**
     * search_buildings tests
     */
    it('has sane defaults', function() {
        expect(saas.url).toEqual("");
        expect(saas.error_message).toEqual("");
        expect(saas.alert).toEqual(false);
        expect(saas.buildings).toEqual([]);
        expect(saas.current_page).toEqual(1);
        expect(saas.number_per_page).toEqual(10);
        expect(saas.order_by).toEqual("");
        expect(saas.sort_column).toEqual("tax_lot_id");
        expect(saas.sort_reverse).toEqual(false);
        expect(saas.select_all_checkbox).toEqual(false);
        expect(saas.prev_page_disabled).toEqual(true);
        expect(saas.next_page_disabled).toEqual(true);
        expect(saas.num_pages).toEqual(0);
        expect(saas.query).toEqual("");
        expect(saas.showing).toEqual({
            'start': 1,
            'end': 0
        });
    });

    it('search_buildings uses the argument `query`', function() {
        saas.query = "hotels";
        saas.search_buildings("not hotels");

        expect(saas.query).toEqual("not hotels");
    });
    it('filter search resets the current page', function() {
        // arrange
        saas.current_page = 22;
        spyOn(saas, 'search_buildings');

        // act
        saas.filter_search();

        // assert
        expect(saas.current_page).toEqual(1);
        expect(saas.search_buildings).toHaveBeenCalled();
    });

    it('search_buildings function will default to its query if' +
        ' no query is passed as an argument', function() {
        saas.query = "hotels";
        saas.search_buildings();

        expect(saas.query).toEqual("hotels");
    });

    it('search_buildings hits the set url', function() {
        test_url = "/my-search-url";
        saas.url = test_url;
        saas.search_buildings();
        httpBackend.expectPOST(test_url);
        httpBackend.flush();
    });

    it('search_buildings POSTs the query data as `q`', function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.query = "hotel chains";
        saas.number_per_page = 25;
        saas.order_by = "gross_floor_area";
        saas.sort_reverse = true;
        saas.filter_params = {
            project: '2012 data'
        };

        // act
        saas.search_buildings();

        // assert
        httpBackend.expectPOST(test_url,
            {
                "q": "hotel chains",
                "number_per_page": 25,
                "order_by": "gross_floor_area",
                "sort_reverse": true,
                "filter_params": {
                    "project": "2012 data"
                },
                "page":1
            }
        ).respond(201, "");
        httpBackend.flush();
    });
    it('search_buildings updates its `buildings` model', function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.query = "hotel chains";
        saas.number_per_page = 25;
        saas.order_by = "gross_floor_area";
        saas.sort_reverse = true;
        saas.filter_params = {
            project: '2012 data'
        };

        // act
        saas.search_buildings();

        // assert
        httpBackend.expectPOST(test_url,
            {
                "q": "hotel chains",
                "number_per_page": 25,
                "order_by": "gross_floor_area",
                "sort_reverse": true,
                "filter_params": {
                    "project": "2012 data"
                },
                "page":1
            }
        ).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        expect(saas.buildings).toEqual([
            {
                name: "one",
                id: 1,
                checked: false
            },
            {
                name: "two",
                id: 2,
                checked: false
            }
        ]);
    });
    it('should clear the error and alert after a successful search',
        function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.error_message = "help";
        saas.alert = true;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {
            'buildings': [
                {
                    name: "one",
                    id: 1
                },
                {
                    name: "two",
                    id: 2
                }],
            'number_matching_search': 101
            });
        httpBackend.flush();

        // assert
        expect(saas.alert).toEqual(false);
        expect(saas.error_message).toEqual("");
    });

    /**
     * pagination tests
     */
    it('increments the page when the `next` button is clicked',
        function() {
        // arrange
        saas.num_pages = 1000;
        saas.current_page = 100;
        spyOn(saas, 'search_buildings');
        // act
        saas.next_page();

        // assert
        expect(saas.current_page).toEqual(101);
        expect(saas.search_buildings).toHaveBeenCalled();
        expect(saas.search_buildings.callCount).toEqual(1);

    });
    it('doesn\'t increment past the last page when the `next` button is' +
        ' clicked', function() {
        // arrange
        saas.num_pages = 2;
        saas.current_page = 2;
        spyOn(saas, 'search_buildings');
        // act
        saas.next_page();

        // assert
        expect(saas.current_page).toEqual(2);
        expect(saas.search_buildings).toHaveBeenCalled();
        expect(saas.search_buildings.callCount).toEqual(1);

    });
    it('decrements the page when the `previous` button is clicked',
        function() {
        // arrange
        saas.num_pages = 1000;
        saas.current_page = 100;
        spyOn(saas, 'search_buildings');
        // act
        saas.prev_page();

        // assert
        expect(saas.current_page).toEqual(99);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('does not decrement below the first page when the `previous` button' +
        ' is clicked', function() {
        // arrange
        saas.num_pages = 1;
        saas.current_page = 1;
        spyOn(saas, 'search_buildings');
        // act
        saas.prev_page();

        // assert
        expect(saas.current_page).toEqual(1);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('fetches more or less results per page when a user selects an option' +
        ' from the number per page select',
        function() {
        // arrange
        saas.number_per_page_options_model = 50;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_number_per_page();

        // assert
        expect(saas.number_per_page).toEqual(50);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('updates the number of results displayed text after a successful '+
        'search', function() {
        // standard case
        // page 2 of 3 with 10/page, so should display 11 of 20
        // arrange
        saas.current_page = 2;
        saas.num_pages = 3;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_start_end_paging();

        // assert
        expect(saas.showing.start).toEqual(11);
        expect(saas.showing.end).toEqual(20);
        expect(saas.search_buildings).not.toHaveBeenCalled();
    });
    it('displays the number matching the query if on the last page of results',
        function() {
        // standard case
        // page 3 of 3 with 10/page and 34 results, so should display 21 of 34
        // arrange
        saas.current_page = 3;
        saas.number_matching_search = 34;
        saas.num_pages = 3;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_start_end_paging();

        // assert
        expect(saas.showing.start).toEqual(21);
        expect(saas.showing.end).toEqual(34);
    });
    it('should call update_start_end_paging after a successful search',
        function() {
        // arrange
        spyOn(saas, 'update_start_end_paging');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_start_end_paging).toHaveBeenCalled();
    });
    it('should call update_buttons after a successful search',
        function() {
        // arrange
        spyOn(saas, 'update_buttons');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_buttons).toHaveBeenCalled();
    });
    it('should disable prev paging buttons at the first page',
        function() {
        // arrange
        saas.current_page = 1;
        saas.num_pages = 5;

        // act
        saas.update_buttons();

        // assert
        expect(saas.prev_page_disabled).toEqual(true);
        expect(saas.next_page_disabled).toEqual(false);
    });
    it('should disable next paging buttons at the last page',
        function() {
        // arrange
        saas.current_page = 5;
        saas.num_pages = 5;

        // act
        saas.update_buttons();

        // assert
        expect(saas.prev_page_disabled).toEqual(false);
        expect(saas.next_page_disabled).toEqual(true);
    });
    it('should calculate the number of pages after a successful search',
        function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {
            'buildings': [
                {
                    name: "one",
                    id: 1
                },
                {
                    name: "two",
                    id: 2
                }],
            'number_matching_search': 101
            });
        httpBackend.flush();

        // assert
        expect(saas.number_matching_search).toEqual(101);
        expect(saas.num_pages).toEqual(11);
    });

    /**
     * checkbox logic tests
     */
    it('should select or unselect all the viewed results when the select all' +
        ' checkbox is checked or unchecked', function() {
        // arrange
        saas.selected_buildings = [1,2,3];
        saas.select_all_checkbox = true;
        saas.buildings = [
            {
                checked: false
            },
            {
                checked: true
            }
        ];
        spyOn(saas, 'select_or_deselect_all_buildings').andCallThrough();

        // act
        saas.select_all_changed();

        // assert
        expect(saas.selected_buildings).toEqual([]);
        expect(saas.buildings).toEqual([
                {
                    checked: true
                },
                {
                    checked: true
                }
            ]);
        expect(saas.select_or_deselect_all_buildings).toHaveBeenCalled();
    });
    it('should call select_or_deselect_all_buildings after a search',
        function() {
        // arrange
        spyOn(saas, 'select_or_deselect_all_buildings');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.select_or_deselect_all_buildings).toHaveBeenCalled();
    });
    it('should add a building to the selected list when checked',
        function() {
        // arrange
        var building = {
            id: 5,
            checked: true
        };

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([5]);
    });
    it('should add a building to the selected list when unchecked and the ' +
        'select all checkbox is checked', function() {
        // arrange
        var building = {
            id: 5,
            checked: false
        };
        saas.select_all_checkbox = true;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([5]);
    });
    it('should remove a building to the selected list when unchecked',
        function() {
        // arrange
        var building = {
            id: 5,
            checked: false
        };
        saas.selected_buildings = [5,6,7];
        saas.select_all_checkbox = false;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([6,7]);
    });
    it('should remove a building to the selected list when checked if the ' +
        'select all checkbox is checked', function() {
        // arrange
        var building = {
            id: 5,
            checked: true
        };
        saas.selected_buildings = [5,6,7];
        saas.select_all_checkbox = true;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([6,7]);
    });
    it('should call load_state_from_selected_buildings after a successful ' +
        'search', function() {
        // arrange
        spyOn(saas, 'load_state_from_selected_buildings').andCallThrough();
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.load_state_from_selected_buildings).toHaveBeenCalled();
    });
    it('should call update_results after a successful ' +
        'search', function() {
        // arrange
        var select_or_deselect_all_buildings_time,
            load_state_from_selected_buildings_time;
        spyOn(saas, 'update_results').andCallThrough();
        spyOn(saas, 'select_or_deselect_all_buildings')
            .andCallFake(function() {
                select_or_deselect_all_buildings_time = new Date();
            }
        );
        spyOn(saas, 'load_state_from_selected_buildings')
            .andCallFake(function() {
                // wait for a sec, otherwise both have the same timestamp
                for(var y=0;y<100000;y++){
                    var x = new Date();
                    x = x+y;
                }
                load_state_from_selected_buildings_time = new Date();
            }
        );
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_results).toHaveBeenCalled();
        expect(select_or_deselect_all_buildings_time <
               load_state_from_selected_buildings_time).toBe(true);
    });
    it('check selected buildings successful', function() {
        // arrange
        saas.selected_buildings = [2];
        saas.buildings = [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ];

        // act
        saas.load_state_from_selected_buildings();

        // assert
        expect(saas.buildings[1]).toEqual({
            name: "two",
            id: 2,
            checked: true
        });
    });
    it('should generate columns', function() {
        // arrange
        var all_columns, column_headers, columns;
        all_columns = [
            {
                sort_column: "name"
            },
            {
                sort_column: "id"
            }
        ];
        column_headers = ["id"];
        saas.sort_column = "something else";
        saas.update_results({});
        // act
        columns = saas.generate_columns(
            all_columns, column_headers, saas.column_prototype
        );

        // assert that columns are extended off the prototype and only have
        // "id"
        expect(columns.length).toEqual(1);
        expect(columns[0].sort_column).toEqual("id");
        expect(columns[0].is_unsorted()).toEqual(true);
        saas.sort_column = "id";
        expect(columns[0].is_unsorted()).toEqual(false);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: settings_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller;
    var ctrl, ctrl_scope, modalInstance;
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          $q,
          organization_service) {
            ctrl = $controller;
            scope = $rootScope;
            ctrl_scope = $rootScope.$new();

            mock_organization_service = organization_service;
            
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_settings_controller(){
        ctrl = ctrl('settings_controller', {
            $scope: ctrl_scope,
            all_columns: {fields: [
                {checked: false, title: 'PM Property ID', sort_column: 'pm_property_id'},
                {checked: false, title: 'G', sort_column: 'g'},
                {checked: false, title: "Gross Floor Area", sort_column: 'gross_floor_area'}
            ]},
            organization_payload: {
                organization: {name: 'my org', id: 4}
            },
            query_threshold_payload: {
                query_threshold: 10
            },
            shared_fields_payload: {
                shared_fields: [
                    {
                        title: "PM Property Id",
                        sort_column: "pm_property_id"
                    }
                ],
                public_fields: [
                {
                    title: "Gross Floor Area",
                    sort_column: "gross_floor_area"
                }]
            },
            auth_payload: {
                auth: {
                    'is_owner': true,
                    'is_parent_org_owner': false
                }
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should accepts its payload", function() {
        // arrange
        create_settings_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.org).toEqual({
            name : 'my org',
            id : 4,
            query_threshold: 10
        });
        expect(ctrl_scope.fields[0].checked).toEqual(true);
        expect(ctrl_scope.fields[1].checked).toEqual(false);
        expect(ctrl_scope.fields[0].title).toEqual('PM Property ID');
    });
    it("should select all", function() {
        // arrange
        create_settings_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.controls.select_all = true;
        ctrl_scope.select_all_clicked();
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.infinite_fields[0].checked).toEqual(true);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myStripFilterApp = angular.module('myStripFilterApp', ['stripImportPrefix']);

describe("The stripImportPrefix filter", function() {
    beforeEach(module('myStripFilterApp'));
    it('Strips out the import prefix from building ids',
        // e.g. remove the 'IMP12-' from the id 'IMP12-1321/123'
        inject(function(stripImportPrefixFilter) {
            // normal cases
            expect(stripImportPrefixFilter('IMP134-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP134555-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP1-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP0-134')).toBe('134');
            // deals with `-`
            expect(stripImportPrefixFilter('IMP134-abc-dev')).toBe('abc-dev');
            // deals with `/`
            expect(stripImportPrefixFilter('IMP134-00/11')).toBe('00/11');
            // only strips first prefix
            expect(stripImportPrefixFilter('IMP134-IMP134-123')).toBe('IMP134-123');
        })
    );
    it("Does not strip out anything if there is not a prefix",
        inject(function(stripImportPrefixFilter) {
            // normal cases
            expect(stripImportPrefixFilter('123-123')).toBe('123-123');
            expect(stripImportPrefixFilter('0123/123')).toBe('0123/123');
        })
    );
    it("Is case sensitive to the import prefix",
        inject(function(stripImportPrefixFilter) {
            expect(stripImportPrefixFilter('imp123-abc')).toBe('imp123-abc');
            expect(stripImportPrefixFilter('iMp123-abc')).toBe('iMp123-abc');
            expect(stripImportPrefixFilter('iMP123-abc')).toBe('iMP123-abc');
        })
    );
    it("Handles undefined or null inputs",
        inject(function(stripImportPrefixFilter) {
            expect(stripImportPrefixFilter(undefined)).toBe(undefined);
            expect(stripImportPrefixFilter(null)).toBe(null);
        })
    );
    it("Only strips out the prefix if it has at least one digit and a hyphen",
        inject(function(stripImportPrefixFilter) {
            // must have the 'IMP' folowed by a digit then a hyphen
            expect(stripImportPrefixFilter('IMP-123')).toBe('IMP-123');
            expect(stripImportPrefixFilter('IMP1123')).toBe('IMP1123');
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myTitleCaseApp = angular.module('myTitleCaseApp', ['titleCase']);

describe("The TitleCase filter", function() {
    beforeEach(module('myTitleCaseApp'));
    it('Strips out ``_`` characters from strings and capitalizes the rest',
        inject(function(titleCaseFilter) {
            // normal cases
            expect(titleCaseFilter('super_data')).toBe('Super Data');
            expect(titleCaseFilter('super_data_45')).toBe('Super Data 45');
            expect(titleCaseFilter(undefined)).toBe(undefined);
            expect(titleCaseFilter(null)).toBe(null);
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myTypedNumberFilterApp = angular.module('myTypedNumberFilterApp', ['typedNumber']);

describe("The typedNumber filter", function() {
    beforeEach(module('myTypedNumberFilterApp'));
    it('should parse strings as strings and return them',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('tester')).toBe('tester');
        })
    );
    it('should parse strings as strings and return them, even if they look like numbers',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.1456')).toBe('123.1456');
        })
    );

    it('should parse numbers as numbers and return them',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.00001', 'number')).toBe("123");
        })
    );

    it('should allow the user to set the number of sig digits',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.321', 'number', 'not_year', 1)).toBe("123.3");
        })
    );

    it('should add commas to number greater than 999',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123456789', 'number', 'not_year', 0)).toBe("123,456,789");
        })
    );

    it('should parse year_built and not add commas',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('1946', 'number', 'year_built', 1)).toBe("1946");
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var validationTestApp = angular.module(
    'validationTestApp', ['mappingValidatorService']
);

describe("The MappingValidatorService", function() {
    var mvs;

    beforeEach(function () {
        module("validationTestApp");
        inject(function (mappingValidatorService) {
            mvs = mappingValidatorService;

        });

    });

    it('validates good string, float and date data', function() {
        // normal cases
        // Here ``type`` is undefined. Should still work.
        var str_data = ['Fun', 'fun2', 'fun3', 'fun4'];
        var float_data = ['12.34', '144.5', '234'];
        var date_data = ['2014/02/02', '03/13/2013', '03-14-2004'];

        expect(mvs.validate(str_data)).toEqual([]);
        expect(mvs.validate(float_data, 'float')).toEqual([]);
        expect(mvs.validate(date_data, 'date')).toEqual([]);
    });

    it('recognizes semivalid data', function() {
        // Cases where the data is /almost/ right.
        var float_data = ['12.34', '144.5', 'NaN'];
        var date_data = ['2014/02/02', 'huh?', '03-14-2004'];
        expect(mvs.validate(float_data, 'float')).toEqual(['NaN']);
        expect(mvs.validate(date_data, 'date')).toEqual(['huh?']);
    });

    it('recognizes invalid data', function() {
        // Cases where the data is *all* wrong.
        var float_data = ['', 'not a float', 'NaN'];
        var date_data = ['', 'huh?', 'what?'];
        // Cases where the data are correct.
        var good_float_data = ['12.34', '144.5', '234'];
        var good_date_data = ['2014/02/02', '03/13/2013', '03-14-2004'];

        // Data is wrong
        expect(mvs.validate(float_data, 'float')).toEqual(float_data);
        expect(mvs.validate(date_data, 'date')).toEqual(date_data);

        // Type is wrong
        // N.B. we use semivalid here, because Date is pretty forgiving w/ nums.
        expect(mvs.validate(good_float_data, 'date')).toEqual(['12.34']);
        expect(mvs.validate(good_date_data, 'float')).toEqual(good_date_data);


    });

});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// taken from the angularjs testing page
// http://docs.angularjs.org/guide/dev_guide.unit-testing

// create dummy angularJS app to attach filter(s)
var myBELabelDirectiveApp = angular.module('myBELabelDirectiveApp', ['beLabel']);

describe("The beLabel directive", function() {
    var $compile;
    var $rootScope;
    beforeEach(module('myBELabelDirectiveApp'));
    // Store references to $rootScope and $compile
    // so they are available to all tests in this describe block
    beforeEach(inject(function(_$compile_, _$rootScope_){
      // The injector unwraps the underscores (_) from around the parameter names when matching
      $compile = _$compile_;
      $rootScope = _$rootScope_;
    }));

    it('Replaces the element with the appropriate content', function() {
        // Compile a piece of HTML containing the directive
        var element = $compile('<be-label name="compliant" color="blue"></be-label>')($rootScope);
        // fire all the watches
        $rootScope.$digest();
        // Check that the compiled element contains the templated content
        expect(element.hasClass('label-primary')).toBe(true);
        expect(element.hasClass('label')).toBe(true);
        expect(element.html()).toContain("compliant");
    });

        // 'red': 'danger',
        // 'gray': 'default',
        // 'orange': 'warning',
        // 'green': 'success',
        // 'blue': 'primary',
        // 'light blue': 'info'
    it('Maps colors to semantic bootstrap class names', function() {
        var element = $compile('<be-label name="compliant" color="red"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-danger')).toBe(true);

        element = $compile('<be-label name="compliant" color="gray"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-default')).toBe(true);

        element = $compile('<be-label name="compliant" color="orange"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-warning')).toBe(true);

        element = $compile('<be-label name="compliant" color="green"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-success')).toBe(true);

        element = $compile('<be-label name="compliant" color="blue"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-primary')).toBe(true);

        element = $compile('<be-label name="compliant" color="light blue"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-info')).toBe(true);
    });


});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// taken from the angularjs testing page
// http://docs.angularjs.org/guide/dev_guide.unit-testing

// create dummy angularJS app to attach filter(s)
var myBEUploaderDirectiveApp = angular.module('myBEUploaderDirectiveApp', ['beUploader']);

describe("The beUploader directive", function() {
    var g_message, g_file, g_progress;
    var $compile;
    var $rootScope;
    var uploader_html = '<div be-uploader sourcetype="assessor" importrecord="5" buttontext="Upload your building list .csv file" eventfunc="uploaderfunc(message, filename, progress)" ng-hide="uploader.in_progress"></div>';
    beforeEach(module('myBEUploaderDirectiveApp'));
    // Store references to $rootScope and $compile
    // so they are available to all tests in this describe block
    beforeEach(inject(function(_$compile_, _$rootScope_){
      // The injector unwraps the underscores (_) from around the parameter names when matching
      $compile = _$compile_;
      $rootScope = _$rootScope_;
      $rootScope.eventfunc = function (fine_object) {
        console.log({fin: fine_object});
        g_message = fine_object.message;
        g_file = fine_object.file;
        g_progress = fine_object.progress;
      };
      window.BE = window.BE || {};
      window.BE.FILE_UPLOAD_DESTINATION = 'S3';
    }));

    it('Creates the fineuploader element', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        
        // act
        $rootScope.$digest();

        // assert
        expect(element.html()).toContain("qq-uploader");
        expect(element.html()).toContain("qq-upload-button");
    });

    it('Contains the buttontext specified', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);

        // act
        $rootScope.$digest();

        // assert
        expect(element.html()).toContain("Upload your building list .csv file");
    });

    it('Only allows one file to be uploaded at a time', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");

        // act
        $rootScope.$digest();

        // assert
        expect(func._options.multiple).toBe(false);
    });

    it('Uses the callback function for invalid file types', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.jpeg");

        // act
        $rootScope.$digest();
        func._options.showMessage("there was an invalid extension. Valid extension(s): .csv");


        // assert
        expect(g_message).toBe("invalid_extension");
    });

    it('Uses the callback function to share its state: upload started',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';
        
        // act
        $rootScope.$digest();
        func._options.callbacks.onSubmitted(1, filename);


        // assert
        expect(g_message).toBe("upload_submitted");
        expect(g_file.filename).toBe(filename);
    });

    it('Uses the callback function to share its state: in progress',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';
        var loaded = 10;
        var total = 100;
        
        // act
        $rootScope.$digest();
        func._options.callbacks.onProgress(1, filename, loaded, total);


        // assert
        expect(g_message).toBe("upload_in_progress");
        expect(g_file.filename).toBe(filename);
        expect(g_progress.loaded).toBe(loaded);
        expect(g_progress.total).toBe(total);
    });

    it('Uses the callback function to share its state: complete',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';

        
        // act
        $rootScope.$digest();
        func._options.callbacks.onComplete(1, filename, {success: true});


        // assert        
        expect(g_message).toBe("upload_complete");
        expect(g_file.filename).toBe(filename);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: building_detail_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, ngFilter, delete_called;
    var building_detail_ctrl, building_detail_ctrl_scope, modalInstance, labels;
    var mock_building_services, mock_project_service;
    var mock_building;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          urls,
          $q,
          building_services,
          project_service,
          $filter) {
            controller = $controller;
            scope = $rootScope;
            ngFilter = $filter;
            building_detail_ctrl_scope = $rootScope.$new();
            modal_state = "";
            delete_called = false;

            // mock the building_services factory methods used in the controller
            // and return their promises
            mock_building_services = building_services;
            mock_project_service = project_service;

            spyOn(mock_project_service, "get_project")
                .andCallFake(function(project_slug){
                    return $q.when(
                        {
                            "status": "success",
                            "project": {
                                id: 33,
                                name: "test project",
                                slug: project_slug
                            }
                        }
                    );
                }
            );
            spyOn(mock_project_service, "get_labels")
                .andCallFake(function(){
                    return $q.when(
                        {
                            "status": "success",
                            "labels": [{
                                id: 44,
                                name: "bad label",
                                color: "red"
                            }]
                        }
                    );
                }
            );
            spyOn(mock_project_service, "update_project_building")
                .andCallFake(function(building_id, project, label){
                    return $q.when(
                        {
                            "status": "success",
                            "approver": "bob doe",
                            "approved_date": "01/01/2012"
                        }
                    );
                }
            );
            spyOn(mock_building_services, "update_building")
                .andCallFake(function (building, org_id){
                    mock_building = building;
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_building_detail_controller(){
        var fake_building = {
            id: 511,
            pk: 511,
            gross_floor_area: 123456,
            gross_floor_area_source: 2,
            city: "DC",
            city_source: 4,
            tax_lot_id: "11/22",
            tax_lot_id_source: 3,
            extra_data: {
                'some other key': 12344,
                'some other key that is not in a parent': 223
            },
            extra_data_sources: {
                'some other key': 2,
                'some other key that is not in a parent': 3
            },
            created: "at some point"
        };
        var fake_imported_buildings = [
            {
                id: 2,
                pk: 2,
                gross_floor_area: 123456,
                gross_floor_area_source: null,
                city: "Washington, DC",
                city_source: null,
                extra_data: {
                    'some other key': 123,
                    'some other key that is not in a child': 333,
                    'some floor area': 444
                },
                extra_data_sources: {
                    'some other key': null,
                    'some other key that is not in a child': 111,
                    'some floor area': 444
                },
                created: "test"
            },
            {
                id: 3,
                pk: 3,
                gross_floor_area: 2111111,
                gross_floor_area_source: null,
                city: "Washington",
                city_source: null,
                tax_lot_id: "11/22",
                tax_lot_id_source: null,
                extra_data: {
                    'make it four': 4
                },
                extra_data_sources: {
                    'make it four': null
                }
            },{
                id: 4,
                pk: 4,
                gross_floor_area: 2111111,
                gross_floor_area_source: null,
                city: "Washington",
                city_source: null,
                tax_lot_id: "11/22",
                tax_lot_id_source: null,
                extra_data: {
                    'make it four': 5
                },
                extra_data_sources: {
                    'make it four': null
                }
            }
        ];
        var fake_payload = {
            "status": "success",
            "building": fake_building,
            "imported_buildings": fake_imported_buildings,
            "projects": [],
            "user_org_id": 42
        };
        var fake_all_columns = [{
            "title": "PM Property ID",
            "sort_column": "pm_property_id",
            "class": "is_aligned_right",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Tax Lot ID",
            "sort_column": "tax_lot_id",
            "class": "is_aligned_right",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Custom ID 1",
            "sort_column": "custom_id_1",
            "class": "is_aligned_right whitespace",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Property Name",
            "sort_column": "property_name",
            "class": "",
            "title_class": "",
            "type": "string",
            "field_type": "building_information",
            "sortable": true,
            "checked": false
        }];
        building_detail_ctrl = controller('building_detail_controller', {
            $scope: building_detail_ctrl_scope,
            $routeParams: {
                building_id: 1,
                project_id: 2
            },
            building_payload: fake_payload,
            all_columns: {
                fields: fake_all_columns
            },
            audit_payload: {
                audit_logs: []
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should have an building payload", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.building.id).toBe(511);
        expect(building_detail_ctrl_scope.imported_buildings[0].id).toBe(2);
    });

    it("should get labels on load", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.labels[0].id).toBe(44);
        expect(building_detail_ctrl_scope.labels[0].name).toBe("bad label");
        expect(building_detail_ctrl_scope.labels[0].color).toBe("red");
    });

    it("should highlight the active project", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.is_active_project({id:33}))
        .toBe(true);
        expect(building_detail_ctrl_scope.is_active_project({id:34}))
        .toBe(false);
        building_detail_ctrl_scope.project = undefined;
        expect(building_detail_ctrl_scope.is_active_project({id:34}))
        .toBe(false);
    });

    it("should make a copy of building while making edits", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.save_building_state();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;

        // assertions
        expect(building_detail_ctrl_scope.building_copy.gross_floor_area)
        .toBe(123456);
    });
    it("should restore the copy of building if a user clicks cancel",
        function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.save_building_state();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;
        building_detail_ctrl_scope.restore_building();

        // assertions
        expect(building_detail_ctrl_scope.building.gross_floor_area)
        .toBe(123456);
        expect(building_detail_ctrl_scope.building.edit_form_showing).toBe(false);
    });
    it("should save a building when a user clicks the save button", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;
        building_detail_ctrl_scope.save_building();

        // assertions
        expect(mock_building_services.update_building)
        .toHaveBeenCalledWith(building_detail_ctrl_scope.building, 42);
        expect(mock_building.gross_floor_area).toEqual(43214);
    });
    it("should show a default label if a building doesn't have one", function() {
        // arrange
        create_building_detail_controller();
        var building_with_label = {
            label: {
                name: "hello",
                label: "success"
            }
        };
        var building_without_label = {};
        var label_with, label_without;

        // act
        building_detail_ctrl_scope.$digest();
        label_with = building_detail_ctrl_scope.get_label(building_with_label);
        label_without = building_detail_ctrl_scope.get_label(building_without_label);

        // assertions
        expect(label_with).toEqual({
                name: "hello",
                label: "success"
            });
        expect(label_without).toEqual({
                name: "Add Label",
                label: "default"
            });
    });

    it("should show a project or buildings breadcrumb", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.user.project_slug = "project_1";

        // assertions
        expect(building_detail_ctrl_scope.is_project()).toEqual(true);
        building_detail_ctrl_scope.user.project_slug = undefined;
        expect(building_detail_ctrl_scope.is_project()).toEqual(false);

    });
    it("should show the default projects table if a user has no compliance" +
        " projects", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.user.has_projects()).toEqual(false);
        building_detail_ctrl_scope.projects = [{id: 1, name: "a"}];
        expect(building_detail_ctrl_scope.user.has_projects()).toEqual(true);

    });

    it("should set only building attribute to master, not ids or children", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.is_valid_key('id')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('pk')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('pk_source')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key(' extra_data ')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('gross_floor_area'))
          .toEqual(true);
    });
    it("should update a project-building label", function() {
        // arrange
        create_building_detail_controller();
        var project = {
            id: 2,
            building: {}
        };

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.update_project_building(project,
            {
                name: "label name",
                color: "red"
            });
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(mock_project_service.update_project_building).toHaveBeenCalled();
        expect(project.building.approver).toEqual("bob doe");
        expect(project.building.approved_date).toEqual("01/01/2012");
        expect(project.building.label.name).toEqual("label name");
        expect(project.building.label.color).toEqual("red");

    });
    it("should set a field as source when clicked", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[0].is_master = true;
        expect(building_detail_ctrl_scope.building.gross_floor_area_source)
          .not.toEqual(building_detail_ctrl_scope.building.id);
        building_detail_ctrl_scope.set_self_as_source('gross_floor_area');
        building_detail_ctrl_scope.set_self_as_source('some other key', true);
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.building.gross_floor_area_source)
          .toEqual(building_detail_ctrl_scope.building.id);
        expect(building_detail_ctrl_scope.imported_buildings[0].is_master)
          .toEqual(false);
    });
    it("should set a column as the dominant source when clicked", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[1].is_master = true;
        building_detail_ctrl_scope.make_source_default(
            building_detail_ctrl_scope.imported_buildings[0]);
        building_detail_ctrl_scope.$digest();

        // assertions
        var b = building_detail_ctrl_scope.building,
            i = building_detail_ctrl_scope.imported_buildings[0],
            i_other = building_detail_ctrl_scope.imported_buildings[1];

        expect(b.gross_floor_area_source).toEqual(i.id);
        expect(b.id).not.toEqual(i.id);
        expect(b.pk).not.toEqual(i.id);
        expect(b.city).toEqual(i.city);
        expect(b.city_source).toEqual(i.id);
        expect(b.tax_lot_id).toEqual("11/22");
        expect(b.tax_lot_id_source).toEqual(i_other.id);
        expect(b.extra_data['some other key']).toEqual(123);
        expect(b.extra_data_sources['some other key']).toEqual(i.id);
        expect(b.extra_data['some other key that is not in a child']).toEqual(333);
        expect(b.extra_data_sources['some other key that is not in a child']).toEqual(i.id);
        expect(b.extra_data['some other key that is not in a parent']).toEqual(223);
        expect(b.extra_data_sources['some other key that is not in a parent']).toEqual(i_other.id);
        expect(b.created).toEqual("at some point");

        expect(i.is_master).toEqual(true);
        expect(i_other.is_master).toEqual(false);
    });
    it("should set the master building value when parent's value is clicked",
        function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[1].is_master = true;
        building_detail_ctrl_scope.set_building_attribute(
            building_detail_ctrl_scope.imported_buildings[0], 'city');
        building_detail_ctrl_scope.set_building_attribute(
            building_detail_ctrl_scope.imported_buildings[0], 'some other key', true);
        building_detail_ctrl_scope.$digest();

        // assertions
        var b = building_detail_ctrl_scope.building,
            i = building_detail_ctrl_scope.imported_buildings[0],
            i_other = building_detail_ctrl_scope.imported_buildings[1];

        expect(b.id).not.toEqual(i.id);
        expect(b.pk).not.toEqual(i.id);
        expect(b.city).toEqual(i.city);
        expect(b.city_source).toEqual(i.id);
        expect(b.tax_lot_id).toEqual("11/22");
        expect(b.tax_lot_id_source).toEqual(i_other.id);
        expect(b.extra_data['some other key']).toEqual(123);
        expect(b.extra_data_sources['some other key']).toEqual(i.id);

        expect(i.is_master).toEqual(false);
        expect(i_other.is_master).toEqual(false);
    });

    it("should display all the data within all the buildings", function() {
        // arrange
        create_building_detail_controller();
        var keys;

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        var edc = building_detail_ctrl_scope.data_columns;

        // should not duplicate keys
        expect(edc.length).toEqual(8);
        keys = edc.map(function ( d ) {
            return d.key;
        });
        expect(keys.indexOf('make it four')).toEqual(4);
    });

    it("should display Floor Areas", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.$digest();

        // assertions
        var area_fields = building_detail_ctrl_scope.floor_area_fields;
        expect(area_fields.length).toEqual(1);
    });

    it("should display Floor Areas with number", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.get_number("")).toEqual(0);
        expect(building_detail_ctrl_scope.get_number("123,123,123")).toEqual(123123123);
        expect(building_detail_ctrl_scope.get_number("123,123,123.123")).toEqual(123123123.123);
        expect(building_detail_ctrl_scope.get_number("-123,123,123")).toEqual(-123123123);
        expect(building_detail_ctrl_scope.get_number(-123123123)).toEqual(-123123123);


    });
});

describe("controller: concat_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var scope, controller, modal_state;
    var edit_ctrl, concat_modal_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label, mock_mapping_service, mock_matching_service;
    var global_step = 1;
    var global_dataset = {};

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
            $controller, $rootScope, $modal, urls, $q
        ) {
            controller = $controller;
            scope = $rootScope;
            concat_modal_ctrl_scope = $rootScope.$new();
            concat_modal_ctrl_scope.concat_columns = [];
            modal_state = "";
        }
    ));

    var mock_building_column_types = [
        'address1', 'city', 'state', 'postal_code'
    ];

    var mock_raw_columns = [
        {
            name: 'Address',
            suggestion: 'address1',
            confidence: 1,
            raw_data: [
                '234 Database way',
                '23444 Huh hwy',
                '23444 Huh hwy',
                '23444 Huh hwy',
                '1223 face pl.'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        },
        {
            name: 'City',
            suggestion: 'city',
            confidence: 1,
            raw_data: [
                'Mega City', 'Mega City', 'Mega City', 'Mega City', 'Mega City'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        },
        {
            name: 'Zip',
            suggestion: '',
            confidence: 0,
            raw_data: [
                '234233', '234233', '234233', '234233', '234233'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        }
    ];

    // this is outside the beforeEach so it can be configured by each unit test
    function create_concat_modal_controller(){
        edit_ctrl = controller('concat_modal_ctrl', {
            $scope: concat_modal_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            building_column_types: mock_building_column_types,
            raw_columns: mock_raw_columns
        });
    }

    /*
     * Test scenarios
     */

    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.close_concat_modal();
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should mangle scope appropriately during concatenation", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(3);

        // arrange
        concat_modal_ctrl_scope.concat_columns =
            concat_modal_ctrl_scope.raw_columns.slice(0);
        concat_modal_ctrl_scope.raw_columns = [];

        // act
        concat_modal_ctrl_scope.$digest();
        concat_modal_ctrl_scope.save_concat();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(1);
        expect(
            concat_modal_ctrl_scope.raw_columns[0].is_concatenated
        ).toEqual(true);
    });

    it("should modify the raw_data of our modified TCM correctly", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(3);

        // arrange
        concat_modal_ctrl_scope.concat_columns =
            concat_modal_ctrl_scope.raw_columns.slice(0);
        concat_modal_ctrl_scope.raw_columns = [];

        // act
        concat_modal_ctrl_scope.$digest();
        concat_modal_ctrl_scope.save_concat();

        var expected_raw = [
            '234 Database way Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '1223 face pl. Mega City 234233'
        ];

        // assertions
        expect(
            concat_modal_ctrl_scope.raw_columns[0].raw_data
        ).toEqual(expected_raw);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: create_organization_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_organization_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, organization_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        mock_organization_service = organization_service;
        spyOn(mock_organization_service, "create_sub_org")
            .andCallFake(function(org, sub_org){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_organization_modal_ctrl(){
        ctrl = ctrl('create_organization_modal_ctrl', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            organization: {organization_id: 1}
        });
    }

    /*
     * Test scenarios
     */

    it("should call the organization service to add a new sub_org",
        function() {
        // arrange
        create_organization_modal_ctrl();

        // act
        ctrl_scope.$digest();
        ctrl_scope.sub_org.name = "my shiny new org";
        ctrl_scope.sub_org.email = "jb.smooth@be.com";
        ctrl_scope.submit_form(true);

        // assertions
        expect(mock_organization_service.create_sub_org)
            .toHaveBeenCalledWith(
                {
                    organization_id: 1
                },
                {
                    name: "my shiny new org",
                    email: "jb.smooth@be.com"
                }
            );
    });
    
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: data_upload_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_uploader_service, scope, controller, modal_state;
    var edit_ctrl, data_upload_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label, mock_mapping_service, mock_matching_service;
    var global_step = 1;
    var global_dataset = {};
    var return_labels = [
        {
            "name": 'compliant',
            "color": 'green',
            "id": 1
        },
        {
            "name": "new label",
            "color": "blue",
            "id": 2
        }
    ];

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, uploader_service, mapping_service, matching_service) {
            controller = $controller;
            scope = $rootScope;
            data_upload_ctrl_scope = $rootScope.$new();
            modal_state = "";

            // mock the uploader_service factory methods used in the controller
            // and return their promises
            mock_uploader_service = uploader_service;
            mock_mapping_service = mapping_service;
            mock_matching_service = matching_service;
            spyOn(mock_uploader_service, "get_AWS_creds")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "AWS_CLIENT_ACCESS_KEY": "123",
                            "AWS_UPLOAD_BUCKET_NAME": "test-bucket"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "check_progress")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "progress": "25.0"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "create_dataset")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "id": 3,
                                "name": dataset_name

                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error",
                                "message": "name already in use"
                            }
                        );
                    }
                }
            );
            spyOn(mock_uploader_service, "save_raw_data")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "file_id": 3
                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error"
                            }
                        );
                    }
                }
            );
            spyOn(mock_mapping_service, "start_mapping")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "file_id": 3
                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error"
                            }
                        );
                    }
                }
            );
            spyOn(mock_matching_service, "start_system_matching")
            .andCallFake(function(file_id){
                // return $q.reject for error scenario
                return $q.when(
                    {
                        "status": "success",
                        "file_id": 3
                    }
                );
            });

        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_data_upload_modal_controller(){
        edit_ctrl = controller('data_upload_modal_ctrl', {
            $scope: data_upload_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            step: global_step,
            dataset: global_dataset
        });
    }

    /*
     * Test scenarios
     */

    it("should close the modal when the close function is called", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.close();
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel function is called", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.cancel();
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

    it("should start at the step provided", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(1);

        // arrange
        global_step = 2;
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(2);
    });

    it("should goto different steps", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var step;
        step = 2;
        data_upload_ctrl_scope.goto_step(step);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(step);
    });

    it("disables the 'Name it' button if no text is entered", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(true);
    });
    it("disables the 'Name it' button if no text is entered, then cleared",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.dataset.name = undefined;
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(true);
    });
    it("enables the 'Name it' button if text is entered", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.dataset.name = "my dataset name";
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(false);
    });
    it("should show an alert if the dataset name is already in use",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.create_dataset("fail");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.alert).toBe(true);
    });
    it("should not show an alert if the dataset name is not already in use",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.create_dataset("my shiny new dataset");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.alert).toBe(false);
    });
    it("after creating a dataset, stores the dataset id", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var ds_name = "my shiny new dataset";
        data_upload_ctrl_scope.create_dataset(ds_name);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.id).toBe(3);
        expect(data_upload_ctrl_scope.dataset.name).toBe(ds_name);
    });
    it("after uploading a file, stores the file id", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var message, filename;
        message = "upload_complete";
        filename = "file1.csv";

        // act
        data_upload_ctrl_scope.uploaderfunc(message, {
            filename: filename,
            file_id: 20140313
        });
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.import_file_id).toBe(20140313);
    });
    it("should show an invalid extension alert if a file with an invalid" +
        "extension is loaded", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.uploaderfunc("invalid_extension");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.invalid_extension_alert)
            .toBe(true);
    });
    it("should hide the upload button after the user selects a file",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename;
        message = "upload_submitted";
        filename = "file1.csv";

        // act
        data_upload_ctrl_scope.uploaderfunc(message, {filename: filename});
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.filename).toBe(filename);
        expect(data_upload_ctrl_scope.uploader.in_progress).toBe(true);
    });
    it("should show the progressbar during upload",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename, progress;
        message = "upload_in_progress";
        filename = "file1.csv";
        progress = {
            loaded: 10,
            total: 100
        };

        // act
        data_upload_ctrl_scope.uploaderfunc(message, filename, progress);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.in_progress).toBe(true);
        expect(data_upload_ctrl_scope.uploader.progress).toBe(2.5);
    });
    it("should start saving the energy data when the file has been uploaded",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename;
        message = "upload_complete";
        filename = "file1.csv";
        data_upload_ctrl_scope.step.number = 4;

        // act
        data_upload_ctrl_scope.uploaderfunc(message, filename);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.status_message)
            .toBe("saving energy data");
    });

    it("should take an dataset payload", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.name).toBe("");
        expect(data_upload_ctrl_scope.dataset.filename).toBe("");
        expect(data_upload_ctrl_scope.dataset.id).toBe(0);
    });

    it("should extend a custom dataset payload", function() {
        // arrange
        global_dataset = {
            id: 100,
            filename: "seed_data.csv",
            name: "Compliance Project"
        };
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.name).toBe("Compliance Project");
        expect(data_upload_ctrl_scope.dataset.filename).toBe("seed_data.csv");
        expect(data_upload_ctrl_scope.dataset.id).toBe(100);
        expect(data_upload_ctrl_scope.dataset.alert).toBe(false);

    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: dataset_detail_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, ngFilter, delete_called;
    var dataset_detail_ctrl, dataset_detail_ctrl_scope, modalInstance, labels;

    

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, dataset_service, $filter) {
            controller = $controller;
            scope = $rootScope;
            ngFilter = $filter;
            dataset_detail_ctrl_scope = $rootScope.$new();
            modal_state = "";
            delete_called = false;

            // mock the dataset_service factory methods used in the controller
            // and return their promises
            mock_dataset_service = dataset_service;
            spyOn(mock_dataset_service, "get_dataset")
                .andCallFake(function(dataset_id){
                    // return $q.reject for error scenario
                    var fake_importfiles = [
                        {
                            name: "DC_CoveredBuildings_50k.csv",
                            number_of_buildings: 511,
                            number_of_mappings: 511,
                            number_of_cleanings: 1349,
                            source_type: "Assessed Raw",
                            number_of_matchings: 403
                        },
                        {
                            name: "DC_ESPM_Report.csv",
                            number_of_buildings: 511,
                            number_of_matchings: 403,
                            source_type: "Portfolio Raw"
                        }
                    ];
                    var fake_dataset = {
                        name: "DC 2013 data",
                        last_modified: (new Date()).getTime(),
                        last_modified_by: "john.s@buildingenergy.com",
                        number_of_buildings: 89,
                        id: 1,
                        importfiles: fake_importfiles
                    };
                    var fake_payload = {
                        "status": "success",
                        "dataset": fake_dataset
                    };
                    if (delete_called) {
                        fake_payload.dataset.importfiles.pop();
                    }
                    console.log({delete_called: delete_called, ds: fake_payload});
                    return $q.when(fake_payload);
                }
            );

            spyOn(mock_dataset_service, "delete_file")
                .andCallFake(function(import_file){
                    delete_called = true;
                    console.log({d: "delete_called"});
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_detail_controller(){
        var fake_importfiles = [
            {
                name: "DC_CoveredBuildings_50k.csv",
                number_of_buildings: 511,
                number_of_mappings: 511,
                number_of_cleanings: 1349,
                source_type: "Assessed Raw",
                number_of_matchings: 403
            },
            {
                name: "DC_ESPM_Report.csv",
                number_of_buildings: 511,
                number_of_matchings: 403,
                source_type: "Portfolio Raw"
            }
        ];
        var fake_dataset = {
            name: "DC 2013 data",
            last_modified: (new Date()).getTime(),
            last_modified_by: "john.s@buildingenergy.com",
            number_of_buildings: 89,
            id: 1,
            importfiles: fake_importfiles
        };
        var fake_payload = {
            "status": "success",
            "dataset": fake_dataset
        };
        dataset_detail_ctrl = controller('dataset_detail_controller', {
            $scope: dataset_detail_ctrl_scope,
            dataset_payload: fake_payload
        });
    }

    /*
     * Test scenarios
     */

    it("should have an data set payload with import files", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        dataset_detail_ctrl_scope.$digest();

        // assertions
        expect(dataset_detail_ctrl_scope.dataset.importfiles.length).toBe(2);
    });

    it("should show an alert when the delete icon is clicked", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        dataset_detail_ctrl_scope.$digest();
        var importfiles = dataset_detail_ctrl_scope.dataset.importfiles;
        dataset_detail_ctrl_scope.delete_file(importfiles[0]);
        dataset_detail_ctrl_scope.$digest();

        // assertions
        expect(dataset_detail_ctrl_scope.dataset.importfiles.length).toBe(1);
    });
   
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: dataset_list_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, modal_state;
    var edit_ctrl, dataset_list_ctrl_scope, modalInstance, labels;
    var location;

    

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, uploader_service,
            $location) {
            controller = $controller;
            scope = $rootScope;
            dataset_list_ctrl_scope = $rootScope.$new();
            modal_state = "";
            location = $location;

            // mock the uploader_service factory methods used in the controller
            // and return their promises
            mock_uploader_service = uploader_service;
            spyOn(mock_uploader_service, "get_AWS_creds")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "AWS_CLIENT_ACCESS_KEY": "123",
                            "AWS_UPLOAD_BUCKET_NAME": "test-bucket"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "create_dataset")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "import_record_id": 3,
                                "import_record_name": dataset_name

                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error",
                                "message": "name already in use"
                            }
                        );
                    }
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_list_controller(){
        var fake_datasets_payload = {
            "status": "success",
            "datasets": [
                {
                    name: "DC 2013 data",
                    last_modified: (new Date()).getTime(),
                    last_modified_by: "john.s@buildingenergy.com",
                    number_of_buildings: 89
                },
                {
                    name: "DC 2014 data",
                    last_modified: (new Date()).getTime() -
                        1550 * 60 * 60 * 1000,
                    last_modified_by: "gavin.m@buildingenergy.com",
                    number_of_buildings: 70
                }
            ]
        };
        edit_ctrl = controller('dataset_list_controller', {
            $scope: dataset_list_ctrl_scope,
            datasets_payload: fake_datasets_payload
        });
    }

    /*
     * Test scenarios
     */

    it("should have a dataset_payload", function() {
        // arrange
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();

        // assertions
        expect(dataset_list_ctrl_scope.datasets.length).toEqual(2);
    });

    it("should disable the mapping button if the dataset has no" +
        " Assessor files", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Portfolio Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_assessor_files(dataset);

        // assertions
        expect(disabled).toEqual(true);
    });

    it("should enable the mapping button if the dataset has at least one" +
        " Assessor file", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_assessor_files(dataset);

        // assertions
        expect(disabled).toEqual(false);
    });
    it("should disable the matching button if the dataset has no" +
        " Portfolio Manger files", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Assessed Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_pm_files(dataset);

        // assertions
        expect(disabled).toEqual(true);
    });
    it("should enable the matching button if the dataset has at least one" +
        " Portfolio Manger file", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_pm_files(dataset);

        // assertions
        expect(disabled).toEqual(false);
    });
    it("should navigate to the mapping page of the first assessed" +
        " import file when the ``Mapping`` button is clicked", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Assessed Raw",
                    id: 3
                },
                {
                    source_type: "Assessed Raw",
                    id: 5
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        dataset_list_ctrl_scope.goto_mapping(dataset);

        // assertions
        expect(location.path()).toBe('/data/mapping/3');
    });
    it("should navigate to the matching page of the first Portfolio Manager" +
        " import file when the ``Matching`` button is clicked", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw",
                    id: 3
                },
                {
                    source_type: "Portfolio Raw",
                    id: 5
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        dataset_list_ctrl_scope.goto_matching(dataset);

        // assertions
        expect(location.path()).toBe('/data/matching/3');
    });

   
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: delete_modal_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, building_services, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        // mock the export_service factory methods used in the controller
        // and return their promises
        mock_building_services = building_services;
        spyOn(mock_building_services, "delete_buildings")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_delete_modal_controller(){
        ctrl = ctrl('delete_modal_controller', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            search: { 
                selected_buildings: [1,2],
                filter_params: {},
                select_all_checkbox: false,
                order_by: "",
                sort_reverse: false,
                number_matching_search: 1000
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should start at the delete page", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.delete_state).toEqual("delete"); 
    });
    it("should save the search paramaters",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.delete_payload;
        expect(b.selected_buildings).toEqual([1,2]);
        expect(b.filter_params).toEqual({});
        expect(b.order_by).toEqual("");
        expect(b.sort_reverse).toEqual(false);
        expect(b.select_all_checkbox).toEqual(false);
    });
    it("should delete when the delete button is clicked",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.delete_buildings();

        // assertions
        expect(ctrl_scope.delete_state).toEqual("prepare");
        expect(mock_building_services.delete_buildings).toHaveBeenCalled();
    });
    it("should show the success page when the delete is finished",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.delete_buildings();
        ctrl_scope.$digest();

        // assertions
        expect(mock_building_services.delete_buildings).toHaveBeenCalled();
        expect(ctrl_scope.delete_state).toEqual("success");
    });
    it("should show the number of buildings to be deleted",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        var number_to_delete = ctrl_scope.number_to_delete();

        // assertions
        expect(number_to_delete).toEqual(2);
    });
    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.close();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.cancel();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

  
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myDistrictApp = angular.module('myDistrictApp', ['district']);

describe("The district filter", function() {
    beforeEach(module('myDistrictApp'));
    it('replaces `district` with `County/District/Ward/Borough`',
        inject(function(districtFilter) {
            // normal cases
            expect(districtFilter('district')).toBe('County/District/Ward/Borough');
            expect(districtFilter('District')).toBe('County/District/Ward/Borough');
            expect(districtFilter('DistRict')).toBe('County/District/Ward/Borough');
            expect(districtFilter('DISTRICT')).toBe('County/District/Ward/Borough');
            expect(districtFilter('aDISTRICT')).toBe('aDISTRICT');
            expect(districtFilter('')).toBe('');
            expect(districtFilter('district ')).toBe('district ');
            expect(districtFilter('ok')).toBe('ok');
            expect(districtFilter(undefined)).toBe(undefined);
            expect(districtFilter(null)).toBe(null);
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: edit_label_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, modal_state;
    var edit_ctrl, edit_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label;
    var return_labels = [
        {
            "name": 'compliant',
            "color": 'green',
            "id": 1
        },
        {
            "name": "new label",
            "color": "blue",
            "id": 2
        }
    ];

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, urls, $q, project_service) {
        controller = $controller;
        scope = $rootScope;
        edit_ctrl_scope = $rootScope.$new();
        modal_state = "";

        // mock the project_service factory methods used in the controller
        // and return their promises
        mock_project_service = project_service;
        spyOn(mock_project_service, "get_labels")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success", "labels": return_labels});
            }
        );
        spyOn(mock_project_service, "add_label")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
        spyOn(mock_project_service, "delete_label")
            .andCallFake(function(label){
                deleted_label = label;
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
        spyOn(mock_project_service, "update_label")
            .andCallFake(function(label){
                updated_label = label;
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );

    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_edit_modal_controller(){
        var labels = [
            {
                "name": 'compliant',
                "color": 'green',
                "id": 1
            }
        ];

        edit_ctrl = controller('edit_label_modal_ctrl', {
            $scope: edit_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            labels: labels
        });
    }

    /*
     * Test scenarios
     */

    it("should initialize the default label", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.$digest();
        edit_ctrl_scope.initialize_label_modal();

        // assertions
        expect(edit_ctrl_scope.label_modal.color).toBe("gray");
        expect(edit_ctrl_scope.label_modal.label).toBe("default");
        expect(edit_ctrl_scope.label_modal.name).toBe("");
        expect(edit_ctrl_scope.modal.label.state).toBe("create");
    });

    it("should get the labels available to an organization", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.add_label({});  // calls private get_labels
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.labels.length).toBe(2);
    });

    it("should add a label in the user's organization", function() {
        // arrange
        create_edit_modal_controller();
        var label_to_add = {
            color: "blue",
            label: "primary",
            name: "new label"
        };

        // act
        edit_ctrl_scope.add_label(label_to_add);
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.labels.length).toBe(2);
        expect(edit_ctrl_scope.labels[1].color).toBe("blue");
        expect(edit_ctrl_scope.labels[1].name).toBe("new label");
    });

    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.close();
        edit_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.cancel();
        edit_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

    it("sets the label_modal to the label when its edit button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.edit_label(label);
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.label_modal.color).toBe(label.color);
        expect(edit_ctrl_scope.label_modal.name).toBe(label.name);
        expect(edit_ctrl_scope.modal.label.state).toBe("edit");

        // assert that edit_ctrl_scope.label_modal is a copy and not a reference to label
        edit_ctrl_scope.label_modal.name = "random name here";
        expect(edit_ctrl_scope.label_modal.name).not.toBe(label.name);
    });
    
    it("deletes the appropriate label when the delete button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.delete_label(label);
        edit_ctrl_scope.$digest();

        // assertions
        expect(deleted_label).toBe(label);
    });

    it("updates the appropriate label when the update label button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.edit_label(label);
        edit_ctrl_scope.$digest();
        edit_ctrl_scope.label_modal.name = "harry";
        edit_ctrl_scope.label_modal.color = "blue";
        edit_ctrl_scope.update_label(edit_ctrl_scope.label_modal);
        edit_ctrl_scope.$digest();

        // assertions
        expect(mock_project_service.update_label).toHaveBeenCalledWith(edit_ctrl_scope.label_modal);
        expect(updated_label).toBe(edit_ctrl_scope.label_modal);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: export_modal_controller", function(){
    // globals set up and used in each test scenario
    var mock_export_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, export_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        // mock the export_service factory methods used in the controller
        // and return their promises
        mock_export_service = export_service;
        spyOn(mock_export_service, "export_buildings")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success", "export_id": "123456"});
            }
        );
        spyOn(mock_export_service, "export_buildings_progress")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({
                    "status": "success",
                    "buildings_processed": 1000
                });
            }
        );
            spyOn(mock_export_service, "export_buildings_download")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({
                    "status": "success",
                    "url": "#"
                });
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_export_modal_controller(){
        ctrl = ctrl('export_modal_controller', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            search: { 
                selected_buildings: [],
                filter_params: {},
                select_all_checkbox: false,
                order_by: "",
                sort_reverse: false,
                number_matching_search: 1000
            },
            selected_fields: ['tax_lot_id', 'postal_code'],
            project: {
                id: 11
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should start at the create page", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.export_state).toEqual("create"); 
    });
    it("should start with an empty name and default file type of 'xls'",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.building_export;
        expect(b.export_name).toEqual("");
        expect(b.export_type).toEqual("xls");
    });
    it("should save the search paramaters",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.building_export;
        expect(b.selected_buildings).toEqual([]);
        expect(b.filter_params).toEqual({});
        expect(b.order_by).toEqual("");
        expect(b.sort_reverse).toEqual(false);
        expect(b.select_all_checkbox).toEqual(false);
        expect(b.selected_fields).toEqual(['tax_lot_id', 'postal_code']);
        expect(b.project_id).toEqual(11);
        expect(ctrl_scope.progress_denominator).toEqual(0);
    });
    it("should kick off the export process when the export button is clicked",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.export_buildings();

        // assertions
        expect(ctrl_scope.export_state).toEqual("prepare");
        expect(mock_export_service.export_buildings).toHaveBeenCalled();
    });
    it("should show the success page when the data is ready",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.show_success_page("123");
        ctrl_scope.$digest();

        // assertions
        expect(mock_export_service.export_buildings_download).toHaveBeenCalled();
        expect(ctrl_scope.export_state).toEqual("success");
    });
    it("should update the progress bar",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.monitor_progress("123", 1000);
        ctrl_scope.$digest();
        timeout.flush();

        // assertions
        expect(mock_export_service.export_buildings_progress).toHaveBeenCalled();
        expect(ctrl_scope.progress_percentage).toEqual(100);
        expect(ctrl_scope.progress_numerator).toEqual(1000);
        expect(ctrl_scope.progress_denominator).toEqual(1000);
    });
    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.close();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.cancel();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

  
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
/**
 * tests fromNow angularjs filter wrapper of moment.js
 * uses epoch milliseconds as that is what the back-end returns
 */

// create dummy angularJS app to attach filter(s)
var myfromNowFilterApp = angular.module('myfromNowFilterApp', ['fromNow']);

describe("The fromNow filter", function() {
    beforeEach(module('myfromNowFilterApp'));

    it('shows the present time as "a few seconds ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('a few seconds ago');
        })
    );

    it('shows 5 minutes ago as "5 minutes ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 5  * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('5 minutes ago');
        })
    );

    it('shows 4 hours ago as "4 hours ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 4 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('4 hours ago');
        })
    );

    it('shows 24 hours ago as "a day ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 24 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('a day ago');
        })
    );

    it('shows 36 hours ago as "2 days ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 36 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('2 days ago');
        })
    );

    it('shows 1550 hours ago as "2 months ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 1550 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('2 months ago');
        })
    );

    it('defaults to "a few seconds ago" for undefined values',
        inject(function(fromNowFilter) {
            // arrange

            // act

            // assert
            expect(fromNowFilter(undefined)).toBe('a few seconds ago');
            expect(fromNowFilter(null)).toBe('a few seconds ago');
            expect(fromNowFilter("some text")).toBe('a few seconds ago');
            expect(fromNowFilter({})).toBe('a few seconds ago');
            expect(fromNowFilter({time: "not time"})).toBe('a few seconds ago');
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myignoremapApp = angular.module('myignoremapApp', ['ignoremap']);

describe("The ignoremap filter", function() {
    beforeEach(module('myignoremapApp'));
    it('replaces `""` with `------ Ignore Row ------`',
        inject(function(ignoremapFilter) {
            // normal cases
            expect(ignoremapFilter('')).toBe('------ Ignore Row ------');
            expect(ignoremapFilter(' ')).toBe(' ');
            expect(ignoremapFilter('aignoremap')).toBe('aignoremap');
            expect(ignoremapFilter('ignoremap ')).toBe('ignoremap ');
            expect(ignoremapFilter('ok')).toBe('ok');
            expect(ignoremapFilter(undefined)).toBe('------ Ignore Row ------');
            expect(ignoremapFilter(null)).toBe('------ Ignore Row ------');
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: mapping_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, modal_state;
    var mapping_ctrl, mapping_ctrl_scope, modalInstance, labels;
    var timeout, mock_user_service, mock_search_service;



    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, building_services, $timeout, user_service, search_service) {
            controller = $controller;
            scope = $rootScope;
            mapping_ctrl_scope = $rootScope.$new();
            modal_state = "";
            timeout = $timeout;
            mock_user_service = user_service;
            mock_search_service = search_service;

            spyOn(mock_user_service, 'set_default_columns')
                .andCallFake(function(mapped_columns){
                    return undefined;
                });
            spyOn(mock_search_service, 'search_buildings')
                .andCallFake(function(){
                    return [1,2,3];
                });
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_mapping_controller(){
        var mock_datasets = [
            {
                name: "DC 2013 data",
                last_modified: (new Date()).getTime(),
                last_modified_by: "john.s@buildingenergy.com",
                number_of_buildings: 89,
                id: 1
            },
            {
                name: "DC 2014 data",
                last_modified: (new Date()).getTime() -
                    1550 * 60 * 60 * 1000,
                last_modified_by: "gavin.m@buildingenergy.com",
                number_of_buildings: 70,
                id: 2
            }
        ];
        var fake_import_file_payload = {
            "status": "success",
            "import_file": {
                        file_name: "assessor_fun.csv",
                        last_modified: (new Date()).getTime(),
                        last_modified_by: "john.s@buildingenergy.com",
                        source_type: 'AssessorRaw',
                        dataset: mock_datasets[0],
                        id: 1
                    }
        };

        var mock_be_building_columns = [
            'pm_property_id',
            'property_name',
            'property_notes',
            'tax_lot_id',
            'gross_floor_area',
            'My New non-BEDES field'
        ];

        var mock_be_building_types = {
            'gross_floor_area': {
                unit_type: 'float',
                schema: 'BEDES'
            }
        };

        var mock_mapping_suggestions_payload = {
            'status': 'success',
            'suggested_column_mappings': {
                // key(django model attribute): [csv_header1, ... csv_header3]
                'property id': ['pm_property_id', 89],
                'lot number': ['tax_lot_id' , 54]
            },
            "building_columns": mock_be_building_columns,
            "building_column_types": mock_be_building_types
        };

        var mock_raw_column_names = [
            'property id',
            'property_name',
            'property_notes',
            'lot number',
            'lot size'
        ];

        var mock_first_five_rows = [];
        for (var i=0; i < 4; i++) {
            mock_first_five_rows.push({
                'property id': i,
                'property_name': 'Property ' + i,
                'property_notes': 'Nup.',
                'lot number': i * 2,
                'lot size': 454 * i
            });
        }

        mock_first_five_rows.push({
            'property id': '121L',
            'property_name': 'Inconsistent Property',
            'property_notes': 'N/A',
            'lot number': 'N/A',
            'lot size': 45
        });

        var raw_columns_payload = {
            "status": "success",
            "raw_columns": mock_raw_column_names
        };
        var first_five_rows_payload = {
            "status": "success",
            "first_five_rows": mock_first_five_rows
        };
        mapping_ctrl = controller('mapping_controller', {
            $scope: mapping_ctrl_scope,
            import_file_payload: fake_import_file_payload,
            suggested_mappings_payload: mock_mapping_suggestions_payload,
            raw_columns_payload: raw_columns_payload,
            first_five_rows_payload: first_five_rows_payload,
            all_columns: {fields: []},
            building_services: mock_building_services,
            $timeout: timeout
        });
    }

    /*
     * Test scenarios
     */

    it("should have a import_file_payload", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        expect(mapping_ctrl_scope.import_file.dataset.name).toBe("DC 2013 data");
    });

    it("should show suggested mappings and confidence", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        var raw_columns = mapping_ctrl_scope.raw_columns;
        var first_column = raw_columns[0];

        expect(first_column.confidence).toBe(89);
        expect(first_column.suggestion).toBe("Pm Property Id");
    });

    it("should show 'low', 'med', 'high', or '' confidence text", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        var raw_columns = mapping_ctrl_scope.raw_columns;
        var first_column = raw_columns[0];
        expect(first_column.confidence_text()).toBe("high");
        first_column.confidence = 70;
        expect(first_column.confidence_text()).toBe("med");
        first_column.confidence = 35;
        expect(first_column.confidence_text()).toBe("low");
        delete(first_column.confidence);
        expect(first_column.confidence_text()).toBe("");
    });

    it("should validate initial data", function() {
        create_mapping_controller();
        // act
        mapping_ctrl_scope.$digest();
        // assertions
        angular.forEach(mapping_ctrl_scope.raw_columns, function(rc) {
            if (rc.suggestion !== '' && typeof(rc.suggestion) !== "undefined") {
                expect(rc.validity).toBe('valid');
            }
        });
    });

    it("should invalidate bad suggestions", function() {
        // Simulate a change on the tcm, make it fail.
        create_mapping_controller();
        // act
        mapping_ctrl_scope.$digest();
        // assertions
        //
        // We change the suggested mapping for the "property name" column
        // to "gross_floor_area" (which validates as float) to
        // purposesly cause a failing change.
        mapping_ctrl_scope.raw_columns[1].suggestion = 'gross_floor_area';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[1]);
        expect(mapping_ctrl_scope.raw_columns[1].validity).toBe('invalid');

    });

    it("should set td_class appropriately", function() {
        var tcm;

        create_mapping_controller();

        mapping_ctrl_scope.$digest();
        tcm = mapping_ctrl_scope.raw_columns[0];
        var good_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[0]
        );

        // First raw column is mapped up as pm_property_id <-> property_id
        // Any kind of string will be valid.
        expect(good_val).toBe('success');

        // Now set it to one that expects float values.
        // Only one of these will *not* validate.
        mapping_ctrl_scope.raw_columns[0].suggestion = 'gross_floor_area';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[0]);

        tcm = mapping_ctrl_scope.raw_columns[0];
        var warning_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[4]
        );

        expect(warning_val).toBe('warning');

        // We don't want the warning style to be applied to neighboring cells
        // in the same row. Check that the cell next to our invalid one is
        // unstyled (undefined).
        tcm = mapping_ctrl_scope.raw_columns[0];
        var adjacent_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[3]
        );

        expect(adjacent_val).toBe(undefined);

        // Now we're saying the suggestion is to not map.
        // Check that we don't have any class set for this row now.
        mapping_ctrl_scope.raw_columns[0].suggestion = '';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[0]);

        tcm = mapping_ctrl_scope.raw_columns[0];
        var blank_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[4]
        );

        expect(blank_val).toBe('');

    });

    it("should detect duplicates of mapped rows", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // raw_columns[0] and raw_columns[3] should be the only mapped rows
        var column = mapping_ctrl_scope.raw_columns[3];
        var test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

        // Set the property_name tcm's suggestion to the same as
        // the property_id tcm (raw_columns[0])
        column.suggestion = 'Pm Property Id';

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(true);

        // Since we mark both duplicates as duplicates, the other
        // TCM that has the 'pm_property_id' suggestion should also get
        // 'danger' as its duplicate class.
        var other_dup = mapping_ctrl_scope.is_tcm_duplicate(
            mapping_ctrl_scope.raw_columns[0]
        );
        expect(other_dup).toBe(true);

        // Shows that mapped_row is the sole determinant of
        // column ignoring
        column.mapped_row = false;

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

    });

    it("should ignore duplicates of unmapped rows", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // raw_columns[0] and raw_columns[3] should be the only mapped rows
        var column = mapping_ctrl_scope.raw_columns[1];
        var test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

        // Set the property_name tcm's suggestion to the same as
        // the property_id tcm (raw_columns[0])
        column.suggestion = 'Pm Property Id';

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);
    });

    it("should get mapped buildings", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        mapping_ctrl_scope.get_mapped_buildings();
        mapping_ctrl_scope.$digest();

        // assertions
        expect(mapping_ctrl_scope.search.search_buildings).toHaveBeenCalled();
        expect(mock_user_service.set_default_columns).toHaveBeenCalled();
    });

    it("should enbale the 'show & review buildings' button if duplicates are" +
        " not present", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        for (var i = mapping_ctrl_scope.raw_columns.length - 1; i >= 0; i--) {
            mapping_ctrl_scope.change(mapping_ctrl_scope.raw_columns[i]);
        }
        var duplicates_found = mapping_ctrl_scope.duplicates_present();

        // assertions
        expect(duplicates_found).toBe(false);
    });

    it("should disable the 'show & review buildings' button if duplicates " +
        "are present", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        for (var i = mapping_ctrl_scope.raw_columns.length - 1; i >= 0; i--) {
            mapping_ctrl_scope.raw_columns[i].suggestion = "pm_property_id";
            mapping_ctrl_scope.change(mapping_ctrl_scope.raw_columns[i]);
        }
        var duplicates_found = mapping_ctrl_scope.duplicates_present();

        // assertions
        expect(duplicates_found).toBe(true);
    });

    it("should get mappings in an API friendly way", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();
        var mappings = mapping_ctrl_scope.get_mappings();
        expect(mappings.length).toBe(5);
        expect(mappings[0]).toEqual(['Pm Property Id', 'property id']);
        // everything in between is empty since we we're using only
        // suggested mappings.
        expect(mappings[3]).toEqual(['Tax Lot Id', 'lot number']);
    });

    it("should show the 'STEP 2' tab when reviewing mappings", function() {
        // arrange
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // act
        var mappings = mapping_ctrl_scope.get_mapped_buildings();

        // assert
        expect(mapping_ctrl_scope.tabs).toEqual({
            'one_active': false,
            'two_active': true,
            'three_active': false
        });
    });

    it("should show BEDES fields with a checkbox", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assert
        expect(mapping_ctrl_scope.is_suggestion_BEDES('gross_floor_area')).toBe(true);
        expect(mapping_ctrl_scope.is_suggestion_BEDES('Gross Floor Area')).toBe(true);
        expect(mapping_ctrl_scope.is_suggestion_BEDES('My New non-BEDES field')).toBe(false);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: matching_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, delete_called;
    var matching_ctrl, matching_ctrl_scope, modalInstance, labels;


    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, building_services) {
            controller = $controller;
            scope = $rootScope;
            matching_ctrl_scope = $rootScope.$new();

            mock_building_services = building_services;
            spyOn(mock_building_services, "get_PM_filter_by_counts")
                .andCallFake(function(import_file){
                    return $q.when(
                        {
                            "status": "success",
                            "unmatched": 5,
                            "matched": 10
                        }
                    );
                }
            );
            spyOn(mock_building_services, "save_match")
                .andCallFake(function(b1, b2, create){
                    return $q.when(
                        {
                            "status": "success",
                            "child_id": 3
                        }
                    );
                }
            );
            spyOn(mock_building_services, "search_matching_buildings")
                .andCallFake(function(q, number_per_page, current_page, order_by, sort_reverse, 
                                        filter_params, file_id ){
                    
                    switch(filter_params.children__isnull){
                        case undefined:
                            var bldgs = [
                                {
                                    pm_property_id: 1
                                },
                                {
                                    pm_property_id: 2
                                }
                                ,
                                {
                                    pm_property_id: 3
                                }
                            ];
                            break;
                        case false:
                            var bldgs = [
                                {
                                    pm_property_id: 1
                                }
                            ];
                            break;
                        case true:
                            var bldgs = [
                                {
                                    pm_property_id: 3
                                },
                                {
                                    pm_property_id: 4
                                }
                            ];
                            break;
                    }

                    return $q.when(
                        {
                            status: "success",
                            number_returned: buildings_payload.length,
                            number_matching_search: buildings_payload.length,
                            buildings: bldgs
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_detail_controller(){
        var buildings_payload = {
            buildings: [
                {
                    pm_property_id: 1,
                    tax_lot_id: null,
                    custom_id_1: 2,
                    gross_floor_area: 111,
                    matched: true,
                    id: 1,
                    children: [3],
                    coparent: {
                        pm_property_id: null,
                        tax_lot_id: 2,
                        custom_id_1: null,
                        gross_floor_area: 111,
                        id: 2,
                        children: [3]
                    }
                }
            ],
            number_matching_search: 1,
            number_returned: 1
        };
        matching_ctrl = controller('matching_controller', {
            $scope: matching_ctrl_scope,
            buildings_payload: buildings_payload,
            all_columns: {
                fields: [{sort_column: 'pm_property_id'}]
            },
            default_columns: {
                columns: ['pm_property_id']
            },
            import_file_payload: {
                import_file: {
                    id: 1,
                    dataset: {
                        importfiles: [
                            {
                                id: 1,
                                name: "file_1.csv"
                            },
                            {
                                id: 2,
                                name: "file_2.csv"
                            }
                        ]
                    }
                }
            }
        });
    }



    /*
     * Test scenarios
     */

    it("should have a buildings payload with potential matches", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();
        var b = matching_ctrl_scope.buildings[0];

        // assertions
        expect(matching_ctrl_scope.buildings.length).toBe(1);
        expect(b.coparent.children).toEqual(b.children);
    });

    it("should provide to the view scope variables representing the number matched and the number of unmatched buildings", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();

        // assertions
        expect(matching_ctrl_scope.matched_buildings).toEqual(10);
        expect(matching_ctrl_scope.unmatched_buildings).toEqual(5);
    });

    it("should jump back to the matching list when the 'Back to list' button" +
        " is clicked", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.show_building_list = false;
        matching_ctrl_scope.back_to_list();

        // assertions
        expect(matching_ctrl_scope.show_building_list).toEqual(true);
    });

    it("should present an initial state with the matching buildings table",
        function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();

        // assertions
        expect(matching_ctrl_scope.columns).toEqual([{ sort_column : 'pm_property_id' }]);
        expect(matching_ctrl_scope.number_matching_search).toEqual(1);
        expect(matching_ctrl_scope.number_returned).toEqual(1);
        expect(matching_ctrl_scope.num_pages).toEqual(1);
        expect(mock_building_services.get_PM_filter_by_counts).toHaveBeenCalled();
    });
    it("should match a building in the matching list", function() {
        // arrange
        create_dataset_detail_controller();
        var b1, b2;
        b2 = {
            id: 2,
            children: [],
            matched: false
        };
        b1 = {
            id: 1,
            children: [],
            matched: true,
            coparent: b2
        };

        // act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.toggle_match(b1);
        matching_ctrl_scope.$digest();

        // assertions
        expect(mock_building_services.save_match).toHaveBeenCalledWith(b1.id, b2.id, true);
        expect(mock_building_services.get_PM_filter_by_counts).toHaveBeenCalled();
        expect(b1.children[0]).toEqual(3);
    });
    it("Should update the list of buildings correctly when 'Show Matched' is selected", function() {
        //arrange
        create_dataset_detail_controller();

        //act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.update_show_filter(controller.SHOW_MATCHED)

        //assertions
        //expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(1);
        expect(matching_ctrl_scope.number_returned).toEqual(1);
    });
    it("Should update the list of buildings correctly when 'Show Unmatched' is selected",  function() {
        //arrange
        create_dataset_detail_controller();

        //act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.update_show_filter(controller.SHOW_UNMATCHED)

        //assertions
        //expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(2);
        expect(matching_ctrl_scope.number_returned).toEqual(2);
    });
    it("Should update the list of buildings correctly when 'Show All' is selected", function() {
        //arrange
        create_dataset_detail_controller();

        //act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.update_show_filter(controller.SHOW_ALL)

        //assertions
        //expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(3);
        expect(matching_ctrl_scope.number_returned).toEqual(3);
    });



});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: members_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller;
    var ctrl, ctrl_scope, modalInstance;
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          $q,
          organization_service) {
            ctrl = $controller;
            scope = $rootScope;
            ctrl_scope = $rootScope.$new();

            mock_organization_service = organization_service;
            
            spyOn(mock_organization_service, "remove_user")
                .andCallFake(function(user_id, org_id){
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
            spyOn(mock_organization_service, "get_organization_users")
                .andCallFake(function(org){
                    return $q.when(
                        {
                            "status": "success",
                            "users": [{id:1, first_name:"Bob", last_name:"D"}]
                        }
                    );
                }
            );
            spyOn(mock_organization_service, "update_role")
                .andCallFake(function(org_id, user_id, role){
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_members_controller(){
        ctrl = ctrl('members_controller', {
            $scope: ctrl_scope,
            users_payload: {users: [
                {first_name: 'J', last_name: 'S'},
                {first_name: undefined, last_name: null}
            ]},
            organization_payload: {
                organization: {name: 'my org', id: 4}
            },
            auth_payload: {
                auth: {
                    'can_invite_member': true,
                    'can_remove_member': true
                }
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should accepts its payload", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.org).toEqual({name : 'my org', id : 4});
        expect(ctrl_scope.users[0].name).toEqual("J S");
        expect(ctrl_scope.users[1].name).toEqual(" ");
    });
    it("clicking remove should remove a user", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.remove_member({user_id: 2});

        // assertions
        expect(mock_organization_service.remove_user)
            .toHaveBeenCalledWith(2, 4);
        
        ctrl_scope.$digest();
        expect(mock_organization_service.get_organization_users)
            .toHaveBeenCalledWith({org_id: 4});
    });
    it("clicking a new role should update the user's role", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.update_role({user_id: 2, role: "viewer"});

        // assertions
        expect(mock_organization_service.update_role)
            .toHaveBeenCalledWith(2, 4, 'viewer');
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: new_member_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_user_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, user_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        mock_user_service = user_service;
        spyOn(mock_user_service, "add")
            .andCallFake(function(user){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_new_member_controller(){
        ctrl = ctrl('new_member_modal_ctrl', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            organization: {organization_id: 1}
        });
    }

    /*
     * Test scenarios
     */

    it("should set the default role to 'member'", function() {
        // arrange
        create_new_member_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.user.role.value).toEqual("member"); 
    });
    it("should call the user service to add a new user to the org",
        function() {
        // arrange
        create_new_member_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.user.first_name = "JB";
        ctrl_scope.user.last_name = "Smooth";
        ctrl_scope.user.email = "jb.smooth@be.com";
        ctrl_scope.submit_form(true);

        // assertions
        expect(mock_user_service.add)
            .toHaveBeenCalledWith({
                first_name: "JB",
                last_name: "Smooth",
                email: "jb.smooth@be.com",
                role: ctrl_scope.roles[0],
                organization: {
                    organization_id: 1
                }
            });
    });
    
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
/**
 * run_jasmine.js: runs the jasmine JS test runner
 */
(function() {
    var jasmineEnv = jasmine.getEnv();
    jasmineEnv.updateInterval = 1000;

    var htmlReporter = new jasmine.HtmlReporter();

    jasmineEnv.addReporter(htmlReporter);

    jasmineEnv.specFilter = function(spec) {
        return htmlReporter.specFilter(spec);
    };

    var currentWindowOnload = window.onload;

    window.onload = function() {
        if (currentWindowOnload) {
        currentWindowOnload();
        }
        execJasmine();
    };
    function execJasmine() {
        jasmineEnv.execute();
    }
})();

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var searchTestApp = angular.module(
    'searchTestApp', ['BE.seed.service.search']
);

describe("The search_service service", function() {
    var saas, httpBackend, test_url;

    beforeEach(function () {
        module("searchTestApp");
        inject(function (search_service, $httpBackend) {
            saas = search_service;
            httpBackend = $httpBackend;
            httpBackend.when("POST", test_url).respond("ok");
        });

    });

    /**
     * sanitize_params tests
     */
    it('removes null and undefined values from filter_params', function () {
        // arrange
        saas.filter_params = {
          'National Median Site Energy Use__gte': 4,
          'National Median Site Energy Use__lte': null,
          'National Median Source EUI__gte': undefined
        };

        // act
        saas.sanitize_params();

        // assert
        expect(saas.filter_params).toEqual({'National Median Site Energy Use__gte': 4});
    });

    /**
     * search_buildings tests
     */
    it('has sane defaults', function() {
        expect(saas.url).toEqual("");
        expect(saas.error_message).toEqual("");
        expect(saas.alert).toEqual(false);
        expect(saas.buildings).toEqual([]);
        expect(saas.current_page).toEqual(1);
        expect(saas.number_per_page).toEqual(10);
        expect(saas.order_by).toEqual("");
        expect(saas.sort_column).toEqual("tax_lot_id");
        expect(saas.sort_reverse).toEqual(false);
        expect(saas.select_all_checkbox).toEqual(false);
        expect(saas.prev_page_disabled).toEqual(true);
        expect(saas.next_page_disabled).toEqual(true);
        expect(saas.num_pages).toEqual(0);
        expect(saas.query).toEqual("");
        expect(saas.showing).toEqual({
            'start': 1,
            'end': 0
        });
    });

    it('search_buildings uses the argument `query`', function() {
        saas.query = "hotels";
        saas.search_buildings("not hotels");

        expect(saas.query).toEqual("not hotels");
    });
    it('filter search resets the current page', function() {
        // arrange
        saas.current_page = 22;
        spyOn(saas, 'search_buildings');

        // act
        saas.filter_search();

        // assert
        expect(saas.current_page).toEqual(1);
        expect(saas.search_buildings).toHaveBeenCalled();
    });

    it('search_buildings function will default to its query if' +
        ' no query is passed as an argument', function() {
        saas.query = "hotels";
        saas.search_buildings();

        expect(saas.query).toEqual("hotels");
    });

    it('search_buildings hits the set url', function() {
        test_url = "/my-search-url";
        saas.url = test_url;
        saas.search_buildings();
        httpBackend.expectPOST(test_url);
        httpBackend.flush();
    });

    it('search_buildings POSTs the query data as `q`', function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.query = "hotel chains";
        saas.number_per_page = 25;
        saas.order_by = "gross_floor_area";
        saas.sort_reverse = true;
        saas.filter_params = {
            project: '2012 data'
        };

        // act
        saas.search_buildings();

        // assert
        httpBackend.expectPOST(test_url,
            {
                "q": "hotel chains",
                "number_per_page": 25,
                "order_by": "gross_floor_area",
                "sort_reverse": true,
                "filter_params": {
                    "project": "2012 data"
                },
                "page":1
            }
        ).respond(201, "");
        httpBackend.flush();
    });
    it('search_buildings updates its `buildings` model', function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.query = "hotel chains";
        saas.number_per_page = 25;
        saas.order_by = "gross_floor_area";
        saas.sort_reverse = true;
        saas.filter_params = {
            project: '2012 data'
        };

        // act
        saas.search_buildings();

        // assert
        httpBackend.expectPOST(test_url,
            {
                "q": "hotel chains",
                "number_per_page": 25,
                "order_by": "gross_floor_area",
                "sort_reverse": true,
                "filter_params": {
                    "project": "2012 data"
                },
                "page":1
            }
        ).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        expect(saas.buildings).toEqual([
            {
                name: "one",
                id: 1,
                checked: false
            },
            {
                name: "two",
                id: 2,
                checked: false
            }
        ]);
    });
    it('should clear the error and alert after a successful search',
        function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.error_message = "help";
        saas.alert = true;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {
            'buildings': [
                {
                    name: "one",
                    id: 1
                },
                {
                    name: "two",
                    id: 2
                }],
            'number_matching_search': 101
            });
        httpBackend.flush();

        // assert
        expect(saas.alert).toEqual(false);
        expect(saas.error_message).toEqual("");
    });

    /**
     * pagination tests
     */
    it('increments the page when the `next` button is clicked',
        function() {
        // arrange
        saas.num_pages = 1000;
        saas.current_page = 100;
        spyOn(saas, 'search_buildings');
        // act
        saas.next_page();

        // assert
        expect(saas.current_page).toEqual(101);
        expect(saas.search_buildings).toHaveBeenCalled();
        expect(saas.search_buildings.callCount).toEqual(1);

    });
    it('doesn\'t increment past the last page when the `next` button is' +
        ' clicked', function() {
        // arrange
        saas.num_pages = 2;
        saas.current_page = 2;
        spyOn(saas, 'search_buildings');
        // act
        saas.next_page();

        // assert
        expect(saas.current_page).toEqual(2);
        expect(saas.search_buildings).toHaveBeenCalled();
        expect(saas.search_buildings.callCount).toEqual(1);

    });
    it('decrements the page when the `previous` button is clicked',
        function() {
        // arrange
        saas.num_pages = 1000;
        saas.current_page = 100;
        spyOn(saas, 'search_buildings');
        // act
        saas.prev_page();

        // assert
        expect(saas.current_page).toEqual(99);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('does not decrement below the first page when the `previous` button' +
        ' is clicked', function() {
        // arrange
        saas.num_pages = 1;
        saas.current_page = 1;
        spyOn(saas, 'search_buildings');
        // act
        saas.prev_page();

        // assert
        expect(saas.current_page).toEqual(1);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('fetches more or less results per page when a user selects an option' +
        ' from the number per page select',
        function() {
        // arrange
        saas.number_per_page_options_model = 50;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_number_per_page();

        // assert
        expect(saas.number_per_page).toEqual(50);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('updates the number of results displayed text after a successful '+
        'search', function() {
        // standard case
        // page 2 of 3 with 10/page, so should display 11 of 20
        // arrange
        saas.current_page = 2;
        saas.num_pages = 3;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_start_end_paging();

        // assert
        expect(saas.showing.start).toEqual(11);
        expect(saas.showing.end).toEqual(20);
        expect(saas.search_buildings).not.toHaveBeenCalled();
    });
    it('displays the number matching the query if on the last page of results',
        function() {
        // standard case
        // page 3 of 3 with 10/page and 34 results, so should display 21 of 34
        // arrange
        saas.current_page = 3;
        saas.number_matching_search = 34;
        saas.num_pages = 3;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_start_end_paging();

        // assert
        expect(saas.showing.start).toEqual(21);
        expect(saas.showing.end).toEqual(34);
    });
    it('should call update_start_end_paging after a successful search',
        function() {
        // arrange
        spyOn(saas, 'update_start_end_paging');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_start_end_paging).toHaveBeenCalled();
    });
    it('should call update_buttons after a successful search',
        function() {
        // arrange
        spyOn(saas, 'update_buttons');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_buttons).toHaveBeenCalled();
    });
    it('should disable prev paging buttons at the first page',
        function() {
        // arrange
        saas.current_page = 1;
        saas.num_pages = 5;

        // act
        saas.update_buttons();

        // assert
        expect(saas.prev_page_disabled).toEqual(true);
        expect(saas.next_page_disabled).toEqual(false);
    });
    it('should disable next paging buttons at the last page',
        function() {
        // arrange
        saas.current_page = 5;
        saas.num_pages = 5;

        // act
        saas.update_buttons();

        // assert
        expect(saas.prev_page_disabled).toEqual(false);
        expect(saas.next_page_disabled).toEqual(true);
    });
    it('should calculate the number of pages after a successful search',
        function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {
            'buildings': [
                {
                    name: "one",
                    id: 1
                },
                {
                    name: "two",
                    id: 2
                }],
            'number_matching_search': 101
            });
        httpBackend.flush();

        // assert
        expect(saas.number_matching_search).toEqual(101);
        expect(saas.num_pages).toEqual(11);
    });

    /**
     * checkbox logic tests
     */
    it('should select or unselect all the viewed results when the select all' +
        ' checkbox is checked or unchecked', function() {
        // arrange
        saas.selected_buildings = [1,2,3];
        saas.select_all_checkbox = true;
        saas.buildings = [
            {
                checked: false
            },
            {
                checked: true
            }
        ];
        spyOn(saas, 'select_or_deselect_all_buildings').andCallThrough();

        // act
        saas.select_all_changed();

        // assert
        expect(saas.selected_buildings).toEqual([]);
        expect(saas.buildings).toEqual([
                {
                    checked: true
                },
                {
                    checked: true
                }
            ]);
        expect(saas.select_or_deselect_all_buildings).toHaveBeenCalled();
    });
    it('should call select_or_deselect_all_buildings after a search',
        function() {
        // arrange
        spyOn(saas, 'select_or_deselect_all_buildings');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.select_or_deselect_all_buildings).toHaveBeenCalled();
    });
    it('should add a building to the selected list when checked',
        function() {
        // arrange
        var building = {
            id: 5,
            checked: true
        };

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([5]);
    });
    it('should add a building to the selected list when unchecked and the ' +
        'select all checkbox is checked', function() {
        // arrange
        var building = {
            id: 5,
            checked: false
        };
        saas.select_all_checkbox = true;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([5]);
    });
    it('should remove a building to the selected list when unchecked',
        function() {
        // arrange
        var building = {
            id: 5,
            checked: false
        };
        saas.selected_buildings = [5,6,7];
        saas.select_all_checkbox = false;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([6,7]);
    });
    it('should remove a building to the selected list when checked if the ' +
        'select all checkbox is checked', function() {
        // arrange
        var building = {
            id: 5,
            checked: true
        };
        saas.selected_buildings = [5,6,7];
        saas.select_all_checkbox = true;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([6,7]);
    });
    it('should call load_state_from_selected_buildings after a successful ' +
        'search', function() {
        // arrange
        spyOn(saas, 'load_state_from_selected_buildings').andCallThrough();
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.load_state_from_selected_buildings).toHaveBeenCalled();
    });
    it('should call update_results after a successful ' +
        'search', function() {
        // arrange
        var select_or_deselect_all_buildings_time,
            load_state_from_selected_buildings_time;
        spyOn(saas, 'update_results').andCallThrough();
        spyOn(saas, 'select_or_deselect_all_buildings')
            .andCallFake(function() {
                select_or_deselect_all_buildings_time = new Date();
            }
        );
        spyOn(saas, 'load_state_from_selected_buildings')
            .andCallFake(function() {
                // wait for a sec, otherwise both have the same timestamp
                for(var y=0;y<100000;y++){
                    var x = new Date();
                    x = x+y;
                }
                load_state_from_selected_buildings_time = new Date();
            }
        );
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_results).toHaveBeenCalled();
        expect(select_or_deselect_all_buildings_time <
               load_state_from_selected_buildings_time).toBe(true);
    });
    it('check selected buildings successful', function() {
        // arrange
        saas.selected_buildings = [2];
        saas.buildings = [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ];

        // act
        saas.load_state_from_selected_buildings();

        // assert
        expect(saas.buildings[1]).toEqual({
            name: "two",
            id: 2,
            checked: true
        });
    });
    it('should generate columns', function() {
        // arrange
        var all_columns, column_headers, columns;
        all_columns = [
            {
                sort_column: "name"
            },
            {
                sort_column: "id"
            }
        ];
        column_headers = ["id"];
        saas.sort_column = "something else";
        saas.update_results({});
        // act
        columns = saas.generate_columns(
            all_columns, column_headers, saas.column_prototype
        );

        // assert that columns are extended off the prototype and only have
        // "id"
        expect(columns.length).toEqual(1);
        expect(columns[0].sort_column).toEqual("id");
        expect(columns[0].is_unsorted()).toEqual(true);
        saas.sort_column = "id";
        expect(columns[0].is_unsorted()).toEqual(false);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: settings_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller;
    var ctrl, ctrl_scope, modalInstance;
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          $q,
          organization_service) {
            ctrl = $controller;
            scope = $rootScope;
            ctrl_scope = $rootScope.$new();

            mock_organization_service = organization_service;
            
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_settings_controller(){
        ctrl = ctrl('settings_controller', {
            $scope: ctrl_scope,
            all_columns: {fields: [
                {checked: false, title: 'PM Property ID', sort_column: 'pm_property_id'},
                {checked: false, title: 'G', sort_column: 'g'},
                {checked: false, title: "Gross Floor Area", sort_column: 'gross_floor_area'}
            ]},
            organization_payload: {
                organization: {name: 'my org', id: 4}
            },
            query_threshold_payload: {
                query_threshold: 10
            },
            shared_fields_payload: {
                shared_fields: [
                    {
                        title: "PM Property Id",
                        sort_column: "pm_property_id"
                    }
                ],
                public_fields: [
                {
                    title: "Gross Floor Area",
                    sort_column: "gross_floor_area"
                }]
            },
            auth_payload: {
                auth: {
                    'is_owner': true,
                    'is_parent_org_owner': false
                }
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should accepts its payload", function() {
        // arrange
        create_settings_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.org).toEqual({
            name : 'my org',
            id : 4,
            query_threshold: 10
        });
        expect(ctrl_scope.fields[0].checked).toEqual(true);
        expect(ctrl_scope.fields[1].checked).toEqual(false);
        expect(ctrl_scope.fields[0].title).toEqual('PM Property ID');
    });
    it("should select all", function() {
        // arrange
        create_settings_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.controls.select_all = true;
        ctrl_scope.select_all_clicked();
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.infinite_fields[0].checked).toEqual(true);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myStripFilterApp = angular.module('myStripFilterApp', ['stripImportPrefix']);

describe("The stripImportPrefix filter", function() {
    beforeEach(module('myStripFilterApp'));
    it('Strips out the import prefix from building ids',
        // e.g. remove the 'IMP12-' from the id 'IMP12-1321/123'
        inject(function(stripImportPrefixFilter) {
            // normal cases
            expect(stripImportPrefixFilter('IMP134-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP134555-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP1-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP0-134')).toBe('134');
            // deals with `-`
            expect(stripImportPrefixFilter('IMP134-abc-dev')).toBe('abc-dev');
            // deals with `/`
            expect(stripImportPrefixFilter('IMP134-00/11')).toBe('00/11');
            // only strips first prefix
            expect(stripImportPrefixFilter('IMP134-IMP134-123')).toBe('IMP134-123');
        })
    );
    it("Does not strip out anything if there is not a prefix",
        inject(function(stripImportPrefixFilter) {
            // normal cases
            expect(stripImportPrefixFilter('123-123')).toBe('123-123');
            expect(stripImportPrefixFilter('0123/123')).toBe('0123/123');
        })
    );
    it("Is case sensitive to the import prefix",
        inject(function(stripImportPrefixFilter) {
            expect(stripImportPrefixFilter('imp123-abc')).toBe('imp123-abc');
            expect(stripImportPrefixFilter('iMp123-abc')).toBe('iMp123-abc');
            expect(stripImportPrefixFilter('iMP123-abc')).toBe('iMP123-abc');
        })
    );
    it("Handles undefined or null inputs",
        inject(function(stripImportPrefixFilter) {
            expect(stripImportPrefixFilter(undefined)).toBe(undefined);
            expect(stripImportPrefixFilter(null)).toBe(null);
        })
    );
    it("Only strips out the prefix if it has at least one digit and a hyphen",
        inject(function(stripImportPrefixFilter) {
            // must have the 'IMP' folowed by a digit then a hyphen
            expect(stripImportPrefixFilter('IMP-123')).toBe('IMP-123');
            expect(stripImportPrefixFilter('IMP1123')).toBe('IMP1123');
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myTitleCaseApp = angular.module('myTitleCaseApp', ['titleCase']);

describe("The TitleCase filter", function() {
    beforeEach(module('myTitleCaseApp'));
    it('Strips out ``_`` characters from strings and capitalizes the rest',
        inject(function(titleCaseFilter) {
            // normal cases
            expect(titleCaseFilter('super_data')).toBe('Super Data');
            expect(titleCaseFilter('super_data_45')).toBe('Super Data 45');
            expect(titleCaseFilter(undefined)).toBe(undefined);
            expect(titleCaseFilter(null)).toBe(null);
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myTypedNumberFilterApp = angular.module('myTypedNumberFilterApp', ['typedNumber']);

describe("The typedNumber filter", function() {
    beforeEach(module('myTypedNumberFilterApp'));
    it('should parse strings as strings and return them',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('tester')).toBe('tester');
        })
    );
    it('should parse strings as strings and return them, even if they look like numbers',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.1456')).toBe('123.1456');
        })
    );

    it('should parse numbers as numbers and return them',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.00001', 'number')).toBe("123");
        })
    );

    it('should allow the user to set the number of sig digits',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.321', 'number', 'not_year', 1)).toBe("123.3");
        })
    );

    it('should add commas to number greater than 999',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123456789', 'number', 'not_year', 0)).toBe("123,456,789");
        })
    );

    it('should parse year_built and not add commas',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('1946', 'number', 'year_built', 1)).toBe("1946");
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var validationTestApp = angular.module(
    'validationTestApp', ['mappingValidatorService']
);

describe("The MappingValidatorService", function() {
    var mvs;

    beforeEach(function () {
        module("validationTestApp");
        inject(function (mappingValidatorService) {
            mvs = mappingValidatorService;

        });

    });

    it('validates good string, float and date data', function() {
        // normal cases
        // Here ``type`` is undefined. Should still work.
        var str_data = ['Fun', 'fun2', 'fun3', 'fun4'];
        var float_data = ['12.34', '144.5', '234'];
        var date_data = ['2014/02/02', '03/13/2013', '03-14-2004'];

        expect(mvs.validate(str_data)).toEqual([]);
        expect(mvs.validate(float_data, 'float')).toEqual([]);
        expect(mvs.validate(date_data, 'date')).toEqual([]);
    });

    it('recognizes semivalid data', function() {
        // Cases where the data is /almost/ right.
        var float_data = ['12.34', '144.5', 'NaN'];
        var date_data = ['2014/02/02', 'huh?', '03-14-2004'];
        expect(mvs.validate(float_data, 'float')).toEqual(['NaN']);
        expect(mvs.validate(date_data, 'date')).toEqual(['huh?']);
    });

    it('recognizes invalid data', function() {
        // Cases where the data is *all* wrong.
        var float_data = ['', 'not a float', 'NaN'];
        var date_data = ['', 'huh?', 'what?'];
        // Cases where the data are correct.
        var good_float_data = ['12.34', '144.5', '234'];
        var good_date_data = ['2014/02/02', '03/13/2013', '03-14-2004'];

        // Data is wrong
        expect(mvs.validate(float_data, 'float')).toEqual(float_data);
        expect(mvs.validate(date_data, 'date')).toEqual(date_data);

        // Type is wrong
        // N.B. we use semivalid here, because Date is pretty forgiving w/ nums.
        expect(mvs.validate(good_float_data, 'date')).toEqual(['12.34']);
        expect(mvs.validate(good_date_data, 'float')).toEqual(good_date_data);


    });

});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// taken from the angularjs testing page
// http://docs.angularjs.org/guide/dev_guide.unit-testing

// create dummy angularJS app to attach filter(s)
var myBELabelDirectiveApp = angular.module('myBELabelDirectiveApp', ['beLabel']);

describe("The beLabel directive", function() {
    var $compile;
    var $rootScope;
    beforeEach(module('myBELabelDirectiveApp'));
    // Store references to $rootScope and $compile
    // so they are available to all tests in this describe block
    beforeEach(inject(function(_$compile_, _$rootScope_){
      // The injector unwraps the underscores (_) from around the parameter names when matching
      $compile = _$compile_;
      $rootScope = _$rootScope_;
    }));

    it('Replaces the element with the appropriate content', function() {
        // Compile a piece of HTML containing the directive
        var element = $compile('<be-label name="compliant" color="blue"></be-label>')($rootScope);
        // fire all the watches
        $rootScope.$digest();
        // Check that the compiled element contains the templated content
        expect(element.hasClass('label-primary')).toBe(true);
        expect(element.hasClass('label')).toBe(true);
        expect(element.html()).toContain("compliant");
    });

        // 'red': 'danger',
        // 'gray': 'default',
        // 'orange': 'warning',
        // 'green': 'success',
        // 'blue': 'primary',
        // 'light blue': 'info'
    it('Maps colors to semantic bootstrap class names', function() {
        var element = $compile('<be-label name="compliant" color="red"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-danger')).toBe(true);

        element = $compile('<be-label name="compliant" color="gray"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-default')).toBe(true);

        element = $compile('<be-label name="compliant" color="orange"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-warning')).toBe(true);

        element = $compile('<be-label name="compliant" color="green"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-success')).toBe(true);

        element = $compile('<be-label name="compliant" color="blue"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-primary')).toBe(true);

        element = $compile('<be-label name="compliant" color="light blue"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-info')).toBe(true);
    });


});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// taken from the angularjs testing page
// http://docs.angularjs.org/guide/dev_guide.unit-testing

// create dummy angularJS app to attach filter(s)
var myBEUploaderDirectiveApp = angular.module('myBEUploaderDirectiveApp', ['beUploader']);

describe("The beUploader directive", function() {
    var g_message, g_file, g_progress;
    var $compile;
    var $rootScope;
    var uploader_html = '<div be-uploader sourcetype="assessor" importrecord="5" buttontext="Upload your building list .csv file" eventfunc="uploaderfunc(message, filename, progress)" ng-hide="uploader.in_progress"></div>';
    beforeEach(module('myBEUploaderDirectiveApp'));
    // Store references to $rootScope and $compile
    // so they are available to all tests in this describe block
    beforeEach(inject(function(_$compile_, _$rootScope_){
      // The injector unwraps the underscores (_) from around the parameter names when matching
      $compile = _$compile_;
      $rootScope = _$rootScope_;
      $rootScope.eventfunc = function (fine_object) {
        console.log({fin: fine_object});
        g_message = fine_object.message;
        g_file = fine_object.file;
        g_progress = fine_object.progress;
      };
      window.BE = window.BE || {};
      window.BE.FILE_UPLOAD_DESTINATION = 'S3';
    }));

    it('Creates the fineuploader element', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        
        // act
        $rootScope.$digest();

        // assert
        expect(element.html()).toContain("qq-uploader");
        expect(element.html()).toContain("qq-upload-button");
    });

    it('Contains the buttontext specified', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);

        // act
        $rootScope.$digest();

        // assert
        expect(element.html()).toContain("Upload your building list .csv file");
    });

    it('Only allows one file to be uploaded at a time', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");

        // act
        $rootScope.$digest();

        // assert
        expect(func._options.multiple).toBe(false);
    });

    it('Uses the callback function for invalid file types', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.jpeg");

        // act
        $rootScope.$digest();
        func._options.showMessage("there was an invalid extension. Valid extension(s): .csv");


        // assert
        expect(g_message).toBe("invalid_extension");
    });

    it('Uses the callback function to share its state: upload started',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';
        
        // act
        $rootScope.$digest();
        func._options.callbacks.onSubmitted(1, filename);


        // assert
        expect(g_message).toBe("upload_submitted");
        expect(g_file.filename).toBe(filename);
    });

    it('Uses the callback function to share its state: in progress',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';
        var loaded = 10;
        var total = 100;
        
        // act
        $rootScope.$digest();
        func._options.callbacks.onProgress(1, filename, loaded, total);


        // assert
        expect(g_message).toBe("upload_in_progress");
        expect(g_file.filename).toBe(filename);
        expect(g_progress.loaded).toBe(loaded);
        expect(g_progress.total).toBe(total);
    });

    it('Uses the callback function to share its state: complete',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';

        
        // act
        $rootScope.$digest();
        func._options.callbacks.onComplete(1, filename, {success: true});


        // assert        
        expect(g_message).toBe("upload_complete");
        expect(g_file.filename).toBe(filename);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: building_detail_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, ngFilter, delete_called;
    var building_detail_ctrl, building_detail_ctrl_scope, modalInstance, labels;
    var mock_building_services, mock_project_service;
    var mock_building;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          urls,
          $q,
          building_services,
          project_service,
          $filter) {
            controller = $controller;
            scope = $rootScope;
            ngFilter = $filter;
            building_detail_ctrl_scope = $rootScope.$new();
            modal_state = "";
            delete_called = false;

            // mock the building_services factory methods used in the controller
            // and return their promises
            mock_building_services = building_services;
            mock_project_service = project_service;

            spyOn(mock_project_service, "get_project")
                .andCallFake(function(project_slug){
                    return $q.when(
                        {
                            "status": "success",
                            "project": {
                                id: 33,
                                name: "test project",
                                slug: project_slug
                            }
                        }
                    );
                }
            );
            spyOn(mock_project_service, "get_labels")
                .andCallFake(function(){
                    return $q.when(
                        {
                            "status": "success",
                            "labels": [{
                                id: 44,
                                name: "bad label",
                                color: "red"
                            }]
                        }
                    );
                }
            );
            spyOn(mock_project_service, "update_project_building")
                .andCallFake(function(building_id, project, label){
                    return $q.when(
                        {
                            "status": "success",
                            "approver": "bob doe",
                            "approved_date": "01/01/2012"
                        }
                    );
                }
            );
            spyOn(mock_building_services, "update_building")
                .andCallFake(function (building, org_id){
                    mock_building = building;
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_building_detail_controller(){
        var fake_building = {
            id: 511,
            pk: 511,
            gross_floor_area: 123456,
            gross_floor_area_source: 2,
            city: "DC",
            city_source: 4,
            tax_lot_id: "11/22",
            tax_lot_id_source: 3,
            extra_data: {
                'some other key': 12344,
                'some other key that is not in a parent': 223
            },
            extra_data_sources: {
                'some other key': 2,
                'some other key that is not in a parent': 3
            },
            created: "at some point"
        };
        var fake_imported_buildings = [
            {
                id: 2,
                pk: 2,
                gross_floor_area: 123456,
                gross_floor_area_source: null,
                city: "Washington, DC",
                city_source: null,
                extra_data: {
                    'some other key': 123,
                    'some other key that is not in a child': 333,
                    'some floor area': 444
                },
                extra_data_sources: {
                    'some other key': null,
                    'some other key that is not in a child': 111,
                    'some floor area': 444
                },
                created: "test"
            },
            {
                id: 3,
                pk: 3,
                gross_floor_area: 2111111,
                gross_floor_area_source: null,
                city: "Washington",
                city_source: null,
                tax_lot_id: "11/22",
                tax_lot_id_source: null,
                extra_data: {
                    'make it four': 4
                },
                extra_data_sources: {
                    'make it four': null
                }
            },{
                id: 4,
                pk: 4,
                gross_floor_area: 2111111,
                gross_floor_area_source: null,
                city: "Washington",
                city_source: null,
                tax_lot_id: "11/22",
                tax_lot_id_source: null,
                extra_data: {
                    'make it four': 5
                },
                extra_data_sources: {
                    'make it four': null
                }
            }
        ];
        var fake_payload = {
            "status": "success",
            "building": fake_building,
            "imported_buildings": fake_imported_buildings,
            "projects": [],
            "user_org_id": 42
        };
        var fake_all_columns = [{
            "title": "PM Property ID",
            "sort_column": "pm_property_id",
            "class": "is_aligned_right",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Tax Lot ID",
            "sort_column": "tax_lot_id",
            "class": "is_aligned_right",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Custom ID 1",
            "sort_column": "custom_id_1",
            "class": "is_aligned_right whitespace",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Property Name",
            "sort_column": "property_name",
            "class": "",
            "title_class": "",
            "type": "string",
            "field_type": "building_information",
            "sortable": true,
            "checked": false
        }];
        building_detail_ctrl = controller('building_detail_controller', {
            $scope: building_detail_ctrl_scope,
            $routeParams: {
                building_id: 1,
                project_id: 2
            },
            building_payload: fake_payload,
            all_columns: {
                fields: fake_all_columns
            },
            audit_payload: {
                audit_logs: []
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should have an building payload", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.building.id).toBe(511);
        expect(building_detail_ctrl_scope.imported_buildings[0].id).toBe(2);
    });

    it("should get labels on load", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.labels[0].id).toBe(44);
        expect(building_detail_ctrl_scope.labels[0].name).toBe("bad label");
        expect(building_detail_ctrl_scope.labels[0].color).toBe("red");
    });

    it("should highlight the active project", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.is_active_project({id:33}))
        .toBe(true);
        expect(building_detail_ctrl_scope.is_active_project({id:34}))
        .toBe(false);
        building_detail_ctrl_scope.project = undefined;
        expect(building_detail_ctrl_scope.is_active_project({id:34}))
        .toBe(false);
    });

    it("should make a copy of building while making edits", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.save_building_state();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;

        // assertions
        expect(building_detail_ctrl_scope.building_copy.gross_floor_area)
        .toBe(123456);
    });
    it("should restore the copy of building if a user clicks cancel",
        function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.save_building_state();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;
        building_detail_ctrl_scope.restore_building();

        // assertions
        expect(building_detail_ctrl_scope.building.gross_floor_area)
        .toBe(123456);
        expect(building_detail_ctrl_scope.building.edit_form_showing).toBe(false);
    });
    it("should save a building when a user clicks the save button", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;
        building_detail_ctrl_scope.save_building();

        // assertions
        expect(mock_building_services.update_building)
        .toHaveBeenCalledWith(building_detail_ctrl_scope.building, 42);
        expect(mock_building.gross_floor_area).toEqual(43214);
    });
    it("should show a default label if a building doesn't have one", function() {
        // arrange
        create_building_detail_controller();
        var building_with_label = {
            label: {
                name: "hello",
                label: "success"
            }
        };
        var building_without_label = {};
        var label_with, label_without;

        // act
        building_detail_ctrl_scope.$digest();
        label_with = building_detail_ctrl_scope.get_label(building_with_label);
        label_without = building_detail_ctrl_scope.get_label(building_without_label);

        // assertions
        expect(label_with).toEqual({
                name: "hello",
                label: "success"
            });
        expect(label_without).toEqual({
                name: "Add Label",
                label: "default"
            });
    });

    it("should show a project or buildings breadcrumb", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.user.project_slug = "project_1";

        // assertions
        expect(building_detail_ctrl_scope.is_project()).toEqual(true);
        building_detail_ctrl_scope.user.project_slug = undefined;
        expect(building_detail_ctrl_scope.is_project()).toEqual(false);

    });
    it("should show the default projects table if a user has no compliance" +
        " projects", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.user.has_projects()).toEqual(false);
        building_detail_ctrl_scope.projects = [{id: 1, name: "a"}];
        expect(building_detail_ctrl_scope.user.has_projects()).toEqual(true);

    });

    it("should set only building attribute to master, not ids or children", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.is_valid_key('id')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('pk')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('pk_source')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key(' extra_data ')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('gross_floor_area'))
          .toEqual(true);
    });
    it("should update a project-building label", function() {
        // arrange
        create_building_detail_controller();
        var project = {
            id: 2,
            building: {}
        };

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.update_project_building(project,
            {
                name: "label name",
                color: "red"
            });
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(mock_project_service.update_project_building).toHaveBeenCalled();
        expect(project.building.approver).toEqual("bob doe");
        expect(project.building.approved_date).toEqual("01/01/2012");
        expect(project.building.label.name).toEqual("label name");
        expect(project.building.label.color).toEqual("red");

    });
    it("should set a field as source when clicked", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[0].is_master = true;
        expect(building_detail_ctrl_scope.building.gross_floor_area_source)
          .not.toEqual(building_detail_ctrl_scope.building.id);
        building_detail_ctrl_scope.set_self_as_source('gross_floor_area');
        building_detail_ctrl_scope.set_self_as_source('some other key', true);
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.building.gross_floor_area_source)
          .toEqual(building_detail_ctrl_scope.building.id);
        expect(building_detail_ctrl_scope.imported_buildings[0].is_master)
          .toEqual(false);
    });
    it("should set a column as the dominant source when clicked", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[1].is_master = true;
        building_detail_ctrl_scope.make_source_default(
            building_detail_ctrl_scope.imported_buildings[0]);
        building_detail_ctrl_scope.$digest();

        // assertions
        var b = building_detail_ctrl_scope.building,
            i = building_detail_ctrl_scope.imported_buildings[0],
            i_other = building_detail_ctrl_scope.imported_buildings[1];

        expect(b.gross_floor_area_source).toEqual(i.id);
        expect(b.id).not.toEqual(i.id);
        expect(b.pk).not.toEqual(i.id);
        expect(b.city).toEqual(i.city);
        expect(b.city_source).toEqual(i.id);
        expect(b.tax_lot_id).toEqual("11/22");
        expect(b.tax_lot_id_source).toEqual(i_other.id);
        expect(b.extra_data['some other key']).toEqual(123);
        expect(b.extra_data_sources['some other key']).toEqual(i.id);
        expect(b.extra_data['some other key that is not in a child']).toEqual(333);
        expect(b.extra_data_sources['some other key that is not in a child']).toEqual(i.id);
        expect(b.extra_data['some other key that is not in a parent']).toEqual(223);
        expect(b.extra_data_sources['some other key that is not in a parent']).toEqual(i_other.id);
        expect(b.created).toEqual("at some point");

        expect(i.is_master).toEqual(true);
        expect(i_other.is_master).toEqual(false);
    });
    it("should set the master building value when parent's value is clicked",
        function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[1].is_master = true;
        building_detail_ctrl_scope.set_building_attribute(
            building_detail_ctrl_scope.imported_buildings[0], 'city');
        building_detail_ctrl_scope.set_building_attribute(
            building_detail_ctrl_scope.imported_buildings[0], 'some other key', true);
        building_detail_ctrl_scope.$digest();

        // assertions
        var b = building_detail_ctrl_scope.building,
            i = building_detail_ctrl_scope.imported_buildings[0],
            i_other = building_detail_ctrl_scope.imported_buildings[1];

        expect(b.id).not.toEqual(i.id);
        expect(b.pk).not.toEqual(i.id);
        expect(b.city).toEqual(i.city);
        expect(b.city_source).toEqual(i.id);
        expect(b.tax_lot_id).toEqual("11/22");
        expect(b.tax_lot_id_source).toEqual(i_other.id);
        expect(b.extra_data['some other key']).toEqual(123);
        expect(b.extra_data_sources['some other key']).toEqual(i.id);

        expect(i.is_master).toEqual(false);
        expect(i_other.is_master).toEqual(false);
    });

    it("should display all the data within all the buildings", function() {
        // arrange
        create_building_detail_controller();
        var keys;

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        var edc = building_detail_ctrl_scope.data_columns;

        // should not duplicate keys
        expect(edc.length).toEqual(8);
        keys = edc.map(function ( d ) {
            return d.key;
        });
        expect(keys.indexOf('make it four')).toEqual(4);
    });

    it("should display Floor Areas", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.$digest();

        // assertions
        var area_fields = building_detail_ctrl_scope.floor_area_fields;
        expect(area_fields.length).toEqual(1);
    });

    it("should display Floor Areas with number", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.get_number("")).toEqual(0);
        expect(building_detail_ctrl_scope.get_number("123,123,123")).toEqual(123123123);
        expect(building_detail_ctrl_scope.get_number("123,123,123.123")).toEqual(123123123.123);
        expect(building_detail_ctrl_scope.get_number("-123,123,123")).toEqual(-123123123);
        expect(building_detail_ctrl_scope.get_number(-123123123)).toEqual(-123123123);


    });
});

describe("controller: concat_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var scope, controller, modal_state;
    var edit_ctrl, concat_modal_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label, mock_mapping_service, mock_matching_service;
    var global_step = 1;
    var global_dataset = {};

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
            $controller, $rootScope, $modal, urls, $q
        ) {
            controller = $controller;
            scope = $rootScope;
            concat_modal_ctrl_scope = $rootScope.$new();
            concat_modal_ctrl_scope.concat_columns = [];
            modal_state = "";
        }
    ));

    var mock_building_column_types = [
        'address1', 'city', 'state', 'postal_code'
    ];

    var mock_raw_columns = [
        {
            name: 'Address',
            suggestion: 'address1',
            confidence: 1,
            raw_data: [
                '234 Database way',
                '23444 Huh hwy',
                '23444 Huh hwy',
                '23444 Huh hwy',
                '1223 face pl.'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        },
        {
            name: 'City',
            suggestion: 'city',
            confidence: 1,
            raw_data: [
                'Mega City', 'Mega City', 'Mega City', 'Mega City', 'Mega City'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        },
        {
            name: 'Zip',
            suggestion: '',
            confidence: 0,
            raw_data: [
                '234233', '234233', '234233', '234233', '234233'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        }
    ];

    // this is outside the beforeEach so it can be configured by each unit test
    function create_concat_modal_controller(){
        edit_ctrl = controller('concat_modal_ctrl', {
            $scope: concat_modal_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            building_column_types: mock_building_column_types,
            raw_columns: mock_raw_columns
        });
    }

    /*
     * Test scenarios
     */

    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.close_concat_modal();
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should mangle scope appropriately during concatenation", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(3);

        // arrange
        concat_modal_ctrl_scope.concat_columns =
            concat_modal_ctrl_scope.raw_columns.slice(0);
        concat_modal_ctrl_scope.raw_columns = [];

        // act
        concat_modal_ctrl_scope.$digest();
        concat_modal_ctrl_scope.save_concat();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(1);
        expect(
            concat_modal_ctrl_scope.raw_columns[0].is_concatenated
        ).toEqual(true);
    });

    it("should modify the raw_data of our modified TCM correctly", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(3);

        // arrange
        concat_modal_ctrl_scope.concat_columns =
            concat_modal_ctrl_scope.raw_columns.slice(0);
        concat_modal_ctrl_scope.raw_columns = [];

        // act
        concat_modal_ctrl_scope.$digest();
        concat_modal_ctrl_scope.save_concat();

        var expected_raw = [
            '234 Database way Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '1223 face pl. Mega City 234233'
        ];

        // assertions
        expect(
            concat_modal_ctrl_scope.raw_columns[0].raw_data
        ).toEqual(expected_raw);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: create_organization_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_organization_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, organization_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        mock_organization_service = organization_service;
        spyOn(mock_organization_service, "create_sub_org")
            .andCallFake(function(org, sub_org){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_organization_modal_ctrl(){
        ctrl = ctrl('create_organization_modal_ctrl', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            organization: {organization_id: 1}
        });
    }

    /*
     * Test scenarios
     */

    it("should call the organization service to add a new sub_org",
        function() {
        // arrange
        create_organization_modal_ctrl();

        // act
        ctrl_scope.$digest();
        ctrl_scope.sub_org.name = "my shiny new org";
        ctrl_scope.sub_org.email = "jb.smooth@be.com";
        ctrl_scope.submit_form(true);

        // assertions
        expect(mock_organization_service.create_sub_org)
            .toHaveBeenCalledWith(
                {
                    organization_id: 1
                },
                {
                    name: "my shiny new org",
                    email: "jb.smooth@be.com"
                }
            );
    });
    
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: data_upload_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_uploader_service, scope, controller, modal_state;
    var edit_ctrl, data_upload_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label, mock_mapping_service, mock_matching_service;
    var global_step = 1;
    var global_dataset = {};
    var return_labels = [
        {
            "name": 'compliant',
            "color": 'green',
            "id": 1
        },
        {
            "name": "new label",
            "color": "blue",
            "id": 2
        }
    ];

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, uploader_service, mapping_service, matching_service) {
            controller = $controller;
            scope = $rootScope;
            data_upload_ctrl_scope = $rootScope.$new();
            modal_state = "";

            // mock the uploader_service factory methods used in the controller
            // and return their promises
            mock_uploader_service = uploader_service;
            mock_mapping_service = mapping_service;
            mock_matching_service = matching_service;
            spyOn(mock_uploader_service, "get_AWS_creds")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "AWS_CLIENT_ACCESS_KEY": "123",
                            "AWS_UPLOAD_BUCKET_NAME": "test-bucket"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "check_progress")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "progress": "25.0"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "create_dataset")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "id": 3,
                                "name": dataset_name

                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error",
                                "message": "name already in use"
                            }
                        );
                    }
                }
            );
            spyOn(mock_uploader_service, "save_raw_data")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "file_id": 3
                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error"
                            }
                        );
                    }
                }
            );
            spyOn(mock_mapping_service, "start_mapping")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "file_id": 3
                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error"
                            }
                        );
                    }
                }
            );
            spyOn(mock_matching_service, "start_system_matching")
            .andCallFake(function(file_id){
                // return $q.reject for error scenario
                return $q.when(
                    {
                        "status": "success",
                        "file_id": 3
                    }
                );
            });

        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_data_upload_modal_controller(){
        edit_ctrl = controller('data_upload_modal_ctrl', {
            $scope: data_upload_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            step: global_step,
            dataset: global_dataset
        });
    }

    /*
     * Test scenarios
     */

    it("should close the modal when the close function is called", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.close();
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel function is called", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.cancel();
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

    it("should start at the step provided", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(1);

        // arrange
        global_step = 2;
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(2);
    });

    it("should goto different steps", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var step;
        step = 2;
        data_upload_ctrl_scope.goto_step(step);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(step);
    });

    it("disables the 'Name it' button if no text is entered", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(true);
    });
    it("disables the 'Name it' button if no text is entered, then cleared",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.dataset.name = undefined;
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(true);
    });
    it("enables the 'Name it' button if text is entered", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.dataset.name = "my dataset name";
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(false);
    });
    it("should show an alert if the dataset name is already in use",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.create_dataset("fail");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.alert).toBe(true);
    });
    it("should not show an alert if the dataset name is not already in use",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.create_dataset("my shiny new dataset");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.alert).toBe(false);
    });
    it("after creating a dataset, stores the dataset id", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var ds_name = "my shiny new dataset";
        data_upload_ctrl_scope.create_dataset(ds_name);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.id).toBe(3);
        expect(data_upload_ctrl_scope.dataset.name).toBe(ds_name);
    });
    it("after uploading a file, stores the file id", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var message, filename;
        message = "upload_complete";
        filename = "file1.csv";

        // act
        data_upload_ctrl_scope.uploaderfunc(message, {
            filename: filename,
            file_id: 20140313
        });
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.import_file_id).toBe(20140313);
    });
    it("should show an invalid extension alert if a file with an invalid" +
        "extension is loaded", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.uploaderfunc("invalid_extension");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.invalid_extension_alert)
            .toBe(true);
    });
    it("should hide the upload button after the user selects a file",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename;
        message = "upload_submitted";
        filename = "file1.csv";

        // act
        data_upload_ctrl_scope.uploaderfunc(message, {filename: filename});
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.filename).toBe(filename);
        expect(data_upload_ctrl_scope.uploader.in_progress).toBe(true);
    });
    it("should show the progressbar during upload",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename, progress;
        message = "upload_in_progress";
        filename = "file1.csv";
        progress = {
            loaded: 10,
            total: 100
        };

        // act
        data_upload_ctrl_scope.uploaderfunc(message, filename, progress);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.in_progress).toBe(true);
        expect(data_upload_ctrl_scope.uploader.progress).toBe(2.5);
    });
    it("should start saving the energy data when the file has been uploaded",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename;
        message = "upload_complete";
        filename = "file1.csv";
        data_upload_ctrl_scope.step.number = 4;

        // act
        data_upload_ctrl_scope.uploaderfunc(message, filename);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.status_message)
            .toBe("saving energy data");
    });

    it("should take an dataset payload", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.name).toBe("");
        expect(data_upload_ctrl_scope.dataset.filename).toBe("");
        expect(data_upload_ctrl_scope.dataset.id).toBe(0);
    });

    it("should extend a custom dataset payload", function() {
        // arrange
        global_dataset = {
            id: 100,
            filename: "seed_data.csv",
            name: "Compliance Project"
        };
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.name).toBe("Compliance Project");
        expect(data_upload_ctrl_scope.dataset.filename).toBe("seed_data.csv");
        expect(data_upload_ctrl_scope.dataset.id).toBe(100);
        expect(data_upload_ctrl_scope.dataset.alert).toBe(false);

    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: dataset_detail_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, ngFilter, delete_called;
    var dataset_detail_ctrl, dataset_detail_ctrl_scope, modalInstance, labels;

    

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, dataset_service, $filter) {
            controller = $controller;
            scope = $rootScope;
            ngFilter = $filter;
            dataset_detail_ctrl_scope = $rootScope.$new();
            modal_state = "";
            delete_called = false;

            // mock the dataset_service factory methods used in the controller
            // and return their promises
            mock_dataset_service = dataset_service;
            spyOn(mock_dataset_service, "get_dataset")
                .andCallFake(function(dataset_id){
                    // return $q.reject for error scenario
                    var fake_importfiles = [
                        {
                            name: "DC_CoveredBuildings_50k.csv",
                            number_of_buildings: 511,
                            number_of_mappings: 511,
                            number_of_cleanings: 1349,
                            source_type: "Assessed Raw",
                            number_of_matchings: 403
                        },
                        {
                            name: "DC_ESPM_Report.csv",
                            number_of_buildings: 511,
                            number_of_matchings: 403,
                            source_type: "Portfolio Raw"
                        }
                    ];
                    var fake_dataset = {
                        name: "DC 2013 data",
                        last_modified: (new Date()).getTime(),
                        last_modified_by: "john.s@buildingenergy.com",
                        number_of_buildings: 89,
                        id: 1,
                        importfiles: fake_importfiles
                    };
                    var fake_payload = {
                        "status": "success",
                        "dataset": fake_dataset
                    };
                    if (delete_called) {
                        fake_payload.dataset.importfiles.pop();
                    }
                    console.log({delete_called: delete_called, ds: fake_payload});
                    return $q.when(fake_payload);
                }
            );

            spyOn(mock_dataset_service, "delete_file")
                .andCallFake(function(import_file){
                    delete_called = true;
                    console.log({d: "delete_called"});
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_detail_controller(){
        var fake_importfiles = [
            {
                name: "DC_CoveredBuildings_50k.csv",
                number_of_buildings: 511,
                number_of_mappings: 511,
                number_of_cleanings: 1349,
                source_type: "Assessed Raw",
                number_of_matchings: 403
            },
            {
                name: "DC_ESPM_Report.csv",
                number_of_buildings: 511,
                number_of_matchings: 403,
                source_type: "Portfolio Raw"
            }
        ];
        var fake_dataset = {
            name: "DC 2013 data",
            last_modified: (new Date()).getTime(),
            last_modified_by: "john.s@buildingenergy.com",
            number_of_buildings: 89,
            id: 1,
            importfiles: fake_importfiles
        };
        var fake_payload = {
            "status": "success",
            "dataset": fake_dataset
        };
        dataset_detail_ctrl = controller('dataset_detail_controller', {
            $scope: dataset_detail_ctrl_scope,
            dataset_payload: fake_payload
        });
    }

    /*
     * Test scenarios
     */

    it("should have an data set payload with import files", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        dataset_detail_ctrl_scope.$digest();

        // assertions
        expect(dataset_detail_ctrl_scope.dataset.importfiles.length).toBe(2);
    });

    it("should show an alert when the delete icon is clicked", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        dataset_detail_ctrl_scope.$digest();
        var importfiles = dataset_detail_ctrl_scope.dataset.importfiles;
        dataset_detail_ctrl_scope.delete_file(importfiles[0]);
        dataset_detail_ctrl_scope.$digest();

        // assertions
        expect(dataset_detail_ctrl_scope.dataset.importfiles.length).toBe(1);
    });
   
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: dataset_list_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, modal_state;
    var edit_ctrl, dataset_list_ctrl_scope, modalInstance, labels;
    var location;

    

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, uploader_service,
            $location) {
            controller = $controller;
            scope = $rootScope;
            dataset_list_ctrl_scope = $rootScope.$new();
            modal_state = "";
            location = $location;

            // mock the uploader_service factory methods used in the controller
            // and return their promises
            mock_uploader_service = uploader_service;
            spyOn(mock_uploader_service, "get_AWS_creds")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "AWS_CLIENT_ACCESS_KEY": "123",
                            "AWS_UPLOAD_BUCKET_NAME": "test-bucket"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "create_dataset")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "import_record_id": 3,
                                "import_record_name": dataset_name

                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error",
                                "message": "name already in use"
                            }
                        );
                    }
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_list_controller(){
        var fake_datasets_payload = {
            "status": "success",
            "datasets": [
                {
                    name: "DC 2013 data",
                    last_modified: (new Date()).getTime(),
                    last_modified_by: "john.s@buildingenergy.com",
                    number_of_buildings: 89
                },
                {
                    name: "DC 2014 data",
                    last_modified: (new Date()).getTime() -
                        1550 * 60 * 60 * 1000,
                    last_modified_by: "gavin.m@buildingenergy.com",
                    number_of_buildings: 70
                }
            ]
        };
        edit_ctrl = controller('dataset_list_controller', {
            $scope: dataset_list_ctrl_scope,
            datasets_payload: fake_datasets_payload
        });
    }

    /*
     * Test scenarios
     */

    it("should have a dataset_payload", function() {
        // arrange
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();

        // assertions
        expect(dataset_list_ctrl_scope.datasets.length).toEqual(2);
    });

    it("should disable the mapping button if the dataset has no" +
        " Assessor files", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Portfolio Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_assessor_files(dataset);

        // assertions
        expect(disabled).toEqual(true);
    });

    it("should enable the mapping button if the dataset has at least one" +
        " Assessor file", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_assessor_files(dataset);

        // assertions
        expect(disabled).toEqual(false);
    });
    it("should disable the matching button if the dataset has no" +
        " Portfolio Manger files", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Assessed Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_pm_files(dataset);

        // assertions
        expect(disabled).toEqual(true);
    });
    it("should enable the matching button if the dataset has at least one" +
        " Portfolio Manger file", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_pm_files(dataset);

        // assertions
        expect(disabled).toEqual(false);
    });
    it("should navigate to the mapping page of the first assessed" +
        " import file when the ``Mapping`` button is clicked", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Assessed Raw",
                    id: 3
                },
                {
                    source_type: "Assessed Raw",
                    id: 5
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        dataset_list_ctrl_scope.goto_mapping(dataset);

        // assertions
        expect(location.path()).toBe('/data/mapping/3');
    });
    it("should navigate to the matching page of the first Portfolio Manager" +
        " import file when the ``Matching`` button is clicked", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw",
                    id: 3
                },
                {
                    source_type: "Portfolio Raw",
                    id: 5
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        dataset_list_ctrl_scope.goto_matching(dataset);

        // assertions
        expect(location.path()).toBe('/data/matching/3');
    });

   
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: delete_modal_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, building_services, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        // mock the export_service factory methods used in the controller
        // and return their promises
        mock_building_services = building_services;
        spyOn(mock_building_services, "delete_buildings")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_delete_modal_controller(){
        ctrl = ctrl('delete_modal_controller', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            search: { 
                selected_buildings: [1,2],
                filter_params: {},
                select_all_checkbox: false,
                order_by: "",
                sort_reverse: false,
                number_matching_search: 1000
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should start at the delete page", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.delete_state).toEqual("delete"); 
    });
    it("should save the search paramaters",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.delete_payload;
        expect(b.selected_buildings).toEqual([1,2]);
        expect(b.filter_params).toEqual({});
        expect(b.order_by).toEqual("");
        expect(b.sort_reverse).toEqual(false);
        expect(b.select_all_checkbox).toEqual(false);
    });
    it("should delete when the delete button is clicked",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.delete_buildings();

        // assertions
        expect(ctrl_scope.delete_state).toEqual("prepare");
        expect(mock_building_services.delete_buildings).toHaveBeenCalled();
    });
    it("should show the success page when the delete is finished",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.delete_buildings();
        ctrl_scope.$digest();

        // assertions
        expect(mock_building_services.delete_buildings).toHaveBeenCalled();
        expect(ctrl_scope.delete_state).toEqual("success");
    });
    it("should show the number of buildings to be deleted",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        var number_to_delete = ctrl_scope.number_to_delete();

        // assertions
        expect(number_to_delete).toEqual(2);
    });
    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.close();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.cancel();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

  
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myDistrictApp = angular.module('myDistrictApp', ['district']);

describe("The district filter", function() {
    beforeEach(module('myDistrictApp'));
    it('replaces `district` with `County/District/Ward/Borough`',
        inject(function(districtFilter) {
            // normal cases
            expect(districtFilter('district')).toBe('County/District/Ward/Borough');
            expect(districtFilter('District')).toBe('County/District/Ward/Borough');
            expect(districtFilter('DistRict')).toBe('County/District/Ward/Borough');
            expect(districtFilter('DISTRICT')).toBe('County/District/Ward/Borough');
            expect(districtFilter('aDISTRICT')).toBe('aDISTRICT');
            expect(districtFilter('')).toBe('');
            expect(districtFilter('district ')).toBe('district ');
            expect(districtFilter('ok')).toBe('ok');
            expect(districtFilter(undefined)).toBe(undefined);
            expect(districtFilter(null)).toBe(null);
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: edit_label_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, modal_state;
    var edit_ctrl, edit_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label;
    var return_labels = [
        {
            "name": 'compliant',
            "color": 'green',
            "id": 1
        },
        {
            "name": "new label",
            "color": "blue",
            "id": 2
        }
    ];

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, urls, $q, project_service) {
        controller = $controller;
        scope = $rootScope;
        edit_ctrl_scope = $rootScope.$new();
        modal_state = "";

        // mock the project_service factory methods used in the controller
        // and return their promises
        mock_project_service = project_service;
        spyOn(mock_project_service, "get_labels")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success", "labels": return_labels});
            }
        );
        spyOn(mock_project_service, "add_label")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
        spyOn(mock_project_service, "delete_label")
            .andCallFake(function(label){
                deleted_label = label;
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
        spyOn(mock_project_service, "update_label")
            .andCallFake(function(label){
                updated_label = label;
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );

    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_edit_modal_controller(){
        var labels = [
            {
                "name": 'compliant',
                "color": 'green',
                "id": 1
            }
        ];

        edit_ctrl = controller('edit_label_modal_ctrl', {
            $scope: edit_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            labels: labels
        });
    }

    /*
     * Test scenarios
     */

    it("should initialize the default label", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.$digest();
        edit_ctrl_scope.initialize_label_modal();

        // assertions
        expect(edit_ctrl_scope.label_modal.color).toBe("gray");
        expect(edit_ctrl_scope.label_modal.label).toBe("default");
        expect(edit_ctrl_scope.label_modal.name).toBe("");
        expect(edit_ctrl_scope.modal.label.state).toBe("create");
    });

    it("should get the labels available to an organization", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.add_label({});  // calls private get_labels
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.labels.length).toBe(2);
    });

    it("should add a label in the user's organization", function() {
        // arrange
        create_edit_modal_controller();
        var label_to_add = {
            color: "blue",
            label: "primary",
            name: "new label"
        };

        // act
        edit_ctrl_scope.add_label(label_to_add);
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.labels.length).toBe(2);
        expect(edit_ctrl_scope.labels[1].color).toBe("blue");
        expect(edit_ctrl_scope.labels[1].name).toBe("new label");
    });

    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.close();
        edit_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.cancel();
        edit_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

    it("sets the label_modal to the label when its edit button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.edit_label(label);
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.label_modal.color).toBe(label.color);
        expect(edit_ctrl_scope.label_modal.name).toBe(label.name);
        expect(edit_ctrl_scope.modal.label.state).toBe("edit");

        // assert that edit_ctrl_scope.label_modal is a copy and not a reference to label
        edit_ctrl_scope.label_modal.name = "random name here";
        expect(edit_ctrl_scope.label_modal.name).not.toBe(label.name);
    });
    
    it("deletes the appropriate label when the delete button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.delete_label(label);
        edit_ctrl_scope.$digest();

        // assertions
        expect(deleted_label).toBe(label);
    });

    it("updates the appropriate label when the update label button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.edit_label(label);
        edit_ctrl_scope.$digest();
        edit_ctrl_scope.label_modal.name = "harry";
        edit_ctrl_scope.label_modal.color = "blue";
        edit_ctrl_scope.update_label(edit_ctrl_scope.label_modal);
        edit_ctrl_scope.$digest();

        // assertions
        expect(mock_project_service.update_label).toHaveBeenCalledWith(edit_ctrl_scope.label_modal);
        expect(updated_label).toBe(edit_ctrl_scope.label_modal);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: export_modal_controller", function(){
    // globals set up and used in each test scenario
    var mock_export_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, export_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        // mock the export_service factory methods used in the controller
        // and return their promises
        mock_export_service = export_service;
        spyOn(mock_export_service, "export_buildings")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success", "export_id": "123456"});
            }
        );
        spyOn(mock_export_service, "export_buildings_progress")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({
                    "status": "success",
                    "buildings_processed": 1000
                });
            }
        );
            spyOn(mock_export_service, "export_buildings_download")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({
                    "status": "success",
                    "url": "#"
                });
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_export_modal_controller(){
        ctrl = ctrl('export_modal_controller', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            search: { 
                selected_buildings: [],
                filter_params: {},
                select_all_checkbox: false,
                order_by: "",
                sort_reverse: false,
                number_matching_search: 1000
            },
            selected_fields: ['tax_lot_id', 'postal_code'],
            project: {
                id: 11
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should start at the create page", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.export_state).toEqual("create"); 
    });
    it("should start with an empty name and default file type of 'xls'",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.building_export;
        expect(b.export_name).toEqual("");
        expect(b.export_type).toEqual("xls");
    });
    it("should save the search paramaters",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.building_export;
        expect(b.selected_buildings).toEqual([]);
        expect(b.filter_params).toEqual({});
        expect(b.order_by).toEqual("");
        expect(b.sort_reverse).toEqual(false);
        expect(b.select_all_checkbox).toEqual(false);
        expect(b.selected_fields).toEqual(['tax_lot_id', 'postal_code']);
        expect(b.project_id).toEqual(11);
        expect(ctrl_scope.progress_denominator).toEqual(0);
    });
    it("should kick off the export process when the export button is clicked",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.export_buildings();

        // assertions
        expect(ctrl_scope.export_state).toEqual("prepare");
        expect(mock_export_service.export_buildings).toHaveBeenCalled();
    });
    it("should show the success page when the data is ready",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.show_success_page("123");
        ctrl_scope.$digest();

        // assertions
        expect(mock_export_service.export_buildings_download).toHaveBeenCalled();
        expect(ctrl_scope.export_state).toEqual("success");
    });
    it("should update the progress bar",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.monitor_progress("123", 1000);
        ctrl_scope.$digest();
        timeout.flush();

        // assertions
        expect(mock_export_service.export_buildings_progress).toHaveBeenCalled();
        expect(ctrl_scope.progress_percentage).toEqual(100);
        expect(ctrl_scope.progress_numerator).toEqual(1000);
        expect(ctrl_scope.progress_denominator).toEqual(1000);
    });
    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.close();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.cancel();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

  
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
/**
 * tests fromNow angularjs filter wrapper of moment.js
 * uses epoch milliseconds as that is what the back-end returns
 */

// create dummy angularJS app to attach filter(s)
var myfromNowFilterApp = angular.module('myfromNowFilterApp', ['fromNow']);

describe("The fromNow filter", function() {
    beforeEach(module('myfromNowFilterApp'));

    it('shows the present time as "a few seconds ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('a few seconds ago');
        })
    );

    it('shows 5 minutes ago as "5 minutes ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 5  * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('5 minutes ago');
        })
    );

    it('shows 4 hours ago as "4 hours ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 4 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('4 hours ago');
        })
    );

    it('shows 24 hours ago as "a day ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 24 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('a day ago');
        })
    );

    it('shows 36 hours ago as "2 days ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 36 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('2 days ago');
        })
    );

    it('shows 1550 hours ago as "2 months ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 1550 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('2 months ago');
        })
    );

    it('defaults to "a few seconds ago" for undefined values',
        inject(function(fromNowFilter) {
            // arrange

            // act

            // assert
            expect(fromNowFilter(undefined)).toBe('a few seconds ago');
            expect(fromNowFilter(null)).toBe('a few seconds ago');
            expect(fromNowFilter("some text")).toBe('a few seconds ago');
            expect(fromNowFilter({})).toBe('a few seconds ago');
            expect(fromNowFilter({time: "not time"})).toBe('a few seconds ago');
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myignoremapApp = angular.module('myignoremapApp', ['ignoremap']);

describe("The ignoremap filter", function() {
    beforeEach(module('myignoremapApp'));
    it('replaces `""` with `------ Ignore Row ------`',
        inject(function(ignoremapFilter) {
            // normal cases
            expect(ignoremapFilter('')).toBe('------ Ignore Row ------');
            expect(ignoremapFilter(' ')).toBe(' ');
            expect(ignoremapFilter('aignoremap')).toBe('aignoremap');
            expect(ignoremapFilter('ignoremap ')).toBe('ignoremap ');
            expect(ignoremapFilter('ok')).toBe('ok');
            expect(ignoremapFilter(undefined)).toBe('------ Ignore Row ------');
            expect(ignoremapFilter(null)).toBe('------ Ignore Row ------');
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: mapping_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, modal_state;
    var mapping_ctrl, mapping_ctrl_scope, modalInstance, labels;
    var timeout, mock_user_service, mock_search_service;



    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, building_services, $timeout, user_service, search_service) {
            controller = $controller;
            scope = $rootScope;
            mapping_ctrl_scope = $rootScope.$new();
            modal_state = "";
            timeout = $timeout;
            mock_user_service = user_service;
            mock_search_service = search_service;

            spyOn(mock_user_service, 'set_default_columns')
                .andCallFake(function(mapped_columns){
                    return undefined;
                });
            spyOn(mock_search_service, 'search_buildings')
                .andCallFake(function(){
                    return [1,2,3];
                });
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_mapping_controller(){
        var mock_datasets = [
            {
                name: "DC 2013 data",
                last_modified: (new Date()).getTime(),
                last_modified_by: "john.s@buildingenergy.com",
                number_of_buildings: 89,
                id: 1
            },
            {
                name: "DC 2014 data",
                last_modified: (new Date()).getTime() -
                    1550 * 60 * 60 * 1000,
                last_modified_by: "gavin.m@buildingenergy.com",
                number_of_buildings: 70,
                id: 2
            }
        ];
        var fake_import_file_payload = {
            "status": "success",
            "import_file": {
                        file_name: "assessor_fun.csv",
                        last_modified: (new Date()).getTime(),
                        last_modified_by: "john.s@buildingenergy.com",
                        source_type: 'AssessorRaw',
                        dataset: mock_datasets[0],
                        id: 1
                    }
        };

        var mock_be_building_columns = [
            'pm_property_id',
            'property_name',
            'property_notes',
            'tax_lot_id',
            'gross_floor_area',
            'My New non-BEDES field'
        ];

        var mock_be_building_types = {
            'gross_floor_area': {
                unit_type: 'float',
                schema: 'BEDES'
            }
        };

        var mock_mapping_suggestions_payload = {
            'status': 'success',
            'suggested_column_mappings': {
                // key(django model attribute): [csv_header1, ... csv_header3]
                'property id': ['pm_property_id', 89],
                'lot number': ['tax_lot_id' , 54]
            },
            "building_columns": mock_be_building_columns,
            "building_column_types": mock_be_building_types
        };

        var mock_raw_column_names = [
            'property id',
            'property_name',
            'property_notes',
            'lot number',
            'lot size'
        ];

        var mock_first_five_rows = [];
        for (var i=0; i < 4; i++) {
            mock_first_five_rows.push({
                'property id': i,
                'property_name': 'Property ' + i,
                'property_notes': 'Nup.',
                'lot number': i * 2,
                'lot size': 454 * i
            });
        }

        mock_first_five_rows.push({
            'property id': '121L',
            'property_name': 'Inconsistent Property',
            'property_notes': 'N/A',
            'lot number': 'N/A',
            'lot size': 45
        });

        var raw_columns_payload = {
            "status": "success",
            "raw_columns": mock_raw_column_names
        };
        var first_five_rows_payload = {
            "status": "success",
            "first_five_rows": mock_first_five_rows
        };
        mapping_ctrl = controller('mapping_controller', {
            $scope: mapping_ctrl_scope,
            import_file_payload: fake_import_file_payload,
            suggested_mappings_payload: mock_mapping_suggestions_payload,
            raw_columns_payload: raw_columns_payload,
            first_five_rows_payload: first_five_rows_payload,
            all_columns: {fields: []},
            building_services: mock_building_services,
            $timeout: timeout
        });
    }

    /*
     * Test scenarios
     */

    it("should have a import_file_payload", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        expect(mapping_ctrl_scope.import_file.dataset.name).toBe("DC 2013 data");
    });

    it("should show suggested mappings and confidence", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        var raw_columns = mapping_ctrl_scope.raw_columns;
        var first_column = raw_columns[0];

        expect(first_column.confidence).toBe(89);
        expect(first_column.suggestion).toBe("Pm Property Id");
    });

    it("should show 'low', 'med', 'high', or '' confidence text", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        var raw_columns = mapping_ctrl_scope.raw_columns;
        var first_column = raw_columns[0];
        expect(first_column.confidence_text()).toBe("high");
        first_column.confidence = 70;
        expect(first_column.confidence_text()).toBe("med");
        first_column.confidence = 35;
        expect(first_column.confidence_text()).toBe("low");
        delete(first_column.confidence);
        expect(first_column.confidence_text()).toBe("");
    });

    it("should validate initial data", function() {
        create_mapping_controller();
        // act
        mapping_ctrl_scope.$digest();
        // assertions
        angular.forEach(mapping_ctrl_scope.raw_columns, function(rc) {
            if (rc.suggestion !== '' && typeof(rc.suggestion) !== "undefined") {
                expect(rc.validity).toBe('valid');
            }
        });
    });

    it("should invalidate bad suggestions", function() {
        // Simulate a change on the tcm, make it fail.
        create_mapping_controller();
        // act
        mapping_ctrl_scope.$digest();
        // assertions
        //
        // We change the suggested mapping for the "property name" column
        // to "gross_floor_area" (which validates as float) to
        // purposesly cause a failing change.
        mapping_ctrl_scope.raw_columns[1].suggestion = 'gross_floor_area';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[1]);
        expect(mapping_ctrl_scope.raw_columns[1].validity).toBe('invalid');

    });

    it("should set td_class appropriately", function() {
        var tcm;

        create_mapping_controller();

        mapping_ctrl_scope.$digest();
        tcm = mapping_ctrl_scope.raw_columns[0];
        var good_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[0]
        );

        // First raw column is mapped up as pm_property_id <-> property_id
        // Any kind of string will be valid.
        expect(good_val).toBe('success');

        // Now set it to one that expects float values.
        // Only one of these will *not* validate.
        mapping_ctrl_scope.raw_columns[0].suggestion = 'gross_floor_area';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[0]);

        tcm = mapping_ctrl_scope.raw_columns[0];
        var warning_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[4]
        );

        expect(warning_val).toBe('warning');

        // We don't want the warning style to be applied to neighboring cells
        // in the same row. Check that the cell next to our invalid one is
        // unstyled (undefined).
        tcm = mapping_ctrl_scope.raw_columns[0];
        var adjacent_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[3]
        );

        expect(adjacent_val).toBe(undefined);

        // Now we're saying the suggestion is to not map.
        // Check that we don't have any class set for this row now.
        mapping_ctrl_scope.raw_columns[0].suggestion = '';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[0]);

        tcm = mapping_ctrl_scope.raw_columns[0];
        var blank_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[4]
        );

        expect(blank_val).toBe('');

    });

    it("should detect duplicates of mapped rows", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // raw_columns[0] and raw_columns[3] should be the only mapped rows
        var column = mapping_ctrl_scope.raw_columns[3];
        var test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

        // Set the property_name tcm's suggestion to the same as
        // the property_id tcm (raw_columns[0])
        column.suggestion = 'Pm Property Id';

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(true);

        // Since we mark both duplicates as duplicates, the other
        // TCM that has the 'pm_property_id' suggestion should also get
        // 'danger' as its duplicate class.
        var other_dup = mapping_ctrl_scope.is_tcm_duplicate(
            mapping_ctrl_scope.raw_columns[0]
        );
        expect(other_dup).toBe(true);

        // Shows that mapped_row is the sole determinant of
        // column ignoring
        column.mapped_row = false;

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

    });

    it("should ignore duplicates of unmapped rows", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // raw_columns[0] and raw_columns[3] should be the only mapped rows
        var column = mapping_ctrl_scope.raw_columns[1];
        var test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

        // Set the property_name tcm's suggestion to the same as
        // the property_id tcm (raw_columns[0])
        column.suggestion = 'Pm Property Id';

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);
    });

    it("should get mapped buildings", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        mapping_ctrl_scope.get_mapped_buildings();
        mapping_ctrl_scope.$digest();

        // assertions
        expect(mapping_ctrl_scope.search.search_buildings).toHaveBeenCalled();
        expect(mock_user_service.set_default_columns).toHaveBeenCalled();
    });

    it("should enbale the 'show & review buildings' button if duplicates are" +
        " not present", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        for (var i = mapping_ctrl_scope.raw_columns.length - 1; i >= 0; i--) {
            mapping_ctrl_scope.change(mapping_ctrl_scope.raw_columns[i]);
        }
        var duplicates_found = mapping_ctrl_scope.duplicates_present();

        // assertions
        expect(duplicates_found).toBe(false);
    });

    it("should disable the 'show & review buildings' button if duplicates " +
        "are present", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        for (var i = mapping_ctrl_scope.raw_columns.length - 1; i >= 0; i--) {
            mapping_ctrl_scope.raw_columns[i].suggestion = "pm_property_id";
            mapping_ctrl_scope.change(mapping_ctrl_scope.raw_columns[i]);
        }
        var duplicates_found = mapping_ctrl_scope.duplicates_present();

        // assertions
        expect(duplicates_found).toBe(true);
    });

    it("should get mappings in an API friendly way", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();
        var mappings = mapping_ctrl_scope.get_mappings();
        expect(mappings.length).toBe(5);
        expect(mappings[0]).toEqual(['Pm Property Id', 'property id']);
        // everything in between is empty since we we're using only
        // suggested mappings.
        expect(mappings[3]).toEqual(['Tax Lot Id', 'lot number']);
    });

    it("should show the 'STEP 2' tab when reviewing mappings", function() {
        // arrange
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // act
        var mappings = mapping_ctrl_scope.get_mapped_buildings();

        // assert
        expect(mapping_ctrl_scope.tabs).toEqual({
            'one_active': false,
            'two_active': true,
            'three_active': false
        });
    });

    it("should show BEDES fields with a checkbox", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assert
        expect(mapping_ctrl_scope.is_suggestion_BEDES('gross_floor_area')).toBe(true);
        expect(mapping_ctrl_scope.is_suggestion_BEDES('Gross Floor Area')).toBe(true);
        expect(mapping_ctrl_scope.is_suggestion_BEDES('My New non-BEDES field')).toBe(false);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: matching_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, delete_called;
    var matching_ctrl, matching_ctrl_scope, modalInstance, labels;


    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, building_services) {
            controller = $controller;
            scope = $rootScope;
            matching_ctrl_scope = $rootScope.$new();

            mock_building_services = building_services;
            spyOn(mock_building_services, "get_PM_filter_by_counts")
                .andCallFake(function(import_file){
                    return $q.when(
                        {
                            "status": "success",
                            "unmatched": 5,
                            "matched": 10
                        }
                    );
                }
            );
            spyOn(mock_building_services, "save_match")
                .andCallFake(function(b1, b2, create){
                    return $q.when(
                        {
                            "status": "success",
                            "child_id": 3
                        }
                    );
                }
            );
            spyOn(mock_building_services, "search_matching_buildings")
                .andCallFake(function(q, number_per_page, current_page, order_by, sort_reverse, 
                                        filter_params, file_id ){
                    
                    if(filter_params.children__isnull == undefined){                        
                        var bldgs = [
                            {
                                pm_property_id: 1
                            },
                            {
                                pm_property_id: 2
                            }
                            ,
                            {
                                pm_property_id: 3
                            }
                        ];
                    } else if (filter_params.children__isnull == false){
                        var bldgs = [
                            {
                                pm_property_id: 1
                            }
                        ];
                    } else if (filter_params.children__isnull == true){
                        var bldgs = [
                            {
                                pm_property_id: 3
                            },
                            {
                                pm_property_id: 4
                            }
                        ];
                    }

                    return $q.when(
                        {
                            status: "success",
                            number_returned: buildings_payload.length,
                            number_matching_search: buildings_payload.length,
                            buildings: bldgs
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_detail_controller(){
        var buildings_payload = {
            buildings: [
                {
                    pm_property_id: 1,
                    tax_lot_id: null,
                    custom_id_1: 2,
                    gross_floor_area: 111,
                    matched: true,
                    id: 1,
                    children: [3],
                    coparent: {
                        pm_property_id: null,
                        tax_lot_id: 2,
                        custom_id_1: null,
                        gross_floor_area: 111,
                        id: 2,
                        children: [3]
                    }
                }
            ],
            number_matching_search: 1,
            number_returned: 1
        };
        matching_ctrl = controller('matching_controller', {
            $scope: matching_ctrl_scope,
            buildings_payload: buildings_payload,
            all_columns: {
                fields: [{sort_column: 'pm_property_id'}]
            },
            default_columns: {
                columns: ['pm_property_id']
            },
            import_file_payload: {
                import_file: {
                    id: 1,
                    dataset: {
                        importfiles: [
                            {
                                id: 1,
                                name: "file_1.csv"
                            },
                            {
                                id: 2,
                                name: "file_2.csv"
                            }
                        ]
                    }
                }
            }
        });
    }



    /*
     * Test scenarios
     */

    it("should have a buildings payload with potential matches", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();
        var b = matching_ctrl_scope.buildings[0];

        // assertions
        expect(matching_ctrl_scope.buildings.length).toBe(1);
        expect(b.coparent.children).toEqual(b.children);
    });

    it("should provide to the view scope variables representing the number matched and the number of unmatched buildings", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();

        // assertions
        expect(matching_ctrl_scope.matched_buildings).toEqual(10);
        expect(matching_ctrl_scope.unmatched_buildings).toEqual(5);
    });

    it("should jump back to the matching list when the 'Back to list' button" +
        " is clicked", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.show_building_list = false;
        matching_ctrl_scope.back_to_list();

        // assertions
        expect(matching_ctrl_scope.show_building_list).toEqual(true);
    });

    it("should present an initial state with the matching buildings table",
        function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();

        // assertions
        expect(matching_ctrl_scope.columns).toEqual([{ sort_column : 'pm_property_id' }]);
        expect(matching_ctrl_scope.number_matching_search).toEqual(1);
        expect(matching_ctrl_scope.number_returned).toEqual(1);
        expect(matching_ctrl_scope.num_pages).toEqual(1);
        expect(mock_building_services.get_PM_filter_by_counts).toHaveBeenCalled();
    });
    it("should match a building in the matching list", function() {
        // arrange
        create_dataset_detail_controller();
        var b1, b2;
        b2 = {
            id: 2,
            children: [],
            matched: false
        };
        b1 = {
            id: 1,
            children: [],
            matched: true,
            coparent: b2
        };

        // act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.toggle_match(b1);
        matching_ctrl_scope.$digest();

        // assertions
        expect(mock_building_services.save_match).toHaveBeenCalledWith(b1.id, b2.id, true);
        expect(mock_building_services.get_PM_filter_by_counts).toHaveBeenCalled();
        expect(b1.children[0]).toEqual(3);
    });
    it("Should update the list of buildings correctly when 'Show Matched' is selected", function() {
        //arrange
        create_dataset_detail_controller();

        //act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.update_show_filter(controller.SHOW_MATCHED)

        //assertions
        //expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(1);
        expect(matching_ctrl_scope.number_returned).toEqual(1);
    });
    it("Should update the list of buildings correctly when 'Show Unmatched' is selected",  function() {
        //arrange
        create_dataset_detail_controller();

        //act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.update_show_filter(controller.SHOW_UNMATCHED)

        //assertions
        //expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(2);
        expect(matching_ctrl_scope.number_returned).toEqual(2);
    });
    it("Should update the list of buildings correctly when 'Show All' is selected", function() {
        //arrange
        create_dataset_detail_controller();

        //act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.update_show_filter(controller.SHOW_ALL)

        //assertions
        //expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(3);
        expect(matching_ctrl_scope.number_returned).toEqual(3);
    });



});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: members_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller;
    var ctrl, ctrl_scope, modalInstance;
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          $q,
          organization_service) {
            ctrl = $controller;
            scope = $rootScope;
            ctrl_scope = $rootScope.$new();

            mock_organization_service = organization_service;
            
            spyOn(mock_organization_service, "remove_user")
                .andCallFake(function(user_id, org_id){
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
            spyOn(mock_organization_service, "get_organization_users")
                .andCallFake(function(org){
                    return $q.when(
                        {
                            "status": "success",
                            "users": [{id:1, first_name:"Bob", last_name:"D"}]
                        }
                    );
                }
            );
            spyOn(mock_organization_service, "update_role")
                .andCallFake(function(org_id, user_id, role){
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_members_controller(){
        ctrl = ctrl('members_controller', {
            $scope: ctrl_scope,
            users_payload: {users: [
                {first_name: 'J', last_name: 'S'},
                {first_name: undefined, last_name: null}
            ]},
            organization_payload: {
                organization: {name: 'my org', id: 4}
            },
            auth_payload: {
                auth: {
                    'can_invite_member': true,
                    'can_remove_member': true
                }
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should accepts its payload", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.org).toEqual({name : 'my org', id : 4});
        expect(ctrl_scope.users[0].name).toEqual("J S");
        expect(ctrl_scope.users[1].name).toEqual(" ");
    });
    it("clicking remove should remove a user", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.remove_member({user_id: 2});

        // assertions
        expect(mock_organization_service.remove_user)
            .toHaveBeenCalledWith(2, 4);
        
        ctrl_scope.$digest();
        expect(mock_organization_service.get_organization_users)
            .toHaveBeenCalledWith({org_id: 4});
    });
    it("clicking a new role should update the user's role", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.update_role({user_id: 2, role: "viewer"});

        // assertions
        expect(mock_organization_service.update_role)
            .toHaveBeenCalledWith(2, 4, 'viewer');
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: new_member_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_user_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, user_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        mock_user_service = user_service;
        spyOn(mock_user_service, "add")
            .andCallFake(function(user){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_new_member_controller(){
        ctrl = ctrl('new_member_modal_ctrl', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            organization: {organization_id: 1}
        });
    }

    /*
     * Test scenarios
     */

    it("should set the default role to 'member'", function() {
        // arrange
        create_new_member_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.user.role.value).toEqual("member"); 
    });
    it("should call the user service to add a new user to the org",
        function() {
        // arrange
        create_new_member_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.user.first_name = "JB";
        ctrl_scope.user.last_name = "Smooth";
        ctrl_scope.user.email = "jb.smooth@be.com";
        ctrl_scope.submit_form(true);

        // assertions
        expect(mock_user_service.add)
            .toHaveBeenCalledWith({
                first_name: "JB",
                last_name: "Smooth",
                email: "jb.smooth@be.com",
                role: ctrl_scope.roles[0],
                organization: {
                    organization_id: 1
                }
            });
    });
    
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
/**
 * run_jasmine.js: runs the jasmine JS test runner
 */
(function() {
    var jasmineEnv = jasmine.getEnv();
    jasmineEnv.updateInterval = 1000;

    var htmlReporter = new jasmine.HtmlReporter();

    jasmineEnv.addReporter(htmlReporter);

    jasmineEnv.specFilter = function(spec) {
        return htmlReporter.specFilter(spec);
    };

    var currentWindowOnload = window.onload;

    window.onload = function() {
        if (currentWindowOnload) {
        currentWindowOnload();
        }
        execJasmine();
    };
    function execJasmine() {
        jasmineEnv.execute();
    }
})();

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var searchTestApp = angular.module(
    'searchTestApp', ['BE.seed.service.search']
);

describe("The search_service service", function() {
    var saas, httpBackend, test_url;

    beforeEach(function () {
        module("searchTestApp");
        inject(function (search_service, $httpBackend) {
            saas = search_service;
            httpBackend = $httpBackend;
            httpBackend.when("POST", test_url).respond("ok");
        });

    });

    /**
     * sanitize_params tests
     */
    it('removes null and undefined values from filter_params', function () {
        // arrange
        saas.filter_params = {
          'National Median Site Energy Use__gte': 4,
          'National Median Site Energy Use__lte': null,
          'National Median Source EUI__gte': undefined
        };

        // act
        saas.sanitize_params();

        // assert
        expect(saas.filter_params).toEqual({'National Median Site Energy Use__gte': 4});
    });

    /**
     * search_buildings tests
     */
    it('has sane defaults', function() {
        expect(saas.url).toEqual("");
        expect(saas.error_message).toEqual("");
        expect(saas.alert).toEqual(false);
        expect(saas.buildings).toEqual([]);
        expect(saas.current_page).toEqual(1);
        expect(saas.number_per_page).toEqual(10);
        expect(saas.order_by).toEqual("");
        expect(saas.sort_column).toEqual("tax_lot_id");
        expect(saas.sort_reverse).toEqual(false);
        expect(saas.select_all_checkbox).toEqual(false);
        expect(saas.prev_page_disabled).toEqual(true);
        expect(saas.next_page_disabled).toEqual(true);
        expect(saas.num_pages).toEqual(0);
        expect(saas.query).toEqual("");
        expect(saas.showing).toEqual({
            'start': 1,
            'end': 0
        });
    });

    it('search_buildings uses the argument `query`', function() {
        saas.query = "hotels";
        saas.search_buildings("not hotels");

        expect(saas.query).toEqual("not hotels");
    });
    it('filter search resets the current page', function() {
        // arrange
        saas.current_page = 22;
        spyOn(saas, 'search_buildings');

        // act
        saas.filter_search();

        // assert
        expect(saas.current_page).toEqual(1);
        expect(saas.search_buildings).toHaveBeenCalled();
    });

    it('search_buildings function will default to its query if' +
        ' no query is passed as an argument', function() {
        saas.query = "hotels";
        saas.search_buildings();

        expect(saas.query).toEqual("hotels");
    });

    it('search_buildings hits the set url', function() {
        test_url = "/my-search-url";
        saas.url = test_url;
        saas.search_buildings();
        httpBackend.expectPOST(test_url);
        httpBackend.flush();
    });

    it('search_buildings POSTs the query data as `q`', function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.query = "hotel chains";
        saas.number_per_page = 25;
        saas.order_by = "gross_floor_area";
        saas.sort_reverse = true;
        saas.filter_params = {
            project: '2012 data'
        };

        // act
        saas.search_buildings();

        // assert
        httpBackend.expectPOST(test_url,
            {
                "q": "hotel chains",
                "number_per_page": 25,
                "order_by": "gross_floor_area",
                "sort_reverse": true,
                "filter_params": {
                    "project": "2012 data"
                },
                "page":1
            }
        ).respond(201, "");
        httpBackend.flush();
    });
    it('search_buildings updates its `buildings` model', function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.query = "hotel chains";
        saas.number_per_page = 25;
        saas.order_by = "gross_floor_area";
        saas.sort_reverse = true;
        saas.filter_params = {
            project: '2012 data'
        };

        // act
        saas.search_buildings();

        // assert
        httpBackend.expectPOST(test_url,
            {
                "q": "hotel chains",
                "number_per_page": 25,
                "order_by": "gross_floor_area",
                "sort_reverse": true,
                "filter_params": {
                    "project": "2012 data"
                },
                "page":1
            }
        ).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        expect(saas.buildings).toEqual([
            {
                name: "one",
                id: 1,
                checked: false
            },
            {
                name: "two",
                id: 2,
                checked: false
            }
        ]);
    });
    it('should clear the error and alert after a successful search',
        function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.error_message = "help";
        saas.alert = true;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {
            'buildings': [
                {
                    name: "one",
                    id: 1
                },
                {
                    name: "two",
                    id: 2
                }],
            'number_matching_search': 101
            });
        httpBackend.flush();

        // assert
        expect(saas.alert).toEqual(false);
        expect(saas.error_message).toEqual("");
    });

    /**
     * pagination tests
     */
    it('increments the page when the `next` button is clicked',
        function() {
        // arrange
        saas.num_pages = 1000;
        saas.current_page = 100;
        spyOn(saas, 'search_buildings');
        // act
        saas.next_page();

        // assert
        expect(saas.current_page).toEqual(101);
        expect(saas.search_buildings).toHaveBeenCalled();
        expect(saas.search_buildings.callCount).toEqual(1);

    });
    it('doesn\'t increment past the last page when the `next` button is' +
        ' clicked', function() {
        // arrange
        saas.num_pages = 2;
        saas.current_page = 2;
        spyOn(saas, 'search_buildings');
        // act
        saas.next_page();

        // assert
        expect(saas.current_page).toEqual(2);
        expect(saas.search_buildings).toHaveBeenCalled();
        expect(saas.search_buildings.callCount).toEqual(1);

    });
    it('decrements the page when the `previous` button is clicked',
        function() {
        // arrange
        saas.num_pages = 1000;
        saas.current_page = 100;
        spyOn(saas, 'search_buildings');
        // act
        saas.prev_page();

        // assert
        expect(saas.current_page).toEqual(99);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('does not decrement below the first page when the `previous` button' +
        ' is clicked', function() {
        // arrange
        saas.num_pages = 1;
        saas.current_page = 1;
        spyOn(saas, 'search_buildings');
        // act
        saas.prev_page();

        // assert
        expect(saas.current_page).toEqual(1);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('fetches more or less results per page when a user selects an option' +
        ' from the number per page select',
        function() {
        // arrange
        saas.number_per_page_options_model = 50;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_number_per_page();

        // assert
        expect(saas.number_per_page).toEqual(50);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('updates the number of results displayed text after a successful '+
        'search', function() {
        // standard case
        // page 2 of 3 with 10/page, so should display 11 of 20
        // arrange
        saas.current_page = 2;
        saas.num_pages = 3;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_start_end_paging();

        // assert
        expect(saas.showing.start).toEqual(11);
        expect(saas.showing.end).toEqual(20);
        expect(saas.search_buildings).not.toHaveBeenCalled();
    });
    it('displays the number matching the query if on the last page of results',
        function() {
        // standard case
        // page 3 of 3 with 10/page and 34 results, so should display 21 of 34
        // arrange
        saas.current_page = 3;
        saas.number_matching_search = 34;
        saas.num_pages = 3;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_start_end_paging();

        // assert
        expect(saas.showing.start).toEqual(21);
        expect(saas.showing.end).toEqual(34);
    });
    it('should call update_start_end_paging after a successful search',
        function() {
        // arrange
        spyOn(saas, 'update_start_end_paging');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_start_end_paging).toHaveBeenCalled();
    });
    it('should call update_buttons after a successful search',
        function() {
        // arrange
        spyOn(saas, 'update_buttons');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_buttons).toHaveBeenCalled();
    });
    it('should disable prev paging buttons at the first page',
        function() {
        // arrange
        saas.current_page = 1;
        saas.num_pages = 5;

        // act
        saas.update_buttons();

        // assert
        expect(saas.prev_page_disabled).toEqual(true);
        expect(saas.next_page_disabled).toEqual(false);
    });
    it('should disable next paging buttons at the last page',
        function() {
        // arrange
        saas.current_page = 5;
        saas.num_pages = 5;

        // act
        saas.update_buttons();

        // assert
        expect(saas.prev_page_disabled).toEqual(false);
        expect(saas.next_page_disabled).toEqual(true);
    });
    it('should calculate the number of pages after a successful search',
        function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {
            'buildings': [
                {
                    name: "one",
                    id: 1
                },
                {
                    name: "two",
                    id: 2
                }],
            'number_matching_search': 101
            });
        httpBackend.flush();

        // assert
        expect(saas.number_matching_search).toEqual(101);
        expect(saas.num_pages).toEqual(11);
    });

    /**
     * checkbox logic tests
     */
    it('should select or unselect all the viewed results when the select all' +
        ' checkbox is checked or unchecked', function() {
        // arrange
        saas.selected_buildings = [1,2,3];
        saas.select_all_checkbox = true;
        saas.buildings = [
            {
                checked: false
            },
            {
                checked: true
            }
        ];
        spyOn(saas, 'select_or_deselect_all_buildings').andCallThrough();

        // act
        saas.select_all_changed();

        // assert
        expect(saas.selected_buildings).toEqual([]);
        expect(saas.buildings).toEqual([
                {
                    checked: true
                },
                {
                    checked: true
                }
            ]);
        expect(saas.select_or_deselect_all_buildings).toHaveBeenCalled();
    });
    it('should call select_or_deselect_all_buildings after a search',
        function() {
        // arrange
        spyOn(saas, 'select_or_deselect_all_buildings');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.select_or_deselect_all_buildings).toHaveBeenCalled();
    });
    it('should add a building to the selected list when checked',
        function() {
        // arrange
        var building = {
            id: 5,
            checked: true
        };

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([5]);
    });
    it('should add a building to the selected list when unchecked and the ' +
        'select all checkbox is checked', function() {
        // arrange
        var building = {
            id: 5,
            checked: false
        };
        saas.select_all_checkbox = true;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([5]);
    });
    it('should remove a building to the selected list when unchecked',
        function() {
        // arrange
        var building = {
            id: 5,
            checked: false
        };
        saas.selected_buildings = [5,6,7];
        saas.select_all_checkbox = false;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([6,7]);
    });
    it('should remove a building to the selected list when checked if the ' +
        'select all checkbox is checked', function() {
        // arrange
        var building = {
            id: 5,
            checked: true
        };
        saas.selected_buildings = [5,6,7];
        saas.select_all_checkbox = true;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([6,7]);
    });
    it('should call load_state_from_selected_buildings after a successful ' +
        'search', function() {
        // arrange
        spyOn(saas, 'load_state_from_selected_buildings').andCallThrough();
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.load_state_from_selected_buildings).toHaveBeenCalled();
    });
    it('should call update_results after a successful ' +
        'search', function() {
        // arrange
        var select_or_deselect_all_buildings_time,
            load_state_from_selected_buildings_time;
        spyOn(saas, 'update_results').andCallThrough();
        spyOn(saas, 'select_or_deselect_all_buildings')
            .andCallFake(function() {
                select_or_deselect_all_buildings_time = new Date();
            }
        );
        spyOn(saas, 'load_state_from_selected_buildings')
            .andCallFake(function() {
                // wait for a sec, otherwise both have the same timestamp
                for(var y=0;y<100000;y++){
                    var x = new Date();
                    x = x+y;
                }
                load_state_from_selected_buildings_time = new Date();
            }
        );
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_results).toHaveBeenCalled();
        expect(select_or_deselect_all_buildings_time <
               load_state_from_selected_buildings_time).toBe(true);
    });
    it('check selected buildings successful', function() {
        // arrange
        saas.selected_buildings = [2];
        saas.buildings = [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ];

        // act
        saas.load_state_from_selected_buildings();

        // assert
        expect(saas.buildings[1]).toEqual({
            name: "two",
            id: 2,
            checked: true
        });
    });
    it('should generate columns', function() {
        // arrange
        var all_columns, column_headers, columns;
        all_columns = [
            {
                sort_column: "name"
            },
            {
                sort_column: "id"
            }
        ];
        column_headers = ["id"];
        saas.sort_column = "something else";
        saas.update_results({});
        // act
        columns = saas.generate_columns(
            all_columns, column_headers, saas.column_prototype
        );

        // assert that columns are extended off the prototype and only have
        // "id"
        expect(columns.length).toEqual(1);
        expect(columns[0].sort_column).toEqual("id");
        expect(columns[0].is_unsorted()).toEqual(true);
        saas.sort_column = "id";
        expect(columns[0].is_unsorted()).toEqual(false);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: settings_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller;
    var ctrl, ctrl_scope, modalInstance;
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          $q,
          organization_service) {
            ctrl = $controller;
            scope = $rootScope;
            ctrl_scope = $rootScope.$new();

            mock_organization_service = organization_service;
            
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_settings_controller(){
        ctrl = ctrl('settings_controller', {
            $scope: ctrl_scope,
            all_columns: {fields: [
                {checked: false, title: 'PM Property ID', sort_column: 'pm_property_id'},
                {checked: false, title: 'G', sort_column: 'g'},
                {checked: false, title: "Gross Floor Area", sort_column: 'gross_floor_area'}
            ]},
            organization_payload: {
                organization: {name: 'my org', id: 4}
            },
            query_threshold_payload: {
                query_threshold: 10
            },
            shared_fields_payload: {
                shared_fields: [
                    {
                        title: "PM Property Id",
                        sort_column: "pm_property_id"
                    }
                ],
                public_fields: [
                {
                    title: "Gross Floor Area",
                    sort_column: "gross_floor_area"
                }]
            },
            auth_payload: {
                auth: {
                    'is_owner': true,
                    'is_parent_org_owner': false
                }
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should accepts its payload", function() {
        // arrange
        create_settings_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.org).toEqual({
            name : 'my org',
            id : 4,
            query_threshold: 10
        });
        expect(ctrl_scope.fields[0].checked).toEqual(true);
        expect(ctrl_scope.fields[1].checked).toEqual(false);
        expect(ctrl_scope.fields[0].title).toEqual('PM Property ID');
    });
    it("should select all", function() {
        // arrange
        create_settings_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.controls.select_all = true;
        ctrl_scope.select_all_clicked();
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.infinite_fields[0].checked).toEqual(true);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myStripFilterApp = angular.module('myStripFilterApp', ['stripImportPrefix']);

describe("The stripImportPrefix filter", function() {
    beforeEach(module('myStripFilterApp'));
    it('Strips out the import prefix from building ids',
        // e.g. remove the 'IMP12-' from the id 'IMP12-1321/123'
        inject(function(stripImportPrefixFilter) {
            // normal cases
            expect(stripImportPrefixFilter('IMP134-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP134555-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP1-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP0-134')).toBe('134');
            // deals with `-`
            expect(stripImportPrefixFilter('IMP134-abc-dev')).toBe('abc-dev');
            // deals with `/`
            expect(stripImportPrefixFilter('IMP134-00/11')).toBe('00/11');
            // only strips first prefix
            expect(stripImportPrefixFilter('IMP134-IMP134-123')).toBe('IMP134-123');
        })
    );
    it("Does not strip out anything if there is not a prefix",
        inject(function(stripImportPrefixFilter) {
            // normal cases
            expect(stripImportPrefixFilter('123-123')).toBe('123-123');
            expect(stripImportPrefixFilter('0123/123')).toBe('0123/123');
        })
    );
    it("Is case sensitive to the import prefix",
        inject(function(stripImportPrefixFilter) {
            expect(stripImportPrefixFilter('imp123-abc')).toBe('imp123-abc');
            expect(stripImportPrefixFilter('iMp123-abc')).toBe('iMp123-abc');
            expect(stripImportPrefixFilter('iMP123-abc')).toBe('iMP123-abc');
        })
    );
    it("Handles undefined or null inputs",
        inject(function(stripImportPrefixFilter) {
            expect(stripImportPrefixFilter(undefined)).toBe(undefined);
            expect(stripImportPrefixFilter(null)).toBe(null);
        })
    );
    it("Only strips out the prefix if it has at least one digit and a hyphen",
        inject(function(stripImportPrefixFilter) {
            // must have the 'IMP' folowed by a digit then a hyphen
            expect(stripImportPrefixFilter('IMP-123')).toBe('IMP-123');
            expect(stripImportPrefixFilter('IMP1123')).toBe('IMP1123');
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myTitleCaseApp = angular.module('myTitleCaseApp', ['titleCase']);

describe("The TitleCase filter", function() {
    beforeEach(module('myTitleCaseApp'));
    it('Strips out ``_`` characters from strings and capitalizes the rest',
        inject(function(titleCaseFilter) {
            // normal cases
            expect(titleCaseFilter('super_data')).toBe('Super Data');
            expect(titleCaseFilter('super_data_45')).toBe('Super Data 45');
            expect(titleCaseFilter(undefined)).toBe(undefined);
            expect(titleCaseFilter(null)).toBe(null);
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myTypedNumberFilterApp = angular.module('myTypedNumberFilterApp', ['typedNumber']);

describe("The typedNumber filter", function() {
    beforeEach(module('myTypedNumberFilterApp'));
    it('should parse strings as strings and return them',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('tester')).toBe('tester');
        })
    );
    it('should parse strings as strings and return them, even if they look like numbers',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.1456')).toBe('123.1456');
        })
    );

    it('should parse numbers as numbers and return them',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.00001', 'number')).toBe("123");
        })
    );

    it('should allow the user to set the number of sig digits',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.321', 'number', 'not_year', 1)).toBe("123.3");
        })
    );

    it('should add commas to number greater than 999',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123456789', 'number', 'not_year', 0)).toBe("123,456,789");
        })
    );

    it('should parse year_built and not add commas',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('1946', 'number', 'year_built', 1)).toBe("1946");
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var validationTestApp = angular.module(
    'validationTestApp', ['mappingValidatorService']
);

describe("The MappingValidatorService", function() {
    var mvs;

    beforeEach(function () {
        module("validationTestApp");
        inject(function (mappingValidatorService) {
            mvs = mappingValidatorService;

        });

    });

    it('validates good string, float and date data', function() {
        // normal cases
        // Here ``type`` is undefined. Should still work.
        var str_data = ['Fun', 'fun2', 'fun3', 'fun4'];
        var float_data = ['12.34', '144.5', '234'];
        var date_data = ['2014/02/02', '03/13/2013', '03-14-2004'];

        expect(mvs.validate(str_data)).toEqual([]);
        expect(mvs.validate(float_data, 'float')).toEqual([]);
        expect(mvs.validate(date_data, 'date')).toEqual([]);
    });

    it('recognizes semivalid data', function() {
        // Cases where the data is /almost/ right.
        var float_data = ['12.34', '144.5', 'NaN'];
        var date_data = ['2014/02/02', 'huh?', '03-14-2004'];
        expect(mvs.validate(float_data, 'float')).toEqual(['NaN']);
        expect(mvs.validate(date_data, 'date')).toEqual(['huh?']);
    });

    it('recognizes invalid data', function() {
        // Cases where the data is *all* wrong.
        var float_data = ['', 'not a float', 'NaN'];
        var date_data = ['', 'huh?', 'what?'];
        // Cases where the data are correct.
        var good_float_data = ['12.34', '144.5', '234'];
        var good_date_data = ['2014/02/02', '03/13/2013', '03-14-2004'];

        // Data is wrong
        expect(mvs.validate(float_data, 'float')).toEqual(float_data);
        expect(mvs.validate(date_data, 'date')).toEqual(date_data);

        // Type is wrong
        // N.B. we use semivalid here, because Date is pretty forgiving w/ nums.
        expect(mvs.validate(good_float_data, 'date')).toEqual(['12.34']);
        expect(mvs.validate(good_date_data, 'float')).toEqual(good_date_data);


    });

});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// taken from the angularjs testing page
// http://docs.angularjs.org/guide/dev_guide.unit-testing

// create dummy angularJS app to attach filter(s)
var myBELabelDirectiveApp = angular.module('myBELabelDirectiveApp', ['beLabel']);

describe("The beLabel directive", function() {
    var $compile;
    var $rootScope;
    beforeEach(module('myBELabelDirectiveApp'));
    // Store references to $rootScope and $compile
    // so they are available to all tests in this describe block
    beforeEach(inject(function(_$compile_, _$rootScope_){
      // The injector unwraps the underscores (_) from around the parameter names when matching
      $compile = _$compile_;
      $rootScope = _$rootScope_;
    }));

    it('Replaces the element with the appropriate content', function() {
        // Compile a piece of HTML containing the directive
        var element = $compile('<be-label name="compliant" color="blue"></be-label>')($rootScope);
        // fire all the watches
        $rootScope.$digest();
        // Check that the compiled element contains the templated content
        expect(element.hasClass('label-primary')).toBe(true);
        expect(element.hasClass('label')).toBe(true);
        expect(element.html()).toContain("compliant");
    });

        // 'red': 'danger',
        // 'gray': 'default',
        // 'orange': 'warning',
        // 'green': 'success',
        // 'blue': 'primary',
        // 'light blue': 'info'
    it('Maps colors to semantic bootstrap class names', function() {
        var element = $compile('<be-label name="compliant" color="red"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-danger')).toBe(true);

        element = $compile('<be-label name="compliant" color="gray"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-default')).toBe(true);

        element = $compile('<be-label name="compliant" color="orange"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-warning')).toBe(true);

        element = $compile('<be-label name="compliant" color="green"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-success')).toBe(true);

        element = $compile('<be-label name="compliant" color="blue"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-primary')).toBe(true);

        element = $compile('<be-label name="compliant" color="light blue"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-info')).toBe(true);
    });


});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// taken from the angularjs testing page
// http://docs.angularjs.org/guide/dev_guide.unit-testing

// create dummy angularJS app to attach filter(s)
var myBEUploaderDirectiveApp = angular.module('myBEUploaderDirectiveApp', ['beUploader']);

describe("The beUploader directive", function() {
    var g_message, g_file, g_progress;
    var $compile;
    var $rootScope;
    var uploader_html = '<div be-uploader sourcetype="assessor" importrecord="5" buttontext="Upload your building list .csv file" eventfunc="uploaderfunc(message, filename, progress)" ng-hide="uploader.in_progress"></div>';
    beforeEach(module('myBEUploaderDirectiveApp'));
    // Store references to $rootScope and $compile
    // so they are available to all tests in this describe block
    beforeEach(inject(function(_$compile_, _$rootScope_){
      // The injector unwraps the underscores (_) from around the parameter names when matching
      $compile = _$compile_;
      $rootScope = _$rootScope_;
      $rootScope.eventfunc = function (fine_object) {
        console.log({fin: fine_object});
        g_message = fine_object.message;
        g_file = fine_object.file;
        g_progress = fine_object.progress;
      };
      window.BE = window.BE || {};
      window.BE.FILE_UPLOAD_DESTINATION = 'S3';
    }));

    it('Creates the fineuploader element', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        
        // act
        $rootScope.$digest();

        // assert
        expect(element.html()).toContain("qq-uploader");
        expect(element.html()).toContain("qq-upload-button");
    });

    it('Contains the buttontext specified', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);

        // act
        $rootScope.$digest();

        // assert
        expect(element.html()).toContain("Upload your building list .csv file");
    });

    it('Only allows one file to be uploaded at a time', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");

        // act
        $rootScope.$digest();

        // assert
        expect(func._options.multiple).toBe(false);
    });

    it('Uses the callback function for invalid file types', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.jpeg");

        // act
        $rootScope.$digest();
        func._options.showMessage("there was an invalid extension. Valid extension(s): .csv");


        // assert
        expect(g_message).toBe("invalid_extension");
    });

    it('Uses the callback function to share its state: upload started',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';
        
        // act
        $rootScope.$digest();
        func._options.callbacks.onSubmitted(1, filename);


        // assert
        expect(g_message).toBe("upload_submitted");
        expect(g_file.filename).toBe(filename);
    });

    it('Uses the callback function to share its state: in progress',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';
        var loaded = 10;
        var total = 100;
        
        // act
        $rootScope.$digest();
        func._options.callbacks.onProgress(1, filename, loaded, total);


        // assert
        expect(g_message).toBe("upload_in_progress");
        expect(g_file.filename).toBe(filename);
        expect(g_progress.loaded).toBe(loaded);
        expect(g_progress.total).toBe(total);
    });

    it('Uses the callback function to share its state: complete',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';

        
        // act
        $rootScope.$digest();
        func._options.callbacks.onComplete(1, filename, {success: true});


        // assert        
        expect(g_message).toBe("upload_complete");
        expect(g_file.filename).toBe(filename);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: building_detail_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, ngFilter, delete_called;
    var building_detail_ctrl, building_detail_ctrl_scope, modalInstance, labels;
    var mock_building_services, mock_project_service;
    var mock_building;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          urls,
          $q,
          building_services,
          project_service,
          $filter) {
            controller = $controller;
            scope = $rootScope;
            ngFilter = $filter;
            building_detail_ctrl_scope = $rootScope.$new();
            modal_state = "";
            delete_called = false;

            // mock the building_services factory methods used in the controller
            // and return their promises
            mock_building_services = building_services;
            mock_project_service = project_service;

            spyOn(mock_project_service, "get_project")
                .andCallFake(function(project_slug){
                    return $q.when(
                        {
                            "status": "success",
                            "project": {
                                id: 33,
                                name: "test project",
                                slug: project_slug
                            }
                        }
                    );
                }
            );
            spyOn(mock_project_service, "get_labels")
                .andCallFake(function(){
                    return $q.when(
                        {
                            "status": "success",
                            "labels": [{
                                id: 44,
                                name: "bad label",
                                color: "red"
                            }]
                        }
                    );
                }
            );
            spyOn(mock_project_service, "update_project_building")
                .andCallFake(function(building_id, project, label){
                    return $q.when(
                        {
                            "status": "success",
                            "approver": "bob doe",
                            "approved_date": "01/01/2012"
                        }
                    );
                }
            );
            spyOn(mock_building_services, "update_building")
                .andCallFake(function (building, org_id){
                    mock_building = building;
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_building_detail_controller(){
        var fake_building = {
            id: 511,
            pk: 511,
            gross_floor_area: 123456,
            gross_floor_area_source: 2,
            city: "DC",
            city_source: 4,
            tax_lot_id: "11/22",
            tax_lot_id_source: 3,
            extra_data: {
                'some other key': 12344,
                'some other key that is not in a parent': 223
            },
            extra_data_sources: {
                'some other key': 2,
                'some other key that is not in a parent': 3
            },
            created: "at some point"
        };
        var fake_imported_buildings = [
            {
                id: 2,
                pk: 2,
                gross_floor_area: 123456,
                gross_floor_area_source: null,
                city: "Washington, DC",
                city_source: null,
                extra_data: {
                    'some other key': 123,
                    'some other key that is not in a child': 333,
                    'some floor area': 444
                },
                extra_data_sources: {
                    'some other key': null,
                    'some other key that is not in a child': 111,
                    'some floor area': 444
                },
                created: "test"
            },
            {
                id: 3,
                pk: 3,
                gross_floor_area: 2111111,
                gross_floor_area_source: null,
                city: "Washington",
                city_source: null,
                tax_lot_id: "11/22",
                tax_lot_id_source: null,
                extra_data: {
                    'make it four': 4
                },
                extra_data_sources: {
                    'make it four': null
                }
            },{
                id: 4,
                pk: 4,
                gross_floor_area: 2111111,
                gross_floor_area_source: null,
                city: "Washington",
                city_source: null,
                tax_lot_id: "11/22",
                tax_lot_id_source: null,
                extra_data: {
                    'make it four': 5
                },
                extra_data_sources: {
                    'make it four': null
                }
            }
        ];
        var fake_payload = {
            "status": "success",
            "building": fake_building,
            "imported_buildings": fake_imported_buildings,
            "projects": [],
            "user_org_id": 42
        };
        var fake_all_columns = [{
            "title": "PM Property ID",
            "sort_column": "pm_property_id",
            "class": "is_aligned_right",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Tax Lot ID",
            "sort_column": "tax_lot_id",
            "class": "is_aligned_right",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Custom ID 1",
            "sort_column": "custom_id_1",
            "class": "is_aligned_right whitespace",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Property Name",
            "sort_column": "property_name",
            "class": "",
            "title_class": "",
            "type": "string",
            "field_type": "building_information",
            "sortable": true,
            "checked": false
        }];
        building_detail_ctrl = controller('building_detail_controller', {
            $scope: building_detail_ctrl_scope,
            $routeParams: {
                building_id: 1,
                project_id: 2
            },
            building_payload: fake_payload,
            all_columns: {
                fields: fake_all_columns
            },
            audit_payload: {
                audit_logs: []
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should have an building payload", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.building.id).toBe(511);
        expect(building_detail_ctrl_scope.imported_buildings[0].id).toBe(2);
    });

    it("should get labels on load", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.labels[0].id).toBe(44);
        expect(building_detail_ctrl_scope.labels[0].name).toBe("bad label");
        expect(building_detail_ctrl_scope.labels[0].color).toBe("red");
    });

    it("should highlight the active project", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.is_active_project({id:33}))
        .toBe(true);
        expect(building_detail_ctrl_scope.is_active_project({id:34}))
        .toBe(false);
        building_detail_ctrl_scope.project = undefined;
        expect(building_detail_ctrl_scope.is_active_project({id:34}))
        .toBe(false);
    });

    it("should make a copy of building while making edits", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.save_building_state();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;

        // assertions
        expect(building_detail_ctrl_scope.building_copy.gross_floor_area)
        .toBe(123456);
    });
    it("should restore the copy of building if a user clicks cancel",
        function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.save_building_state();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;
        building_detail_ctrl_scope.restore_building();

        // assertions
        expect(building_detail_ctrl_scope.building.gross_floor_area)
        .toBe(123456);
        expect(building_detail_ctrl_scope.building.edit_form_showing).toBe(false);
    });
    it("should save a building when a user clicks the save button", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;
        building_detail_ctrl_scope.save_building();

        // assertions
        expect(mock_building_services.update_building)
        .toHaveBeenCalledWith(building_detail_ctrl_scope.building, 42);
        expect(mock_building.gross_floor_area).toEqual(43214);
    });
    it("should show a default label if a building doesn't have one", function() {
        // arrange
        create_building_detail_controller();
        var building_with_label = {
            label: {
                name: "hello",
                label: "success"
            }
        };
        var building_without_label = {};
        var label_with, label_without;

        // act
        building_detail_ctrl_scope.$digest();
        label_with = building_detail_ctrl_scope.get_label(building_with_label);
        label_without = building_detail_ctrl_scope.get_label(building_without_label);

        // assertions
        expect(label_with).toEqual({
                name: "hello",
                label: "success"
            });
        expect(label_without).toEqual({
                name: "Add Label",
                label: "default"
            });
    });

    it("should show a project or buildings breadcrumb", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.user.project_slug = "project_1";

        // assertions
        expect(building_detail_ctrl_scope.is_project()).toEqual(true);
        building_detail_ctrl_scope.user.project_slug = undefined;
        expect(building_detail_ctrl_scope.is_project()).toEqual(false);

    });
    it("should show the default projects table if a user has no compliance" +
        " projects", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.user.has_projects()).toEqual(false);
        building_detail_ctrl_scope.projects = [{id: 1, name: "a"}];
        expect(building_detail_ctrl_scope.user.has_projects()).toEqual(true);

    });

    it("should set only building attribute to master, not ids or children", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.is_valid_key('id')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('pk')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('pk_source')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key(' extra_data ')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('gross_floor_area'))
          .toEqual(true);
    });
    it("should update a project-building label", function() {
        // arrange
        create_building_detail_controller();
        var project = {
            id: 2,
            building: {}
        };

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.update_project_building(project,
            {
                name: "label name",
                color: "red"
            });
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(mock_project_service.update_project_building).toHaveBeenCalled();
        expect(project.building.approver).toEqual("bob doe");
        expect(project.building.approved_date).toEqual("01/01/2012");
        expect(project.building.label.name).toEqual("label name");
        expect(project.building.label.color).toEqual("red");

    });
    it("should set a field as source when clicked", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[0].is_master = true;
        expect(building_detail_ctrl_scope.building.gross_floor_area_source)
          .not.toEqual(building_detail_ctrl_scope.building.id);
        building_detail_ctrl_scope.set_self_as_source('gross_floor_area');
        building_detail_ctrl_scope.set_self_as_source('some other key', true);
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.building.gross_floor_area_source)
          .toEqual(building_detail_ctrl_scope.building.id);
        expect(building_detail_ctrl_scope.imported_buildings[0].is_master)
          .toEqual(false);
    });
    it("should set a column as the dominant source when clicked", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[1].is_master = true;
        building_detail_ctrl_scope.make_source_default(
            building_detail_ctrl_scope.imported_buildings[0]);
        building_detail_ctrl_scope.$digest();

        // assertions
        var b = building_detail_ctrl_scope.building,
            i = building_detail_ctrl_scope.imported_buildings[0],
            i_other = building_detail_ctrl_scope.imported_buildings[1];

        expect(b.gross_floor_area_source).toEqual(i.id);
        expect(b.id).not.toEqual(i.id);
        expect(b.pk).not.toEqual(i.id);
        expect(b.city).toEqual(i.city);
        expect(b.city_source).toEqual(i.id);
        expect(b.tax_lot_id).toEqual("11/22");
        expect(b.tax_lot_id_source).toEqual(i_other.id);
        expect(b.extra_data['some other key']).toEqual(123);
        expect(b.extra_data_sources['some other key']).toEqual(i.id);
        expect(b.extra_data['some other key that is not in a child']).toEqual(333);
        expect(b.extra_data_sources['some other key that is not in a child']).toEqual(i.id);
        expect(b.extra_data['some other key that is not in a parent']).toEqual(223);
        expect(b.extra_data_sources['some other key that is not in a parent']).toEqual(i_other.id);
        expect(b.created).toEqual("at some point");

        expect(i.is_master).toEqual(true);
        expect(i_other.is_master).toEqual(false);
    });
    it("should set the master building value when parent's value is clicked",
        function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[1].is_master = true;
        building_detail_ctrl_scope.set_building_attribute(
            building_detail_ctrl_scope.imported_buildings[0], 'city');
        building_detail_ctrl_scope.set_building_attribute(
            building_detail_ctrl_scope.imported_buildings[0], 'some other key', true);
        building_detail_ctrl_scope.$digest();

        // assertions
        var b = building_detail_ctrl_scope.building,
            i = building_detail_ctrl_scope.imported_buildings[0],
            i_other = building_detail_ctrl_scope.imported_buildings[1];

        expect(b.id).not.toEqual(i.id);
        expect(b.pk).not.toEqual(i.id);
        expect(b.city).toEqual(i.city);
        expect(b.city_source).toEqual(i.id);
        expect(b.tax_lot_id).toEqual("11/22");
        expect(b.tax_lot_id_source).toEqual(i_other.id);
        expect(b.extra_data['some other key']).toEqual(123);
        expect(b.extra_data_sources['some other key']).toEqual(i.id);

        expect(i.is_master).toEqual(false);
        expect(i_other.is_master).toEqual(false);
    });

    it("should display all the data within all the buildings", function() {
        // arrange
        create_building_detail_controller();
        var keys;

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        var edc = building_detail_ctrl_scope.data_columns;

        // should not duplicate keys
        expect(edc.length).toEqual(8);
        keys = edc.map(function ( d ) {
            return d.key;
        });
        expect(keys.indexOf('make it four')).toEqual(4);
    });

    it("should display Floor Areas", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.$digest();

        // assertions
        var area_fields = building_detail_ctrl_scope.floor_area_fields;
        expect(area_fields.length).toEqual(1);
    });

    it("should display Floor Areas with number", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.get_number("")).toEqual(0);
        expect(building_detail_ctrl_scope.get_number("123,123,123")).toEqual(123123123);
        expect(building_detail_ctrl_scope.get_number("123,123,123.123")).toEqual(123123123.123);
        expect(building_detail_ctrl_scope.get_number("-123,123,123")).toEqual(-123123123);
        expect(building_detail_ctrl_scope.get_number(-123123123)).toEqual(-123123123);


    });
});

describe("controller: concat_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var scope, controller, modal_state;
    var edit_ctrl, concat_modal_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label, mock_mapping_service, mock_matching_service;
    var global_step = 1;
    var global_dataset = {};

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
            $controller, $rootScope, $modal, urls, $q
        ) {
            controller = $controller;
            scope = $rootScope;
            concat_modal_ctrl_scope = $rootScope.$new();
            concat_modal_ctrl_scope.concat_columns = [];
            modal_state = "";
        }
    ));

    var mock_building_column_types = [
        'address1', 'city', 'state', 'postal_code'
    ];

    var mock_raw_columns = [
        {
            name: 'Address',
            suggestion: 'address1',
            confidence: 1,
            raw_data: [
                '234 Database way',
                '23444 Huh hwy',
                '23444 Huh hwy',
                '23444 Huh hwy',
                '1223 face pl.'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        },
        {
            name: 'City',
            suggestion: 'city',
            confidence: 1,
            raw_data: [
                'Mega City', 'Mega City', 'Mega City', 'Mega City', 'Mega City'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        },
        {
            name: 'Zip',
            suggestion: '',
            confidence: 0,
            raw_data: [
                '234233', '234233', '234233', '234233', '234233'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        }
    ];

    // this is outside the beforeEach so it can be configured by each unit test
    function create_concat_modal_controller(){
        edit_ctrl = controller('concat_modal_ctrl', {
            $scope: concat_modal_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            building_column_types: mock_building_column_types,
            raw_columns: mock_raw_columns
        });
    }

    /*
     * Test scenarios
     */

    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.close_concat_modal();
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should mangle scope appropriately during concatenation", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(3);

        // arrange
        concat_modal_ctrl_scope.concat_columns =
            concat_modal_ctrl_scope.raw_columns.slice(0);
        concat_modal_ctrl_scope.raw_columns = [];

        // act
        concat_modal_ctrl_scope.$digest();
        concat_modal_ctrl_scope.save_concat();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(1);
        expect(
            concat_modal_ctrl_scope.raw_columns[0].is_concatenated
        ).toEqual(true);
    });

    it("should modify the raw_data of our modified TCM correctly", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(3);

        // arrange
        concat_modal_ctrl_scope.concat_columns =
            concat_modal_ctrl_scope.raw_columns.slice(0);
        concat_modal_ctrl_scope.raw_columns = [];

        // act
        concat_modal_ctrl_scope.$digest();
        concat_modal_ctrl_scope.save_concat();

        var expected_raw = [
            '234 Database way Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '1223 face pl. Mega City 234233'
        ];

        // assertions
        expect(
            concat_modal_ctrl_scope.raw_columns[0].raw_data
        ).toEqual(expected_raw);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: create_organization_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_organization_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, organization_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        mock_organization_service = organization_service;
        spyOn(mock_organization_service, "create_sub_org")
            .andCallFake(function(org, sub_org){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_organization_modal_ctrl(){
        ctrl = ctrl('create_organization_modal_ctrl', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            organization: {organization_id: 1}
        });
    }

    /*
     * Test scenarios
     */

    it("should call the organization service to add a new sub_org",
        function() {
        // arrange
        create_organization_modal_ctrl();

        // act
        ctrl_scope.$digest();
        ctrl_scope.sub_org.name = "my shiny new org";
        ctrl_scope.sub_org.email = "jb.smooth@be.com";
        ctrl_scope.submit_form(true);

        // assertions
        expect(mock_organization_service.create_sub_org)
            .toHaveBeenCalledWith(
                {
                    organization_id: 1
                },
                {
                    name: "my shiny new org",
                    email: "jb.smooth@be.com"
                }
            );
    });
    
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: data_upload_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_uploader_service, scope, controller, modal_state;
    var edit_ctrl, data_upload_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label, mock_mapping_service, mock_matching_service;
    var global_step = 1;
    var global_dataset = {};
    var return_labels = [
        {
            "name": 'compliant',
            "color": 'green',
            "id": 1
        },
        {
            "name": "new label",
            "color": "blue",
            "id": 2
        }
    ];

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, uploader_service, mapping_service, matching_service) {
            controller = $controller;
            scope = $rootScope;
            data_upload_ctrl_scope = $rootScope.$new();
            modal_state = "";

            // mock the uploader_service factory methods used in the controller
            // and return their promises
            mock_uploader_service = uploader_service;
            mock_mapping_service = mapping_service;
            mock_matching_service = matching_service;
            spyOn(mock_uploader_service, "get_AWS_creds")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "AWS_CLIENT_ACCESS_KEY": "123",
                            "AWS_UPLOAD_BUCKET_NAME": "test-bucket"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "check_progress")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "progress": "25.0"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "create_dataset")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "id": 3,
                                "name": dataset_name

                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error",
                                "message": "name already in use"
                            }
                        );
                    }
                }
            );
            spyOn(mock_uploader_service, "save_raw_data")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "file_id": 3
                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error"
                            }
                        );
                    }
                }
            );
            spyOn(mock_mapping_service, "start_mapping")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "file_id": 3
                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error"
                            }
                        );
                    }
                }
            );
            spyOn(mock_matching_service, "start_system_matching")
            .andCallFake(function(file_id){
                // return $q.reject for error scenario
                return $q.when(
                    {
                        "status": "success",
                        "file_id": 3
                    }
                );
            });

        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_data_upload_modal_controller(){
        edit_ctrl = controller('data_upload_modal_ctrl', {
            $scope: data_upload_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            step: global_step,
            dataset: global_dataset
        });
    }

    /*
     * Test scenarios
     */

    it("should close the modal when the close function is called", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.close();
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel function is called", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.cancel();
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

    it("should start at the step provided", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(1);

        // arrange
        global_step = 2;
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(2);
    });

    it("should goto different steps", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var step;
        step = 2;
        data_upload_ctrl_scope.goto_step(step);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(step);
    });

    it("disables the 'Name it' button if no text is entered", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(true);
    });
    it("disables the 'Name it' button if no text is entered, then cleared",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.dataset.name = undefined;
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(true);
    });
    it("enables the 'Name it' button if text is entered", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.dataset.name = "my dataset name";
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(false);
    });
    it("should show an alert if the dataset name is already in use",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.create_dataset("fail");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.alert).toBe(true);
    });
    it("should not show an alert if the dataset name is not already in use",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.create_dataset("my shiny new dataset");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.alert).toBe(false);
    });
    it("after creating a dataset, stores the dataset id", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var ds_name = "my shiny new dataset";
        data_upload_ctrl_scope.create_dataset(ds_name);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.id).toBe(3);
        expect(data_upload_ctrl_scope.dataset.name).toBe(ds_name);
    });
    it("after uploading a file, stores the file id", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var message, filename;
        message = "upload_complete";
        filename = "file1.csv";

        // act
        data_upload_ctrl_scope.uploaderfunc(message, {
            filename: filename,
            file_id: 20140313
        });
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.import_file_id).toBe(20140313);
    });
    it("should show an invalid extension alert if a file with an invalid" +
        "extension is loaded", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.uploaderfunc("invalid_extension");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.invalid_extension_alert)
            .toBe(true);
    });
    it("should hide the upload button after the user selects a file",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename;
        message = "upload_submitted";
        filename = "file1.csv";

        // act
        data_upload_ctrl_scope.uploaderfunc(message, {filename: filename});
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.filename).toBe(filename);
        expect(data_upload_ctrl_scope.uploader.in_progress).toBe(true);
    });
    it("should show the progressbar during upload",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename, progress;
        message = "upload_in_progress";
        filename = "file1.csv";
        progress = {
            loaded: 10,
            total: 100
        };

        // act
        data_upload_ctrl_scope.uploaderfunc(message, filename, progress);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.in_progress).toBe(true);
        expect(data_upload_ctrl_scope.uploader.progress).toBe(2.5);
    });
    it("should start saving the energy data when the file has been uploaded",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename;
        message = "upload_complete";
        filename = "file1.csv";
        data_upload_ctrl_scope.step.number = 4;

        // act
        data_upload_ctrl_scope.uploaderfunc(message, filename);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.status_message)
            .toBe("saving energy data");
    });

    it("should take an dataset payload", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.name).toBe("");
        expect(data_upload_ctrl_scope.dataset.filename).toBe("");
        expect(data_upload_ctrl_scope.dataset.id).toBe(0);
    });

    it("should extend a custom dataset payload", function() {
        // arrange
        global_dataset = {
            id: 100,
            filename: "seed_data.csv",
            name: "Compliance Project"
        };
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.name).toBe("Compliance Project");
        expect(data_upload_ctrl_scope.dataset.filename).toBe("seed_data.csv");
        expect(data_upload_ctrl_scope.dataset.id).toBe(100);
        expect(data_upload_ctrl_scope.dataset.alert).toBe(false);

    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: dataset_detail_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, ngFilter, delete_called;
    var dataset_detail_ctrl, dataset_detail_ctrl_scope, modalInstance, labels;

    

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, dataset_service, $filter) {
            controller = $controller;
            scope = $rootScope;
            ngFilter = $filter;
            dataset_detail_ctrl_scope = $rootScope.$new();
            modal_state = "";
            delete_called = false;

            // mock the dataset_service factory methods used in the controller
            // and return their promises
            mock_dataset_service = dataset_service;
            spyOn(mock_dataset_service, "get_dataset")
                .andCallFake(function(dataset_id){
                    // return $q.reject for error scenario
                    var fake_importfiles = [
                        {
                            name: "DC_CoveredBuildings_50k.csv",
                            number_of_buildings: 511,
                            number_of_mappings: 511,
                            number_of_cleanings: 1349,
                            source_type: "Assessed Raw",
                            number_of_matchings: 403
                        },
                        {
                            name: "DC_ESPM_Report.csv",
                            number_of_buildings: 511,
                            number_of_matchings: 403,
                            source_type: "Portfolio Raw"
                        }
                    ];
                    var fake_dataset = {
                        name: "DC 2013 data",
                        last_modified: (new Date()).getTime(),
                        last_modified_by: "john.s@buildingenergy.com",
                        number_of_buildings: 89,
                        id: 1,
                        importfiles: fake_importfiles
                    };
                    var fake_payload = {
                        "status": "success",
                        "dataset": fake_dataset
                    };
                    if (delete_called) {
                        fake_payload.dataset.importfiles.pop();
                    }
                    console.log({delete_called: delete_called, ds: fake_payload});
                    return $q.when(fake_payload);
                }
            );

            spyOn(mock_dataset_service, "delete_file")
                .andCallFake(function(import_file){
                    delete_called = true;
                    console.log({d: "delete_called"});
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_detail_controller(){
        var fake_importfiles = [
            {
                name: "DC_CoveredBuildings_50k.csv",
                number_of_buildings: 511,
                number_of_mappings: 511,
                number_of_cleanings: 1349,
                source_type: "Assessed Raw",
                number_of_matchings: 403
            },
            {
                name: "DC_ESPM_Report.csv",
                number_of_buildings: 511,
                number_of_matchings: 403,
                source_type: "Portfolio Raw"
            }
        ];
        var fake_dataset = {
            name: "DC 2013 data",
            last_modified: (new Date()).getTime(),
            last_modified_by: "john.s@buildingenergy.com",
            number_of_buildings: 89,
            id: 1,
            importfiles: fake_importfiles
        };
        var fake_payload = {
            "status": "success",
            "dataset": fake_dataset
        };
        dataset_detail_ctrl = controller('dataset_detail_controller', {
            $scope: dataset_detail_ctrl_scope,
            dataset_payload: fake_payload
        });
    }

    /*
     * Test scenarios
     */

    it("should have an data set payload with import files", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        dataset_detail_ctrl_scope.$digest();

        // assertions
        expect(dataset_detail_ctrl_scope.dataset.importfiles.length).toBe(2);
    });

    it("should show an alert when the delete icon is clicked", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        dataset_detail_ctrl_scope.$digest();
        var importfiles = dataset_detail_ctrl_scope.dataset.importfiles;
        dataset_detail_ctrl_scope.delete_file(importfiles[0]);
        dataset_detail_ctrl_scope.$digest();

        // assertions
        expect(dataset_detail_ctrl_scope.dataset.importfiles.length).toBe(1);
    });
   
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: dataset_list_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, modal_state;
    var edit_ctrl, dataset_list_ctrl_scope, modalInstance, labels;
    var location;

    

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, uploader_service,
            $location) {
            controller = $controller;
            scope = $rootScope;
            dataset_list_ctrl_scope = $rootScope.$new();
            modal_state = "";
            location = $location;

            // mock the uploader_service factory methods used in the controller
            // and return their promises
            mock_uploader_service = uploader_service;
            spyOn(mock_uploader_service, "get_AWS_creds")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "AWS_CLIENT_ACCESS_KEY": "123",
                            "AWS_UPLOAD_BUCKET_NAME": "test-bucket"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "create_dataset")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "import_record_id": 3,
                                "import_record_name": dataset_name

                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error",
                                "message": "name already in use"
                            }
                        );
                    }
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_list_controller(){
        var fake_datasets_payload = {
            "status": "success",
            "datasets": [
                {
                    name: "DC 2013 data",
                    last_modified: (new Date()).getTime(),
                    last_modified_by: "john.s@buildingenergy.com",
                    number_of_buildings: 89
                },
                {
                    name: "DC 2014 data",
                    last_modified: (new Date()).getTime() -
                        1550 * 60 * 60 * 1000,
                    last_modified_by: "gavin.m@buildingenergy.com",
                    number_of_buildings: 70
                }
            ]
        };
        edit_ctrl = controller('dataset_list_controller', {
            $scope: dataset_list_ctrl_scope,
            datasets_payload: fake_datasets_payload
        });
    }

    /*
     * Test scenarios
     */

    it("should have a dataset_payload", function() {
        // arrange
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();

        // assertions
        expect(dataset_list_ctrl_scope.datasets.length).toEqual(2);
    });

    it("should disable the mapping button if the dataset has no" +
        " Assessor files", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Portfolio Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_assessor_files(dataset);

        // assertions
        expect(disabled).toEqual(true);
    });

    it("should enable the mapping button if the dataset has at least one" +
        " Assessor file", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_assessor_files(dataset);

        // assertions
        expect(disabled).toEqual(false);
    });
    it("should disable the matching button if the dataset has no" +
        " Portfolio Manger files", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Assessed Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_pm_files(dataset);

        // assertions
        expect(disabled).toEqual(true);
    });
    it("should enable the matching button if the dataset has at least one" +
        " Portfolio Manger file", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_pm_files(dataset);

        // assertions
        expect(disabled).toEqual(false);
    });
    it("should navigate to the mapping page of the first assessed" +
        " import file when the ``Mapping`` button is clicked", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Assessed Raw",
                    id: 3
                },
                {
                    source_type: "Assessed Raw",
                    id: 5
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        dataset_list_ctrl_scope.goto_mapping(dataset);

        // assertions
        expect(location.path()).toBe('/data/mapping/3');
    });
    it("should navigate to the matching page of the first Portfolio Manager" +
        " import file when the ``Matching`` button is clicked", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw",
                    id: 3
                },
                {
                    source_type: "Portfolio Raw",
                    id: 5
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        dataset_list_ctrl_scope.goto_matching(dataset);

        // assertions
        expect(location.path()).toBe('/data/matching/3');
    });

   
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: delete_modal_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, building_services, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        // mock the export_service factory methods used in the controller
        // and return their promises
        mock_building_services = building_services;
        spyOn(mock_building_services, "delete_buildings")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_delete_modal_controller(){
        ctrl = ctrl('delete_modal_controller', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            search: { 
                selected_buildings: [1,2],
                filter_params: {},
                select_all_checkbox: false,
                order_by: "",
                sort_reverse: false,
                number_matching_search: 1000
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should start at the delete page", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.delete_state).toEqual("delete"); 
    });
    it("should save the search paramaters",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.delete_payload;
        expect(b.selected_buildings).toEqual([1,2]);
        expect(b.filter_params).toEqual({});
        expect(b.order_by).toEqual("");
        expect(b.sort_reverse).toEqual(false);
        expect(b.select_all_checkbox).toEqual(false);
    });
    it("should delete when the delete button is clicked",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.delete_buildings();

        // assertions
        expect(ctrl_scope.delete_state).toEqual("prepare");
        expect(mock_building_services.delete_buildings).toHaveBeenCalled();
    });
    it("should show the success page when the delete is finished",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.delete_buildings();
        ctrl_scope.$digest();

        // assertions
        expect(mock_building_services.delete_buildings).toHaveBeenCalled();
        expect(ctrl_scope.delete_state).toEqual("success");
    });
    it("should show the number of buildings to be deleted",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        var number_to_delete = ctrl_scope.number_to_delete();

        // assertions
        expect(number_to_delete).toEqual(2);
    });
    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.close();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.cancel();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

  
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myDistrictApp = angular.module('myDistrictApp', ['district']);

describe("The district filter", function() {
    beforeEach(module('myDistrictApp'));
    it('replaces `district` with `County/District/Ward/Borough`',
        inject(function(districtFilter) {
            // normal cases
            expect(districtFilter('district')).toBe('County/District/Ward/Borough');
            expect(districtFilter('District')).toBe('County/District/Ward/Borough');
            expect(districtFilter('DistRict')).toBe('County/District/Ward/Borough');
            expect(districtFilter('DISTRICT')).toBe('County/District/Ward/Borough');
            expect(districtFilter('aDISTRICT')).toBe('aDISTRICT');
            expect(districtFilter('')).toBe('');
            expect(districtFilter('district ')).toBe('district ');
            expect(districtFilter('ok')).toBe('ok');
            expect(districtFilter(undefined)).toBe(undefined);
            expect(districtFilter(null)).toBe(null);
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: edit_label_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, modal_state;
    var edit_ctrl, edit_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label;
    var return_labels = [
        {
            "name": 'compliant',
            "color": 'green',
            "id": 1
        },
        {
            "name": "new label",
            "color": "blue",
            "id": 2
        }
    ];

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, urls, $q, project_service) {
        controller = $controller;
        scope = $rootScope;
        edit_ctrl_scope = $rootScope.$new();
        modal_state = "";

        // mock the project_service factory methods used in the controller
        // and return their promises
        mock_project_service = project_service;
        spyOn(mock_project_service, "get_labels")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success", "labels": return_labels});
            }
        );
        spyOn(mock_project_service, "add_label")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
        spyOn(mock_project_service, "delete_label")
            .andCallFake(function(label){
                deleted_label = label;
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
        spyOn(mock_project_service, "update_label")
            .andCallFake(function(label){
                updated_label = label;
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );

    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_edit_modal_controller(){
        var labels = [
            {
                "name": 'compliant',
                "color": 'green',
                "id": 1
            }
        ];

        edit_ctrl = controller('edit_label_modal_ctrl', {
            $scope: edit_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            labels: labels
        });
    }

    /*
     * Test scenarios
     */

    it("should initialize the default label", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.$digest();
        edit_ctrl_scope.initialize_label_modal();

        // assertions
        expect(edit_ctrl_scope.label_modal.color).toBe("gray");
        expect(edit_ctrl_scope.label_modal.label).toBe("default");
        expect(edit_ctrl_scope.label_modal.name).toBe("");
        expect(edit_ctrl_scope.modal.label.state).toBe("create");
    });

    it("should get the labels available to an organization", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.add_label({});  // calls private get_labels
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.labels.length).toBe(2);
    });

    it("should add a label in the user's organization", function() {
        // arrange
        create_edit_modal_controller();
        var label_to_add = {
            color: "blue",
            label: "primary",
            name: "new label"
        };

        // act
        edit_ctrl_scope.add_label(label_to_add);
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.labels.length).toBe(2);
        expect(edit_ctrl_scope.labels[1].color).toBe("blue");
        expect(edit_ctrl_scope.labels[1].name).toBe("new label");
    });

    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.close();
        edit_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.cancel();
        edit_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

    it("sets the label_modal to the label when its edit button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.edit_label(label);
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.label_modal.color).toBe(label.color);
        expect(edit_ctrl_scope.label_modal.name).toBe(label.name);
        expect(edit_ctrl_scope.modal.label.state).toBe("edit");

        // assert that edit_ctrl_scope.label_modal is a copy and not a reference to label
        edit_ctrl_scope.label_modal.name = "random name here";
        expect(edit_ctrl_scope.label_modal.name).not.toBe(label.name);
    });
    
    it("deletes the appropriate label when the delete button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.delete_label(label);
        edit_ctrl_scope.$digest();

        // assertions
        expect(deleted_label).toBe(label);
    });

    it("updates the appropriate label when the update label button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.edit_label(label);
        edit_ctrl_scope.$digest();
        edit_ctrl_scope.label_modal.name = "harry";
        edit_ctrl_scope.label_modal.color = "blue";
        edit_ctrl_scope.update_label(edit_ctrl_scope.label_modal);
        edit_ctrl_scope.$digest();

        // assertions
        expect(mock_project_service.update_label).toHaveBeenCalledWith(edit_ctrl_scope.label_modal);
        expect(updated_label).toBe(edit_ctrl_scope.label_modal);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: export_modal_controller", function(){
    // globals set up and used in each test scenario
    var mock_export_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, export_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        // mock the export_service factory methods used in the controller
        // and return their promises
        mock_export_service = export_service;
        spyOn(mock_export_service, "export_buildings")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success", "export_id": "123456"});
            }
        );
        spyOn(mock_export_service, "export_buildings_progress")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({
                    "status": "success",
                    "buildings_processed": 1000
                });
            }
        );
            spyOn(mock_export_service, "export_buildings_download")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({
                    "status": "success",
                    "url": "#"
                });
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_export_modal_controller(){
        ctrl = ctrl('export_modal_controller', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            search: { 
                selected_buildings: [],
                filter_params: {},
                select_all_checkbox: false,
                order_by: "",
                sort_reverse: false,
                number_matching_search: 1000
            },
            selected_fields: ['tax_lot_id', 'postal_code'],
            project: {
                id: 11
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should start at the create page", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.export_state).toEqual("create"); 
    });
    it("should start with an empty name and default file type of 'xls'",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.building_export;
        expect(b.export_name).toEqual("");
        expect(b.export_type).toEqual("xls");
    });
    it("should save the search paramaters",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.building_export;
        expect(b.selected_buildings).toEqual([]);
        expect(b.filter_params).toEqual({});
        expect(b.order_by).toEqual("");
        expect(b.sort_reverse).toEqual(false);
        expect(b.select_all_checkbox).toEqual(false);
        expect(b.selected_fields).toEqual(['tax_lot_id', 'postal_code']);
        expect(b.project_id).toEqual(11);
        expect(ctrl_scope.progress_denominator).toEqual(0);
    });
    it("should kick off the export process when the export button is clicked",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.export_buildings();

        // assertions
        expect(ctrl_scope.export_state).toEqual("prepare");
        expect(mock_export_service.export_buildings).toHaveBeenCalled();
    });
    it("should show the success page when the data is ready",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.show_success_page("123");
        ctrl_scope.$digest();

        // assertions
        expect(mock_export_service.export_buildings_download).toHaveBeenCalled();
        expect(ctrl_scope.export_state).toEqual("success");
    });
    it("should update the progress bar",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.monitor_progress("123", 1000);
        ctrl_scope.$digest();
        timeout.flush();

        // assertions
        expect(mock_export_service.export_buildings_progress).toHaveBeenCalled();
        expect(ctrl_scope.progress_percentage).toEqual(100);
        expect(ctrl_scope.progress_numerator).toEqual(1000);
        expect(ctrl_scope.progress_denominator).toEqual(1000);
    });
    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.close();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.cancel();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

  
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
/**
 * tests fromNow angularjs filter wrapper of moment.js
 * uses epoch milliseconds as that is what the back-end returns
 */

// create dummy angularJS app to attach filter(s)
var myfromNowFilterApp = angular.module('myfromNowFilterApp', ['fromNow']);

describe("The fromNow filter", function() {
    beforeEach(module('myfromNowFilterApp'));

    it('shows the present time as "a few seconds ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('a few seconds ago');
        })
    );

    it('shows 5 minutes ago as "5 minutes ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 5  * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('5 minutes ago');
        })
    );

    it('shows 4 hours ago as "4 hours ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 4 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('4 hours ago');
        })
    );

    it('shows 24 hours ago as "a day ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 24 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('a day ago');
        })
    );

    it('shows 36 hours ago as "2 days ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 36 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('2 days ago');
        })
    );

    it('shows 1550 hours ago as "2 months ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 1550 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('2 months ago');
        })
    );

    it('defaults to "a few seconds ago" for undefined values',
        inject(function(fromNowFilter) {
            // arrange

            // act

            // assert
            expect(fromNowFilter(undefined)).toBe('a few seconds ago');
            expect(fromNowFilter(null)).toBe('a few seconds ago');
            expect(fromNowFilter("some text")).toBe('a few seconds ago');
            expect(fromNowFilter({})).toBe('a few seconds ago');
            expect(fromNowFilter({time: "not time"})).toBe('a few seconds ago');
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myignoremapApp = angular.module('myignoremapApp', ['ignoremap']);

describe("The ignoremap filter", function() {
    beforeEach(module('myignoremapApp'));
    it('replaces `""` with `------ Ignore Row ------`',
        inject(function(ignoremapFilter) {
            // normal cases
            expect(ignoremapFilter('')).toBe('------ Ignore Row ------');
            expect(ignoremapFilter(' ')).toBe(' ');
            expect(ignoremapFilter('aignoremap')).toBe('aignoremap');
            expect(ignoremapFilter('ignoremap ')).toBe('ignoremap ');
            expect(ignoremapFilter('ok')).toBe('ok');
            expect(ignoremapFilter(undefined)).toBe('------ Ignore Row ------');
            expect(ignoremapFilter(null)).toBe('------ Ignore Row ------');
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: mapping_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, modal_state;
    var mapping_ctrl, mapping_ctrl_scope, modalInstance, labels;
    var timeout, mock_user_service, mock_search_service;



    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, building_services, $timeout, user_service, search_service) {
            controller = $controller;
            scope = $rootScope;
            mapping_ctrl_scope = $rootScope.$new();
            modal_state = "";
            timeout = $timeout;
            mock_user_service = user_service;
            mock_search_service = search_service;

            spyOn(mock_user_service, 'set_default_columns')
                .andCallFake(function(mapped_columns){
                    return undefined;
                });
            spyOn(mock_search_service, 'search_buildings')
                .andCallFake(function(){
                    return [1,2,3];
                });
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_mapping_controller(){
        var mock_datasets = [
            {
                name: "DC 2013 data",
                last_modified: (new Date()).getTime(),
                last_modified_by: "john.s@buildingenergy.com",
                number_of_buildings: 89,
                id: 1
            },
            {
                name: "DC 2014 data",
                last_modified: (new Date()).getTime() -
                    1550 * 60 * 60 * 1000,
                last_modified_by: "gavin.m@buildingenergy.com",
                number_of_buildings: 70,
                id: 2
            }
        ];
        var fake_import_file_payload = {
            "status": "success",
            "import_file": {
                        file_name: "assessor_fun.csv",
                        last_modified: (new Date()).getTime(),
                        last_modified_by: "john.s@buildingenergy.com",
                        source_type: 'AssessorRaw',
                        dataset: mock_datasets[0],
                        id: 1
                    }
        };

        var mock_be_building_columns = [
            'pm_property_id',
            'property_name',
            'property_notes',
            'tax_lot_id',
            'gross_floor_area',
            'My New non-BEDES field'
        ];

        var mock_be_building_types = {
            'gross_floor_area': {
                unit_type: 'float',
                schema: 'BEDES'
            }
        };

        var mock_mapping_suggestions_payload = {
            'status': 'success',
            'suggested_column_mappings': {
                // key(django model attribute): [csv_header1, ... csv_header3]
                'property id': ['pm_property_id', 89],
                'lot number': ['tax_lot_id' , 54]
            },
            "building_columns": mock_be_building_columns,
            "building_column_types": mock_be_building_types
        };

        var mock_raw_column_names = [
            'property id',
            'property_name',
            'property_notes',
            'lot number',
            'lot size'
        ];

        var mock_first_five_rows = [];
        for (var i=0; i < 4; i++) {
            mock_first_five_rows.push({
                'property id': i,
                'property_name': 'Property ' + i,
                'property_notes': 'Nup.',
                'lot number': i * 2,
                'lot size': 454 * i
            });
        }

        mock_first_five_rows.push({
            'property id': '121L',
            'property_name': 'Inconsistent Property',
            'property_notes': 'N/A',
            'lot number': 'N/A',
            'lot size': 45
        });

        var raw_columns_payload = {
            "status": "success",
            "raw_columns": mock_raw_column_names
        };
        var first_five_rows_payload = {
            "status": "success",
            "first_five_rows": mock_first_five_rows
        };
        mapping_ctrl = controller('mapping_controller', {
            $scope: mapping_ctrl_scope,
            import_file_payload: fake_import_file_payload,
            suggested_mappings_payload: mock_mapping_suggestions_payload,
            raw_columns_payload: raw_columns_payload,
            first_five_rows_payload: first_five_rows_payload,
            all_columns: {fields: []},
            building_services: mock_building_services,
            $timeout: timeout
        });
    }

    /*
     * Test scenarios
     */

    it("should have a import_file_payload", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        expect(mapping_ctrl_scope.import_file.dataset.name).toBe("DC 2013 data");
    });

    it("should show suggested mappings and confidence", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        var raw_columns = mapping_ctrl_scope.raw_columns;
        var first_column = raw_columns[0];

        expect(first_column.confidence).toBe(89);
        expect(first_column.suggestion).toBe("Pm Property Id");
    });

    it("should show 'low', 'med', 'high', or '' confidence text", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        var raw_columns = mapping_ctrl_scope.raw_columns;
        var first_column = raw_columns[0];
        expect(first_column.confidence_text()).toBe("high");
        first_column.confidence = 70;
        expect(first_column.confidence_text()).toBe("med");
        first_column.confidence = 35;
        expect(first_column.confidence_text()).toBe("low");
        delete(first_column.confidence);
        expect(first_column.confidence_text()).toBe("");
    });

    it("should validate initial data", function() {
        create_mapping_controller();
        // act
        mapping_ctrl_scope.$digest();
        // assertions
        angular.forEach(mapping_ctrl_scope.raw_columns, function(rc) {
            if (rc.suggestion !== '' && typeof(rc.suggestion) !== "undefined") {
                expect(rc.validity).toBe('valid');
            }
        });
    });

    it("should invalidate bad suggestions", function() {
        // Simulate a change on the tcm, make it fail.
        create_mapping_controller();
        // act
        mapping_ctrl_scope.$digest();
        // assertions
        //
        // We change the suggested mapping for the "property name" column
        // to "gross_floor_area" (which validates as float) to
        // purposesly cause a failing change.
        mapping_ctrl_scope.raw_columns[1].suggestion = 'gross_floor_area';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[1]);
        expect(mapping_ctrl_scope.raw_columns[1].validity).toBe('invalid');

    });

    it("should set td_class appropriately", function() {
        var tcm;

        create_mapping_controller();

        mapping_ctrl_scope.$digest();
        tcm = mapping_ctrl_scope.raw_columns[0];
        var good_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[0]
        );

        // First raw column is mapped up as pm_property_id <-> property_id
        // Any kind of string will be valid.
        expect(good_val).toBe('success');

        // Now set it to one that expects float values.
        // Only one of these will *not* validate.
        mapping_ctrl_scope.raw_columns[0].suggestion = 'gross_floor_area';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[0]);

        tcm = mapping_ctrl_scope.raw_columns[0];
        var warning_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[4]
        );

        expect(warning_val).toBe('warning');

        // We don't want the warning style to be applied to neighboring cells
        // in the same row. Check that the cell next to our invalid one is
        // unstyled (undefined).
        tcm = mapping_ctrl_scope.raw_columns[0];
        var adjacent_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[3]
        );

        expect(adjacent_val).toBe(undefined);

        // Now we're saying the suggestion is to not map.
        // Check that we don't have any class set for this row now.
        mapping_ctrl_scope.raw_columns[0].suggestion = '';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[0]);

        tcm = mapping_ctrl_scope.raw_columns[0];
        var blank_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[4]
        );

        expect(blank_val).toBe('');

    });

    it("should detect duplicates of mapped rows", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // raw_columns[0] and raw_columns[3] should be the only mapped rows
        var column = mapping_ctrl_scope.raw_columns[3];
        var test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

        // Set the property_name tcm's suggestion to the same as
        // the property_id tcm (raw_columns[0])
        column.suggestion = 'Pm Property Id';

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(true);

        // Since we mark both duplicates as duplicates, the other
        // TCM that has the 'pm_property_id' suggestion should also get
        // 'danger' as its duplicate class.
        var other_dup = mapping_ctrl_scope.is_tcm_duplicate(
            mapping_ctrl_scope.raw_columns[0]
        );
        expect(other_dup).toBe(true);

        // Shows that mapped_row is the sole determinant of
        // column ignoring
        column.mapped_row = false;

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

    });

    it("should ignore duplicates of unmapped rows", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // raw_columns[0] and raw_columns[3] should be the only mapped rows
        var column = mapping_ctrl_scope.raw_columns[1];
        var test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

        // Set the property_name tcm's suggestion to the same as
        // the property_id tcm (raw_columns[0])
        column.suggestion = 'Pm Property Id';

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);
    });

    it("should get mapped buildings", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        mapping_ctrl_scope.get_mapped_buildings();
        mapping_ctrl_scope.$digest();

        // assertions
        expect(mapping_ctrl_scope.search.search_buildings).toHaveBeenCalled();
        expect(mock_user_service.set_default_columns).toHaveBeenCalled();
    });

    it("should enbale the 'show & review buildings' button if duplicates are" +
        " not present", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        for (var i = mapping_ctrl_scope.raw_columns.length - 1; i >= 0; i--) {
            mapping_ctrl_scope.change(mapping_ctrl_scope.raw_columns[i]);
        }
        var duplicates_found = mapping_ctrl_scope.duplicates_present();

        // assertions
        expect(duplicates_found).toBe(false);
    });

    it("should disable the 'show & review buildings' button if duplicates " +
        "are present", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        for (var i = mapping_ctrl_scope.raw_columns.length - 1; i >= 0; i--) {
            mapping_ctrl_scope.raw_columns[i].suggestion = "pm_property_id";
            mapping_ctrl_scope.change(mapping_ctrl_scope.raw_columns[i]);
        }
        var duplicates_found = mapping_ctrl_scope.duplicates_present();

        // assertions
        expect(duplicates_found).toBe(true);
    });

    it("should get mappings in an API friendly way", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();
        var mappings = mapping_ctrl_scope.get_mappings();
        expect(mappings.length).toBe(5);
        expect(mappings[0]).toEqual(['Pm Property Id', 'property id']);
        // everything in between is empty since we we're using only
        // suggested mappings.
        expect(mappings[3]).toEqual(['Tax Lot Id', 'lot number']);
    });

    it("should show the 'STEP 2' tab when reviewing mappings", function() {
        // arrange
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // act
        var mappings = mapping_ctrl_scope.get_mapped_buildings();

        // assert
        expect(mapping_ctrl_scope.tabs).toEqual({
            'one_active': false,
            'two_active': true,
            'three_active': false
        });
    });

    it("should show BEDES fields with a checkbox", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assert
        expect(mapping_ctrl_scope.is_suggestion_BEDES('gross_floor_area')).toBe(true);
        expect(mapping_ctrl_scope.is_suggestion_BEDES('Gross Floor Area')).toBe(true);
        expect(mapping_ctrl_scope.is_suggestion_BEDES('My New non-BEDES field')).toBe(false);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: matching_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, delete_called;
    var matching_ctrl, matching_ctrl_scope, modalInstance, labels;


    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, building_services) {
            controller = $controller;
            scope = $rootScope;
            matching_ctrl_scope = $rootScope.$new();

            mock_building_services = building_services;
            spyOn(mock_building_services, "get_PM_filter_by_counts")
                .andCallFake(function(import_file){
                    return $q.when(
                        {
                            "status": "success",
                            "unmatched": 5,
                            "matched": 10
                        }
                    );
                }
            );
            spyOn(mock_building_services, "save_match")
                .andCallFake(function(b1, b2, create){
                    return $q.when(
                        {
                            "status": "success",
                            "child_id": 3
                        }
                    );
                }
            );
            spyOn(mock_building_services, "search_matching_buildings")
                .andCallFake(function(q, number_per_page, current_page, order_by, sort_reverse, 
                                        filter_params, file_id ){
                    
                    if(filter_params.children__isnull === undefined){                        
                        var bldgs = [
                            {
                                pm_property_id: 1
                            },
                            {
                                pm_property_id: 2
                            }
                            ,
                            {
                                pm_property_id: 3
                            }
                        ];
                    } else if (filter_params.children__isnull === false){
                        var bldgs = [
                            {
                                pm_property_id: 1
                            }
                        ];
                    } else if (filter_params.children__isnull === true){
                        var bldgs = [
                            {
                                pm_property_id: 3
                            },
                            {
                                pm_property_id: 4
                            }
                        ];
                    }

                    return $q.when(
                        {
                            status: "success",
                            number_returned: buildings_payload.length,
                            number_matching_search: buildings_payload.length,
                            buildings: bldgs
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_detail_controller(){
        var buildings_payload = {
            buildings: [
                {
                    pm_property_id: 1,
                    tax_lot_id: null,
                    custom_id_1: 2,
                    gross_floor_area: 111,
                    matched: true,
                    id: 1,
                    children: [3],
                    coparent: {
                        pm_property_id: null,
                        tax_lot_id: 2,
                        custom_id_1: null,
                        gross_floor_area: 111,
                        id: 2,
                        children: [3]
                    }
                }
            ],
            number_matching_search: 1,
            number_returned: 1
        };
        matching_ctrl = controller('matching_controller', {
            $scope: matching_ctrl_scope,
            buildings_payload: buildings_payload,
            all_columns: {
                fields: [{sort_column: 'pm_property_id'}]
            },
            default_columns: {
                columns: ['pm_property_id']
            },
            import_file_payload: {
                import_file: {
                    id: 1,
                    dataset: {
                        importfiles: [
                            {
                                id: 1,
                                name: "file_1.csv"
                            },
                            {
                                id: 2,
                                name: "file_2.csv"
                            }
                        ]
                    }
                }
            }
        });
    }



    /*
     * Test scenarios
     */

    it("should have a buildings payload with potential matches", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();
        var b = matching_ctrl_scope.buildings[0];

        // assertions
        expect(matching_ctrl_scope.buildings.length).toBe(1);
        expect(b.coparent.children).toEqual(b.children);
    });

    it("should provide to the view scope variables representing the number matched and the number of unmatched buildings", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();

        // assertions
        expect(matching_ctrl_scope.matched_buildings).toEqual(10);
        expect(matching_ctrl_scope.unmatched_buildings).toEqual(5);
    });

    it("should jump back to the matching list when the 'Back to list' button" +
        " is clicked", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.show_building_list = false;
        matching_ctrl_scope.back_to_list();

        // assertions
        expect(matching_ctrl_scope.show_building_list).toEqual(true);
    });

    it("should present an initial state with the matching buildings table",
        function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();

        // assertions
        expect(matching_ctrl_scope.columns).toEqual([{ sort_column : 'pm_property_id' }]);
        expect(matching_ctrl_scope.number_matching_search).toEqual(1);
        expect(matching_ctrl_scope.number_returned).toEqual(1);
        expect(matching_ctrl_scope.num_pages).toEqual(1);
        expect(mock_building_services.get_PM_filter_by_counts).toHaveBeenCalled();
    });
    it("should match a building in the matching list", function() {
        // arrange
        create_dataset_detail_controller();
        var b1, b2;
        b2 = {
            id: 2,
            children: [],
            matched: false
        };
        b1 = {
            id: 1,
            children: [],
            matched: true,
            coparent: b2
        };

        // act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.toggle_match(b1);
        matching_ctrl_scope.$digest();

        // assertions
        expect(mock_building_services.save_match).toHaveBeenCalledWith(b1.id, b2.id, true);
        expect(mock_building_services.get_PM_filter_by_counts).toHaveBeenCalled();
        expect(b1.children[0]).toEqual(3);
    });
    it("Should update the list of buildings correctly when 'Show Matched' is selected", function() {
        //arrange
        create_dataset_detail_controller();

        //act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.update_show_filter(controller.SHOW_MATCHED)

        //assertions
        //expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(1);
        expect(matching_ctrl_scope.number_returned).toEqual(1);
    });
    it("Should update the list of buildings correctly when 'Show Unmatched' is selected",  function() {
        //arrange
        create_dataset_detail_controller();

        //act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.update_show_filter(controller.SHOW_UNMATCHED)

        //assertions
        //expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(2);
        expect(matching_ctrl_scope.number_returned).toEqual(2);
    });
    it("Should update the list of buildings correctly when 'Show All' is selected", function() {
        //arrange
        create_dataset_detail_controller();

        //act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.update_show_filter(controller.SHOW_ALL)

        //assertions
        //expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(3);
        expect(matching_ctrl_scope.number_returned).toEqual(3);
    });



});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: members_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller;
    var ctrl, ctrl_scope, modalInstance;
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          $q,
          organization_service) {
            ctrl = $controller;
            scope = $rootScope;
            ctrl_scope = $rootScope.$new();

            mock_organization_service = organization_service;
            
            spyOn(mock_organization_service, "remove_user")
                .andCallFake(function(user_id, org_id){
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
            spyOn(mock_organization_service, "get_organization_users")
                .andCallFake(function(org){
                    return $q.when(
                        {
                            "status": "success",
                            "users": [{id:1, first_name:"Bob", last_name:"D"}]
                        }
                    );
                }
            );
            spyOn(mock_organization_service, "update_role")
                .andCallFake(function(org_id, user_id, role){
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_members_controller(){
        ctrl = ctrl('members_controller', {
            $scope: ctrl_scope,
            users_payload: {users: [
                {first_name: 'J', last_name: 'S'},
                {first_name: undefined, last_name: null}
            ]},
            organization_payload: {
                organization: {name: 'my org', id: 4}
            },
            auth_payload: {
                auth: {
                    'can_invite_member': true,
                    'can_remove_member': true
                }
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should accepts its payload", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.org).toEqual({name : 'my org', id : 4});
        expect(ctrl_scope.users[0].name).toEqual("J S");
        expect(ctrl_scope.users[1].name).toEqual(" ");
    });
    it("clicking remove should remove a user", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.remove_member({user_id: 2});

        // assertions
        expect(mock_organization_service.remove_user)
            .toHaveBeenCalledWith(2, 4);
        
        ctrl_scope.$digest();
        expect(mock_organization_service.get_organization_users)
            .toHaveBeenCalledWith({org_id: 4});
    });
    it("clicking a new role should update the user's role", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.update_role({user_id: 2, role: "viewer"});

        // assertions
        expect(mock_organization_service.update_role)
            .toHaveBeenCalledWith(2, 4, 'viewer');
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: new_member_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_user_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, user_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        mock_user_service = user_service;
        spyOn(mock_user_service, "add")
            .andCallFake(function(user){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_new_member_controller(){
        ctrl = ctrl('new_member_modal_ctrl', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            organization: {organization_id: 1}
        });
    }

    /*
     * Test scenarios
     */

    it("should set the default role to 'member'", function() {
        // arrange
        create_new_member_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.user.role.value).toEqual("member"); 
    });
    it("should call the user service to add a new user to the org",
        function() {
        // arrange
        create_new_member_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.user.first_name = "JB";
        ctrl_scope.user.last_name = "Smooth";
        ctrl_scope.user.email = "jb.smooth@be.com";
        ctrl_scope.submit_form(true);

        // assertions
        expect(mock_user_service.add)
            .toHaveBeenCalledWith({
                first_name: "JB",
                last_name: "Smooth",
                email: "jb.smooth@be.com",
                role: ctrl_scope.roles[0],
                organization: {
                    organization_id: 1
                }
            });
    });
    
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
/**
 * run_jasmine.js: runs the jasmine JS test runner
 */
(function() {
    var jasmineEnv = jasmine.getEnv();
    jasmineEnv.updateInterval = 1000;

    var htmlReporter = new jasmine.HtmlReporter();

    jasmineEnv.addReporter(htmlReporter);

    jasmineEnv.specFilter = function(spec) {
        return htmlReporter.specFilter(spec);
    };

    var currentWindowOnload = window.onload;

    window.onload = function() {
        if (currentWindowOnload) {
        currentWindowOnload();
        }
        execJasmine();
    };
    function execJasmine() {
        jasmineEnv.execute();
    }
})();

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var searchTestApp = angular.module(
    'searchTestApp', ['BE.seed.service.search']
);

describe("The search_service service", function() {
    var saas, httpBackend, test_url;

    beforeEach(function () {
        module("searchTestApp");
        inject(function (search_service, $httpBackend) {
            saas = search_service;
            httpBackend = $httpBackend;
            httpBackend.when("POST", test_url).respond("ok");
        });

    });

    /**
     * sanitize_params tests
     */
    it('removes null and undefined values from filter_params', function () {
        // arrange
        saas.filter_params = {
          'National Median Site Energy Use__gte': 4,
          'National Median Site Energy Use__lte': null,
          'National Median Source EUI__gte': undefined
        };

        // act
        saas.sanitize_params();

        // assert
        expect(saas.filter_params).toEqual({'National Median Site Energy Use__gte': 4});
    });

    /**
     * search_buildings tests
     */
    it('has sane defaults', function() {
        expect(saas.url).toEqual("");
        expect(saas.error_message).toEqual("");
        expect(saas.alert).toEqual(false);
        expect(saas.buildings).toEqual([]);
        expect(saas.current_page).toEqual(1);
        expect(saas.number_per_page).toEqual(10);
        expect(saas.order_by).toEqual("");
        expect(saas.sort_column).toEqual("tax_lot_id");
        expect(saas.sort_reverse).toEqual(false);
        expect(saas.select_all_checkbox).toEqual(false);
        expect(saas.prev_page_disabled).toEqual(true);
        expect(saas.next_page_disabled).toEqual(true);
        expect(saas.num_pages).toEqual(0);
        expect(saas.query).toEqual("");
        expect(saas.showing).toEqual({
            'start': 1,
            'end': 0
        });
    });

    it('search_buildings uses the argument `query`', function() {
        saas.query = "hotels";
        saas.search_buildings("not hotels");

        expect(saas.query).toEqual("not hotels");
    });
    it('filter search resets the current page', function() {
        // arrange
        saas.current_page = 22;
        spyOn(saas, 'search_buildings');

        // act
        saas.filter_search();

        // assert
        expect(saas.current_page).toEqual(1);
        expect(saas.search_buildings).toHaveBeenCalled();
    });

    it('search_buildings function will default to its query if' +
        ' no query is passed as an argument', function() {
        saas.query = "hotels";
        saas.search_buildings();

        expect(saas.query).toEqual("hotels");
    });

    it('search_buildings hits the set url', function() {
        test_url = "/my-search-url";
        saas.url = test_url;
        saas.search_buildings();
        httpBackend.expectPOST(test_url);
        httpBackend.flush();
    });

    it('search_buildings POSTs the query data as `q`', function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.query = "hotel chains";
        saas.number_per_page = 25;
        saas.order_by = "gross_floor_area";
        saas.sort_reverse = true;
        saas.filter_params = {
            project: '2012 data'
        };

        // act
        saas.search_buildings();

        // assert
        httpBackend.expectPOST(test_url,
            {
                "q": "hotel chains",
                "number_per_page": 25,
                "order_by": "gross_floor_area",
                "sort_reverse": true,
                "filter_params": {
                    "project": "2012 data"
                },
                "page":1
            }
        ).respond(201, "");
        httpBackend.flush();
    });
    it('search_buildings updates its `buildings` model', function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.query = "hotel chains";
        saas.number_per_page = 25;
        saas.order_by = "gross_floor_area";
        saas.sort_reverse = true;
        saas.filter_params = {
            project: '2012 data'
        };

        // act
        saas.search_buildings();

        // assert
        httpBackend.expectPOST(test_url,
            {
                "q": "hotel chains",
                "number_per_page": 25,
                "order_by": "gross_floor_area",
                "sort_reverse": true,
                "filter_params": {
                    "project": "2012 data"
                },
                "page":1
            }
        ).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        expect(saas.buildings).toEqual([
            {
                name: "one",
                id: 1,
                checked: false
            },
            {
                name: "two",
                id: 2,
                checked: false
            }
        ]);
    });
    it('should clear the error and alert after a successful search',
        function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.error_message = "help";
        saas.alert = true;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {
            'buildings': [
                {
                    name: "one",
                    id: 1
                },
                {
                    name: "two",
                    id: 2
                }],
            'number_matching_search': 101
            });
        httpBackend.flush();

        // assert
        expect(saas.alert).toEqual(false);
        expect(saas.error_message).toEqual("");
    });

    /**
     * pagination tests
     */
    it('increments the page when the `next` button is clicked',
        function() {
        // arrange
        saas.num_pages = 1000;
        saas.current_page = 100;
        spyOn(saas, 'search_buildings');
        // act
        saas.next_page();

        // assert
        expect(saas.current_page).toEqual(101);
        expect(saas.search_buildings).toHaveBeenCalled();
        expect(saas.search_buildings.callCount).toEqual(1);

    });
    it('doesn\'t increment past the last page when the `next` button is' +
        ' clicked', function() {
        // arrange
        saas.num_pages = 2;
        saas.current_page = 2;
        spyOn(saas, 'search_buildings');
        // act
        saas.next_page();

        // assert
        expect(saas.current_page).toEqual(2);
        expect(saas.search_buildings).toHaveBeenCalled();
        expect(saas.search_buildings.callCount).toEqual(1);

    });
    it('decrements the page when the `previous` button is clicked',
        function() {
        // arrange
        saas.num_pages = 1000;
        saas.current_page = 100;
        spyOn(saas, 'search_buildings');
        // act
        saas.prev_page();

        // assert
        expect(saas.current_page).toEqual(99);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('does not decrement below the first page when the `previous` button' +
        ' is clicked', function() {
        // arrange
        saas.num_pages = 1;
        saas.current_page = 1;
        spyOn(saas, 'search_buildings');
        // act
        saas.prev_page();

        // assert
        expect(saas.current_page).toEqual(1);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('fetches more or less results per page when a user selects an option' +
        ' from the number per page select',
        function() {
        // arrange
        saas.number_per_page_options_model = 50;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_number_per_page();

        // assert
        expect(saas.number_per_page).toEqual(50);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('updates the number of results displayed text after a successful '+
        'search', function() {
        // standard case
        // page 2 of 3 with 10/page, so should display 11 of 20
        // arrange
        saas.current_page = 2;
        saas.num_pages = 3;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_start_end_paging();

        // assert
        expect(saas.showing.start).toEqual(11);
        expect(saas.showing.end).toEqual(20);
        expect(saas.search_buildings).not.toHaveBeenCalled();
    });
    it('displays the number matching the query if on the last page of results',
        function() {
        // standard case
        // page 3 of 3 with 10/page and 34 results, so should display 21 of 34
        // arrange
        saas.current_page = 3;
        saas.number_matching_search = 34;
        saas.num_pages = 3;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_start_end_paging();

        // assert
        expect(saas.showing.start).toEqual(21);
        expect(saas.showing.end).toEqual(34);
    });
    it('should call update_start_end_paging after a successful search',
        function() {
        // arrange
        spyOn(saas, 'update_start_end_paging');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_start_end_paging).toHaveBeenCalled();
    });
    it('should call update_buttons after a successful search',
        function() {
        // arrange
        spyOn(saas, 'update_buttons');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_buttons).toHaveBeenCalled();
    });
    it('should disable prev paging buttons at the first page',
        function() {
        // arrange
        saas.current_page = 1;
        saas.num_pages = 5;

        // act
        saas.update_buttons();

        // assert
        expect(saas.prev_page_disabled).toEqual(true);
        expect(saas.next_page_disabled).toEqual(false);
    });
    it('should disable next paging buttons at the last page',
        function() {
        // arrange
        saas.current_page = 5;
        saas.num_pages = 5;

        // act
        saas.update_buttons();

        // assert
        expect(saas.prev_page_disabled).toEqual(false);
        expect(saas.next_page_disabled).toEqual(true);
    });
    it('should calculate the number of pages after a successful search',
        function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {
            'buildings': [
                {
                    name: "one",
                    id: 1
                },
                {
                    name: "two",
                    id: 2
                }],
            'number_matching_search': 101
            });
        httpBackend.flush();

        // assert
        expect(saas.number_matching_search).toEqual(101);
        expect(saas.num_pages).toEqual(11);
    });

    /**
     * checkbox logic tests
     */
    it('should select or unselect all the viewed results when the select all' +
        ' checkbox is checked or unchecked', function() {
        // arrange
        saas.selected_buildings = [1,2,3];
        saas.select_all_checkbox = true;
        saas.buildings = [
            {
                checked: false
            },
            {
                checked: true
            }
        ];
        spyOn(saas, 'select_or_deselect_all_buildings').andCallThrough();

        // act
        saas.select_all_changed();

        // assert
        expect(saas.selected_buildings).toEqual([]);
        expect(saas.buildings).toEqual([
                {
                    checked: true
                },
                {
                    checked: true
                }
            ]);
        expect(saas.select_or_deselect_all_buildings).toHaveBeenCalled();
    });
    it('should call select_or_deselect_all_buildings after a search',
        function() {
        // arrange
        spyOn(saas, 'select_or_deselect_all_buildings');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.select_or_deselect_all_buildings).toHaveBeenCalled();
    });
    it('should add a building to the selected list when checked',
        function() {
        // arrange
        var building = {
            id: 5,
            checked: true
        };

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([5]);
    });
    it('should add a building to the selected list when unchecked and the ' +
        'select all checkbox is checked', function() {
        // arrange
        var building = {
            id: 5,
            checked: false
        };
        saas.select_all_checkbox = true;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([5]);
    });
    it('should remove a building to the selected list when unchecked',
        function() {
        // arrange
        var building = {
            id: 5,
            checked: false
        };
        saas.selected_buildings = [5,6,7];
        saas.select_all_checkbox = false;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([6,7]);
    });
    it('should remove a building to the selected list when checked if the ' +
        'select all checkbox is checked', function() {
        // arrange
        var building = {
            id: 5,
            checked: true
        };
        saas.selected_buildings = [5,6,7];
        saas.select_all_checkbox = true;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([6,7]);
    });
    it('should call load_state_from_selected_buildings after a successful ' +
        'search', function() {
        // arrange
        spyOn(saas, 'load_state_from_selected_buildings').andCallThrough();
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.load_state_from_selected_buildings).toHaveBeenCalled();
    });
    it('should call update_results after a successful ' +
        'search', function() {
        // arrange
        var select_or_deselect_all_buildings_time,
            load_state_from_selected_buildings_time;
        spyOn(saas, 'update_results').andCallThrough();
        spyOn(saas, 'select_or_deselect_all_buildings')
            .andCallFake(function() {
                select_or_deselect_all_buildings_time = new Date();
            }
        );
        spyOn(saas, 'load_state_from_selected_buildings')
            .andCallFake(function() {
                // wait for a sec, otherwise both have the same timestamp
                for(var y=0;y<100000;y++){
                    var x = new Date();
                    x = x+y;
                }
                load_state_from_selected_buildings_time = new Date();
            }
        );
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_results).toHaveBeenCalled();
        expect(select_or_deselect_all_buildings_time <
               load_state_from_selected_buildings_time).toBe(true);
    });
    it('check selected buildings successful', function() {
        // arrange
        saas.selected_buildings = [2];
        saas.buildings = [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ];

        // act
        saas.load_state_from_selected_buildings();

        // assert
        expect(saas.buildings[1]).toEqual({
            name: "two",
            id: 2,
            checked: true
        });
    });
    it('should generate columns', function() {
        // arrange
        var all_columns, column_headers, columns;
        all_columns = [
            {
                sort_column: "name"
            },
            {
                sort_column: "id"
            }
        ];
        column_headers = ["id"];
        saas.sort_column = "something else";
        saas.update_results({});
        // act
        columns = saas.generate_columns(
            all_columns, column_headers, saas.column_prototype
        );

        // assert that columns are extended off the prototype and only have
        // "id"
        expect(columns.length).toEqual(1);
        expect(columns[0].sort_column).toEqual("id");
        expect(columns[0].is_unsorted()).toEqual(true);
        saas.sort_column = "id";
        expect(columns[0].is_unsorted()).toEqual(false);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: settings_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller;
    var ctrl, ctrl_scope, modalInstance;
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          $q,
          organization_service) {
            ctrl = $controller;
            scope = $rootScope;
            ctrl_scope = $rootScope.$new();

            mock_organization_service = organization_service;
            
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_settings_controller(){
        ctrl = ctrl('settings_controller', {
            $scope: ctrl_scope,
            all_columns: {fields: [
                {checked: false, title: 'PM Property ID', sort_column: 'pm_property_id'},
                {checked: false, title: 'G', sort_column: 'g'},
                {checked: false, title: "Gross Floor Area", sort_column: 'gross_floor_area'}
            ]},
            organization_payload: {
                organization: {name: 'my org', id: 4}
            },
            query_threshold_payload: {
                query_threshold: 10
            },
            shared_fields_payload: {
                shared_fields: [
                    {
                        title: "PM Property Id",
                        sort_column: "pm_property_id"
                    }
                ],
                public_fields: [
                {
                    title: "Gross Floor Area",
                    sort_column: "gross_floor_area"
                }]
            },
            auth_payload: {
                auth: {
                    'is_owner': true,
                    'is_parent_org_owner': false
                }
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should accepts its payload", function() {
        // arrange
        create_settings_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.org).toEqual({
            name : 'my org',
            id : 4,
            query_threshold: 10
        });
        expect(ctrl_scope.fields[0].checked).toEqual(true);
        expect(ctrl_scope.fields[1].checked).toEqual(false);
        expect(ctrl_scope.fields[0].title).toEqual('PM Property ID');
    });
    it("should select all", function() {
        // arrange
        create_settings_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.controls.select_all = true;
        ctrl_scope.select_all_clicked();
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.infinite_fields[0].checked).toEqual(true);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myStripFilterApp = angular.module('myStripFilterApp', ['stripImportPrefix']);

describe("The stripImportPrefix filter", function() {
    beforeEach(module('myStripFilterApp'));
    it('Strips out the import prefix from building ids',
        // e.g. remove the 'IMP12-' from the id 'IMP12-1321/123'
        inject(function(stripImportPrefixFilter) {
            // normal cases
            expect(stripImportPrefixFilter('IMP134-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP134555-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP1-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP0-134')).toBe('134');
            // deals with `-`
            expect(stripImportPrefixFilter('IMP134-abc-dev')).toBe('abc-dev');
            // deals with `/`
            expect(stripImportPrefixFilter('IMP134-00/11')).toBe('00/11');
            // only strips first prefix
            expect(stripImportPrefixFilter('IMP134-IMP134-123')).toBe('IMP134-123');
        })
    );
    it("Does not strip out anything if there is not a prefix",
        inject(function(stripImportPrefixFilter) {
            // normal cases
            expect(stripImportPrefixFilter('123-123')).toBe('123-123');
            expect(stripImportPrefixFilter('0123/123')).toBe('0123/123');
        })
    );
    it("Is case sensitive to the import prefix",
        inject(function(stripImportPrefixFilter) {
            expect(stripImportPrefixFilter('imp123-abc')).toBe('imp123-abc');
            expect(stripImportPrefixFilter('iMp123-abc')).toBe('iMp123-abc');
            expect(stripImportPrefixFilter('iMP123-abc')).toBe('iMP123-abc');
        })
    );
    it("Handles undefined or null inputs",
        inject(function(stripImportPrefixFilter) {
            expect(stripImportPrefixFilter(undefined)).toBe(undefined);
            expect(stripImportPrefixFilter(null)).toBe(null);
        })
    );
    it("Only strips out the prefix if it has at least one digit and a hyphen",
        inject(function(stripImportPrefixFilter) {
            // must have the 'IMP' folowed by a digit then a hyphen
            expect(stripImportPrefixFilter('IMP-123')).toBe('IMP-123');
            expect(stripImportPrefixFilter('IMP1123')).toBe('IMP1123');
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myTitleCaseApp = angular.module('myTitleCaseApp', ['titleCase']);

describe("The TitleCase filter", function() {
    beforeEach(module('myTitleCaseApp'));
    it('Strips out ``_`` characters from strings and capitalizes the rest',
        inject(function(titleCaseFilter) {
            // normal cases
            expect(titleCaseFilter('super_data')).toBe('Super Data');
            expect(titleCaseFilter('super_data_45')).toBe('Super Data 45');
            expect(titleCaseFilter(undefined)).toBe(undefined);
            expect(titleCaseFilter(null)).toBe(null);
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myTypedNumberFilterApp = angular.module('myTypedNumberFilterApp', ['typedNumber']);

describe("The typedNumber filter", function() {
    beforeEach(module('myTypedNumberFilterApp'));
    it('should parse strings as strings and return them',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('tester')).toBe('tester');
        })
    );
    it('should parse strings as strings and return them, even if they look like numbers',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.1456')).toBe('123.1456');
        })
    );

    it('should parse numbers as numbers and return them',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.00001', 'number')).toBe("123");
        })
    );

    it('should allow the user to set the number of sig digits',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.321', 'number', 'not_year', 1)).toBe("123.3");
        })
    );

    it('should add commas to number greater than 999',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123456789', 'number', 'not_year', 0)).toBe("123,456,789");
        })
    );

    it('should parse year_built and not add commas',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('1946', 'number', 'year_built', 1)).toBe("1946");
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var validationTestApp = angular.module(
    'validationTestApp', ['mappingValidatorService']
);

describe("The MappingValidatorService", function() {
    var mvs;

    beforeEach(function () {
        module("validationTestApp");
        inject(function (mappingValidatorService) {
            mvs = mappingValidatorService;

        });

    });

    it('validates good string, float and date data', function() {
        // normal cases
        // Here ``type`` is undefined. Should still work.
        var str_data = ['Fun', 'fun2', 'fun3', 'fun4'];
        var float_data = ['12.34', '144.5', '234'];
        var date_data = ['2014/02/02', '03/13/2013', '03-14-2004'];

        expect(mvs.validate(str_data)).toEqual([]);
        expect(mvs.validate(float_data, 'float')).toEqual([]);
        expect(mvs.validate(date_data, 'date')).toEqual([]);
    });

    it('recognizes semivalid data', function() {
        // Cases where the data is /almost/ right.
        var float_data = ['12.34', '144.5', 'NaN'];
        var date_data = ['2014/02/02', 'huh?', '03-14-2004'];
        expect(mvs.validate(float_data, 'float')).toEqual(['NaN']);
        expect(mvs.validate(date_data, 'date')).toEqual(['huh?']);
    });

    it('recognizes invalid data', function() {
        // Cases where the data is *all* wrong.
        var float_data = ['', 'not a float', 'NaN'];
        var date_data = ['', 'huh?', 'what?'];
        // Cases where the data are correct.
        var good_float_data = ['12.34', '144.5', '234'];
        var good_date_data = ['2014/02/02', '03/13/2013', '03-14-2004'];

        // Data is wrong
        expect(mvs.validate(float_data, 'float')).toEqual(float_data);
        expect(mvs.validate(date_data, 'date')).toEqual(date_data);

        // Type is wrong
        // N.B. we use semivalid here, because Date is pretty forgiving w/ nums.
        expect(mvs.validate(good_float_data, 'date')).toEqual(['12.34']);
        expect(mvs.validate(good_date_data, 'float')).toEqual(good_date_data);


    });

});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// taken from the angularjs testing page
// http://docs.angularjs.org/guide/dev_guide.unit-testing

// create dummy angularJS app to attach filter(s)
var myBELabelDirectiveApp = angular.module('myBELabelDirectiveApp', ['beLabel']);

describe("The beLabel directive", function() {
    var $compile;
    var $rootScope;
    beforeEach(module('myBELabelDirectiveApp'));
    // Store references to $rootScope and $compile
    // so they are available to all tests in this describe block
    beforeEach(inject(function(_$compile_, _$rootScope_){
      // The injector unwraps the underscores (_) from around the parameter names when matching
      $compile = _$compile_;
      $rootScope = _$rootScope_;
    }));

    it('Replaces the element with the appropriate content', function() {
        // Compile a piece of HTML containing the directive
        var element = $compile('<be-label name="compliant" color="blue"></be-label>')($rootScope);
        // fire all the watches
        $rootScope.$digest();
        // Check that the compiled element contains the templated content
        expect(element.hasClass('label-primary')).toBe(true);
        expect(element.hasClass('label')).toBe(true);
        expect(element.html()).toContain("compliant");
    });

        // 'red': 'danger',
        // 'gray': 'default',
        // 'orange': 'warning',
        // 'green': 'success',
        // 'blue': 'primary',
        // 'light blue': 'info'
    it('Maps colors to semantic bootstrap class names', function() {
        var element = $compile('<be-label name="compliant" color="red"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-danger')).toBe(true);

        element = $compile('<be-label name="compliant" color="gray"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-default')).toBe(true);

        element = $compile('<be-label name="compliant" color="orange"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-warning')).toBe(true);

        element = $compile('<be-label name="compliant" color="green"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-success')).toBe(true);

        element = $compile('<be-label name="compliant" color="blue"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-primary')).toBe(true);

        element = $compile('<be-label name="compliant" color="light blue"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-info')).toBe(true);
    });


});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// taken from the angularjs testing page
// http://docs.angularjs.org/guide/dev_guide.unit-testing

// create dummy angularJS app to attach filter(s)
var myBEUploaderDirectiveApp = angular.module('myBEUploaderDirectiveApp', ['beUploader']);

describe("The beUploader directive", function() {
    var g_message, g_file, g_progress;
    var $compile;
    var $rootScope;
    var uploader_html = '<div be-uploader sourcetype="assessor" importrecord="5" buttontext="Upload your building list .csv file" eventfunc="uploaderfunc(message, filename, progress)" ng-hide="uploader.in_progress"></div>';
    beforeEach(module('myBEUploaderDirectiveApp'));
    // Store references to $rootScope and $compile
    // so they are available to all tests in this describe block
    beforeEach(inject(function(_$compile_, _$rootScope_){
      // The injector unwraps the underscores (_) from around the parameter names when matching
      $compile = _$compile_;
      $rootScope = _$rootScope_;
      $rootScope.eventfunc = function (fine_object) {
        console.log({fin: fine_object});
        g_message = fine_object.message;
        g_file = fine_object.file;
        g_progress = fine_object.progress;
      };
      window.BE = window.BE || {};
      window.BE.FILE_UPLOAD_DESTINATION = 'S3';
    }));

    it('Creates the fineuploader element', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        
        // act
        $rootScope.$digest();

        // assert
        expect(element.html()).toContain("qq-uploader");
        expect(element.html()).toContain("qq-upload-button");
    });

    it('Contains the buttontext specified', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);

        // act
        $rootScope.$digest();

        // assert
        expect(element.html()).toContain("Upload your building list .csv file");
    });

    it('Only allows one file to be uploaded at a time', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");

        // act
        $rootScope.$digest();

        // assert
        expect(func._options.multiple).toBe(false);
    });

    it('Uses the callback function for invalid file types', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.jpeg");

        // act
        $rootScope.$digest();
        func._options.showMessage("there was an invalid extension. Valid extension(s): .csv");


        // assert
        expect(g_message).toBe("invalid_extension");
    });

    it('Uses the callback function to share its state: upload started',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';
        
        // act
        $rootScope.$digest();
        func._options.callbacks.onSubmitted(1, filename);


        // assert
        expect(g_message).toBe("upload_submitted");
        expect(g_file.filename).toBe(filename);
    });

    it('Uses the callback function to share its state: in progress',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';
        var loaded = 10;
        var total = 100;
        
        // act
        $rootScope.$digest();
        func._options.callbacks.onProgress(1, filename, loaded, total);


        // assert
        expect(g_message).toBe("upload_in_progress");
        expect(g_file.filename).toBe(filename);
        expect(g_progress.loaded).toBe(loaded);
        expect(g_progress.total).toBe(total);
    });

    it('Uses the callback function to share its state: complete',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';

        
        // act
        $rootScope.$digest();
        func._options.callbacks.onComplete(1, filename, {success: true});


        // assert        
        expect(g_message).toBe("upload_complete");
        expect(g_file.filename).toBe(filename);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: building_detail_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, ngFilter, delete_called;
    var building_detail_ctrl, building_detail_ctrl_scope, modalInstance, labels;
    var mock_building_services, mock_project_service;
    var mock_building;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          urls,
          $q,
          building_services,
          project_service,
          $filter) {
            controller = $controller;
            scope = $rootScope;
            ngFilter = $filter;
            building_detail_ctrl_scope = $rootScope.$new();
            modal_state = "";
            delete_called = false;

            // mock the building_services factory methods used in the controller
            // and return their promises
            mock_building_services = building_services;
            mock_project_service = project_service;

            spyOn(mock_project_service, "get_project")
                .andCallFake(function(project_slug){
                    return $q.when(
                        {
                            "status": "success",
                            "project": {
                                id: 33,
                                name: "test project",
                                slug: project_slug
                            }
                        }
                    );
                }
            );
            spyOn(mock_project_service, "get_labels")
                .andCallFake(function(){
                    return $q.when(
                        {
                            "status": "success",
                            "labels": [{
                                id: 44,
                                name: "bad label",
                                color: "red"
                            }]
                        }
                    );
                }
            );
            spyOn(mock_project_service, "update_project_building")
                .andCallFake(function(building_id, project, label){
                    return $q.when(
                        {
                            "status": "success",
                            "approver": "bob doe",
                            "approved_date": "01/01/2012"
                        }
                    );
                }
            );
            spyOn(mock_building_services, "update_building")
                .andCallFake(function (building, org_id){
                    mock_building = building;
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_building_detail_controller(){
        var fake_building = {
            id: 511,
            pk: 511,
            gross_floor_area: 123456,
            gross_floor_area_source: 2,
            city: "DC",
            city_source: 4,
            tax_lot_id: "11/22",
            tax_lot_id_source: 3,
            extra_data: {
                'some other key': 12344,
                'some other key that is not in a parent': 223
            },
            extra_data_sources: {
                'some other key': 2,
                'some other key that is not in a parent': 3
            },
            created: "at some point"
        };
        var fake_imported_buildings = [
            {
                id: 2,
                pk: 2,
                gross_floor_area: 123456,
                gross_floor_area_source: null,
                city: "Washington, DC",
                city_source: null,
                extra_data: {
                    'some other key': 123,
                    'some other key that is not in a child': 333,
                    'some floor area': 444
                },
                extra_data_sources: {
                    'some other key': null,
                    'some other key that is not in a child': 111,
                    'some floor area': 444
                },
                created: "test"
            },
            {
                id: 3,
                pk: 3,
                gross_floor_area: 2111111,
                gross_floor_area_source: null,
                city: "Washington",
                city_source: null,
                tax_lot_id: "11/22",
                tax_lot_id_source: null,
                extra_data: {
                    'make it four': 4
                },
                extra_data_sources: {
                    'make it four': null
                }
            },{
                id: 4,
                pk: 4,
                gross_floor_area: 2111111,
                gross_floor_area_source: null,
                city: "Washington",
                city_source: null,
                tax_lot_id: "11/22",
                tax_lot_id_source: null,
                extra_data: {
                    'make it four': 5
                },
                extra_data_sources: {
                    'make it four': null
                }
            }
        ];
        var fake_payload = {
            "status": "success",
            "building": fake_building,
            "imported_buildings": fake_imported_buildings,
            "projects": [],
            "user_org_id": 42
        };
        var fake_all_columns = [{
            "title": "PM Property ID",
            "sort_column": "pm_property_id",
            "class": "is_aligned_right",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Tax Lot ID",
            "sort_column": "tax_lot_id",
            "class": "is_aligned_right",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Custom ID 1",
            "sort_column": "custom_id_1",
            "class": "is_aligned_right whitespace",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Property Name",
            "sort_column": "property_name",
            "class": "",
            "title_class": "",
            "type": "string",
            "field_type": "building_information",
            "sortable": true,
            "checked": false
        }];
        building_detail_ctrl = controller('building_detail_controller', {
            $scope: building_detail_ctrl_scope,
            $routeParams: {
                building_id: 1,
                project_id: 2
            },
            building_payload: fake_payload,
            all_columns: {
                fields: fake_all_columns
            },
            audit_payload: {
                audit_logs: []
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should have an building payload", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.building.id).toBe(511);
        expect(building_detail_ctrl_scope.imported_buildings[0].id).toBe(2);
    });

    it("should get labels on load", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.labels[0].id).toBe(44);
        expect(building_detail_ctrl_scope.labels[0].name).toBe("bad label");
        expect(building_detail_ctrl_scope.labels[0].color).toBe("red");
    });

    it("should highlight the active project", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.is_active_project({id:33}))
        .toBe(true);
        expect(building_detail_ctrl_scope.is_active_project({id:34}))
        .toBe(false);
        building_detail_ctrl_scope.project = undefined;
        expect(building_detail_ctrl_scope.is_active_project({id:34}))
        .toBe(false);
    });

    it("should make a copy of building while making edits", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.save_building_state();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;

        // assertions
        expect(building_detail_ctrl_scope.building_copy.gross_floor_area)
        .toBe(123456);
    });
    it("should restore the copy of building if a user clicks cancel",
        function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.save_building_state();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;
        building_detail_ctrl_scope.restore_building();

        // assertions
        expect(building_detail_ctrl_scope.building.gross_floor_area)
        .toBe(123456);
        expect(building_detail_ctrl_scope.building.edit_form_showing).toBe(false);
    });
    it("should save a building when a user clicks the save button", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;
        building_detail_ctrl_scope.save_building();

        // assertions
        expect(mock_building_services.update_building)
        .toHaveBeenCalledWith(building_detail_ctrl_scope.building, 42);
        expect(mock_building.gross_floor_area).toEqual(43214);
    });
    it("should show a default label if a building doesn't have one", function() {
        // arrange
        create_building_detail_controller();
        var building_with_label = {
            label: {
                name: "hello",
                label: "success"
            }
        };
        var building_without_label = {};
        var label_with, label_without;

        // act
        building_detail_ctrl_scope.$digest();
        label_with = building_detail_ctrl_scope.get_label(building_with_label);
        label_without = building_detail_ctrl_scope.get_label(building_without_label);

        // assertions
        expect(label_with).toEqual({
                name: "hello",
                label: "success"
            });
        expect(label_without).toEqual({
                name: "Add Label",
                label: "default"
            });
    });

    it("should show a project or buildings breadcrumb", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.user.project_slug = "project_1";

        // assertions
        expect(building_detail_ctrl_scope.is_project()).toEqual(true);
        building_detail_ctrl_scope.user.project_slug = undefined;
        expect(building_detail_ctrl_scope.is_project()).toEqual(false);

    });
    it("should show the default projects table if a user has no compliance" +
        " projects", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.user.has_projects()).toEqual(false);
        building_detail_ctrl_scope.projects = [{id: 1, name: "a"}];
        expect(building_detail_ctrl_scope.user.has_projects()).toEqual(true);

    });

    it("should set only building attribute to master, not ids or children", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.is_valid_key('id')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('pk')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('pk_source')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key(' extra_data ')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('gross_floor_area'))
          .toEqual(true);
    });
    it("should update a project-building label", function() {
        // arrange
        create_building_detail_controller();
        var project = {
            id: 2,
            building: {}
        };

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.update_project_building(project,
            {
                name: "label name",
                color: "red"
            });
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(mock_project_service.update_project_building).toHaveBeenCalled();
        expect(project.building.approver).toEqual("bob doe");
        expect(project.building.approved_date).toEqual("01/01/2012");
        expect(project.building.label.name).toEqual("label name");
        expect(project.building.label.color).toEqual("red");

    });
    it("should set a field as source when clicked", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[0].is_master = true;
        expect(building_detail_ctrl_scope.building.gross_floor_area_source)
          .not.toEqual(building_detail_ctrl_scope.building.id);
        building_detail_ctrl_scope.set_self_as_source('gross_floor_area');
        building_detail_ctrl_scope.set_self_as_source('some other key', true);
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.building.gross_floor_area_source)
          .toEqual(building_detail_ctrl_scope.building.id);
        expect(building_detail_ctrl_scope.imported_buildings[0].is_master)
          .toEqual(false);
    });
    it("should set a column as the dominant source when clicked", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[1].is_master = true;
        building_detail_ctrl_scope.make_source_default(
            building_detail_ctrl_scope.imported_buildings[0]);
        building_detail_ctrl_scope.$digest();

        // assertions
        var b = building_detail_ctrl_scope.building,
            i = building_detail_ctrl_scope.imported_buildings[0],
            i_other = building_detail_ctrl_scope.imported_buildings[1];

        expect(b.gross_floor_area_source).toEqual(i.id);
        expect(b.id).not.toEqual(i.id);
        expect(b.pk).not.toEqual(i.id);
        expect(b.city).toEqual(i.city);
        expect(b.city_source).toEqual(i.id);
        expect(b.tax_lot_id).toEqual("11/22");
        expect(b.tax_lot_id_source).toEqual(i_other.id);
        expect(b.extra_data['some other key']).toEqual(123);
        expect(b.extra_data_sources['some other key']).toEqual(i.id);
        expect(b.extra_data['some other key that is not in a child']).toEqual(333);
        expect(b.extra_data_sources['some other key that is not in a child']).toEqual(i.id);
        expect(b.extra_data['some other key that is not in a parent']).toEqual(223);
        expect(b.extra_data_sources['some other key that is not in a parent']).toEqual(i_other.id);
        expect(b.created).toEqual("at some point");

        expect(i.is_master).toEqual(true);
        expect(i_other.is_master).toEqual(false);
    });
    it("should set the master building value when parent's value is clicked",
        function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[1].is_master = true;
        building_detail_ctrl_scope.set_building_attribute(
            building_detail_ctrl_scope.imported_buildings[0], 'city');
        building_detail_ctrl_scope.set_building_attribute(
            building_detail_ctrl_scope.imported_buildings[0], 'some other key', true);
        building_detail_ctrl_scope.$digest();

        // assertions
        var b = building_detail_ctrl_scope.building,
            i = building_detail_ctrl_scope.imported_buildings[0],
            i_other = building_detail_ctrl_scope.imported_buildings[1];

        expect(b.id).not.toEqual(i.id);
        expect(b.pk).not.toEqual(i.id);
        expect(b.city).toEqual(i.city);
        expect(b.city_source).toEqual(i.id);
        expect(b.tax_lot_id).toEqual("11/22");
        expect(b.tax_lot_id_source).toEqual(i_other.id);
        expect(b.extra_data['some other key']).toEqual(123);
        expect(b.extra_data_sources['some other key']).toEqual(i.id);

        expect(i.is_master).toEqual(false);
        expect(i_other.is_master).toEqual(false);
    });

    it("should display all the data within all the buildings", function() {
        // arrange
        create_building_detail_controller();
        var keys;

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        var edc = building_detail_ctrl_scope.data_columns;

        // should not duplicate keys
        expect(edc.length).toEqual(8);
        keys = edc.map(function ( d ) {
            return d.key;
        });
        expect(keys.indexOf('make it four')).toEqual(4);
    });

    it("should display Floor Areas", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.$digest();

        // assertions
        var area_fields = building_detail_ctrl_scope.floor_area_fields;
        expect(area_fields.length).toEqual(1);
    });

    it("should display Floor Areas with number", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.get_number("")).toEqual(0);
        expect(building_detail_ctrl_scope.get_number("123,123,123")).toEqual(123123123);
        expect(building_detail_ctrl_scope.get_number("123,123,123.123")).toEqual(123123123.123);
        expect(building_detail_ctrl_scope.get_number("-123,123,123")).toEqual(-123123123);
        expect(building_detail_ctrl_scope.get_number(-123123123)).toEqual(-123123123);


    });
});

describe("controller: concat_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var scope, controller, modal_state;
    var edit_ctrl, concat_modal_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label, mock_mapping_service, mock_matching_service;
    var global_step = 1;
    var global_dataset = {};

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
            $controller, $rootScope, $modal, urls, $q
        ) {
            controller = $controller;
            scope = $rootScope;
            concat_modal_ctrl_scope = $rootScope.$new();
            concat_modal_ctrl_scope.concat_columns = [];
            modal_state = "";
        }
    ));

    var mock_building_column_types = [
        'address1', 'city', 'state', 'postal_code'
    ];

    var mock_raw_columns = [
        {
            name: 'Address',
            suggestion: 'address1',
            confidence: 1,
            raw_data: [
                '234 Database way',
                '23444 Huh hwy',
                '23444 Huh hwy',
                '23444 Huh hwy',
                '1223 face pl.'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        },
        {
            name: 'City',
            suggestion: 'city',
            confidence: 1,
            raw_data: [
                'Mega City', 'Mega City', 'Mega City', 'Mega City', 'Mega City'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        },
        {
            name: 'Zip',
            suggestion: '',
            confidence: 0,
            raw_data: [
                '234233', '234233', '234233', '234233', '234233'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        }
    ];

    // this is outside the beforeEach so it can be configured by each unit test
    function create_concat_modal_controller(){
        edit_ctrl = controller('concat_modal_ctrl', {
            $scope: concat_modal_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            building_column_types: mock_building_column_types,
            raw_columns: mock_raw_columns
        });
    }

    /*
     * Test scenarios
     */

    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.close_concat_modal();
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should mangle scope appropriately during concatenation", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(3);

        // arrange
        concat_modal_ctrl_scope.concat_columns =
            concat_modal_ctrl_scope.raw_columns.slice(0);
        concat_modal_ctrl_scope.raw_columns = [];

        // act
        concat_modal_ctrl_scope.$digest();
        concat_modal_ctrl_scope.save_concat();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(1);
        expect(
            concat_modal_ctrl_scope.raw_columns[0].is_concatenated
        ).toEqual(true);
    });

    it("should modify the raw_data of our modified TCM correctly", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(3);

        // arrange
        concat_modal_ctrl_scope.concat_columns =
            concat_modal_ctrl_scope.raw_columns.slice(0);
        concat_modal_ctrl_scope.raw_columns = [];

        // act
        concat_modal_ctrl_scope.$digest();
        concat_modal_ctrl_scope.save_concat();

        var expected_raw = [
            '234 Database way Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '1223 face pl. Mega City 234233'
        ];

        // assertions
        expect(
            concat_modal_ctrl_scope.raw_columns[0].raw_data
        ).toEqual(expected_raw);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: create_organization_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_organization_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, organization_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        mock_organization_service = organization_service;
        spyOn(mock_organization_service, "create_sub_org")
            .andCallFake(function(org, sub_org){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_organization_modal_ctrl(){
        ctrl = ctrl('create_organization_modal_ctrl', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            organization: {organization_id: 1}
        });
    }

    /*
     * Test scenarios
     */

    it("should call the organization service to add a new sub_org",
        function() {
        // arrange
        create_organization_modal_ctrl();

        // act
        ctrl_scope.$digest();
        ctrl_scope.sub_org.name = "my shiny new org";
        ctrl_scope.sub_org.email = "jb.smooth@be.com";
        ctrl_scope.submit_form(true);

        // assertions
        expect(mock_organization_service.create_sub_org)
            .toHaveBeenCalledWith(
                {
                    organization_id: 1
                },
                {
                    name: "my shiny new org",
                    email: "jb.smooth@be.com"
                }
            );
    });
    
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: data_upload_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_uploader_service, scope, controller, modal_state;
    var edit_ctrl, data_upload_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label, mock_mapping_service, mock_matching_service;
    var global_step = 1;
    var global_dataset = {};
    var return_labels = [
        {
            "name": 'compliant',
            "color": 'green',
            "id": 1
        },
        {
            "name": "new label",
            "color": "blue",
            "id": 2
        }
    ];

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, uploader_service, mapping_service, matching_service) {
            controller = $controller;
            scope = $rootScope;
            data_upload_ctrl_scope = $rootScope.$new();
            modal_state = "";

            // mock the uploader_service factory methods used in the controller
            // and return their promises
            mock_uploader_service = uploader_service;
            mock_mapping_service = mapping_service;
            mock_matching_service = matching_service;
            spyOn(mock_uploader_service, "get_AWS_creds")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "AWS_CLIENT_ACCESS_KEY": "123",
                            "AWS_UPLOAD_BUCKET_NAME": "test-bucket"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "check_progress")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "progress": "25.0"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "create_dataset")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "id": 3,
                                "name": dataset_name

                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error",
                                "message": "name already in use"
                            }
                        );
                    }
                }
            );
            spyOn(mock_uploader_service, "save_raw_data")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "file_id": 3
                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error"
                            }
                        );
                    }
                }
            );
            spyOn(mock_mapping_service, "start_mapping")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "file_id": 3
                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error"
                            }
                        );
                    }
                }
            );
            spyOn(mock_matching_service, "start_system_matching")
            .andCallFake(function(file_id){
                // return $q.reject for error scenario
                return $q.when(
                    {
                        "status": "success",
                        "file_id": 3
                    }
                );
            });

        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_data_upload_modal_controller(){
        edit_ctrl = controller('data_upload_modal_ctrl', {
            $scope: data_upload_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            step: global_step,
            dataset: global_dataset
        });
    }

    /*
     * Test scenarios
     */

    it("should close the modal when the close function is called", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.close();
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel function is called", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.cancel();
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

    it("should start at the step provided", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(1);

        // arrange
        global_step = 2;
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(2);
    });

    it("should goto different steps", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var step;
        step = 2;
        data_upload_ctrl_scope.goto_step(step);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(step);
    });

    it("disables the 'Name it' button if no text is entered", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(true);
    });
    it("disables the 'Name it' button if no text is entered, then cleared",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.dataset.name = undefined;
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(true);
    });
    it("enables the 'Name it' button if text is entered", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.dataset.name = "my dataset name";
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(false);
    });
    it("should show an alert if the dataset name is already in use",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.create_dataset("fail");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.alert).toBe(true);
    });
    it("should not show an alert if the dataset name is not already in use",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.create_dataset("my shiny new dataset");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.alert).toBe(false);
    });
    it("after creating a dataset, stores the dataset id", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var ds_name = "my shiny new dataset";
        data_upload_ctrl_scope.create_dataset(ds_name);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.id).toBe(3);
        expect(data_upload_ctrl_scope.dataset.name).toBe(ds_name);
    });
    it("after uploading a file, stores the file id", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var message, filename;
        message = "upload_complete";
        filename = "file1.csv";

        // act
        data_upload_ctrl_scope.uploaderfunc(message, {
            filename: filename,
            file_id: 20140313
        });
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.import_file_id).toBe(20140313);
    });
    it("should show an invalid extension alert if a file with an invalid" +
        "extension is loaded", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.uploaderfunc("invalid_extension");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.invalid_extension_alert)
            .toBe(true);
    });
    it("should hide the upload button after the user selects a file",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename;
        message = "upload_submitted";
        filename = "file1.csv";

        // act
        data_upload_ctrl_scope.uploaderfunc(message, {filename: filename});
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.filename).toBe(filename);
        expect(data_upload_ctrl_scope.uploader.in_progress).toBe(true);
    });
    it("should show the progressbar during upload",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename, progress;
        message = "upload_in_progress";
        filename = "file1.csv";
        progress = {
            loaded: 10,
            total: 100
        };

        // act
        data_upload_ctrl_scope.uploaderfunc(message, filename, progress);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.in_progress).toBe(true);
        expect(data_upload_ctrl_scope.uploader.progress).toBe(2.5);
    });
    it("should start saving the energy data when the file has been uploaded",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename;
        message = "upload_complete";
        filename = "file1.csv";
        data_upload_ctrl_scope.step.number = 4;

        // act
        data_upload_ctrl_scope.uploaderfunc(message, filename);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.status_message)
            .toBe("saving energy data");
    });

    it("should take an dataset payload", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.name).toBe("");
        expect(data_upload_ctrl_scope.dataset.filename).toBe("");
        expect(data_upload_ctrl_scope.dataset.id).toBe(0);
    });

    it("should extend a custom dataset payload", function() {
        // arrange
        global_dataset = {
            id: 100,
            filename: "seed_data.csv",
            name: "Compliance Project"
        };
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.name).toBe("Compliance Project");
        expect(data_upload_ctrl_scope.dataset.filename).toBe("seed_data.csv");
        expect(data_upload_ctrl_scope.dataset.id).toBe(100);
        expect(data_upload_ctrl_scope.dataset.alert).toBe(false);

    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: dataset_detail_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, ngFilter, delete_called;
    var dataset_detail_ctrl, dataset_detail_ctrl_scope, modalInstance, labels;

    

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, dataset_service, $filter) {
            controller = $controller;
            scope = $rootScope;
            ngFilter = $filter;
            dataset_detail_ctrl_scope = $rootScope.$new();
            modal_state = "";
            delete_called = false;

            // mock the dataset_service factory methods used in the controller
            // and return their promises
            mock_dataset_service = dataset_service;
            spyOn(mock_dataset_service, "get_dataset")
                .andCallFake(function(dataset_id){
                    // return $q.reject for error scenario
                    var fake_importfiles = [
                        {
                            name: "DC_CoveredBuildings_50k.csv",
                            number_of_buildings: 511,
                            number_of_mappings: 511,
                            number_of_cleanings: 1349,
                            source_type: "Assessed Raw",
                            number_of_matchings: 403
                        },
                        {
                            name: "DC_ESPM_Report.csv",
                            number_of_buildings: 511,
                            number_of_matchings: 403,
                            source_type: "Portfolio Raw"
                        }
                    ];
                    var fake_dataset = {
                        name: "DC 2013 data",
                        last_modified: (new Date()).getTime(),
                        last_modified_by: "john.s@buildingenergy.com",
                        number_of_buildings: 89,
                        id: 1,
                        importfiles: fake_importfiles
                    };
                    var fake_payload = {
                        "status": "success",
                        "dataset": fake_dataset
                    };
                    if (delete_called) {
                        fake_payload.dataset.importfiles.pop();
                    }
                    console.log({delete_called: delete_called, ds: fake_payload});
                    return $q.when(fake_payload);
                }
            );

            spyOn(mock_dataset_service, "delete_file")
                .andCallFake(function(import_file){
                    delete_called = true;
                    console.log({d: "delete_called"});
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_detail_controller(){
        var fake_importfiles = [
            {
                name: "DC_CoveredBuildings_50k.csv",
                number_of_buildings: 511,
                number_of_mappings: 511,
                number_of_cleanings: 1349,
                source_type: "Assessed Raw",
                number_of_matchings: 403
            },
            {
                name: "DC_ESPM_Report.csv",
                number_of_buildings: 511,
                number_of_matchings: 403,
                source_type: "Portfolio Raw"
            }
        ];
        var fake_dataset = {
            name: "DC 2013 data",
            last_modified: (new Date()).getTime(),
            last_modified_by: "john.s@buildingenergy.com",
            number_of_buildings: 89,
            id: 1,
            importfiles: fake_importfiles
        };
        var fake_payload = {
            "status": "success",
            "dataset": fake_dataset
        };
        dataset_detail_ctrl = controller('dataset_detail_controller', {
            $scope: dataset_detail_ctrl_scope,
            dataset_payload: fake_payload
        });
    }

    /*
     * Test scenarios
     */

    it("should have an data set payload with import files", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        dataset_detail_ctrl_scope.$digest();

        // assertions
        expect(dataset_detail_ctrl_scope.dataset.importfiles.length).toBe(2);
    });

    it("should show an alert when the delete icon is clicked", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        dataset_detail_ctrl_scope.$digest();
        var importfiles = dataset_detail_ctrl_scope.dataset.importfiles;
        dataset_detail_ctrl_scope.delete_file(importfiles[0]);
        dataset_detail_ctrl_scope.$digest();

        // assertions
        expect(dataset_detail_ctrl_scope.dataset.importfiles.length).toBe(1);
    });
   
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: dataset_list_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, modal_state;
    var edit_ctrl, dataset_list_ctrl_scope, modalInstance, labels;
    var location;

    

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, uploader_service,
            $location) {
            controller = $controller;
            scope = $rootScope;
            dataset_list_ctrl_scope = $rootScope.$new();
            modal_state = "";
            location = $location;

            // mock the uploader_service factory methods used in the controller
            // and return their promises
            mock_uploader_service = uploader_service;
            spyOn(mock_uploader_service, "get_AWS_creds")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "AWS_CLIENT_ACCESS_KEY": "123",
                            "AWS_UPLOAD_BUCKET_NAME": "test-bucket"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "create_dataset")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "import_record_id": 3,
                                "import_record_name": dataset_name

                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error",
                                "message": "name already in use"
                            }
                        );
                    }
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_list_controller(){
        var fake_datasets_payload = {
            "status": "success",
            "datasets": [
                {
                    name: "DC 2013 data",
                    last_modified: (new Date()).getTime(),
                    last_modified_by: "john.s@buildingenergy.com",
                    number_of_buildings: 89
                },
                {
                    name: "DC 2014 data",
                    last_modified: (new Date()).getTime() -
                        1550 * 60 * 60 * 1000,
                    last_modified_by: "gavin.m@buildingenergy.com",
                    number_of_buildings: 70
                }
            ]
        };
        edit_ctrl = controller('dataset_list_controller', {
            $scope: dataset_list_ctrl_scope,
            datasets_payload: fake_datasets_payload
        });
    }

    /*
     * Test scenarios
     */

    it("should have a dataset_payload", function() {
        // arrange
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();

        // assertions
        expect(dataset_list_ctrl_scope.datasets.length).toEqual(2);
    });

    it("should disable the mapping button if the dataset has no" +
        " Assessor files", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Portfolio Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_assessor_files(dataset);

        // assertions
        expect(disabled).toEqual(true);
    });

    it("should enable the mapping button if the dataset has at least one" +
        " Assessor file", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_assessor_files(dataset);

        // assertions
        expect(disabled).toEqual(false);
    });
    it("should disable the matching button if the dataset has no" +
        " Portfolio Manger files", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Assessed Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_pm_files(dataset);

        // assertions
        expect(disabled).toEqual(true);
    });
    it("should enable the matching button if the dataset has at least one" +
        " Portfolio Manger file", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_pm_files(dataset);

        // assertions
        expect(disabled).toEqual(false);
    });
    it("should navigate to the mapping page of the first assessed" +
        " import file when the ``Mapping`` button is clicked", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Assessed Raw",
                    id: 3
                },
                {
                    source_type: "Assessed Raw",
                    id: 5
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        dataset_list_ctrl_scope.goto_mapping(dataset);

        // assertions
        expect(location.path()).toBe('/data/mapping/3');
    });
    it("should navigate to the matching page of the first Portfolio Manager" +
        " import file when the ``Matching`` button is clicked", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw",
                    id: 3
                },
                {
                    source_type: "Portfolio Raw",
                    id: 5
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        dataset_list_ctrl_scope.goto_matching(dataset);

        // assertions
        expect(location.path()).toBe('/data/matching/3');
    });

   
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: delete_modal_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, building_services, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        // mock the export_service factory methods used in the controller
        // and return their promises
        mock_building_services = building_services;
        spyOn(mock_building_services, "delete_buildings")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_delete_modal_controller(){
        ctrl = ctrl('delete_modal_controller', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            search: { 
                selected_buildings: [1,2],
                filter_params: {},
                select_all_checkbox: false,
                order_by: "",
                sort_reverse: false,
                number_matching_search: 1000
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should start at the delete page", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.delete_state).toEqual("delete"); 
    });
    it("should save the search paramaters",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.delete_payload;
        expect(b.selected_buildings).toEqual([1,2]);
        expect(b.filter_params).toEqual({});
        expect(b.order_by).toEqual("");
        expect(b.sort_reverse).toEqual(false);
        expect(b.select_all_checkbox).toEqual(false);
    });
    it("should delete when the delete button is clicked",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.delete_buildings();

        // assertions
        expect(ctrl_scope.delete_state).toEqual("prepare");
        expect(mock_building_services.delete_buildings).toHaveBeenCalled();
    });
    it("should show the success page when the delete is finished",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.delete_buildings();
        ctrl_scope.$digest();

        // assertions
        expect(mock_building_services.delete_buildings).toHaveBeenCalled();
        expect(ctrl_scope.delete_state).toEqual("success");
    });
    it("should show the number of buildings to be deleted",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        var number_to_delete = ctrl_scope.number_to_delete();

        // assertions
        expect(number_to_delete).toEqual(2);
    });
    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.close();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.cancel();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

  
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myDistrictApp = angular.module('myDistrictApp', ['district']);

describe("The district filter", function() {
    beforeEach(module('myDistrictApp'));
    it('replaces `district` with `County/District/Ward/Borough`',
        inject(function(districtFilter) {
            // normal cases
            expect(districtFilter('district')).toBe('County/District/Ward/Borough');
            expect(districtFilter('District')).toBe('County/District/Ward/Borough');
            expect(districtFilter('DistRict')).toBe('County/District/Ward/Borough');
            expect(districtFilter('DISTRICT')).toBe('County/District/Ward/Borough');
            expect(districtFilter('aDISTRICT')).toBe('aDISTRICT');
            expect(districtFilter('')).toBe('');
            expect(districtFilter('district ')).toBe('district ');
            expect(districtFilter('ok')).toBe('ok');
            expect(districtFilter(undefined)).toBe(undefined);
            expect(districtFilter(null)).toBe(null);
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: edit_label_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, modal_state;
    var edit_ctrl, edit_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label;
    var return_labels = [
        {
            "name": 'compliant',
            "color": 'green',
            "id": 1
        },
        {
            "name": "new label",
            "color": "blue",
            "id": 2
        }
    ];

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, urls, $q, project_service) {
        controller = $controller;
        scope = $rootScope;
        edit_ctrl_scope = $rootScope.$new();
        modal_state = "";

        // mock the project_service factory methods used in the controller
        // and return their promises
        mock_project_service = project_service;
        spyOn(mock_project_service, "get_labels")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success", "labels": return_labels});
            }
        );
        spyOn(mock_project_service, "add_label")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
        spyOn(mock_project_service, "delete_label")
            .andCallFake(function(label){
                deleted_label = label;
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
        spyOn(mock_project_service, "update_label")
            .andCallFake(function(label){
                updated_label = label;
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );

    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_edit_modal_controller(){
        var labels = [
            {
                "name": 'compliant',
                "color": 'green',
                "id": 1
            }
        ];

        edit_ctrl = controller('edit_label_modal_ctrl', {
            $scope: edit_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            labels: labels
        });
    }

    /*
     * Test scenarios
     */

    it("should initialize the default label", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.$digest();
        edit_ctrl_scope.initialize_label_modal();

        // assertions
        expect(edit_ctrl_scope.label_modal.color).toBe("gray");
        expect(edit_ctrl_scope.label_modal.label).toBe("default");
        expect(edit_ctrl_scope.label_modal.name).toBe("");
        expect(edit_ctrl_scope.modal.label.state).toBe("create");
    });

    it("should get the labels available to an organization", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.add_label({});  // calls private get_labels
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.labels.length).toBe(2);
    });

    it("should add a label in the user's organization", function() {
        // arrange
        create_edit_modal_controller();
        var label_to_add = {
            color: "blue",
            label: "primary",
            name: "new label"
        };

        // act
        edit_ctrl_scope.add_label(label_to_add);
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.labels.length).toBe(2);
        expect(edit_ctrl_scope.labels[1].color).toBe("blue");
        expect(edit_ctrl_scope.labels[1].name).toBe("new label");
    });

    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.close();
        edit_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.cancel();
        edit_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

    it("sets the label_modal to the label when its edit button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.edit_label(label);
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.label_modal.color).toBe(label.color);
        expect(edit_ctrl_scope.label_modal.name).toBe(label.name);
        expect(edit_ctrl_scope.modal.label.state).toBe("edit");

        // assert that edit_ctrl_scope.label_modal is a copy and not a reference to label
        edit_ctrl_scope.label_modal.name = "random name here";
        expect(edit_ctrl_scope.label_modal.name).not.toBe(label.name);
    });
    
    it("deletes the appropriate label when the delete button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.delete_label(label);
        edit_ctrl_scope.$digest();

        // assertions
        expect(deleted_label).toBe(label);
    });

    it("updates the appropriate label when the update label button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.edit_label(label);
        edit_ctrl_scope.$digest();
        edit_ctrl_scope.label_modal.name = "harry";
        edit_ctrl_scope.label_modal.color = "blue";
        edit_ctrl_scope.update_label(edit_ctrl_scope.label_modal);
        edit_ctrl_scope.$digest();

        // assertions
        expect(mock_project_service.update_label).toHaveBeenCalledWith(edit_ctrl_scope.label_modal);
        expect(updated_label).toBe(edit_ctrl_scope.label_modal);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: export_modal_controller", function(){
    // globals set up and used in each test scenario
    var mock_export_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, export_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        // mock the export_service factory methods used in the controller
        // and return their promises
        mock_export_service = export_service;
        spyOn(mock_export_service, "export_buildings")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success", "export_id": "123456"});
            }
        );
        spyOn(mock_export_service, "export_buildings_progress")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({
                    "status": "success",
                    "buildings_processed": 1000
                });
            }
        );
            spyOn(mock_export_service, "export_buildings_download")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({
                    "status": "success",
                    "url": "#"
                });
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_export_modal_controller(){
        ctrl = ctrl('export_modal_controller', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            search: { 
                selected_buildings: [],
                filter_params: {},
                select_all_checkbox: false,
                order_by: "",
                sort_reverse: false,
                number_matching_search: 1000
            },
            selected_fields: ['tax_lot_id', 'postal_code'],
            project: {
                id: 11
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should start at the create page", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.export_state).toEqual("create"); 
    });
    it("should start with an empty name and default file type of 'xls'",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.building_export;
        expect(b.export_name).toEqual("");
        expect(b.export_type).toEqual("xls");
    });
    it("should save the search paramaters",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.building_export;
        expect(b.selected_buildings).toEqual([]);
        expect(b.filter_params).toEqual({});
        expect(b.order_by).toEqual("");
        expect(b.sort_reverse).toEqual(false);
        expect(b.select_all_checkbox).toEqual(false);
        expect(b.selected_fields).toEqual(['tax_lot_id', 'postal_code']);
        expect(b.project_id).toEqual(11);
        expect(ctrl_scope.progress_denominator).toEqual(0);
    });
    it("should kick off the export process when the export button is clicked",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.export_buildings();

        // assertions
        expect(ctrl_scope.export_state).toEqual("prepare");
        expect(mock_export_service.export_buildings).toHaveBeenCalled();
    });
    it("should show the success page when the data is ready",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.show_success_page("123");
        ctrl_scope.$digest();

        // assertions
        expect(mock_export_service.export_buildings_download).toHaveBeenCalled();
        expect(ctrl_scope.export_state).toEqual("success");
    });
    it("should update the progress bar",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.monitor_progress("123", 1000);
        ctrl_scope.$digest();
        timeout.flush();

        // assertions
        expect(mock_export_service.export_buildings_progress).toHaveBeenCalled();
        expect(ctrl_scope.progress_percentage).toEqual(100);
        expect(ctrl_scope.progress_numerator).toEqual(1000);
        expect(ctrl_scope.progress_denominator).toEqual(1000);
    });
    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.close();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.cancel();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

  
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
/**
 * tests fromNow angularjs filter wrapper of moment.js
 * uses epoch milliseconds as that is what the back-end returns
 */

// create dummy angularJS app to attach filter(s)
var myfromNowFilterApp = angular.module('myfromNowFilterApp', ['fromNow']);

describe("The fromNow filter", function() {
    beforeEach(module('myfromNowFilterApp'));

    it('shows the present time as "a few seconds ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('a few seconds ago');
        })
    );

    it('shows 5 minutes ago as "5 minutes ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 5  * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('5 minutes ago');
        })
    );

    it('shows 4 hours ago as "4 hours ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 4 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('4 hours ago');
        })
    );

    it('shows 24 hours ago as "a day ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 24 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('a day ago');
        })
    );

    it('shows 36 hours ago as "2 days ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 36 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('2 days ago');
        })
    );

    it('shows 1550 hours ago as "2 months ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 1550 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('2 months ago');
        })
    );

    it('defaults to "a few seconds ago" for undefined values',
        inject(function(fromNowFilter) {
            // arrange

            // act

            // assert
            expect(fromNowFilter(undefined)).toBe('a few seconds ago');
            expect(fromNowFilter(null)).toBe('a few seconds ago');
            expect(fromNowFilter("some text")).toBe('a few seconds ago');
            expect(fromNowFilter({})).toBe('a few seconds ago');
            expect(fromNowFilter({time: "not time"})).toBe('a few seconds ago');
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myignoremapApp = angular.module('myignoremapApp', ['ignoremap']);

describe("The ignoremap filter", function() {
    beforeEach(module('myignoremapApp'));
    it('replaces `""` with `------ Ignore Row ------`',
        inject(function(ignoremapFilter) {
            // normal cases
            expect(ignoremapFilter('')).toBe('------ Ignore Row ------');
            expect(ignoremapFilter(' ')).toBe(' ');
            expect(ignoremapFilter('aignoremap')).toBe('aignoremap');
            expect(ignoremapFilter('ignoremap ')).toBe('ignoremap ');
            expect(ignoremapFilter('ok')).toBe('ok');
            expect(ignoremapFilter(undefined)).toBe('------ Ignore Row ------');
            expect(ignoremapFilter(null)).toBe('------ Ignore Row ------');
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: mapping_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, modal_state;
    var mapping_ctrl, mapping_ctrl_scope, modalInstance, labels;
    var timeout, mock_user_service, mock_search_service;



    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, building_services, $timeout, user_service, search_service) {
            controller = $controller;
            scope = $rootScope;
            mapping_ctrl_scope = $rootScope.$new();
            modal_state = "";
            timeout = $timeout;
            mock_user_service = user_service;
            mock_search_service = search_service;

            spyOn(mock_user_service, 'set_default_columns')
                .andCallFake(function(mapped_columns){
                    return undefined;
                });
            spyOn(mock_search_service, 'search_buildings')
                .andCallFake(function(){
                    return [1,2,3];
                });
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_mapping_controller(){
        var mock_datasets = [
            {
                name: "DC 2013 data",
                last_modified: (new Date()).getTime(),
                last_modified_by: "john.s@buildingenergy.com",
                number_of_buildings: 89,
                id: 1
            },
            {
                name: "DC 2014 data",
                last_modified: (new Date()).getTime() -
                    1550 * 60 * 60 * 1000,
                last_modified_by: "gavin.m@buildingenergy.com",
                number_of_buildings: 70,
                id: 2
            }
        ];
        var fake_import_file_payload = {
            "status": "success",
            "import_file": {
                        file_name: "assessor_fun.csv",
                        last_modified: (new Date()).getTime(),
                        last_modified_by: "john.s@buildingenergy.com",
                        source_type: 'AssessorRaw',
                        dataset: mock_datasets[0],
                        id: 1
                    }
        };

        var mock_be_building_columns = [
            'pm_property_id',
            'property_name',
            'property_notes',
            'tax_lot_id',
            'gross_floor_area',
            'My New non-BEDES field'
        ];

        var mock_be_building_types = {
            'gross_floor_area': {
                unit_type: 'float',
                schema: 'BEDES'
            }
        };

        var mock_mapping_suggestions_payload = {
            'status': 'success',
            'suggested_column_mappings': {
                // key(django model attribute): [csv_header1, ... csv_header3]
                'property id': ['pm_property_id', 89],
                'lot number': ['tax_lot_id' , 54]
            },
            "building_columns": mock_be_building_columns,
            "building_column_types": mock_be_building_types
        };

        var mock_raw_column_names = [
            'property id',
            'property_name',
            'property_notes',
            'lot number',
            'lot size'
        ];

        var mock_first_five_rows = [];
        for (var i=0; i < 4; i++) {
            mock_first_five_rows.push({
                'property id': i,
                'property_name': 'Property ' + i,
                'property_notes': 'Nup.',
                'lot number': i * 2,
                'lot size': 454 * i
            });
        }

        mock_first_five_rows.push({
            'property id': '121L',
            'property_name': 'Inconsistent Property',
            'property_notes': 'N/A',
            'lot number': 'N/A',
            'lot size': 45
        });

        var raw_columns_payload = {
            "status": "success",
            "raw_columns": mock_raw_column_names
        };
        var first_five_rows_payload = {
            "status": "success",
            "first_five_rows": mock_first_five_rows
        };
        mapping_ctrl = controller('mapping_controller', {
            $scope: mapping_ctrl_scope,
            import_file_payload: fake_import_file_payload,
            suggested_mappings_payload: mock_mapping_suggestions_payload,
            raw_columns_payload: raw_columns_payload,
            first_five_rows_payload: first_five_rows_payload,
            all_columns: {fields: []},
            building_services: mock_building_services,
            $timeout: timeout
        });
    }

    /*
     * Test scenarios
     */

    it("should have a import_file_payload", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        expect(mapping_ctrl_scope.import_file.dataset.name).toBe("DC 2013 data");
    });

    it("should show suggested mappings and confidence", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        var raw_columns = mapping_ctrl_scope.raw_columns;
        var first_column = raw_columns[0];

        expect(first_column.confidence).toBe(89);
        expect(first_column.suggestion).toBe("Pm Property Id");
    });

    it("should show 'low', 'med', 'high', or '' confidence text", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        var raw_columns = mapping_ctrl_scope.raw_columns;
        var first_column = raw_columns[0];
        expect(first_column.confidence_text()).toBe("high");
        first_column.confidence = 70;
        expect(first_column.confidence_text()).toBe("med");
        first_column.confidence = 35;
        expect(first_column.confidence_text()).toBe("low");
        delete(first_column.confidence);
        expect(first_column.confidence_text()).toBe("");
    });

    it("should validate initial data", function() {
        create_mapping_controller();
        // act
        mapping_ctrl_scope.$digest();
        // assertions
        angular.forEach(mapping_ctrl_scope.raw_columns, function(rc) {
            if (rc.suggestion !== '' && typeof(rc.suggestion) !== "undefined") {
                expect(rc.validity).toBe('valid');
            }
        });
    });

    it("should invalidate bad suggestions", function() {
        // Simulate a change on the tcm, make it fail.
        create_mapping_controller();
        // act
        mapping_ctrl_scope.$digest();
        // assertions
        //
        // We change the suggested mapping for the "property name" column
        // to "gross_floor_area" (which validates as float) to
        // purposesly cause a failing change.
        mapping_ctrl_scope.raw_columns[1].suggestion = 'gross_floor_area';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[1]);
        expect(mapping_ctrl_scope.raw_columns[1].validity).toBe('invalid');

    });

    it("should set td_class appropriately", function() {
        var tcm;

        create_mapping_controller();

        mapping_ctrl_scope.$digest();
        tcm = mapping_ctrl_scope.raw_columns[0];
        var good_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[0]
        );

        // First raw column is mapped up as pm_property_id <-> property_id
        // Any kind of string will be valid.
        expect(good_val).toBe('success');

        // Now set it to one that expects float values.
        // Only one of these will *not* validate.
        mapping_ctrl_scope.raw_columns[0].suggestion = 'gross_floor_area';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[0]);

        tcm = mapping_ctrl_scope.raw_columns[0];
        var warning_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[4]
        );

        expect(warning_val).toBe('warning');

        // We don't want the warning style to be applied to neighboring cells
        // in the same row. Check that the cell next to our invalid one is
        // unstyled (undefined).
        tcm = mapping_ctrl_scope.raw_columns[0];
        var adjacent_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[3]
        );

        expect(adjacent_val).toBe(undefined);

        // Now we're saying the suggestion is to not map.
        // Check that we don't have any class set for this row now.
        mapping_ctrl_scope.raw_columns[0].suggestion = '';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[0]);

        tcm = mapping_ctrl_scope.raw_columns[0];
        var blank_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[4]
        );

        expect(blank_val).toBe('');

    });

    it("should detect duplicates of mapped rows", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // raw_columns[0] and raw_columns[3] should be the only mapped rows
        var column = mapping_ctrl_scope.raw_columns[3];
        var test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

        // Set the property_name tcm's suggestion to the same as
        // the property_id tcm (raw_columns[0])
        column.suggestion = 'Pm Property Id';

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(true);

        // Since we mark both duplicates as duplicates, the other
        // TCM that has the 'pm_property_id' suggestion should also get
        // 'danger' as its duplicate class.
        var other_dup = mapping_ctrl_scope.is_tcm_duplicate(
            mapping_ctrl_scope.raw_columns[0]
        );
        expect(other_dup).toBe(true);

        // Shows that mapped_row is the sole determinant of
        // column ignoring
        column.mapped_row = false;

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

    });

    it("should ignore duplicates of unmapped rows", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // raw_columns[0] and raw_columns[3] should be the only mapped rows
        var column = mapping_ctrl_scope.raw_columns[1];
        var test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

        // Set the property_name tcm's suggestion to the same as
        // the property_id tcm (raw_columns[0])
        column.suggestion = 'Pm Property Id';

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);
    });

    it("should get mapped buildings", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        mapping_ctrl_scope.get_mapped_buildings();
        mapping_ctrl_scope.$digest();

        // assertions
        expect(mapping_ctrl_scope.search.search_buildings).toHaveBeenCalled();
        expect(mock_user_service.set_default_columns).toHaveBeenCalled();
    });

    it("should enbale the 'show & review buildings' button if duplicates are" +
        " not present", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        for (var i = mapping_ctrl_scope.raw_columns.length - 1; i >= 0; i--) {
            mapping_ctrl_scope.change(mapping_ctrl_scope.raw_columns[i]);
        }
        var duplicates_found = mapping_ctrl_scope.duplicates_present();

        // assertions
        expect(duplicates_found).toBe(false);
    });

    it("should disable the 'show & review buildings' button if duplicates " +
        "are present", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        for (var i = mapping_ctrl_scope.raw_columns.length - 1; i >= 0; i--) {
            mapping_ctrl_scope.raw_columns[i].suggestion = "pm_property_id";
            mapping_ctrl_scope.change(mapping_ctrl_scope.raw_columns[i]);
        }
        var duplicates_found = mapping_ctrl_scope.duplicates_present();

        // assertions
        expect(duplicates_found).toBe(true);
    });

    it("should get mappings in an API friendly way", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();
        var mappings = mapping_ctrl_scope.get_mappings();
        expect(mappings.length).toBe(5);
        expect(mappings[0]).toEqual(['Pm Property Id', 'property id']);
        // everything in between is empty since we we're using only
        // suggested mappings.
        expect(mappings[3]).toEqual(['Tax Lot Id', 'lot number']);
    });

    it("should show the 'STEP 2' tab when reviewing mappings", function() {
        // arrange
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // act
        var mappings = mapping_ctrl_scope.get_mapped_buildings();

        // assert
        expect(mapping_ctrl_scope.tabs).toEqual({
            'one_active': false,
            'two_active': true,
            'three_active': false
        });
    });

    it("should show BEDES fields with a checkbox", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assert
        expect(mapping_ctrl_scope.is_suggestion_BEDES('gross_floor_area')).toBe(true);
        expect(mapping_ctrl_scope.is_suggestion_BEDES('Gross Floor Area')).toBe(true);
        expect(mapping_ctrl_scope.is_suggestion_BEDES('My New non-BEDES field')).toBe(false);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: matching_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, delete_called;
    var matching_ctrl, matching_ctrl_scope, modalInstance, labels;


    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, building_services) {
            controller = $controller;
            scope = $rootScope;
            matching_ctrl_scope = $rootScope.$new();

            mock_building_services = building_services;
            spyOn(mock_building_services, "get_PM_filter_by_counts")
                .andCallFake(function(import_file){
                    return $q.when(
                        {
                            "status": "success",
                            "unmatched": 5,
                            "matched": 10
                        }
                    );
                }
            );
            spyOn(mock_building_services, "save_match")
                .andCallFake(function(b1, b2, create){
                    return $q.when(
                        {
                            "status": "success",
                            "child_id": 3
                        }
                    );
                }
            );
            spyOn(mock_building_services, "search_matching_buildings")
                .andCallFake(function(q, number_per_page, current_page, order_by, sort_reverse, 
                                        filter_params, file_id ){
                    
                    if(filter_params.children__isnull === undefined){                        
                        var bldgs = [
                            {
                                pm_property_id: 1
                            },
                            {
                                pm_property_id: 2
                            }
                            ,
                            {
                                pm_property_id: 3
                            }
                        ];
                    } else if (filter_params.children__isnull === false){
                        var bldgs = [
                            {
                                pm_property_id: 1
                            }
                        ];
                    } else if (filter_params.children__isnull === true){
                        var bldgs = [
                            {
                                pm_property_id: 2
                            },
                            {
                                pm_property_id: 3
                            }
                        ];
                    }

                    return $q.when(
                        {
                            status: "success",
                            number_returned: buildings_payload.length,
                            number_matching_search: buildings_payload.length,
                            buildings: bldgs
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_detail_controller(){
        var buildings_payload = {
            buildings: [
                {
                    pm_property_id: 1,
                    tax_lot_id: null,
                    custom_id_1: 2,
                    gross_floor_area: 111,
                    matched: true,
                    id: 1,
                    children: [3],
                    coparent: {
                        pm_property_id: null,
                        tax_lot_id: 2,
                        custom_id_1: null,
                        gross_floor_area: 111,
                        id: 2,
                        children: [3]
                    }
                }
            ],
            number_matching_search: 1,
            number_returned: 1
        };
        matching_ctrl = controller('matching_controller', {
            $scope: matching_ctrl_scope,
            buildings_payload: buildings_payload,
            all_columns: {
                fields: [{sort_column: 'pm_property_id'}]
            },
            default_columns: {
                columns: ['pm_property_id']
            },
            import_file_payload: {
                import_file: {
                    id: 1,
                    dataset: {
                        importfiles: [
                            {
                                id: 1,
                                name: "file_1.csv"
                            },
                            {
                                id: 2,
                                name: "file_2.csv"
                            }
                        ]
                    }
                }
            }
        });
    }



    /*
     * Test scenarios
     */

    it("should have a buildings payload with potential matches", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();
        var b = matching_ctrl_scope.buildings[0];

        // assertions
        expect(matching_ctrl_scope.buildings.length).toBe(1);
        expect(b.coparent.children).toEqual(b.children);
    });

    it("should provide to the view scope variables representing the number matched and the number of unmatched buildings", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();

        // assertions
        expect(matching_ctrl_scope.matched_buildings).toEqual(10);
        expect(matching_ctrl_scope.unmatched_buildings).toEqual(5);
    });

    it("should jump back to the matching list when the 'Back to list' button" +
        " is clicked", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.show_building_list = false;
        matching_ctrl_scope.back_to_list();

        // assertions
        expect(matching_ctrl_scope.show_building_list).toEqual(true);
    });

    it("should present an initial state with the matching buildings table",
        function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();

        // assertions
        expect(matching_ctrl_scope.columns).toEqual([{ sort_column : 'pm_property_id' }]);
        expect(matching_ctrl_scope.number_matching_search).toEqual(1);
        expect(matching_ctrl_scope.number_returned).toEqual(1);
        expect(matching_ctrl_scope.num_pages).toEqual(1);
        expect(mock_building_services.get_PM_filter_by_counts).toHaveBeenCalled();
    });
    it("should match a building in the matching list", function() {
        // arrange
        create_dataset_detail_controller();
        var b1, b2;
        b2 = {
            id: 2,
            children: [],
            matched: false
        };
        b1 = {
            id: 1,
            children: [],
            matched: true,
            coparent: b2
        };

        // act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.toggle_match(b1);
        matching_ctrl_scope.$digest();

        // assertions
        expect(mock_building_services.save_match).toHaveBeenCalledWith(b1.id, b2.id, true);
        expect(mock_building_services.get_PM_filter_by_counts).toHaveBeenCalled();
        expect(b1.children[0]).toEqual(3);
    });
    it("Should update the list of buildings correctly when 'Show Matched' is selected", function() {
        //arrange
        create_dataset_detail_controller();

        //act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.update_show_filter(controller.SHOW_MATCHED)

        //assertions
        //expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(1);
        expect(matching_ctrl_scope.number_returned).toEqual(1);
    });
    it("Should update the list of buildings correctly when 'Show Unmatched' is selected",  function() {
        //arrange
        create_dataset_detail_controller();

        //act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.update_show_filter(controller.SHOW_UNMATCHED)

        //assertions
        //expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(2);
        expect(matching_ctrl_scope.number_returned).toEqual(2);
    });
    it("Should update the list of buildings correctly when 'Show All' is selected", function() {
        //arrange
        create_dataset_detail_controller();

        //act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.update_show_filter(controller.SHOW_ALL)

        //assertions
        //expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(3);
        expect(matching_ctrl_scope.number_returned).toEqual(3);
    });



});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: members_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller;
    var ctrl, ctrl_scope, modalInstance;
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          $q,
          organization_service) {
            ctrl = $controller;
            scope = $rootScope;
            ctrl_scope = $rootScope.$new();

            mock_organization_service = organization_service;
            
            spyOn(mock_organization_service, "remove_user")
                .andCallFake(function(user_id, org_id){
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
            spyOn(mock_organization_service, "get_organization_users")
                .andCallFake(function(org){
                    return $q.when(
                        {
                            "status": "success",
                            "users": [{id:1, first_name:"Bob", last_name:"D"}]
                        }
                    );
                }
            );
            spyOn(mock_organization_service, "update_role")
                .andCallFake(function(org_id, user_id, role){
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_members_controller(){
        ctrl = ctrl('members_controller', {
            $scope: ctrl_scope,
            users_payload: {users: [
                {first_name: 'J', last_name: 'S'},
                {first_name: undefined, last_name: null}
            ]},
            organization_payload: {
                organization: {name: 'my org', id: 4}
            },
            auth_payload: {
                auth: {
                    'can_invite_member': true,
                    'can_remove_member': true
                }
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should accepts its payload", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.org).toEqual({name : 'my org', id : 4});
        expect(ctrl_scope.users[0].name).toEqual("J S");
        expect(ctrl_scope.users[1].name).toEqual(" ");
    });
    it("clicking remove should remove a user", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.remove_member({user_id: 2});

        // assertions
        expect(mock_organization_service.remove_user)
            .toHaveBeenCalledWith(2, 4);
        
        ctrl_scope.$digest();
        expect(mock_organization_service.get_organization_users)
            .toHaveBeenCalledWith({org_id: 4});
    });
    it("clicking a new role should update the user's role", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.update_role({user_id: 2, role: "viewer"});

        // assertions
        expect(mock_organization_service.update_role)
            .toHaveBeenCalledWith(2, 4, 'viewer');
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: new_member_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_user_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, user_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        mock_user_service = user_service;
        spyOn(mock_user_service, "add")
            .andCallFake(function(user){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_new_member_controller(){
        ctrl = ctrl('new_member_modal_ctrl', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            organization: {organization_id: 1}
        });
    }

    /*
     * Test scenarios
     */

    it("should set the default role to 'member'", function() {
        // arrange
        create_new_member_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.user.role.value).toEqual("member"); 
    });
    it("should call the user service to add a new user to the org",
        function() {
        // arrange
        create_new_member_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.user.first_name = "JB";
        ctrl_scope.user.last_name = "Smooth";
        ctrl_scope.user.email = "jb.smooth@be.com";
        ctrl_scope.submit_form(true);

        // assertions
        expect(mock_user_service.add)
            .toHaveBeenCalledWith({
                first_name: "JB",
                last_name: "Smooth",
                email: "jb.smooth@be.com",
                role: ctrl_scope.roles[0],
                organization: {
                    organization_id: 1
                }
            });
    });
    
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
/**
 * run_jasmine.js: runs the jasmine JS test runner
 */
(function() {
    var jasmineEnv = jasmine.getEnv();
    jasmineEnv.updateInterval = 1000;

    var htmlReporter = new jasmine.HtmlReporter();

    jasmineEnv.addReporter(htmlReporter);

    jasmineEnv.specFilter = function(spec) {
        return htmlReporter.specFilter(spec);
    };

    var currentWindowOnload = window.onload;

    window.onload = function() {
        if (currentWindowOnload) {
        currentWindowOnload();
        }
        execJasmine();
    };
    function execJasmine() {
        jasmineEnv.execute();
    }
})();

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var searchTestApp = angular.module(
    'searchTestApp', ['BE.seed.service.search']
);

describe("The search_service service", function() {
    var saas, httpBackend, test_url;

    beforeEach(function () {
        module("searchTestApp");
        inject(function (search_service, $httpBackend) {
            saas = search_service;
            httpBackend = $httpBackend;
            httpBackend.when("POST", test_url).respond("ok");
        });

    });

    /**
     * sanitize_params tests
     */
    it('removes null and undefined values from filter_params', function () {
        // arrange
        saas.filter_params = {
          'National Median Site Energy Use__gte': 4,
          'National Median Site Energy Use__lte': null,
          'National Median Source EUI__gte': undefined
        };

        // act
        saas.sanitize_params();

        // assert
        expect(saas.filter_params).toEqual({'National Median Site Energy Use__gte': 4});
    });

    /**
     * search_buildings tests
     */
    it('has sane defaults', function() {
        expect(saas.url).toEqual("");
        expect(saas.error_message).toEqual("");
        expect(saas.alert).toEqual(false);
        expect(saas.buildings).toEqual([]);
        expect(saas.current_page).toEqual(1);
        expect(saas.number_per_page).toEqual(10);
        expect(saas.order_by).toEqual("");
        expect(saas.sort_column).toEqual("tax_lot_id");
        expect(saas.sort_reverse).toEqual(false);
        expect(saas.select_all_checkbox).toEqual(false);
        expect(saas.prev_page_disabled).toEqual(true);
        expect(saas.next_page_disabled).toEqual(true);
        expect(saas.num_pages).toEqual(0);
        expect(saas.query).toEqual("");
        expect(saas.showing).toEqual({
            'start': 1,
            'end': 0
        });
    });

    it('search_buildings uses the argument `query`', function() {
        saas.query = "hotels";
        saas.search_buildings("not hotels");

        expect(saas.query).toEqual("not hotels");
    });
    it('filter search resets the current page', function() {
        // arrange
        saas.current_page = 22;
        spyOn(saas, 'search_buildings');

        // act
        saas.filter_search();

        // assert
        expect(saas.current_page).toEqual(1);
        expect(saas.search_buildings).toHaveBeenCalled();
    });

    it('search_buildings function will default to its query if' +
        ' no query is passed as an argument', function() {
        saas.query = "hotels";
        saas.search_buildings();

        expect(saas.query).toEqual("hotels");
    });

    it('search_buildings hits the set url', function() {
        test_url = "/my-search-url";
        saas.url = test_url;
        saas.search_buildings();
        httpBackend.expectPOST(test_url);
        httpBackend.flush();
    });

    it('search_buildings POSTs the query data as `q`', function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.query = "hotel chains";
        saas.number_per_page = 25;
        saas.order_by = "gross_floor_area";
        saas.sort_reverse = true;
        saas.filter_params = {
            project: '2012 data'
        };

        // act
        saas.search_buildings();

        // assert
        httpBackend.expectPOST(test_url,
            {
                "q": "hotel chains",
                "number_per_page": 25,
                "order_by": "gross_floor_area",
                "sort_reverse": true,
                "filter_params": {
                    "project": "2012 data"
                },
                "page":1
            }
        ).respond(201, "");
        httpBackend.flush();
    });
    it('search_buildings updates its `buildings` model', function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.query = "hotel chains";
        saas.number_per_page = 25;
        saas.order_by = "gross_floor_area";
        saas.sort_reverse = true;
        saas.filter_params = {
            project: '2012 data'
        };

        // act
        saas.search_buildings();

        // assert
        httpBackend.expectPOST(test_url,
            {
                "q": "hotel chains",
                "number_per_page": 25,
                "order_by": "gross_floor_area",
                "sort_reverse": true,
                "filter_params": {
                    "project": "2012 data"
                },
                "page":1
            }
        ).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        expect(saas.buildings).toEqual([
            {
                name: "one",
                id: 1,
                checked: false
            },
            {
                name: "two",
                id: 2,
                checked: false
            }
        ]);
    });
    it('should clear the error and alert after a successful search',
        function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.error_message = "help";
        saas.alert = true;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {
            'buildings': [
                {
                    name: "one",
                    id: 1
                },
                {
                    name: "two",
                    id: 2
                }],
            'number_matching_search': 101
            });
        httpBackend.flush();

        // assert
        expect(saas.alert).toEqual(false);
        expect(saas.error_message).toEqual("");
    });

    /**
     * pagination tests
     */
    it('increments the page when the `next` button is clicked',
        function() {
        // arrange
        saas.num_pages = 1000;
        saas.current_page = 100;
        spyOn(saas, 'search_buildings');
        // act
        saas.next_page();

        // assert
        expect(saas.current_page).toEqual(101);
        expect(saas.search_buildings).toHaveBeenCalled();
        expect(saas.search_buildings.callCount).toEqual(1);

    });
    it('doesn\'t increment past the last page when the `next` button is' +
        ' clicked', function() {
        // arrange
        saas.num_pages = 2;
        saas.current_page = 2;
        spyOn(saas, 'search_buildings');
        // act
        saas.next_page();

        // assert
        expect(saas.current_page).toEqual(2);
        expect(saas.search_buildings).toHaveBeenCalled();
        expect(saas.search_buildings.callCount).toEqual(1);

    });
    it('decrements the page when the `previous` button is clicked',
        function() {
        // arrange
        saas.num_pages = 1000;
        saas.current_page = 100;
        spyOn(saas, 'search_buildings');
        // act
        saas.prev_page();

        // assert
        expect(saas.current_page).toEqual(99);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('does not decrement below the first page when the `previous` button' +
        ' is clicked', function() {
        // arrange
        saas.num_pages = 1;
        saas.current_page = 1;
        spyOn(saas, 'search_buildings');
        // act
        saas.prev_page();

        // assert
        expect(saas.current_page).toEqual(1);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('fetches more or less results per page when a user selects an option' +
        ' from the number per page select',
        function() {
        // arrange
        saas.number_per_page_options_model = 50;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_number_per_page();

        // assert
        expect(saas.number_per_page).toEqual(50);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('updates the number of results displayed text after a successful '+
        'search', function() {
        // standard case
        // page 2 of 3 with 10/page, so should display 11 of 20
        // arrange
        saas.current_page = 2;
        saas.num_pages = 3;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_start_end_paging();

        // assert
        expect(saas.showing.start).toEqual(11);
        expect(saas.showing.end).toEqual(20);
        expect(saas.search_buildings).not.toHaveBeenCalled();
    });
    it('displays the number matching the query if on the last page of results',
        function() {
        // standard case
        // page 3 of 3 with 10/page and 34 results, so should display 21 of 34
        // arrange
        saas.current_page = 3;
        saas.number_matching_search = 34;
        saas.num_pages = 3;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_start_end_paging();

        // assert
        expect(saas.showing.start).toEqual(21);
        expect(saas.showing.end).toEqual(34);
    });
    it('should call update_start_end_paging after a successful search',
        function() {
        // arrange
        spyOn(saas, 'update_start_end_paging');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_start_end_paging).toHaveBeenCalled();
    });
    it('should call update_buttons after a successful search',
        function() {
        // arrange
        spyOn(saas, 'update_buttons');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_buttons).toHaveBeenCalled();
    });
    it('should disable prev paging buttons at the first page',
        function() {
        // arrange
        saas.current_page = 1;
        saas.num_pages = 5;

        // act
        saas.update_buttons();

        // assert
        expect(saas.prev_page_disabled).toEqual(true);
        expect(saas.next_page_disabled).toEqual(false);
    });
    it('should disable next paging buttons at the last page',
        function() {
        // arrange
        saas.current_page = 5;
        saas.num_pages = 5;

        // act
        saas.update_buttons();

        // assert
        expect(saas.prev_page_disabled).toEqual(false);
        expect(saas.next_page_disabled).toEqual(true);
    });
    it('should calculate the number of pages after a successful search',
        function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {
            'buildings': [
                {
                    name: "one",
                    id: 1
                },
                {
                    name: "two",
                    id: 2
                }],
            'number_matching_search': 101
            });
        httpBackend.flush();

        // assert
        expect(saas.number_matching_search).toEqual(101);
        expect(saas.num_pages).toEqual(11);
    });

    /**
     * checkbox logic tests
     */
    it('should select or unselect all the viewed results when the select all' +
        ' checkbox is checked or unchecked', function() {
        // arrange
        saas.selected_buildings = [1,2,3];
        saas.select_all_checkbox = true;
        saas.buildings = [
            {
                checked: false
            },
            {
                checked: true
            }
        ];
        spyOn(saas, 'select_or_deselect_all_buildings').andCallThrough();

        // act
        saas.select_all_changed();

        // assert
        expect(saas.selected_buildings).toEqual([]);
        expect(saas.buildings).toEqual([
                {
                    checked: true
                },
                {
                    checked: true
                }
            ]);
        expect(saas.select_or_deselect_all_buildings).toHaveBeenCalled();
    });
    it('should call select_or_deselect_all_buildings after a search',
        function() {
        // arrange
        spyOn(saas, 'select_or_deselect_all_buildings');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.select_or_deselect_all_buildings).toHaveBeenCalled();
    });
    it('should add a building to the selected list when checked',
        function() {
        // arrange
        var building = {
            id: 5,
            checked: true
        };

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([5]);
    });
    it('should add a building to the selected list when unchecked and the ' +
        'select all checkbox is checked', function() {
        // arrange
        var building = {
            id: 5,
            checked: false
        };
        saas.select_all_checkbox = true;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([5]);
    });
    it('should remove a building to the selected list when unchecked',
        function() {
        // arrange
        var building = {
            id: 5,
            checked: false
        };
        saas.selected_buildings = [5,6,7];
        saas.select_all_checkbox = false;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([6,7]);
    });
    it('should remove a building to the selected list when checked if the ' +
        'select all checkbox is checked', function() {
        // arrange
        var building = {
            id: 5,
            checked: true
        };
        saas.selected_buildings = [5,6,7];
        saas.select_all_checkbox = true;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([6,7]);
    });
    it('should call load_state_from_selected_buildings after a successful ' +
        'search', function() {
        // arrange
        spyOn(saas, 'load_state_from_selected_buildings').andCallThrough();
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.load_state_from_selected_buildings).toHaveBeenCalled();
    });
    it('should call update_results after a successful ' +
        'search', function() {
        // arrange
        var select_or_deselect_all_buildings_time,
            load_state_from_selected_buildings_time;
        spyOn(saas, 'update_results').andCallThrough();
        spyOn(saas, 'select_or_deselect_all_buildings')
            .andCallFake(function() {
                select_or_deselect_all_buildings_time = new Date();
            }
        );
        spyOn(saas, 'load_state_from_selected_buildings')
            .andCallFake(function() {
                // wait for a sec, otherwise both have the same timestamp
                for(var y=0;y<100000;y++){
                    var x = new Date();
                    x = x+y;
                }
                load_state_from_selected_buildings_time = new Date();
            }
        );
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_results).toHaveBeenCalled();
        expect(select_or_deselect_all_buildings_time <
               load_state_from_selected_buildings_time).toBe(true);
    });
    it('check selected buildings successful', function() {
        // arrange
        saas.selected_buildings = [2];
        saas.buildings = [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ];

        // act
        saas.load_state_from_selected_buildings();

        // assert
        expect(saas.buildings[1]).toEqual({
            name: "two",
            id: 2,
            checked: true
        });
    });
    it('should generate columns', function() {
        // arrange
        var all_columns, column_headers, columns;
        all_columns = [
            {
                sort_column: "name"
            },
            {
                sort_column: "id"
            }
        ];
        column_headers = ["id"];
        saas.sort_column = "something else";
        saas.update_results({});
        // act
        columns = saas.generate_columns(
            all_columns, column_headers, saas.column_prototype
        );

        // assert that columns are extended off the prototype and only have
        // "id"
        expect(columns.length).toEqual(1);
        expect(columns[0].sort_column).toEqual("id");
        expect(columns[0].is_unsorted()).toEqual(true);
        saas.sort_column = "id";
        expect(columns[0].is_unsorted()).toEqual(false);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: settings_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller;
    var ctrl, ctrl_scope, modalInstance;
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          $q,
          organization_service) {
            ctrl = $controller;
            scope = $rootScope;
            ctrl_scope = $rootScope.$new();

            mock_organization_service = organization_service;
            
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_settings_controller(){
        ctrl = ctrl('settings_controller', {
            $scope: ctrl_scope,
            all_columns: {fields: [
                {checked: false, title: 'PM Property ID', sort_column: 'pm_property_id'},
                {checked: false, title: 'G', sort_column: 'g'},
                {checked: false, title: "Gross Floor Area", sort_column: 'gross_floor_area'}
            ]},
            organization_payload: {
                organization: {name: 'my org', id: 4}
            },
            query_threshold_payload: {
                query_threshold: 10
            },
            shared_fields_payload: {
                shared_fields: [
                    {
                        title: "PM Property Id",
                        sort_column: "pm_property_id"
                    }
                ],
                public_fields: [
                {
                    title: "Gross Floor Area",
                    sort_column: "gross_floor_area"
                }]
            },
            auth_payload: {
                auth: {
                    'is_owner': true,
                    'is_parent_org_owner': false
                }
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should accepts its payload", function() {
        // arrange
        create_settings_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.org).toEqual({
            name : 'my org',
            id : 4,
            query_threshold: 10
        });
        expect(ctrl_scope.fields[0].checked).toEqual(true);
        expect(ctrl_scope.fields[1].checked).toEqual(false);
        expect(ctrl_scope.fields[0].title).toEqual('PM Property ID');
    });
    it("should select all", function() {
        // arrange
        create_settings_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.controls.select_all = true;
        ctrl_scope.select_all_clicked();
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.infinite_fields[0].checked).toEqual(true);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myStripFilterApp = angular.module('myStripFilterApp', ['stripImportPrefix']);

describe("The stripImportPrefix filter", function() {
    beforeEach(module('myStripFilterApp'));
    it('Strips out the import prefix from building ids',
        // e.g. remove the 'IMP12-' from the id 'IMP12-1321/123'
        inject(function(stripImportPrefixFilter) {
            // normal cases
            expect(stripImportPrefixFilter('IMP134-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP134555-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP1-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP0-134')).toBe('134');
            // deals with `-`
            expect(stripImportPrefixFilter('IMP134-abc-dev')).toBe('abc-dev');
            // deals with `/`
            expect(stripImportPrefixFilter('IMP134-00/11')).toBe('00/11');
            // only strips first prefix
            expect(stripImportPrefixFilter('IMP134-IMP134-123')).toBe('IMP134-123');
        })
    );
    it("Does not strip out anything if there is not a prefix",
        inject(function(stripImportPrefixFilter) {
            // normal cases
            expect(stripImportPrefixFilter('123-123')).toBe('123-123');
            expect(stripImportPrefixFilter('0123/123')).toBe('0123/123');
        })
    );
    it("Is case sensitive to the import prefix",
        inject(function(stripImportPrefixFilter) {
            expect(stripImportPrefixFilter('imp123-abc')).toBe('imp123-abc');
            expect(stripImportPrefixFilter('iMp123-abc')).toBe('iMp123-abc');
            expect(stripImportPrefixFilter('iMP123-abc')).toBe('iMP123-abc');
        })
    );
    it("Handles undefined or null inputs",
        inject(function(stripImportPrefixFilter) {
            expect(stripImportPrefixFilter(undefined)).toBe(undefined);
            expect(stripImportPrefixFilter(null)).toBe(null);
        })
    );
    it("Only strips out the prefix if it has at least one digit and a hyphen",
        inject(function(stripImportPrefixFilter) {
            // must have the 'IMP' folowed by a digit then a hyphen
            expect(stripImportPrefixFilter('IMP-123')).toBe('IMP-123');
            expect(stripImportPrefixFilter('IMP1123')).toBe('IMP1123');
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myTitleCaseApp = angular.module('myTitleCaseApp', ['titleCase']);

describe("The TitleCase filter", function() {
    beforeEach(module('myTitleCaseApp'));
    it('Strips out ``_`` characters from strings and capitalizes the rest',
        inject(function(titleCaseFilter) {
            // normal cases
            expect(titleCaseFilter('super_data')).toBe('Super Data');
            expect(titleCaseFilter('super_data_45')).toBe('Super Data 45');
            expect(titleCaseFilter(undefined)).toBe(undefined);
            expect(titleCaseFilter(null)).toBe(null);
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myTypedNumberFilterApp = angular.module('myTypedNumberFilterApp', ['typedNumber']);

describe("The typedNumber filter", function() {
    beforeEach(module('myTypedNumberFilterApp'));
    it('should parse strings as strings and return them',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('tester')).toBe('tester');
        })
    );
    it('should parse strings as strings and return them, even if they look like numbers',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.1456')).toBe('123.1456');
        })
    );

    it('should parse numbers as numbers and return them',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.00001', 'number')).toBe("123");
        })
    );

    it('should allow the user to set the number of sig digits',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.321', 'number', 'not_year', 1)).toBe("123.3");
        })
    );

    it('should add commas to number greater than 999',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123456789', 'number', 'not_year', 0)).toBe("123,456,789");
        })
    );

    it('should parse year_built and not add commas',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('1946', 'number', 'year_built', 1)).toBe("1946");
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var validationTestApp = angular.module(
    'validationTestApp', ['mappingValidatorService']
);

describe("The MappingValidatorService", function() {
    var mvs;

    beforeEach(function () {
        module("validationTestApp");
        inject(function (mappingValidatorService) {
            mvs = mappingValidatorService;

        });

    });

    it('validates good string, float and date data', function() {
        // normal cases
        // Here ``type`` is undefined. Should still work.
        var str_data = ['Fun', 'fun2', 'fun3', 'fun4'];
        var float_data = ['12.34', '144.5', '234'];
        var date_data = ['2014/02/02', '03/13/2013', '03-14-2004'];

        expect(mvs.validate(str_data)).toEqual([]);
        expect(mvs.validate(float_data, 'float')).toEqual([]);
        expect(mvs.validate(date_data, 'date')).toEqual([]);
    });

    it('recognizes semivalid data', function() {
        // Cases where the data is /almost/ right.
        var float_data = ['12.34', '144.5', 'NaN'];
        var date_data = ['2014/02/02', 'huh?', '03-14-2004'];
        expect(mvs.validate(float_data, 'float')).toEqual(['NaN']);
        expect(mvs.validate(date_data, 'date')).toEqual(['huh?']);
    });

    it('recognizes invalid data', function() {
        // Cases where the data is *all* wrong.
        var float_data = ['', 'not a float', 'NaN'];
        var date_data = ['', 'huh?', 'what?'];
        // Cases where the data are correct.
        var good_float_data = ['12.34', '144.5', '234'];
        var good_date_data = ['2014/02/02', '03/13/2013', '03-14-2004'];

        // Data is wrong
        expect(mvs.validate(float_data, 'float')).toEqual(float_data);
        expect(mvs.validate(date_data, 'date')).toEqual(date_data);

        // Type is wrong
        // N.B. we use semivalid here, because Date is pretty forgiving w/ nums.
        expect(mvs.validate(good_float_data, 'date')).toEqual(['12.34']);
        expect(mvs.validate(good_date_data, 'float')).toEqual(good_date_data);


    });

});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// taken from the angularjs testing page
// http://docs.angularjs.org/guide/dev_guide.unit-testing

// create dummy angularJS app to attach filter(s)
var myBELabelDirectiveApp = angular.module('myBELabelDirectiveApp', ['beLabel']);

describe("The beLabel directive", function() {
    var $compile;
    var $rootScope;
    beforeEach(module('myBELabelDirectiveApp'));
    // Store references to $rootScope and $compile
    // so they are available to all tests in this describe block
    beforeEach(inject(function(_$compile_, _$rootScope_){
      // The injector unwraps the underscores (_) from around the parameter names when matching
      $compile = _$compile_;
      $rootScope = _$rootScope_;
    }));

    it('Replaces the element with the appropriate content', function() {
        // Compile a piece of HTML containing the directive
        var element = $compile('<be-label name="compliant" color="blue"></be-label>')($rootScope);
        // fire all the watches
        $rootScope.$digest();
        // Check that the compiled element contains the templated content
        expect(element.hasClass('label-primary')).toBe(true);
        expect(element.hasClass('label')).toBe(true);
        expect(element.html()).toContain("compliant");
    });

        // 'red': 'danger',
        // 'gray': 'default',
        // 'orange': 'warning',
        // 'green': 'success',
        // 'blue': 'primary',
        // 'light blue': 'info'
    it('Maps colors to semantic bootstrap class names', function() {
        var element = $compile('<be-label name="compliant" color="red"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-danger')).toBe(true);

        element = $compile('<be-label name="compliant" color="gray"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-default')).toBe(true);

        element = $compile('<be-label name="compliant" color="orange"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-warning')).toBe(true);

        element = $compile('<be-label name="compliant" color="green"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-success')).toBe(true);

        element = $compile('<be-label name="compliant" color="blue"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-primary')).toBe(true);

        element = $compile('<be-label name="compliant" color="light blue"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-info')).toBe(true);
    });


});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// taken from the angularjs testing page
// http://docs.angularjs.org/guide/dev_guide.unit-testing

// create dummy angularJS app to attach filter(s)
var myBEUploaderDirectiveApp = angular.module('myBEUploaderDirectiveApp', ['beUploader']);

describe("The beUploader directive", function() {
    var g_message, g_file, g_progress;
    var $compile;
    var $rootScope;
    var uploader_html = '<div be-uploader sourcetype="assessor" importrecord="5" buttontext="Upload your building list .csv file" eventfunc="uploaderfunc(message, filename, progress)" ng-hide="uploader.in_progress"></div>';
    beforeEach(module('myBEUploaderDirectiveApp'));
    // Store references to $rootScope and $compile
    // so they are available to all tests in this describe block
    beforeEach(inject(function(_$compile_, _$rootScope_){
      // The injector unwraps the underscores (_) from around the parameter names when matching
      $compile = _$compile_;
      $rootScope = _$rootScope_;
      $rootScope.eventfunc = function (fine_object) {
        console.log({fin: fine_object});
        g_message = fine_object.message;
        g_file = fine_object.file;
        g_progress = fine_object.progress;
      };
      window.BE = window.BE || {};
      window.BE.FILE_UPLOAD_DESTINATION = 'S3';
    }));

    it('Creates the fineuploader element', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        
        // act
        $rootScope.$digest();

        // assert
        expect(element.html()).toContain("qq-uploader");
        expect(element.html()).toContain("qq-upload-button");
    });

    it('Contains the buttontext specified', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);

        // act
        $rootScope.$digest();

        // assert
        expect(element.html()).toContain("Upload your building list .csv file");
    });

    it('Only allows one file to be uploaded at a time', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");

        // act
        $rootScope.$digest();

        // assert
        expect(func._options.multiple).toBe(false);
    });

    it('Uses the callback function for invalid file types', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.jpeg");

        // act
        $rootScope.$digest();
        func._options.showMessage("there was an invalid extension. Valid extension(s): .csv");


        // assert
        expect(g_message).toBe("invalid_extension");
    });

    it('Uses the callback function to share its state: upload started',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';
        
        // act
        $rootScope.$digest();
        func._options.callbacks.onSubmitted(1, filename);


        // assert
        expect(g_message).toBe("upload_submitted");
        expect(g_file.filename).toBe(filename);
    });

    it('Uses the callback function to share its state: in progress',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';
        var loaded = 10;
        var total = 100;
        
        // act
        $rootScope.$digest();
        func._options.callbacks.onProgress(1, filename, loaded, total);


        // assert
        expect(g_message).toBe("upload_in_progress");
        expect(g_file.filename).toBe(filename);
        expect(g_progress.loaded).toBe(loaded);
        expect(g_progress.total).toBe(total);
    });

    it('Uses the callback function to share its state: complete',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';

        
        // act
        $rootScope.$digest();
        func._options.callbacks.onComplete(1, filename, {success: true});


        // assert        
        expect(g_message).toBe("upload_complete");
        expect(g_file.filename).toBe(filename);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: building_detail_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, ngFilter, delete_called;
    var building_detail_ctrl, building_detail_ctrl_scope, modalInstance, labels;
    var mock_building_services, mock_project_service;
    var mock_building;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          urls,
          $q,
          building_services,
          project_service,
          $filter) {
            controller = $controller;
            scope = $rootScope;
            ngFilter = $filter;
            building_detail_ctrl_scope = $rootScope.$new();
            modal_state = "";
            delete_called = false;

            // mock the building_services factory methods used in the controller
            // and return their promises
            mock_building_services = building_services;
            mock_project_service = project_service;

            spyOn(mock_project_service, "get_project")
                .andCallFake(function(project_slug){
                    return $q.when(
                        {
                            "status": "success",
                            "project": {
                                id: 33,
                                name: "test project",
                                slug: project_slug
                            }
                        }
                    );
                }
            );
            spyOn(mock_project_service, "get_labels")
                .andCallFake(function(){
                    return $q.when(
                        {
                            "status": "success",
                            "labels": [{
                                id: 44,
                                name: "bad label",
                                color: "red"
                            }]
                        }
                    );
                }
            );
            spyOn(mock_project_service, "update_project_building")
                .andCallFake(function(building_id, project, label){
                    return $q.when(
                        {
                            "status": "success",
                            "approver": "bob doe",
                            "approved_date": "01/01/2012"
                        }
                    );
                }
            );
            spyOn(mock_building_services, "update_building")
                .andCallFake(function (building, org_id){
                    mock_building = building;
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_building_detail_controller(){
        var fake_building = {
            id: 511,
            pk: 511,
            gross_floor_area: 123456,
            gross_floor_area_source: 2,
            city: "DC",
            city_source: 4,
            tax_lot_id: "11/22",
            tax_lot_id_source: 3,
            extra_data: {
                'some other key': 12344,
                'some other key that is not in a parent': 223
            },
            extra_data_sources: {
                'some other key': 2,
                'some other key that is not in a parent': 3
            },
            created: "at some point"
        };
        var fake_imported_buildings = [
            {
                id: 2,
                pk: 2,
                gross_floor_area: 123456,
                gross_floor_area_source: null,
                city: "Washington, DC",
                city_source: null,
                extra_data: {
                    'some other key': 123,
                    'some other key that is not in a child': 333,
                    'some floor area': 444
                },
                extra_data_sources: {
                    'some other key': null,
                    'some other key that is not in a child': 111,
                    'some floor area': 444
                },
                created: "test"
            },
            {
                id: 3,
                pk: 3,
                gross_floor_area: 2111111,
                gross_floor_area_source: null,
                city: "Washington",
                city_source: null,
                tax_lot_id: "11/22",
                tax_lot_id_source: null,
                extra_data: {
                    'make it four': 4
                },
                extra_data_sources: {
                    'make it four': null
                }
            },{
                id: 4,
                pk: 4,
                gross_floor_area: 2111111,
                gross_floor_area_source: null,
                city: "Washington",
                city_source: null,
                tax_lot_id: "11/22",
                tax_lot_id_source: null,
                extra_data: {
                    'make it four': 5
                },
                extra_data_sources: {
                    'make it four': null
                }
            }
        ];
        var fake_payload = {
            "status": "success",
            "building": fake_building,
            "imported_buildings": fake_imported_buildings,
            "projects": [],
            "user_org_id": 42
        };
        var fake_all_columns = [{
            "title": "PM Property ID",
            "sort_column": "pm_property_id",
            "class": "is_aligned_right",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Tax Lot ID",
            "sort_column": "tax_lot_id",
            "class": "is_aligned_right",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Custom ID 1",
            "sort_column": "custom_id_1",
            "class": "is_aligned_right whitespace",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Property Name",
            "sort_column": "property_name",
            "class": "",
            "title_class": "",
            "type": "string",
            "field_type": "building_information",
            "sortable": true,
            "checked": false
        }];
        building_detail_ctrl = controller('building_detail_controller', {
            $scope: building_detail_ctrl_scope,
            $routeParams: {
                building_id: 1,
                project_id: 2
            },
            building_payload: fake_payload,
            all_columns: {
                fields: fake_all_columns
            },
            audit_payload: {
                audit_logs: []
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should have an building payload", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.building.id).toBe(511);
        expect(building_detail_ctrl_scope.imported_buildings[0].id).toBe(2);
    });

    it("should get labels on load", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.labels[0].id).toBe(44);
        expect(building_detail_ctrl_scope.labels[0].name).toBe("bad label");
        expect(building_detail_ctrl_scope.labels[0].color).toBe("red");
    });

    it("should highlight the active project", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.is_active_project({id:33}))
        .toBe(true);
        expect(building_detail_ctrl_scope.is_active_project({id:34}))
        .toBe(false);
        building_detail_ctrl_scope.project = undefined;
        expect(building_detail_ctrl_scope.is_active_project({id:34}))
        .toBe(false);
    });

    it("should make a copy of building while making edits", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.save_building_state();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;

        // assertions
        expect(building_detail_ctrl_scope.building_copy.gross_floor_area)
        .toBe(123456);
    });
    it("should restore the copy of building if a user clicks cancel",
        function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.save_building_state();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;
        building_detail_ctrl_scope.restore_building();

        // assertions
        expect(building_detail_ctrl_scope.building.gross_floor_area)
        .toBe(123456);
        expect(building_detail_ctrl_scope.building.edit_form_showing).toBe(false);
    });
    it("should save a building when a user clicks the save button", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;
        building_detail_ctrl_scope.save_building();

        // assertions
        expect(mock_building_services.update_building)
        .toHaveBeenCalledWith(building_detail_ctrl_scope.building, 42);
        expect(mock_building.gross_floor_area).toEqual(43214);
    });
    it("should show a default label if a building doesn't have one", function() {
        // arrange
        create_building_detail_controller();
        var building_with_label = {
            label: {
                name: "hello",
                label: "success"
            }
        };
        var building_without_label = {};
        var label_with, label_without;

        // act
        building_detail_ctrl_scope.$digest();
        label_with = building_detail_ctrl_scope.get_label(building_with_label);
        label_without = building_detail_ctrl_scope.get_label(building_without_label);

        // assertions
        expect(label_with).toEqual({
                name: "hello",
                label: "success"
            });
        expect(label_without).toEqual({
                name: "Add Label",
                label: "default"
            });
    });

    it("should show a project or buildings breadcrumb", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.user.project_slug = "project_1";

        // assertions
        expect(building_detail_ctrl_scope.is_project()).toEqual(true);
        building_detail_ctrl_scope.user.project_slug = undefined;
        expect(building_detail_ctrl_scope.is_project()).toEqual(false);

    });
    it("should show the default projects table if a user has no compliance" +
        " projects", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.user.has_projects()).toEqual(false);
        building_detail_ctrl_scope.projects = [{id: 1, name: "a"}];
        expect(building_detail_ctrl_scope.user.has_projects()).toEqual(true);

    });

    it("should set only building attribute to master, not ids or children", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.is_valid_key('id')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('pk')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('pk_source')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key(' extra_data ')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('gross_floor_area'))
          .toEqual(true);
    });
    it("should update a project-building label", function() {
        // arrange
        create_building_detail_controller();
        var project = {
            id: 2,
            building: {}
        };

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.update_project_building(project,
            {
                name: "label name",
                color: "red"
            });
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(mock_project_service.update_project_building).toHaveBeenCalled();
        expect(project.building.approver).toEqual("bob doe");
        expect(project.building.approved_date).toEqual("01/01/2012");
        expect(project.building.label.name).toEqual("label name");
        expect(project.building.label.color).toEqual("red");

    });
    it("should set a field as source when clicked", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[0].is_master = true;
        expect(building_detail_ctrl_scope.building.gross_floor_area_source)
          .not.toEqual(building_detail_ctrl_scope.building.id);
        building_detail_ctrl_scope.set_self_as_source('gross_floor_area');
        building_detail_ctrl_scope.set_self_as_source('some other key', true);
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.building.gross_floor_area_source)
          .toEqual(building_detail_ctrl_scope.building.id);
        expect(building_detail_ctrl_scope.imported_buildings[0].is_master)
          .toEqual(false);
    });
    it("should set a column as the dominant source when clicked", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[1].is_master = true;
        building_detail_ctrl_scope.make_source_default(
            building_detail_ctrl_scope.imported_buildings[0]);
        building_detail_ctrl_scope.$digest();

        // assertions
        var b = building_detail_ctrl_scope.building,
            i = building_detail_ctrl_scope.imported_buildings[0],
            i_other = building_detail_ctrl_scope.imported_buildings[1];

        expect(b.gross_floor_area_source).toEqual(i.id);
        expect(b.id).not.toEqual(i.id);
        expect(b.pk).not.toEqual(i.id);
        expect(b.city).toEqual(i.city);
        expect(b.city_source).toEqual(i.id);
        expect(b.tax_lot_id).toEqual("11/22");
        expect(b.tax_lot_id_source).toEqual(i_other.id);
        expect(b.extra_data['some other key']).toEqual(123);
        expect(b.extra_data_sources['some other key']).toEqual(i.id);
        expect(b.extra_data['some other key that is not in a child']).toEqual(333);
        expect(b.extra_data_sources['some other key that is not in a child']).toEqual(i.id);
        expect(b.extra_data['some other key that is not in a parent']).toEqual(223);
        expect(b.extra_data_sources['some other key that is not in a parent']).toEqual(i_other.id);
        expect(b.created).toEqual("at some point");

        expect(i.is_master).toEqual(true);
        expect(i_other.is_master).toEqual(false);
    });
    it("should set the master building value when parent's value is clicked",
        function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[1].is_master = true;
        building_detail_ctrl_scope.set_building_attribute(
            building_detail_ctrl_scope.imported_buildings[0], 'city');
        building_detail_ctrl_scope.set_building_attribute(
            building_detail_ctrl_scope.imported_buildings[0], 'some other key', true);
        building_detail_ctrl_scope.$digest();

        // assertions
        var b = building_detail_ctrl_scope.building,
            i = building_detail_ctrl_scope.imported_buildings[0],
            i_other = building_detail_ctrl_scope.imported_buildings[1];

        expect(b.id).not.toEqual(i.id);
        expect(b.pk).not.toEqual(i.id);
        expect(b.city).toEqual(i.city);
        expect(b.city_source).toEqual(i.id);
        expect(b.tax_lot_id).toEqual("11/22");
        expect(b.tax_lot_id_source).toEqual(i_other.id);
        expect(b.extra_data['some other key']).toEqual(123);
        expect(b.extra_data_sources['some other key']).toEqual(i.id);

        expect(i.is_master).toEqual(false);
        expect(i_other.is_master).toEqual(false);
    });

    it("should display all the data within all the buildings", function() {
        // arrange
        create_building_detail_controller();
        var keys;

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        var edc = building_detail_ctrl_scope.data_columns;

        // should not duplicate keys
        expect(edc.length).toEqual(8);
        keys = edc.map(function ( d ) {
            return d.key;
        });
        expect(keys.indexOf('make it four')).toEqual(4);
    });

    it("should display Floor Areas", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.$digest();

        // assertions
        var area_fields = building_detail_ctrl_scope.floor_area_fields;
        expect(area_fields.length).toEqual(1);
    });

    it("should display Floor Areas with number", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.get_number("")).toEqual(0);
        expect(building_detail_ctrl_scope.get_number("123,123,123")).toEqual(123123123);
        expect(building_detail_ctrl_scope.get_number("123,123,123.123")).toEqual(123123123.123);
        expect(building_detail_ctrl_scope.get_number("-123,123,123")).toEqual(-123123123);
        expect(building_detail_ctrl_scope.get_number(-123123123)).toEqual(-123123123);


    });
});

describe("controller: concat_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var scope, controller, modal_state;
    var edit_ctrl, concat_modal_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label, mock_mapping_service, mock_matching_service;
    var global_step = 1;
    var global_dataset = {};

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
            $controller, $rootScope, $modal, urls, $q
        ) {
            controller = $controller;
            scope = $rootScope;
            concat_modal_ctrl_scope = $rootScope.$new();
            concat_modal_ctrl_scope.concat_columns = [];
            modal_state = "";
        }
    ));

    var mock_building_column_types = [
        'address1', 'city', 'state', 'postal_code'
    ];

    var mock_raw_columns = [
        {
            name: 'Address',
            suggestion: 'address1',
            confidence: 1,
            raw_data: [
                '234 Database way',
                '23444 Huh hwy',
                '23444 Huh hwy',
                '23444 Huh hwy',
                '1223 face pl.'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        },
        {
            name: 'City',
            suggestion: 'city',
            confidence: 1,
            raw_data: [
                'Mega City', 'Mega City', 'Mega City', 'Mega City', 'Mega City'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        },
        {
            name: 'Zip',
            suggestion: '',
            confidence: 0,
            raw_data: [
                '234233', '234233', '234233', '234233', '234233'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        }
    ];

    // this is outside the beforeEach so it can be configured by each unit test
    function create_concat_modal_controller(){
        edit_ctrl = controller('concat_modal_ctrl', {
            $scope: concat_modal_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            building_column_types: mock_building_column_types,
            raw_columns: mock_raw_columns
        });
    }

    /*
     * Test scenarios
     */

    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.close_concat_modal();
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should mangle scope appropriately during concatenation", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(3);

        // arrange
        concat_modal_ctrl_scope.concat_columns =
            concat_modal_ctrl_scope.raw_columns.slice(0);
        concat_modal_ctrl_scope.raw_columns = [];

        // act
        concat_modal_ctrl_scope.$digest();
        concat_modal_ctrl_scope.save_concat();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(1);
        expect(
            concat_modal_ctrl_scope.raw_columns[0].is_concatenated
        ).toEqual(true);
    });

    it("should modify the raw_data of our modified TCM correctly", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(3);

        // arrange
        concat_modal_ctrl_scope.concat_columns =
            concat_modal_ctrl_scope.raw_columns.slice(0);
        concat_modal_ctrl_scope.raw_columns = [];

        // act
        concat_modal_ctrl_scope.$digest();
        concat_modal_ctrl_scope.save_concat();

        var expected_raw = [
            '234 Database way Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '1223 face pl. Mega City 234233'
        ];

        // assertions
        expect(
            concat_modal_ctrl_scope.raw_columns[0].raw_data
        ).toEqual(expected_raw);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: create_organization_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_organization_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, organization_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        mock_organization_service = organization_service;
        spyOn(mock_organization_service, "create_sub_org")
            .andCallFake(function(org, sub_org){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_organization_modal_ctrl(){
        ctrl = ctrl('create_organization_modal_ctrl', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            organization: {organization_id: 1}
        });
    }

    /*
     * Test scenarios
     */

    it("should call the organization service to add a new sub_org",
        function() {
        // arrange
        create_organization_modal_ctrl();

        // act
        ctrl_scope.$digest();
        ctrl_scope.sub_org.name = "my shiny new org";
        ctrl_scope.sub_org.email = "jb.smooth@be.com";
        ctrl_scope.submit_form(true);

        // assertions
        expect(mock_organization_service.create_sub_org)
            .toHaveBeenCalledWith(
                {
                    organization_id: 1
                },
                {
                    name: "my shiny new org",
                    email: "jb.smooth@be.com"
                }
            );
    });
    
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: data_upload_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_uploader_service, scope, controller, modal_state;
    var edit_ctrl, data_upload_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label, mock_mapping_service, mock_matching_service;
    var global_step = 1;
    var global_dataset = {};
    var return_labels = [
        {
            "name": 'compliant',
            "color": 'green',
            "id": 1
        },
        {
            "name": "new label",
            "color": "blue",
            "id": 2
        }
    ];

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, uploader_service, mapping_service, matching_service) {
            controller = $controller;
            scope = $rootScope;
            data_upload_ctrl_scope = $rootScope.$new();
            modal_state = "";

            // mock the uploader_service factory methods used in the controller
            // and return their promises
            mock_uploader_service = uploader_service;
            mock_mapping_service = mapping_service;
            mock_matching_service = matching_service;
            spyOn(mock_uploader_service, "get_AWS_creds")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "AWS_CLIENT_ACCESS_KEY": "123",
                            "AWS_UPLOAD_BUCKET_NAME": "test-bucket"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "check_progress")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "progress": "25.0"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "create_dataset")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "id": 3,
                                "name": dataset_name

                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error",
                                "message": "name already in use"
                            }
                        );
                    }
                }
            );
            spyOn(mock_uploader_service, "save_raw_data")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "file_id": 3
                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error"
                            }
                        );
                    }
                }
            );
            spyOn(mock_mapping_service, "start_mapping")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "file_id": 3
                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error"
                            }
                        );
                    }
                }
            );
            spyOn(mock_matching_service, "start_system_matching")
            .andCallFake(function(file_id){
                // return $q.reject for error scenario
                return $q.when(
                    {
                        "status": "success",
                        "file_id": 3
                    }
                );
            });

        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_data_upload_modal_controller(){
        edit_ctrl = controller('data_upload_modal_ctrl', {
            $scope: data_upload_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            step: global_step,
            dataset: global_dataset
        });
    }

    /*
     * Test scenarios
     */

    it("should close the modal when the close function is called", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.close();
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel function is called", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.cancel();
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

    it("should start at the step provided", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(1);

        // arrange
        global_step = 2;
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(2);
    });

    it("should goto different steps", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var step;
        step = 2;
        data_upload_ctrl_scope.goto_step(step);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(step);
    });

    it("disables the 'Name it' button if no text is entered", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(true);
    });
    it("disables the 'Name it' button if no text is entered, then cleared",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.dataset.name = undefined;
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(true);
    });
    it("enables the 'Name it' button if text is entered", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.dataset.name = "my dataset name";
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(false);
    });
    it("should show an alert if the dataset name is already in use",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.create_dataset("fail");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.alert).toBe(true);
    });
    it("should not show an alert if the dataset name is not already in use",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.create_dataset("my shiny new dataset");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.alert).toBe(false);
    });
    it("after creating a dataset, stores the dataset id", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var ds_name = "my shiny new dataset";
        data_upload_ctrl_scope.create_dataset(ds_name);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.id).toBe(3);
        expect(data_upload_ctrl_scope.dataset.name).toBe(ds_name);
    });
    it("after uploading a file, stores the file id", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var message, filename;
        message = "upload_complete";
        filename = "file1.csv";

        // act
        data_upload_ctrl_scope.uploaderfunc(message, {
            filename: filename,
            file_id: 20140313
        });
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.import_file_id).toBe(20140313);
    });
    it("should show an invalid extension alert if a file with an invalid" +
        "extension is loaded", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.uploaderfunc("invalid_extension");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.invalid_extension_alert)
            .toBe(true);
    });
    it("should hide the upload button after the user selects a file",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename;
        message = "upload_submitted";
        filename = "file1.csv";

        // act
        data_upload_ctrl_scope.uploaderfunc(message, {filename: filename});
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.filename).toBe(filename);
        expect(data_upload_ctrl_scope.uploader.in_progress).toBe(true);
    });
    it("should show the progressbar during upload",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename, progress;
        message = "upload_in_progress";
        filename = "file1.csv";
        progress = {
            loaded: 10,
            total: 100
        };

        // act
        data_upload_ctrl_scope.uploaderfunc(message, filename, progress);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.in_progress).toBe(true);
        expect(data_upload_ctrl_scope.uploader.progress).toBe(2.5);
    });
    it("should start saving the energy data when the file has been uploaded",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename;
        message = "upload_complete";
        filename = "file1.csv";
        data_upload_ctrl_scope.step.number = 4;

        // act
        data_upload_ctrl_scope.uploaderfunc(message, filename);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.status_message)
            .toBe("saving energy data");
    });

    it("should take an dataset payload", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.name).toBe("");
        expect(data_upload_ctrl_scope.dataset.filename).toBe("");
        expect(data_upload_ctrl_scope.dataset.id).toBe(0);
    });

    it("should extend a custom dataset payload", function() {
        // arrange
        global_dataset = {
            id: 100,
            filename: "seed_data.csv",
            name: "Compliance Project"
        };
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.name).toBe("Compliance Project");
        expect(data_upload_ctrl_scope.dataset.filename).toBe("seed_data.csv");
        expect(data_upload_ctrl_scope.dataset.id).toBe(100);
        expect(data_upload_ctrl_scope.dataset.alert).toBe(false);

    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: dataset_detail_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, ngFilter, delete_called;
    var dataset_detail_ctrl, dataset_detail_ctrl_scope, modalInstance, labels;

    

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, dataset_service, $filter) {
            controller = $controller;
            scope = $rootScope;
            ngFilter = $filter;
            dataset_detail_ctrl_scope = $rootScope.$new();
            modal_state = "";
            delete_called = false;

            // mock the dataset_service factory methods used in the controller
            // and return their promises
            mock_dataset_service = dataset_service;
            spyOn(mock_dataset_service, "get_dataset")
                .andCallFake(function(dataset_id){
                    // return $q.reject for error scenario
                    var fake_importfiles = [
                        {
                            name: "DC_CoveredBuildings_50k.csv",
                            number_of_buildings: 511,
                            number_of_mappings: 511,
                            number_of_cleanings: 1349,
                            source_type: "Assessed Raw",
                            number_of_matchings: 403
                        },
                        {
                            name: "DC_ESPM_Report.csv",
                            number_of_buildings: 511,
                            number_of_matchings: 403,
                            source_type: "Portfolio Raw"
                        }
                    ];
                    var fake_dataset = {
                        name: "DC 2013 data",
                        last_modified: (new Date()).getTime(),
                        last_modified_by: "john.s@buildingenergy.com",
                        number_of_buildings: 89,
                        id: 1,
                        importfiles: fake_importfiles
                    };
                    var fake_payload = {
                        "status": "success",
                        "dataset": fake_dataset
                    };
                    if (delete_called) {
                        fake_payload.dataset.importfiles.pop();
                    }
                    console.log({delete_called: delete_called, ds: fake_payload});
                    return $q.when(fake_payload);
                }
            );

            spyOn(mock_dataset_service, "delete_file")
                .andCallFake(function(import_file){
                    delete_called = true;
                    console.log({d: "delete_called"});
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_detail_controller(){
        var fake_importfiles = [
            {
                name: "DC_CoveredBuildings_50k.csv",
                number_of_buildings: 511,
                number_of_mappings: 511,
                number_of_cleanings: 1349,
                source_type: "Assessed Raw",
                number_of_matchings: 403
            },
            {
                name: "DC_ESPM_Report.csv",
                number_of_buildings: 511,
                number_of_matchings: 403,
                source_type: "Portfolio Raw"
            }
        ];
        var fake_dataset = {
            name: "DC 2013 data",
            last_modified: (new Date()).getTime(),
            last_modified_by: "john.s@buildingenergy.com",
            number_of_buildings: 89,
            id: 1,
            importfiles: fake_importfiles
        };
        var fake_payload = {
            "status": "success",
            "dataset": fake_dataset
        };
        dataset_detail_ctrl = controller('dataset_detail_controller', {
            $scope: dataset_detail_ctrl_scope,
            dataset_payload: fake_payload
        });
    }

    /*
     * Test scenarios
     */

    it("should have an data set payload with import files", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        dataset_detail_ctrl_scope.$digest();

        // assertions
        expect(dataset_detail_ctrl_scope.dataset.importfiles.length).toBe(2);
    });

    it("should show an alert when the delete icon is clicked", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        dataset_detail_ctrl_scope.$digest();
        var importfiles = dataset_detail_ctrl_scope.dataset.importfiles;
        dataset_detail_ctrl_scope.delete_file(importfiles[0]);
        dataset_detail_ctrl_scope.$digest();

        // assertions
        expect(dataset_detail_ctrl_scope.dataset.importfiles.length).toBe(1);
    });
   
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: dataset_list_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, modal_state;
    var edit_ctrl, dataset_list_ctrl_scope, modalInstance, labels;
    var location;

    

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, uploader_service,
            $location) {
            controller = $controller;
            scope = $rootScope;
            dataset_list_ctrl_scope = $rootScope.$new();
            modal_state = "";
            location = $location;

            // mock the uploader_service factory methods used in the controller
            // and return their promises
            mock_uploader_service = uploader_service;
            spyOn(mock_uploader_service, "get_AWS_creds")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "AWS_CLIENT_ACCESS_KEY": "123",
                            "AWS_UPLOAD_BUCKET_NAME": "test-bucket"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "create_dataset")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "import_record_id": 3,
                                "import_record_name": dataset_name

                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error",
                                "message": "name already in use"
                            }
                        );
                    }
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_list_controller(){
        var fake_datasets_payload = {
            "status": "success",
            "datasets": [
                {
                    name: "DC 2013 data",
                    last_modified: (new Date()).getTime(),
                    last_modified_by: "john.s@buildingenergy.com",
                    number_of_buildings: 89
                },
                {
                    name: "DC 2014 data",
                    last_modified: (new Date()).getTime() -
                        1550 * 60 * 60 * 1000,
                    last_modified_by: "gavin.m@buildingenergy.com",
                    number_of_buildings: 70
                }
            ]
        };
        edit_ctrl = controller('dataset_list_controller', {
            $scope: dataset_list_ctrl_scope,
            datasets_payload: fake_datasets_payload
        });
    }

    /*
     * Test scenarios
     */

    it("should have a dataset_payload", function() {
        // arrange
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();

        // assertions
        expect(dataset_list_ctrl_scope.datasets.length).toEqual(2);
    });

    it("should disable the mapping button if the dataset has no" +
        " Assessor files", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Portfolio Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_assessor_files(dataset);

        // assertions
        expect(disabled).toEqual(true);
    });

    it("should enable the mapping button if the dataset has at least one" +
        " Assessor file", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_assessor_files(dataset);

        // assertions
        expect(disabled).toEqual(false);
    });
    it("should disable the matching button if the dataset has no" +
        " Portfolio Manger files", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Assessed Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_pm_files(dataset);

        // assertions
        expect(disabled).toEqual(true);
    });
    it("should enable the matching button if the dataset has at least one" +
        " Portfolio Manger file", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_pm_files(dataset);

        // assertions
        expect(disabled).toEqual(false);
    });
    it("should navigate to the mapping page of the first assessed" +
        " import file when the ``Mapping`` button is clicked", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Assessed Raw",
                    id: 3
                },
                {
                    source_type: "Assessed Raw",
                    id: 5
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        dataset_list_ctrl_scope.goto_mapping(dataset);

        // assertions
        expect(location.path()).toBe('/data/mapping/3');
    });
    it("should navigate to the matching page of the first Portfolio Manager" +
        " import file when the ``Matching`` button is clicked", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw",
                    id: 3
                },
                {
                    source_type: "Portfolio Raw",
                    id: 5
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        dataset_list_ctrl_scope.goto_matching(dataset);

        // assertions
        expect(location.path()).toBe('/data/matching/3');
    });

   
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: delete_modal_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, building_services, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        // mock the export_service factory methods used in the controller
        // and return their promises
        mock_building_services = building_services;
        spyOn(mock_building_services, "delete_buildings")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_delete_modal_controller(){
        ctrl = ctrl('delete_modal_controller', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            search: { 
                selected_buildings: [1,2],
                filter_params: {},
                select_all_checkbox: false,
                order_by: "",
                sort_reverse: false,
                number_matching_search: 1000
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should start at the delete page", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.delete_state).toEqual("delete"); 
    });
    it("should save the search paramaters",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.delete_payload;
        expect(b.selected_buildings).toEqual([1,2]);
        expect(b.filter_params).toEqual({});
        expect(b.order_by).toEqual("");
        expect(b.sort_reverse).toEqual(false);
        expect(b.select_all_checkbox).toEqual(false);
    });
    it("should delete when the delete button is clicked",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.delete_buildings();

        // assertions
        expect(ctrl_scope.delete_state).toEqual("prepare");
        expect(mock_building_services.delete_buildings).toHaveBeenCalled();
    });
    it("should show the success page when the delete is finished",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.delete_buildings();
        ctrl_scope.$digest();

        // assertions
        expect(mock_building_services.delete_buildings).toHaveBeenCalled();
        expect(ctrl_scope.delete_state).toEqual("success");
    });
    it("should show the number of buildings to be deleted",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        var number_to_delete = ctrl_scope.number_to_delete();

        // assertions
        expect(number_to_delete).toEqual(2);
    });
    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.close();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.cancel();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

  
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myDistrictApp = angular.module('myDistrictApp', ['district']);

describe("The district filter", function() {
    beforeEach(module('myDistrictApp'));
    it('replaces `district` with `County/District/Ward/Borough`',
        inject(function(districtFilter) {
            // normal cases
            expect(districtFilter('district')).toBe('County/District/Ward/Borough');
            expect(districtFilter('District')).toBe('County/District/Ward/Borough');
            expect(districtFilter('DistRict')).toBe('County/District/Ward/Borough');
            expect(districtFilter('DISTRICT')).toBe('County/District/Ward/Borough');
            expect(districtFilter('aDISTRICT')).toBe('aDISTRICT');
            expect(districtFilter('')).toBe('');
            expect(districtFilter('district ')).toBe('district ');
            expect(districtFilter('ok')).toBe('ok');
            expect(districtFilter(undefined)).toBe(undefined);
            expect(districtFilter(null)).toBe(null);
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: edit_label_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, modal_state;
    var edit_ctrl, edit_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label;
    var return_labels = [
        {
            "name": 'compliant',
            "color": 'green',
            "id": 1
        },
        {
            "name": "new label",
            "color": "blue",
            "id": 2
        }
    ];

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, urls, $q, project_service) {
        controller = $controller;
        scope = $rootScope;
        edit_ctrl_scope = $rootScope.$new();
        modal_state = "";

        // mock the project_service factory methods used in the controller
        // and return their promises
        mock_project_service = project_service;
        spyOn(mock_project_service, "get_labels")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success", "labels": return_labels});
            }
        );
        spyOn(mock_project_service, "add_label")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
        spyOn(mock_project_service, "delete_label")
            .andCallFake(function(label){
                deleted_label = label;
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
        spyOn(mock_project_service, "update_label")
            .andCallFake(function(label){
                updated_label = label;
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );

    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_edit_modal_controller(){
        var labels = [
            {
                "name": 'compliant',
                "color": 'green',
                "id": 1
            }
        ];

        edit_ctrl = controller('edit_label_modal_ctrl', {
            $scope: edit_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            labels: labels
        });
    }

    /*
     * Test scenarios
     */

    it("should initialize the default label", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.$digest();
        edit_ctrl_scope.initialize_label_modal();

        // assertions
        expect(edit_ctrl_scope.label_modal.color).toBe("gray");
        expect(edit_ctrl_scope.label_modal.label).toBe("default");
        expect(edit_ctrl_scope.label_modal.name).toBe("");
        expect(edit_ctrl_scope.modal.label.state).toBe("create");
    });

    it("should get the labels available to an organization", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.add_label({});  // calls private get_labels
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.labels.length).toBe(2);
    });

    it("should add a label in the user's organization", function() {
        // arrange
        create_edit_modal_controller();
        var label_to_add = {
            color: "blue",
            label: "primary",
            name: "new label"
        };

        // act
        edit_ctrl_scope.add_label(label_to_add);
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.labels.length).toBe(2);
        expect(edit_ctrl_scope.labels[1].color).toBe("blue");
        expect(edit_ctrl_scope.labels[1].name).toBe("new label");
    });

    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.close();
        edit_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.cancel();
        edit_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

    it("sets the label_modal to the label when its edit button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.edit_label(label);
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.label_modal.color).toBe(label.color);
        expect(edit_ctrl_scope.label_modal.name).toBe(label.name);
        expect(edit_ctrl_scope.modal.label.state).toBe("edit");

        // assert that edit_ctrl_scope.label_modal is a copy and not a reference to label
        edit_ctrl_scope.label_modal.name = "random name here";
        expect(edit_ctrl_scope.label_modal.name).not.toBe(label.name);
    });
    
    it("deletes the appropriate label when the delete button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.delete_label(label);
        edit_ctrl_scope.$digest();

        // assertions
        expect(deleted_label).toBe(label);
    });

    it("updates the appropriate label when the update label button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.edit_label(label);
        edit_ctrl_scope.$digest();
        edit_ctrl_scope.label_modal.name = "harry";
        edit_ctrl_scope.label_modal.color = "blue";
        edit_ctrl_scope.update_label(edit_ctrl_scope.label_modal);
        edit_ctrl_scope.$digest();

        // assertions
        expect(mock_project_service.update_label).toHaveBeenCalledWith(edit_ctrl_scope.label_modal);
        expect(updated_label).toBe(edit_ctrl_scope.label_modal);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: export_modal_controller", function(){
    // globals set up and used in each test scenario
    var mock_export_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, export_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        // mock the export_service factory methods used in the controller
        // and return their promises
        mock_export_service = export_service;
        spyOn(mock_export_service, "export_buildings")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success", "export_id": "123456"});
            }
        );
        spyOn(mock_export_service, "export_buildings_progress")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({
                    "status": "success",
                    "buildings_processed": 1000
                });
            }
        );
            spyOn(mock_export_service, "export_buildings_download")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({
                    "status": "success",
                    "url": "#"
                });
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_export_modal_controller(){
        ctrl = ctrl('export_modal_controller', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            search: { 
                selected_buildings: [],
                filter_params: {},
                select_all_checkbox: false,
                order_by: "",
                sort_reverse: false,
                number_matching_search: 1000
            },
            selected_fields: ['tax_lot_id', 'postal_code'],
            project: {
                id: 11
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should start at the create page", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.export_state).toEqual("create"); 
    });
    it("should start with an empty name and default file type of 'xls'",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.building_export;
        expect(b.export_name).toEqual("");
        expect(b.export_type).toEqual("xls");
    });
    it("should save the search paramaters",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.building_export;
        expect(b.selected_buildings).toEqual([]);
        expect(b.filter_params).toEqual({});
        expect(b.order_by).toEqual("");
        expect(b.sort_reverse).toEqual(false);
        expect(b.select_all_checkbox).toEqual(false);
        expect(b.selected_fields).toEqual(['tax_lot_id', 'postal_code']);
        expect(b.project_id).toEqual(11);
        expect(ctrl_scope.progress_denominator).toEqual(0);
    });
    it("should kick off the export process when the export button is clicked",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.export_buildings();

        // assertions
        expect(ctrl_scope.export_state).toEqual("prepare");
        expect(mock_export_service.export_buildings).toHaveBeenCalled();
    });
    it("should show the success page when the data is ready",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.show_success_page("123");
        ctrl_scope.$digest();

        // assertions
        expect(mock_export_service.export_buildings_download).toHaveBeenCalled();
        expect(ctrl_scope.export_state).toEqual("success");
    });
    it("should update the progress bar",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.monitor_progress("123", 1000);
        ctrl_scope.$digest();
        timeout.flush();

        // assertions
        expect(mock_export_service.export_buildings_progress).toHaveBeenCalled();
        expect(ctrl_scope.progress_percentage).toEqual(100);
        expect(ctrl_scope.progress_numerator).toEqual(1000);
        expect(ctrl_scope.progress_denominator).toEqual(1000);
    });
    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.close();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.cancel();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

  
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
/**
 * tests fromNow angularjs filter wrapper of moment.js
 * uses epoch milliseconds as that is what the back-end returns
 */

// create dummy angularJS app to attach filter(s)
var myfromNowFilterApp = angular.module('myfromNowFilterApp', ['fromNow']);

describe("The fromNow filter", function() {
    beforeEach(module('myfromNowFilterApp'));

    it('shows the present time as "a few seconds ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('a few seconds ago');
        })
    );

    it('shows 5 minutes ago as "5 minutes ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 5  * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('5 minutes ago');
        })
    );

    it('shows 4 hours ago as "4 hours ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 4 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('4 hours ago');
        })
    );

    it('shows 24 hours ago as "a day ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 24 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('a day ago');
        })
    );

    it('shows 36 hours ago as "2 days ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 36 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('2 days ago');
        })
    );

    it('shows 1550 hours ago as "2 months ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 1550 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('2 months ago');
        })
    );

    it('defaults to "a few seconds ago" for undefined values',
        inject(function(fromNowFilter) {
            // arrange

            // act

            // assert
            expect(fromNowFilter(undefined)).toBe('a few seconds ago');
            expect(fromNowFilter(null)).toBe('a few seconds ago');
            expect(fromNowFilter("some text")).toBe('a few seconds ago');
            expect(fromNowFilter({})).toBe('a few seconds ago');
            expect(fromNowFilter({time: "not time"})).toBe('a few seconds ago');
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myignoremapApp = angular.module('myignoremapApp', ['ignoremap']);

describe("The ignoremap filter", function() {
    beforeEach(module('myignoremapApp'));
    it('replaces `""` with `------ Ignore Row ------`',
        inject(function(ignoremapFilter) {
            // normal cases
            expect(ignoremapFilter('')).toBe('------ Ignore Row ------');
            expect(ignoremapFilter(' ')).toBe(' ');
            expect(ignoremapFilter('aignoremap')).toBe('aignoremap');
            expect(ignoremapFilter('ignoremap ')).toBe('ignoremap ');
            expect(ignoremapFilter('ok')).toBe('ok');
            expect(ignoremapFilter(undefined)).toBe('------ Ignore Row ------');
            expect(ignoremapFilter(null)).toBe('------ Ignore Row ------');
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: mapping_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, modal_state;
    var mapping_ctrl, mapping_ctrl_scope, modalInstance, labels;
    var timeout, mock_user_service, mock_search_service;



    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, building_services, $timeout, user_service, search_service) {
            controller = $controller;
            scope = $rootScope;
            mapping_ctrl_scope = $rootScope.$new();
            modal_state = "";
            timeout = $timeout;
            mock_user_service = user_service;
            mock_search_service = search_service;

            spyOn(mock_user_service, 'set_default_columns')
                .andCallFake(function(mapped_columns){
                    return undefined;
                });
            spyOn(mock_search_service, 'search_buildings')
                .andCallFake(function(){
                    return [1,2,3];
                });
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_mapping_controller(){
        var mock_datasets = [
            {
                name: "DC 2013 data",
                last_modified: (new Date()).getTime(),
                last_modified_by: "john.s@buildingenergy.com",
                number_of_buildings: 89,
                id: 1
            },
            {
                name: "DC 2014 data",
                last_modified: (new Date()).getTime() -
                    1550 * 60 * 60 * 1000,
                last_modified_by: "gavin.m@buildingenergy.com",
                number_of_buildings: 70,
                id: 2
            }
        ];
        var fake_import_file_payload = {
            "status": "success",
            "import_file": {
                        file_name: "assessor_fun.csv",
                        last_modified: (new Date()).getTime(),
                        last_modified_by: "john.s@buildingenergy.com",
                        source_type: 'AssessorRaw',
                        dataset: mock_datasets[0],
                        id: 1
                    }
        };

        var mock_be_building_columns = [
            'pm_property_id',
            'property_name',
            'property_notes',
            'tax_lot_id',
            'gross_floor_area',
            'My New non-BEDES field'
        ];

        var mock_be_building_types = {
            'gross_floor_area': {
                unit_type: 'float',
                schema: 'BEDES'
            }
        };

        var mock_mapping_suggestions_payload = {
            'status': 'success',
            'suggested_column_mappings': {
                // key(django model attribute): [csv_header1, ... csv_header3]
                'property id': ['pm_property_id', 89],
                'lot number': ['tax_lot_id' , 54]
            },
            "building_columns": mock_be_building_columns,
            "building_column_types": mock_be_building_types
        };

        var mock_raw_column_names = [
            'property id',
            'property_name',
            'property_notes',
            'lot number',
            'lot size'
        ];

        var mock_first_five_rows = [];
        for (var i=0; i < 4; i++) {
            mock_first_five_rows.push({
                'property id': i,
                'property_name': 'Property ' + i,
                'property_notes': 'Nup.',
                'lot number': i * 2,
                'lot size': 454 * i
            });
        }

        mock_first_five_rows.push({
            'property id': '121L',
            'property_name': 'Inconsistent Property',
            'property_notes': 'N/A',
            'lot number': 'N/A',
            'lot size': 45
        });

        var raw_columns_payload = {
            "status": "success",
            "raw_columns": mock_raw_column_names
        };
        var first_five_rows_payload = {
            "status": "success",
            "first_five_rows": mock_first_five_rows
        };
        mapping_ctrl = controller('mapping_controller', {
            $scope: mapping_ctrl_scope,
            import_file_payload: fake_import_file_payload,
            suggested_mappings_payload: mock_mapping_suggestions_payload,
            raw_columns_payload: raw_columns_payload,
            first_five_rows_payload: first_five_rows_payload,
            all_columns: {fields: []},
            building_services: mock_building_services,
            $timeout: timeout
        });
    }

    /*
     * Test scenarios
     */

    it("should have a import_file_payload", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        expect(mapping_ctrl_scope.import_file.dataset.name).toBe("DC 2013 data");
    });

    it("should show suggested mappings and confidence", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        var raw_columns = mapping_ctrl_scope.raw_columns;
        var first_column = raw_columns[0];

        expect(first_column.confidence).toBe(89);
        expect(first_column.suggestion).toBe("Pm Property Id");
    });

    it("should show 'low', 'med', 'high', or '' confidence text", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        var raw_columns = mapping_ctrl_scope.raw_columns;
        var first_column = raw_columns[0];
        expect(first_column.confidence_text()).toBe("high");
        first_column.confidence = 70;
        expect(first_column.confidence_text()).toBe("med");
        first_column.confidence = 35;
        expect(first_column.confidence_text()).toBe("low");
        delete(first_column.confidence);
        expect(first_column.confidence_text()).toBe("");
    });

    it("should validate initial data", function() {
        create_mapping_controller();
        // act
        mapping_ctrl_scope.$digest();
        // assertions
        angular.forEach(mapping_ctrl_scope.raw_columns, function(rc) {
            if (rc.suggestion !== '' && typeof(rc.suggestion) !== "undefined") {
                expect(rc.validity).toBe('valid');
            }
        });
    });

    it("should invalidate bad suggestions", function() {
        // Simulate a change on the tcm, make it fail.
        create_mapping_controller();
        // act
        mapping_ctrl_scope.$digest();
        // assertions
        //
        // We change the suggested mapping for the "property name" column
        // to "gross_floor_area" (which validates as float) to
        // purposesly cause a failing change.
        mapping_ctrl_scope.raw_columns[1].suggestion = 'gross_floor_area';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[1]);
        expect(mapping_ctrl_scope.raw_columns[1].validity).toBe('invalid');

    });

    it("should set td_class appropriately", function() {
        var tcm;

        create_mapping_controller();

        mapping_ctrl_scope.$digest();
        tcm = mapping_ctrl_scope.raw_columns[0];
        var good_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[0]
        );

        // First raw column is mapped up as pm_property_id <-> property_id
        // Any kind of string will be valid.
        expect(good_val).toBe('success');

        // Now set it to one that expects float values.
        // Only one of these will *not* validate.
        mapping_ctrl_scope.raw_columns[0].suggestion = 'gross_floor_area';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[0]);

        tcm = mapping_ctrl_scope.raw_columns[0];
        var warning_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[4]
        );

        expect(warning_val).toBe('warning');

        // We don't want the warning style to be applied to neighboring cells
        // in the same row. Check that the cell next to our invalid one is
        // unstyled (undefined).
        tcm = mapping_ctrl_scope.raw_columns[0];
        var adjacent_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[3]
        );

        expect(adjacent_val).toBe(undefined);

        // Now we're saying the suggestion is to not map.
        // Check that we don't have any class set for this row now.
        mapping_ctrl_scope.raw_columns[0].suggestion = '';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[0]);

        tcm = mapping_ctrl_scope.raw_columns[0];
        var blank_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[4]
        );

        expect(blank_val).toBe('');

    });

    it("should detect duplicates of mapped rows", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // raw_columns[0] and raw_columns[3] should be the only mapped rows
        var column = mapping_ctrl_scope.raw_columns[3];
        var test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

        // Set the property_name tcm's suggestion to the same as
        // the property_id tcm (raw_columns[0])
        column.suggestion = 'Pm Property Id';

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(true);

        // Since we mark both duplicates as duplicates, the other
        // TCM that has the 'pm_property_id' suggestion should also get
        // 'danger' as its duplicate class.
        var other_dup = mapping_ctrl_scope.is_tcm_duplicate(
            mapping_ctrl_scope.raw_columns[0]
        );
        expect(other_dup).toBe(true);

        // Shows that mapped_row is the sole determinant of
        // column ignoring
        column.mapped_row = false;

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

    });

    it("should ignore duplicates of unmapped rows", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // raw_columns[0] and raw_columns[3] should be the only mapped rows
        var column = mapping_ctrl_scope.raw_columns[1];
        var test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

        // Set the property_name tcm's suggestion to the same as
        // the property_id tcm (raw_columns[0])
        column.suggestion = 'Pm Property Id';

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);
    });

    it("should get mapped buildings", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        mapping_ctrl_scope.get_mapped_buildings();
        mapping_ctrl_scope.$digest();

        // assertions
        expect(mapping_ctrl_scope.search.search_buildings).toHaveBeenCalled();
        expect(mock_user_service.set_default_columns).toHaveBeenCalled();
    });

    it("should enbale the 'show & review buildings' button if duplicates are" +
        " not present", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        for (var i = mapping_ctrl_scope.raw_columns.length - 1; i >= 0; i--) {
            mapping_ctrl_scope.change(mapping_ctrl_scope.raw_columns[i]);
        }
        var duplicates_found = mapping_ctrl_scope.duplicates_present();

        // assertions
        expect(duplicates_found).toBe(false);
    });

    it("should disable the 'show & review buildings' button if duplicates " +
        "are present", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        for (var i = mapping_ctrl_scope.raw_columns.length - 1; i >= 0; i--) {
            mapping_ctrl_scope.raw_columns[i].suggestion = "pm_property_id";
            mapping_ctrl_scope.change(mapping_ctrl_scope.raw_columns[i]);
        }
        var duplicates_found = mapping_ctrl_scope.duplicates_present();

        // assertions
        expect(duplicates_found).toBe(true);
    });

    it("should get mappings in an API friendly way", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();
        var mappings = mapping_ctrl_scope.get_mappings();
        expect(mappings.length).toBe(5);
        expect(mappings[0]).toEqual(['Pm Property Id', 'property id']);
        // everything in between is empty since we we're using only
        // suggested mappings.
        expect(mappings[3]).toEqual(['Tax Lot Id', 'lot number']);
    });

    it("should show the 'STEP 2' tab when reviewing mappings", function() {
        // arrange
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // act
        var mappings = mapping_ctrl_scope.get_mapped_buildings();

        // assert
        expect(mapping_ctrl_scope.tabs).toEqual({
            'one_active': false,
            'two_active': true,
            'three_active': false
        });
    });

    it("should show BEDES fields with a checkbox", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assert
        expect(mapping_ctrl_scope.is_suggestion_BEDES('gross_floor_area')).toBe(true);
        expect(mapping_ctrl_scope.is_suggestion_BEDES('Gross Floor Area')).toBe(true);
        expect(mapping_ctrl_scope.is_suggestion_BEDES('My New non-BEDES field')).toBe(false);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: matching_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, delete_called;
    var matching_ctrl, matching_ctrl_scope, modalInstance, labels;


    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, building_services) {
            controller = $controller;
            scope = $rootScope;
            matching_ctrl_scope = $rootScope.$new();

            mock_building_services = building_services;
            spyOn(mock_building_services, "get_PM_filter_by_counts")
                .andCallFake(function(import_file){
                    return $q.when(
                        {
                            "status": "success",
                            "unmatched": 5,
                            "matched": 10
                        }
                    );
                }
            );
            spyOn(mock_building_services, "save_match")
                .andCallFake(function(b1, b2, create){
                    return $q.when(
                        {
                            "status": "success",
                            "child_id": 3
                        }
                    );
                }
            );
            spyOn(mock_building_services, "search_matching_buildings")
                .andCallFake(function(q, number_per_page, current_page, order_by, sort_reverse, 
                                        filter_params, file_id ){
                    
                    if(filter_params.children__isnull === undefined){                        
                        var bldgs = [
                            {
                                pm_property_id: 1
                            },
                            {
                                pm_property_id: 2
                            }
                            ,
                            {
                                pm_property_id: 3
                            }
                        ];
                    } else if (filter_params.children__isnull === false){
                        var bldgs = [
                            {
                                pm_property_id: 1
                            }
                        ];
                    } else if (filter_params.children__isnull === true){
                        var bldgs = [
                            {
                                pm_property_id: 2
                            },
                            {
                                pm_property_id: 3
                            }
                        ];
                    }

                    return $q.when(
                        {
                            status: "success",
                            number_returned: buildings_payload.length,
                            number_matching_search: buildings_payload.length,
                            buildings: bldgs
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_detail_controller(){
        var buildings_payload = {
            buildings: [
                {
                    pm_property_id: 1,
                    tax_lot_id: null,
                    custom_id_1: 2,
                    gross_floor_area: 111,
                    matched: true,
                    id: 1,
                    children: [3],
                    coparent: {
                        pm_property_id: null,
                        tax_lot_id: 2,
                        custom_id_1: null,
                        gross_floor_area: 111,
                        id: 2,
                        children: [3]
                    }
                }
            ],
            number_matching_search: 1,
            number_returned: 1
        };
        matching_ctrl = controller('matching_controller', {
            $scope: matching_ctrl_scope,
            buildings_payload: buildings_payload,
            all_columns: {
                fields: [{sort_column: 'pm_property_id'}]
            },
            default_columns: {
                columns: ['pm_property_id']
            },
            import_file_payload: {
                import_file: {
                    id: 1,
                    dataset: {
                        importfiles: [
                            {
                                id: 1,
                                name: "file_1.csv"
                            },
                            {
                                id: 2,
                                name: "file_2.csv"
                            }
                        ]
                    }
                }
            }
        });
    }



    /*
     * Test scenarios
     */

    it("should have a buildings payload with potential matches", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();
        var b = matching_ctrl_scope.buildings[0];

        // assertions
        expect(matching_ctrl_scope.buildings.length).toBe(1);
        expect(b.coparent.children).toEqual(b.children);
    });

    it("should provide to the view scope variables representing the number matched and the number of unmatched buildings", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();

        // assertions
        expect(matching_ctrl_scope.matched_buildings).toEqual(10);
        expect(matching_ctrl_scope.unmatched_buildings).toEqual(5);
    });

    it("should jump back to the matching list when the 'Back to list' button" +
        " is clicked", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.show_building_list = false;
        matching_ctrl_scope.back_to_list();

        // assertions
        expect(matching_ctrl_scope.show_building_list).toEqual(true);
    });

    it("should present an initial state with the matching buildings table",
        function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();

        // assertions
        expect(matching_ctrl_scope.columns).toEqual([{ sort_column : 'pm_property_id' }]);
        expect(matching_ctrl_scope.number_matching_search).toEqual(1);
        expect(matching_ctrl_scope.number_returned).toEqual(1);
        expect(matching_ctrl_scope.num_pages).toEqual(1);
        expect(mock_building_services.get_PM_filter_by_counts).toHaveBeenCalled();
    });
    it("should match a building in the matching list", function() {
        // arrange
        create_dataset_detail_controller();
        var b1, b2;
        b2 = {
            id: 2,
            children: [],
            matched: false
        };
        b1 = {
            id: 1,
            children: [],
            matched: true,
            coparent: b2
        };

        // act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.toggle_match(b1);
        matching_ctrl_scope.$digest();

        // assertions
        expect(mock_building_services.save_match).toHaveBeenCalledWith(b1.id, b2.id, true);
        expect(mock_building_services.get_PM_filter_by_counts).toHaveBeenCalled();
        expect(b1.children[0]).toEqual(3);
    });
    it("Should update the list of buildings correctly when 'Show Matched' is selected", function() {
        //arrange
        create_dataset_detail_controller();

        //act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.update_show_filter(matching_ctrl_scope.SHOW_MATCHED)

        //assertions
        //expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(1);
        expect(matching_ctrl_scope.number_returned).toEqual(1);
    });
    it("Should update the list of buildings correctly when 'Show Unmatched' is selected",  function() {
        //arrange
        create_dataset_detail_controller();

        //act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.update_show_filter(matching_ctrl_scope.SHOW_UNMATCHED)

        //assertions
        //expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(2);
        expect(matching_ctrl_scope.number_returned).toEqual(2);
    });
    it("Should update the list of buildings correctly when 'Show All' is selected", function() {
        //arrange
        create_dataset_detail_controller();

        //act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.update_show_filter(matching_ctrl_scope.SHOW_ALL)

        //assertions
        //expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(3);
        expect(matching_ctrl_scope.number_returned).toEqual(3);
    });



});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: members_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller;
    var ctrl, ctrl_scope, modalInstance;
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          $q,
          organization_service) {
            ctrl = $controller;
            scope = $rootScope;
            ctrl_scope = $rootScope.$new();

            mock_organization_service = organization_service;
            
            spyOn(mock_organization_service, "remove_user")
                .andCallFake(function(user_id, org_id){
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
            spyOn(mock_organization_service, "get_organization_users")
                .andCallFake(function(org){
                    return $q.when(
                        {
                            "status": "success",
                            "users": [{id:1, first_name:"Bob", last_name:"D"}]
                        }
                    );
                }
            );
            spyOn(mock_organization_service, "update_role")
                .andCallFake(function(org_id, user_id, role){
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_members_controller(){
        ctrl = ctrl('members_controller', {
            $scope: ctrl_scope,
            users_payload: {users: [
                {first_name: 'J', last_name: 'S'},
                {first_name: undefined, last_name: null}
            ]},
            organization_payload: {
                organization: {name: 'my org', id: 4}
            },
            auth_payload: {
                auth: {
                    'can_invite_member': true,
                    'can_remove_member': true
                }
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should accepts its payload", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.org).toEqual({name : 'my org', id : 4});
        expect(ctrl_scope.users[0].name).toEqual("J S");
        expect(ctrl_scope.users[1].name).toEqual(" ");
    });
    it("clicking remove should remove a user", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.remove_member({user_id: 2});

        // assertions
        expect(mock_organization_service.remove_user)
            .toHaveBeenCalledWith(2, 4);
        
        ctrl_scope.$digest();
        expect(mock_organization_service.get_organization_users)
            .toHaveBeenCalledWith({org_id: 4});
    });
    it("clicking a new role should update the user's role", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.update_role({user_id: 2, role: "viewer"});

        // assertions
        expect(mock_organization_service.update_role)
            .toHaveBeenCalledWith(2, 4, 'viewer');
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: new_member_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_user_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, user_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        mock_user_service = user_service;
        spyOn(mock_user_service, "add")
            .andCallFake(function(user){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_new_member_controller(){
        ctrl = ctrl('new_member_modal_ctrl', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            organization: {organization_id: 1}
        });
    }

    /*
     * Test scenarios
     */

    it("should set the default role to 'member'", function() {
        // arrange
        create_new_member_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.user.role.value).toEqual("member"); 
    });
    it("should call the user service to add a new user to the org",
        function() {
        // arrange
        create_new_member_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.user.first_name = "JB";
        ctrl_scope.user.last_name = "Smooth";
        ctrl_scope.user.email = "jb.smooth@be.com";
        ctrl_scope.submit_form(true);

        // assertions
        expect(mock_user_service.add)
            .toHaveBeenCalledWith({
                first_name: "JB",
                last_name: "Smooth",
                email: "jb.smooth@be.com",
                role: ctrl_scope.roles[0],
                organization: {
                    organization_id: 1
                }
            });
    });
    
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
/**
 * run_jasmine.js: runs the jasmine JS test runner
 */
(function() {
    var jasmineEnv = jasmine.getEnv();
    jasmineEnv.updateInterval = 1000;

    var htmlReporter = new jasmine.HtmlReporter();

    jasmineEnv.addReporter(htmlReporter);

    jasmineEnv.specFilter = function(spec) {
        return htmlReporter.specFilter(spec);
    };

    var currentWindowOnload = window.onload;

    window.onload = function() {
        if (currentWindowOnload) {
        currentWindowOnload();
        }
        execJasmine();
    };
    function execJasmine() {
        jasmineEnv.execute();
    }
})();

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var searchTestApp = angular.module(
    'searchTestApp', ['BE.seed.service.search']
);

describe("The search_service service", function() {
    var saas, httpBackend, test_url;

    beforeEach(function () {
        module("searchTestApp");
        inject(function (search_service, $httpBackend) {
            saas = search_service;
            httpBackend = $httpBackend;
            httpBackend.when("POST", test_url).respond("ok");
        });

    });

    /**
     * sanitize_params tests
     */
    it('removes null and undefined values from filter_params', function () {
        // arrange
        saas.filter_params = {
          'National Median Site Energy Use__gte': 4,
          'National Median Site Energy Use__lte': null,
          'National Median Source EUI__gte': undefined
        };

        // act
        saas.sanitize_params();

        // assert
        expect(saas.filter_params).toEqual({'National Median Site Energy Use__gte': 4});
    });

    /**
     * search_buildings tests
     */
    it('has sane defaults', function() {
        expect(saas.url).toEqual("");
        expect(saas.error_message).toEqual("");
        expect(saas.alert).toEqual(false);
        expect(saas.buildings).toEqual([]);
        expect(saas.current_page).toEqual(1);
        expect(saas.number_per_page).toEqual(10);
        expect(saas.order_by).toEqual("");
        expect(saas.sort_column).toEqual("tax_lot_id");
        expect(saas.sort_reverse).toEqual(false);
        expect(saas.select_all_checkbox).toEqual(false);
        expect(saas.prev_page_disabled).toEqual(true);
        expect(saas.next_page_disabled).toEqual(true);
        expect(saas.num_pages).toEqual(0);
        expect(saas.query).toEqual("");
        expect(saas.showing).toEqual({
            'start': 1,
            'end': 0
        });
    });

    it('search_buildings uses the argument `query`', function() {
        saas.query = "hotels";
        saas.search_buildings("not hotels");

        expect(saas.query).toEqual("not hotels");
    });
    it('filter search resets the current page', function() {
        // arrange
        saas.current_page = 22;
        spyOn(saas, 'search_buildings');

        // act
        saas.filter_search();

        // assert
        expect(saas.current_page).toEqual(1);
        expect(saas.search_buildings).toHaveBeenCalled();
    });

    it('search_buildings function will default to its query if' +
        ' no query is passed as an argument', function() {
        saas.query = "hotels";
        saas.search_buildings();

        expect(saas.query).toEqual("hotels");
    });

    it('search_buildings hits the set url', function() {
        test_url = "/my-search-url";
        saas.url = test_url;
        saas.search_buildings();
        httpBackend.expectPOST(test_url);
        httpBackend.flush();
    });

    it('search_buildings POSTs the query data as `q`', function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.query = "hotel chains";
        saas.number_per_page = 25;
        saas.order_by = "gross_floor_area";
        saas.sort_reverse = true;
        saas.filter_params = {
            project: '2012 data'
        };

        // act
        saas.search_buildings();

        // assert
        httpBackend.expectPOST(test_url,
            {
                "q": "hotel chains",
                "number_per_page": 25,
                "order_by": "gross_floor_area",
                "sort_reverse": true,
                "filter_params": {
                    "project": "2012 data"
                },
                "page":1
            }
        ).respond(201, "");
        httpBackend.flush();
    });
    it('search_buildings updates its `buildings` model', function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.query = "hotel chains";
        saas.number_per_page = 25;
        saas.order_by = "gross_floor_area";
        saas.sort_reverse = true;
        saas.filter_params = {
            project: '2012 data'
        };

        // act
        saas.search_buildings();

        // assert
        httpBackend.expectPOST(test_url,
            {
                "q": "hotel chains",
                "number_per_page": 25,
                "order_by": "gross_floor_area",
                "sort_reverse": true,
                "filter_params": {
                    "project": "2012 data"
                },
                "page":1
            }
        ).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        expect(saas.buildings).toEqual([
            {
                name: "one",
                id: 1,
                checked: false
            },
            {
                name: "two",
                id: 2,
                checked: false
            }
        ]);
    });
    it('should clear the error and alert after a successful search',
        function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.error_message = "help";
        saas.alert = true;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {
            'buildings': [
                {
                    name: "one",
                    id: 1
                },
                {
                    name: "two",
                    id: 2
                }],
            'number_matching_search': 101
            });
        httpBackend.flush();

        // assert
        expect(saas.alert).toEqual(false);
        expect(saas.error_message).toEqual("");
    });

    /**
     * pagination tests
     */
    it('increments the page when the `next` button is clicked',
        function() {
        // arrange
        saas.num_pages = 1000;
        saas.current_page = 100;
        spyOn(saas, 'search_buildings');
        // act
        saas.next_page();

        // assert
        expect(saas.current_page).toEqual(101);
        expect(saas.search_buildings).toHaveBeenCalled();
        expect(saas.search_buildings.callCount).toEqual(1);

    });
    it('doesn\'t increment past the last page when the `next` button is' +
        ' clicked', function() {
        // arrange
        saas.num_pages = 2;
        saas.current_page = 2;
        spyOn(saas, 'search_buildings');
        // act
        saas.next_page();

        // assert
        expect(saas.current_page).toEqual(2);
        expect(saas.search_buildings).toHaveBeenCalled();
        expect(saas.search_buildings.callCount).toEqual(1);

    });
    it('decrements the page when the `previous` button is clicked',
        function() {
        // arrange
        saas.num_pages = 1000;
        saas.current_page = 100;
        spyOn(saas, 'search_buildings');
        // act
        saas.prev_page();

        // assert
        expect(saas.current_page).toEqual(99);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('does not decrement below the first page when the `previous` button' +
        ' is clicked', function() {
        // arrange
        saas.num_pages = 1;
        saas.current_page = 1;
        spyOn(saas, 'search_buildings');
        // act
        saas.prev_page();

        // assert
        expect(saas.current_page).toEqual(1);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('fetches more or less results per page when a user selects an option' +
        ' from the number per page select',
        function() {
        // arrange
        saas.number_per_page_options_model = 50;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_number_per_page();

        // assert
        expect(saas.number_per_page).toEqual(50);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('updates the number of results displayed text after a successful '+
        'search', function() {
        // standard case
        // page 2 of 3 with 10/page, so should display 11 of 20
        // arrange
        saas.current_page = 2;
        saas.num_pages = 3;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_start_end_paging();

        // assert
        expect(saas.showing.start).toEqual(11);
        expect(saas.showing.end).toEqual(20);
        expect(saas.search_buildings).not.toHaveBeenCalled();
    });
    it('displays the number matching the query if on the last page of results',
        function() {
        // standard case
        // page 3 of 3 with 10/page and 34 results, so should display 21 of 34
        // arrange
        saas.current_page = 3;
        saas.number_matching_search = 34;
        saas.num_pages = 3;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_start_end_paging();

        // assert
        expect(saas.showing.start).toEqual(21);
        expect(saas.showing.end).toEqual(34);
    });
    it('should call update_start_end_paging after a successful search',
        function() {
        // arrange
        spyOn(saas, 'update_start_end_paging');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_start_end_paging).toHaveBeenCalled();
    });
    it('should call update_buttons after a successful search',
        function() {
        // arrange
        spyOn(saas, 'update_buttons');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_buttons).toHaveBeenCalled();
    });
    it('should disable prev paging buttons at the first page',
        function() {
        // arrange
        saas.current_page = 1;
        saas.num_pages = 5;

        // act
        saas.update_buttons();

        // assert
        expect(saas.prev_page_disabled).toEqual(true);
        expect(saas.next_page_disabled).toEqual(false);
    });
    it('should disable next paging buttons at the last page',
        function() {
        // arrange
        saas.current_page = 5;
        saas.num_pages = 5;

        // act
        saas.update_buttons();

        // assert
        expect(saas.prev_page_disabled).toEqual(false);
        expect(saas.next_page_disabled).toEqual(true);
    });
    it('should calculate the number of pages after a successful search',
        function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {
            'buildings': [
                {
                    name: "one",
                    id: 1
                },
                {
                    name: "two",
                    id: 2
                }],
            'number_matching_search': 101
            });
        httpBackend.flush();

        // assert
        expect(saas.number_matching_search).toEqual(101);
        expect(saas.num_pages).toEqual(11);
    });

    /**
     * checkbox logic tests
     */
    it('should select or unselect all the viewed results when the select all' +
        ' checkbox is checked or unchecked', function() {
        // arrange
        saas.selected_buildings = [1,2,3];
        saas.select_all_checkbox = true;
        saas.buildings = [
            {
                checked: false
            },
            {
                checked: true
            }
        ];
        spyOn(saas, 'select_or_deselect_all_buildings').andCallThrough();

        // act
        saas.select_all_changed();

        // assert
        expect(saas.selected_buildings).toEqual([]);
        expect(saas.buildings).toEqual([
                {
                    checked: true
                },
                {
                    checked: true
                }
            ]);
        expect(saas.select_or_deselect_all_buildings).toHaveBeenCalled();
    });
    it('should call select_or_deselect_all_buildings after a search',
        function() {
        // arrange
        spyOn(saas, 'select_or_deselect_all_buildings');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.select_or_deselect_all_buildings).toHaveBeenCalled();
    });
    it('should add a building to the selected list when checked',
        function() {
        // arrange
        var building = {
            id: 5,
            checked: true
        };

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([5]);
    });
    it('should add a building to the selected list when unchecked and the ' +
        'select all checkbox is checked', function() {
        // arrange
        var building = {
            id: 5,
            checked: false
        };
        saas.select_all_checkbox = true;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([5]);
    });
    it('should remove a building to the selected list when unchecked',
        function() {
        // arrange
        var building = {
            id: 5,
            checked: false
        };
        saas.selected_buildings = [5,6,7];
        saas.select_all_checkbox = false;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([6,7]);
    });
    it('should remove a building to the selected list when checked if the ' +
        'select all checkbox is checked', function() {
        // arrange
        var building = {
            id: 5,
            checked: true
        };
        saas.selected_buildings = [5,6,7];
        saas.select_all_checkbox = true;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([6,7]);
    });
    it('should call load_state_from_selected_buildings after a successful ' +
        'search', function() {
        // arrange
        spyOn(saas, 'load_state_from_selected_buildings').andCallThrough();
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.load_state_from_selected_buildings).toHaveBeenCalled();
    });
    it('should call update_results after a successful ' +
        'search', function() {
        // arrange
        var select_or_deselect_all_buildings_time,
            load_state_from_selected_buildings_time;
        spyOn(saas, 'update_results').andCallThrough();
        spyOn(saas, 'select_or_deselect_all_buildings')
            .andCallFake(function() {
                select_or_deselect_all_buildings_time = new Date();
            }
        );
        spyOn(saas, 'load_state_from_selected_buildings')
            .andCallFake(function() {
                // wait for a sec, otherwise both have the same timestamp
                for(var y=0;y<100000;y++){
                    var x = new Date();
                    x = x+y;
                }
                load_state_from_selected_buildings_time = new Date();
            }
        );
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_results).toHaveBeenCalled();
        expect(select_or_deselect_all_buildings_time <
               load_state_from_selected_buildings_time).toBe(true);
    });
    it('check selected buildings successful', function() {
        // arrange
        saas.selected_buildings = [2];
        saas.buildings = [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ];

        // act
        saas.load_state_from_selected_buildings();

        // assert
        expect(saas.buildings[1]).toEqual({
            name: "two",
            id: 2,
            checked: true
        });
    });
    it('should generate columns', function() {
        // arrange
        var all_columns, column_headers, columns;
        all_columns = [
            {
                sort_column: "name"
            },
            {
                sort_column: "id"
            }
        ];
        column_headers = ["id"];
        saas.sort_column = "something else";
        saas.update_results({});
        // act
        columns = saas.generate_columns(
            all_columns, column_headers, saas.column_prototype
        );

        // assert that columns are extended off the prototype and only have
        // "id"
        expect(columns.length).toEqual(1);
        expect(columns[0].sort_column).toEqual("id");
        expect(columns[0].is_unsorted()).toEqual(true);
        saas.sort_column = "id";
        expect(columns[0].is_unsorted()).toEqual(false);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: settings_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller;
    var ctrl, ctrl_scope, modalInstance;
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          $q,
          organization_service) {
            ctrl = $controller;
            scope = $rootScope;
            ctrl_scope = $rootScope.$new();

            mock_organization_service = organization_service;
            
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_settings_controller(){
        ctrl = ctrl('settings_controller', {
            $scope: ctrl_scope,
            all_columns: {fields: [
                {checked: false, title: 'PM Property ID', sort_column: 'pm_property_id'},
                {checked: false, title: 'G', sort_column: 'g'},
                {checked: false, title: "Gross Floor Area", sort_column: 'gross_floor_area'}
            ]},
            organization_payload: {
                organization: {name: 'my org', id: 4}
            },
            query_threshold_payload: {
                query_threshold: 10
            },
            shared_fields_payload: {
                shared_fields: [
                    {
                        title: "PM Property Id",
                        sort_column: "pm_property_id"
                    }
                ],
                public_fields: [
                {
                    title: "Gross Floor Area",
                    sort_column: "gross_floor_area"
                }]
            },
            auth_payload: {
                auth: {
                    'is_owner': true,
                    'is_parent_org_owner': false
                }
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should accepts its payload", function() {
        // arrange
        create_settings_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.org).toEqual({
            name : 'my org',
            id : 4,
            query_threshold: 10
        });
        expect(ctrl_scope.fields[0].checked).toEqual(true);
        expect(ctrl_scope.fields[1].checked).toEqual(false);
        expect(ctrl_scope.fields[0].title).toEqual('PM Property ID');
    });
    it("should select all", function() {
        // arrange
        create_settings_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.controls.select_all = true;
        ctrl_scope.select_all_clicked();
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.infinite_fields[0].checked).toEqual(true);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myStripFilterApp = angular.module('myStripFilterApp', ['stripImportPrefix']);

describe("The stripImportPrefix filter", function() {
    beforeEach(module('myStripFilterApp'));
    it('Strips out the import prefix from building ids',
        // e.g. remove the 'IMP12-' from the id 'IMP12-1321/123'
        inject(function(stripImportPrefixFilter) {
            // normal cases
            expect(stripImportPrefixFilter('IMP134-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP134555-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP1-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP0-134')).toBe('134');
            // deals with `-`
            expect(stripImportPrefixFilter('IMP134-abc-dev')).toBe('abc-dev');
            // deals with `/`
            expect(stripImportPrefixFilter('IMP134-00/11')).toBe('00/11');
            // only strips first prefix
            expect(stripImportPrefixFilter('IMP134-IMP134-123')).toBe('IMP134-123');
        })
    );
    it("Does not strip out anything if there is not a prefix",
        inject(function(stripImportPrefixFilter) {
            // normal cases
            expect(stripImportPrefixFilter('123-123')).toBe('123-123');
            expect(stripImportPrefixFilter('0123/123')).toBe('0123/123');
        })
    );
    it("Is case sensitive to the import prefix",
        inject(function(stripImportPrefixFilter) {
            expect(stripImportPrefixFilter('imp123-abc')).toBe('imp123-abc');
            expect(stripImportPrefixFilter('iMp123-abc')).toBe('iMp123-abc');
            expect(stripImportPrefixFilter('iMP123-abc')).toBe('iMP123-abc');
        })
    );
    it("Handles undefined or null inputs",
        inject(function(stripImportPrefixFilter) {
            expect(stripImportPrefixFilter(undefined)).toBe(undefined);
            expect(stripImportPrefixFilter(null)).toBe(null);
        })
    );
    it("Only strips out the prefix if it has at least one digit and a hyphen",
        inject(function(stripImportPrefixFilter) {
            // must have the 'IMP' folowed by a digit then a hyphen
            expect(stripImportPrefixFilter('IMP-123')).toBe('IMP-123');
            expect(stripImportPrefixFilter('IMP1123')).toBe('IMP1123');
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myTitleCaseApp = angular.module('myTitleCaseApp', ['titleCase']);

describe("The TitleCase filter", function() {
    beforeEach(module('myTitleCaseApp'));
    it('Strips out ``_`` characters from strings and capitalizes the rest',
        inject(function(titleCaseFilter) {
            // normal cases
            expect(titleCaseFilter('super_data')).toBe('Super Data');
            expect(titleCaseFilter('super_data_45')).toBe('Super Data 45');
            expect(titleCaseFilter(undefined)).toBe(undefined);
            expect(titleCaseFilter(null)).toBe(null);
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myTypedNumberFilterApp = angular.module('myTypedNumberFilterApp', ['typedNumber']);

describe("The typedNumber filter", function() {
    beforeEach(module('myTypedNumberFilterApp'));
    it('should parse strings as strings and return them',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('tester')).toBe('tester');
        })
    );
    it('should parse strings as strings and return them, even if they look like numbers',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.1456')).toBe('123.1456');
        })
    );

    it('should parse numbers as numbers and return them',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.00001', 'number')).toBe("123");
        })
    );

    it('should allow the user to set the number of sig digits',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.321', 'number', 'not_year', 1)).toBe("123.3");
        })
    );

    it('should add commas to number greater than 999',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123456789', 'number', 'not_year', 0)).toBe("123,456,789");
        })
    );

    it('should parse year_built and not add commas',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('1946', 'number', 'year_built', 1)).toBe("1946");
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var validationTestApp = angular.module(
    'validationTestApp', ['mappingValidatorService']
);

describe("The MappingValidatorService", function() {
    var mvs;

    beforeEach(function () {
        module("validationTestApp");
        inject(function (mappingValidatorService) {
            mvs = mappingValidatorService;

        });

    });

    it('validates good string, float and date data', function() {
        // normal cases
        // Here ``type`` is undefined. Should still work.
        var str_data = ['Fun', 'fun2', 'fun3', 'fun4'];
        var float_data = ['12.34', '144.5', '234'];
        var date_data = ['2014/02/02', '03/13/2013', '03-14-2004'];

        expect(mvs.validate(str_data)).toEqual([]);
        expect(mvs.validate(float_data, 'float')).toEqual([]);
        expect(mvs.validate(date_data, 'date')).toEqual([]);
    });

    it('recognizes semivalid data', function() {
        // Cases where the data is /almost/ right.
        var float_data = ['12.34', '144.5', 'NaN'];
        var date_data = ['2014/02/02', 'huh?', '03-14-2004'];
        expect(mvs.validate(float_data, 'float')).toEqual(['NaN']);
        expect(mvs.validate(date_data, 'date')).toEqual(['huh?']);
    });

    it('recognizes invalid data', function() {
        // Cases where the data is *all* wrong.
        var float_data = ['', 'not a float', 'NaN'];
        var date_data = ['', 'huh?', 'what?'];
        // Cases where the data are correct.
        var good_float_data = ['12.34', '144.5', '234'];
        var good_date_data = ['2014/02/02', '03/13/2013', '03-14-2004'];

        // Data is wrong
        expect(mvs.validate(float_data, 'float')).toEqual(float_data);
        expect(mvs.validate(date_data, 'date')).toEqual(date_data);

        // Type is wrong
        // N.B. we use semivalid here, because Date is pretty forgiving w/ nums.
        expect(mvs.validate(good_float_data, 'date')).toEqual(['12.34']);
        expect(mvs.validate(good_date_data, 'float')).toEqual(good_date_data);


    });

});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// taken from the angularjs testing page
// http://docs.angularjs.org/guide/dev_guide.unit-testing

// create dummy angularJS app to attach filter(s)
var myBELabelDirectiveApp = angular.module('myBELabelDirectiveApp', ['beLabel']);

describe("The beLabel directive", function() {
    var $compile;
    var $rootScope;
    beforeEach(module('myBELabelDirectiveApp'));
    // Store references to $rootScope and $compile
    // so they are available to all tests in this describe block
    beforeEach(inject(function(_$compile_, _$rootScope_){
      // The injector unwraps the underscores (_) from around the parameter names when matching
      $compile = _$compile_;
      $rootScope = _$rootScope_;
    }));

    it('Replaces the element with the appropriate content', function() {
        // Compile a piece of HTML containing the directive
        var element = $compile('<be-label name="compliant" color="blue"></be-label>')($rootScope);
        // fire all the watches
        $rootScope.$digest();
        // Check that the compiled element contains the templated content
        expect(element.hasClass('label-primary')).toBe(true);
        expect(element.hasClass('label')).toBe(true);
        expect(element.html()).toContain("compliant");
    });

        // 'red': 'danger',
        // 'gray': 'default',
        // 'orange': 'warning',
        // 'green': 'success',
        // 'blue': 'primary',
        // 'light blue': 'info'
    it('Maps colors to semantic bootstrap class names', function() {
        var element = $compile('<be-label name="compliant" color="red"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-danger')).toBe(true);

        element = $compile('<be-label name="compliant" color="gray"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-default')).toBe(true);

        element = $compile('<be-label name="compliant" color="orange"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-warning')).toBe(true);

        element = $compile('<be-label name="compliant" color="green"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-success')).toBe(true);

        element = $compile('<be-label name="compliant" color="blue"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-primary')).toBe(true);

        element = $compile('<be-label name="compliant" color="light blue"></be-label>')($rootScope);
        $rootScope.$digest();
        expect(element.hasClass('label-info')).toBe(true);
    });


});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// taken from the angularjs testing page
// http://docs.angularjs.org/guide/dev_guide.unit-testing

// create dummy angularJS app to attach filter(s)
var myBEUploaderDirectiveApp = angular.module('myBEUploaderDirectiveApp', ['beUploader']);

describe("The beUploader directive", function() {
    var g_message, g_file, g_progress;
    var $compile;
    var $rootScope;
    var uploader_html = '<div be-uploader sourcetype="assessor" importrecord="5" buttontext="Upload your building list .csv file" eventfunc="uploaderfunc(message, filename, progress)" ng-hide="uploader.in_progress"></div>';
    beforeEach(module('myBEUploaderDirectiveApp'));
    // Store references to $rootScope and $compile
    // so they are available to all tests in this describe block
    beforeEach(inject(function(_$compile_, _$rootScope_){
      // The injector unwraps the underscores (_) from around the parameter names when matching
      $compile = _$compile_;
      $rootScope = _$rootScope_;
      $rootScope.eventfunc = function (fine_object) {
        console.log({fin: fine_object});
        g_message = fine_object.message;
        g_file = fine_object.file;
        g_progress = fine_object.progress;
      };
      window.BE = window.BE || {};
      window.BE.FILE_UPLOAD_DESTINATION = 'S3';
    }));

    it('Creates the fineuploader element', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        
        // act
        $rootScope.$digest();

        // assert
        expect(element.html()).toContain("qq-uploader");
        expect(element.html()).toContain("qq-upload-button");
    });

    it('Contains the buttontext specified', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);

        // act
        $rootScope.$digest();

        // assert
        expect(element.html()).toContain("Upload your building list .csv file");
    });

    it('Only allows one file to be uploaded at a time', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");

        // act
        $rootScope.$digest();

        // assert
        expect(func._options.multiple).toBe(false);
    });

    it('Uses the callback function for invalid file types', function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.jpeg");

        // act
        $rootScope.$digest();
        func._options.showMessage("there was an invalid extension. Valid extension(s): .csv");


        // assert
        expect(g_message).toBe("invalid_extension");
    });

    it('Uses the callback function to share its state: upload started',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';
        
        // act
        $rootScope.$digest();
        func._options.callbacks.onSubmitted(1, filename);


        // assert
        expect(g_message).toBe("upload_submitted");
        expect(g_file.filename).toBe(filename);
    });

    it('Uses the callback function to share its state: in progress',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';
        var loaded = 10;
        var total = 100;
        
        // act
        $rootScope.$digest();
        func._options.callbacks.onProgress(1, filename, loaded, total);


        // assert
        expect(g_message).toBe("upload_in_progress");
        expect(g_file.filename).toBe(filename);
        expect(g_progress.loaded).toBe(loaded);
        expect(g_progress.total).toBe(total);
    });

    it('Uses the callback function to share its state: complete',
        function() {
        // arrange
        var element = $compile(uploader_html)($rootScope);
        var func = beUploaderFineUploader($rootScope, element, "", "test_file.csv");
        var filename = 'test_file.csv';

        
        // act
        $rootScope.$digest();
        func._options.callbacks.onComplete(1, filename, {success: true});


        // assert        
        expect(g_message).toBe("upload_complete");
        expect(g_file.filename).toBe(filename);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: building_detail_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, ngFilter, delete_called;
    var building_detail_ctrl, building_detail_ctrl_scope, modalInstance, labels;
    var mock_building_services, mock_project_service;
    var mock_building;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          urls,
          $q,
          building_services,
          project_service,
          $filter) {
            controller = $controller;
            scope = $rootScope;
            ngFilter = $filter;
            building_detail_ctrl_scope = $rootScope.$new();
            modal_state = "";
            delete_called = false;

            // mock the building_services factory methods used in the controller
            // and return their promises
            mock_building_services = building_services;
            mock_project_service = project_service;

            spyOn(mock_project_service, "get_project")
                .andCallFake(function(project_slug){
                    return $q.when(
                        {
                            "status": "success",
                            "project": {
                                id: 33,
                                name: "test project",
                                slug: project_slug
                            }
                        }
                    );
                }
            );
            spyOn(mock_project_service, "get_labels")
                .andCallFake(function(){
                    return $q.when(
                        {
                            "status": "success",
                            "labels": [{
                                id: 44,
                                name: "bad label",
                                color: "red"
                            }]
                        }
                    );
                }
            );
            spyOn(mock_project_service, "update_project_building")
                .andCallFake(function(building_id, project, label){
                    return $q.when(
                        {
                            "status": "success",
                            "approver": "bob doe",
                            "approved_date": "01/01/2012"
                        }
                    );
                }
            );
            spyOn(mock_building_services, "update_building")
                .andCallFake(function (building, org_id){
                    mock_building = building;
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_building_detail_controller(){
        var fake_building = {
            id: 511,
            pk: 511,
            gross_floor_area: 123456,
            gross_floor_area_source: 2,
            city: "DC",
            city_source: 4,
            tax_lot_id: "11/22",
            tax_lot_id_source: 3,
            extra_data: {
                'some other key': 12344,
                'some other key that is not in a parent': 223
            },
            extra_data_sources: {
                'some other key': 2,
                'some other key that is not in a parent': 3
            },
            created: "at some point"
        };
        var fake_imported_buildings = [
            {
                id: 2,
                pk: 2,
                gross_floor_area: 123456,
                gross_floor_area_source: null,
                city: "Washington, DC",
                city_source: null,
                extra_data: {
                    'some other key': 123,
                    'some other key that is not in a child': 333,
                    'some floor area': 444
                },
                extra_data_sources: {
                    'some other key': null,
                    'some other key that is not in a child': 111,
                    'some floor area': 444
                },
                created: "test"
            },
            {
                id: 3,
                pk: 3,
                gross_floor_area: 2111111,
                gross_floor_area_source: null,
                city: "Washington",
                city_source: null,
                tax_lot_id: "11/22",
                tax_lot_id_source: null,
                extra_data: {
                    'make it four': 4
                },
                extra_data_sources: {
                    'make it four': null
                }
            },{
                id: 4,
                pk: 4,
                gross_floor_area: 2111111,
                gross_floor_area_source: null,
                city: "Washington",
                city_source: null,
                tax_lot_id: "11/22",
                tax_lot_id_source: null,
                extra_data: {
                    'make it four': 5
                },
                extra_data_sources: {
                    'make it four': null
                }
            }
        ];
        var fake_payload = {
            "status": "success",
            "building": fake_building,
            "imported_buildings": fake_imported_buildings,
            "projects": [],
            "user_org_id": 42
        };
        var fake_all_columns = [{
            "title": "PM Property ID",
            "sort_column": "pm_property_id",
            "class": "is_aligned_right",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Tax Lot ID",
            "sort_column": "tax_lot_id",
            "class": "is_aligned_right",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Custom ID 1",
            "sort_column": "custom_id_1",
            "class": "is_aligned_right whitespace",
            "title_class": "",
            "type": "link",
            "field_type": "building_information",
            "sortable": true,
            "checked": false,
            "static": false,
            "link": true
        },
        {
            "title": "Property Name",
            "sort_column": "property_name",
            "class": "",
            "title_class": "",
            "type": "string",
            "field_type": "building_information",
            "sortable": true,
            "checked": false
        }];
        building_detail_ctrl = controller('building_detail_controller', {
            $scope: building_detail_ctrl_scope,
            $routeParams: {
                building_id: 1,
                project_id: 2
            },
            building_payload: fake_payload,
            all_columns: {
                fields: fake_all_columns
            },
            audit_payload: {
                audit_logs: []
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should have an building payload", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.building.id).toBe(511);
        expect(building_detail_ctrl_scope.imported_buildings[0].id).toBe(2);
    });

    it("should get labels on load", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.labels[0].id).toBe(44);
        expect(building_detail_ctrl_scope.labels[0].name).toBe("bad label");
        expect(building_detail_ctrl_scope.labels[0].color).toBe("red");
    });

    it("should highlight the active project", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.is_active_project({id:33}))
        .toBe(true);
        expect(building_detail_ctrl_scope.is_active_project({id:34}))
        .toBe(false);
        building_detail_ctrl_scope.project = undefined;
        expect(building_detail_ctrl_scope.is_active_project({id:34}))
        .toBe(false);
    });

    it("should make a copy of building while making edits", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.save_building_state();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;

        // assertions
        expect(building_detail_ctrl_scope.building_copy.gross_floor_area)
        .toBe(123456);
    });
    it("should restore the copy of building if a user clicks cancel",
        function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.save_building_state();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;
        building_detail_ctrl_scope.restore_building();

        // assertions
        expect(building_detail_ctrl_scope.building.gross_floor_area)
        .toBe(123456);
        expect(building_detail_ctrl_scope.building.edit_form_showing).toBe(false);
    });
    it("should save a building when a user clicks the save button", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.building.gross_floor_area = 43214;
        building_detail_ctrl_scope.save_building();

        // assertions
        expect(mock_building_services.update_building)
        .toHaveBeenCalledWith(building_detail_ctrl_scope.building, 42);
        expect(mock_building.gross_floor_area).toEqual(43214);
    });
    it("should show a default label if a building doesn't have one", function() {
        // arrange
        create_building_detail_controller();
        var building_with_label = {
            label: {
                name: "hello",
                label: "success"
            }
        };
        var building_without_label = {};
        var label_with, label_without;

        // act
        building_detail_ctrl_scope.$digest();
        label_with = building_detail_ctrl_scope.get_label(building_with_label);
        label_without = building_detail_ctrl_scope.get_label(building_without_label);

        // assertions
        expect(label_with).toEqual({
                name: "hello",
                label: "success"
            });
        expect(label_without).toEqual({
                name: "Add Label",
                label: "default"
            });
    });

    it("should show a project or buildings breadcrumb", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.user.project_slug = "project_1";

        // assertions
        expect(building_detail_ctrl_scope.is_project()).toEqual(true);
        building_detail_ctrl_scope.user.project_slug = undefined;
        expect(building_detail_ctrl_scope.is_project()).toEqual(false);

    });
    it("should show the default projects table if a user has no compliance" +
        " projects", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.user.has_projects()).toEqual(false);
        building_detail_ctrl_scope.projects = [{id: 1, name: "a"}];
        expect(building_detail_ctrl_scope.user.has_projects()).toEqual(true);

    });

    it("should set only building attribute to master, not ids or children", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.is_valid_key('id')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('pk')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('pk_source')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key(' extra_data ')).toEqual(false);
        expect(building_detail_ctrl_scope.is_valid_key('gross_floor_area'))
          .toEqual(true);
    });
    it("should update a project-building label", function() {
        // arrange
        create_building_detail_controller();
        var project = {
            id: 2,
            building: {}
        };

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.update_project_building(project,
            {
                name: "label name",
                color: "red"
            });
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(mock_project_service.update_project_building).toHaveBeenCalled();
        expect(project.building.approver).toEqual("bob doe");
        expect(project.building.approved_date).toEqual("01/01/2012");
        expect(project.building.label.name).toEqual("label name");
        expect(project.building.label.color).toEqual("red");

    });
    it("should set a field as source when clicked", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[0].is_master = true;
        expect(building_detail_ctrl_scope.building.gross_floor_area_source)
          .not.toEqual(building_detail_ctrl_scope.building.id);
        building_detail_ctrl_scope.set_self_as_source('gross_floor_area');
        building_detail_ctrl_scope.set_self_as_source('some other key', true);
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.building.gross_floor_area_source)
          .toEqual(building_detail_ctrl_scope.building.id);
        expect(building_detail_ctrl_scope.imported_buildings[0].is_master)
          .toEqual(false);
    });
    it("should set a column as the dominant source when clicked", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[1].is_master = true;
        building_detail_ctrl_scope.make_source_default(
            building_detail_ctrl_scope.imported_buildings[0]);
        building_detail_ctrl_scope.$digest();

        // assertions
        var b = building_detail_ctrl_scope.building,
            i = building_detail_ctrl_scope.imported_buildings[0],
            i_other = building_detail_ctrl_scope.imported_buildings[1];

        expect(b.gross_floor_area_source).toEqual(i.id);
        expect(b.id).not.toEqual(i.id);
        expect(b.pk).not.toEqual(i.id);
        expect(b.city).toEqual(i.city);
        expect(b.city_source).toEqual(i.id);
        expect(b.tax_lot_id).toEqual("11/22");
        expect(b.tax_lot_id_source).toEqual(i_other.id);
        expect(b.extra_data['some other key']).toEqual(123);
        expect(b.extra_data_sources['some other key']).toEqual(i.id);
        expect(b.extra_data['some other key that is not in a child']).toEqual(333);
        expect(b.extra_data_sources['some other key that is not in a child']).toEqual(i.id);
        expect(b.extra_data['some other key that is not in a parent']).toEqual(223);
        expect(b.extra_data_sources['some other key that is not in a parent']).toEqual(i_other.id);
        expect(b.created).toEqual("at some point");

        expect(i.is_master).toEqual(true);
        expect(i_other.is_master).toEqual(false);
    });
    it("should set the master building value when parent's value is clicked",
        function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.imported_buildings[1].is_master = true;
        building_detail_ctrl_scope.set_building_attribute(
            building_detail_ctrl_scope.imported_buildings[0], 'city');
        building_detail_ctrl_scope.set_building_attribute(
            building_detail_ctrl_scope.imported_buildings[0], 'some other key', true);
        building_detail_ctrl_scope.$digest();

        // assertions
        var b = building_detail_ctrl_scope.building,
            i = building_detail_ctrl_scope.imported_buildings[0],
            i_other = building_detail_ctrl_scope.imported_buildings[1];

        expect(b.id).not.toEqual(i.id);
        expect(b.pk).not.toEqual(i.id);
        expect(b.city).toEqual(i.city);
        expect(b.city_source).toEqual(i.id);
        expect(b.tax_lot_id).toEqual("11/22");
        expect(b.tax_lot_id_source).toEqual(i_other.id);
        expect(b.extra_data['some other key']).toEqual(123);
        expect(b.extra_data_sources['some other key']).toEqual(i.id);

        expect(i.is_master).toEqual(false);
        expect(i_other.is_master).toEqual(false);
    });

    it("should display all the data within all the buildings", function() {
        // arrange
        create_building_detail_controller();
        var keys;

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        var edc = building_detail_ctrl_scope.data_columns;

        // should not duplicate keys
        expect(edc.length).toEqual(8);
        keys = edc.map(function ( d ) {
            return d.key;
        });
        expect(keys.indexOf('make it four')).toEqual(4);
    });

    it("should display Floor Areas", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();
        building_detail_ctrl_scope.$digest();

        // assertions
        var area_fields = building_detail_ctrl_scope.floor_area_fields;
        expect(area_fields.length).toEqual(1);
    });

    it("should display Floor Areas with number", function() {
        // arrange
        create_building_detail_controller();

        // act
        building_detail_ctrl_scope.$digest();

        // assertions
        expect(building_detail_ctrl_scope.get_number("")).toEqual(0);
        expect(building_detail_ctrl_scope.get_number("123,123,123")).toEqual(123123123);
        expect(building_detail_ctrl_scope.get_number("123,123,123.123")).toEqual(123123123.123);
        expect(building_detail_ctrl_scope.get_number("-123,123,123")).toEqual(-123123123);
        expect(building_detail_ctrl_scope.get_number(-123123123)).toEqual(-123123123);


    });
});

describe("controller: concat_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var scope, controller, modal_state;
    var edit_ctrl, concat_modal_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label, mock_mapping_service, mock_matching_service;
    var global_step = 1;
    var global_dataset = {};

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
            $controller, $rootScope, $modal, urls, $q
        ) {
            controller = $controller;
            scope = $rootScope;
            concat_modal_ctrl_scope = $rootScope.$new();
            concat_modal_ctrl_scope.concat_columns = [];
            modal_state = "";
        }
    ));

    var mock_building_column_types = [
        'address1', 'city', 'state', 'postal_code'
    ];

    var mock_raw_columns = [
        {
            name: 'Address',
            suggestion: 'address1',
            confidence: 1,
            raw_data: [
                '234 Database way',
                '23444 Huh hwy',
                '23444 Huh hwy',
                '23444 Huh hwy',
                '1223 face pl.'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        },
        {
            name: 'City',
            suggestion: 'city',
            confidence: 1,
            raw_data: [
                'Mega City', 'Mega City', 'Mega City', 'Mega City', 'Mega City'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        },
        {
            name: 'Zip',
            suggestion: '',
            confidence: 0,
            raw_data: [
                '234233', '234233', '234233', '234233', '234233'
            ],
            is_concatenated: false,
            is_a_concat_parameter: false
        }
    ];

    // this is outside the beforeEach so it can be configured by each unit test
    function create_concat_modal_controller(){
        edit_ctrl = controller('concat_modal_ctrl', {
            $scope: concat_modal_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            building_column_types: mock_building_column_types,
            raw_columns: mock_raw_columns
        });
    }

    /*
     * Test scenarios
     */

    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.close_concat_modal();
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should mangle scope appropriately during concatenation", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(3);

        // arrange
        concat_modal_ctrl_scope.concat_columns =
            concat_modal_ctrl_scope.raw_columns.slice(0);
        concat_modal_ctrl_scope.raw_columns = [];

        // act
        concat_modal_ctrl_scope.$digest();
        concat_modal_ctrl_scope.save_concat();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(1);
        expect(
            concat_modal_ctrl_scope.raw_columns[0].is_concatenated
        ).toEqual(true);
    });

    it("should modify the raw_data of our modified TCM correctly", function() {
        // arrange
        create_concat_modal_controller();

        // act
        concat_modal_ctrl_scope.$digest();

        // assertions
        expect(concat_modal_ctrl_scope.raw_columns.length).toBe(3);

        // arrange
        concat_modal_ctrl_scope.concat_columns =
            concat_modal_ctrl_scope.raw_columns.slice(0);
        concat_modal_ctrl_scope.raw_columns = [];

        // act
        concat_modal_ctrl_scope.$digest();
        concat_modal_ctrl_scope.save_concat();

        var expected_raw = [
            '234 Database way Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '23444 Huh hwy Mega City 234233',
            '1223 face pl. Mega City 234233'
        ];

        // assertions
        expect(
            concat_modal_ctrl_scope.raw_columns[0].raw_data
        ).toEqual(expected_raw);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: create_organization_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_organization_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, organization_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        mock_organization_service = organization_service;
        spyOn(mock_organization_service, "create_sub_org")
            .andCallFake(function(org, sub_org){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_organization_modal_ctrl(){
        ctrl = ctrl('create_organization_modal_ctrl', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            organization: {organization_id: 1}
        });
    }

    /*
     * Test scenarios
     */

    it("should call the organization service to add a new sub_org",
        function() {
        // arrange
        create_organization_modal_ctrl();

        // act
        ctrl_scope.$digest();
        ctrl_scope.sub_org.name = "my shiny new org";
        ctrl_scope.sub_org.email = "jb.smooth@be.com";
        ctrl_scope.submit_form(true);

        // assertions
        expect(mock_organization_service.create_sub_org)
            .toHaveBeenCalledWith(
                {
                    organization_id: 1
                },
                {
                    name: "my shiny new org",
                    email: "jb.smooth@be.com"
                }
            );
    });
    
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: data_upload_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_uploader_service, scope, controller, modal_state;
    var edit_ctrl, data_upload_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label, mock_mapping_service, mock_matching_service;
    var global_step = 1;
    var global_dataset = {};
    var return_labels = [
        {
            "name": 'compliant',
            "color": 'green',
            "id": 1
        },
        {
            "name": "new label",
            "color": "blue",
            "id": 2
        }
    ];

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, uploader_service, mapping_service, matching_service) {
            controller = $controller;
            scope = $rootScope;
            data_upload_ctrl_scope = $rootScope.$new();
            modal_state = "";

            // mock the uploader_service factory methods used in the controller
            // and return their promises
            mock_uploader_service = uploader_service;
            mock_mapping_service = mapping_service;
            mock_matching_service = matching_service;
            spyOn(mock_uploader_service, "get_AWS_creds")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "AWS_CLIENT_ACCESS_KEY": "123",
                            "AWS_UPLOAD_BUCKET_NAME": "test-bucket"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "check_progress")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "progress": "25.0"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "create_dataset")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "id": 3,
                                "name": dataset_name

                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error",
                                "message": "name already in use"
                            }
                        );
                    }
                }
            );
            spyOn(mock_uploader_service, "save_raw_data")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "file_id": 3
                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error"
                            }
                        );
                    }
                }
            );
            spyOn(mock_mapping_service, "start_mapping")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "file_id": 3
                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error"
                            }
                        );
                    }
                }
            );
            spyOn(mock_matching_service, "start_system_matching")
            .andCallFake(function(file_id){
                // return $q.reject for error scenario
                return $q.when(
                    {
                        "status": "success",
                        "file_id": 3
                    }
                );
            });

        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_data_upload_modal_controller(){
        edit_ctrl = controller('data_upload_modal_ctrl', {
            $scope: data_upload_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            step: global_step,
            dataset: global_dataset
        });
    }

    /*
     * Test scenarios
     */

    it("should close the modal when the close function is called", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.close();
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel function is called", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.cancel();
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

    it("should start at the step provided", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(1);

        // arrange
        global_step = 2;
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(2);
    });

    it("should goto different steps", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var step;
        step = 2;
        data_upload_ctrl_scope.goto_step(step);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.step.number).toBe(step);
    });

    it("disables the 'Name it' button if no text is entered", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(true);
    });
    it("disables the 'Name it' button if no text is entered, then cleared",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.dataset.name = undefined;
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(true);
    });
    it("enables the 'Name it' button if text is entered", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.dataset.name = "my dataset name";
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.disabled()).toBe(false);
    });
    it("should show an alert if the dataset name is already in use",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.create_dataset("fail");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.alert).toBe(true);
    });
    it("should not show an alert if the dataset name is not already in use",
        function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.create_dataset("my shiny new dataset");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.alert).toBe(false);
    });
    it("after creating a dataset, stores the dataset id", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var ds_name = "my shiny new dataset";
        data_upload_ctrl_scope.create_dataset(ds_name);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.id).toBe(3);
        expect(data_upload_ctrl_scope.dataset.name).toBe(ds_name);
    });
    it("after uploading a file, stores the file id", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        var message, filename;
        message = "upload_complete";
        filename = "file1.csv";

        // act
        data_upload_ctrl_scope.uploaderfunc(message, {
            filename: filename,
            file_id: 20140313
        });
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.import_file_id).toBe(20140313);
    });
    it("should show an invalid extension alert if a file with an invalid" +
        "extension is loaded", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.uploaderfunc("invalid_extension");
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.invalid_extension_alert)
            .toBe(true);
    });
    it("should hide the upload button after the user selects a file",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename;
        message = "upload_submitted";
        filename = "file1.csv";

        // act
        data_upload_ctrl_scope.uploaderfunc(message, {filename: filename});
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.filename).toBe(filename);
        expect(data_upload_ctrl_scope.uploader.in_progress).toBe(true);
    });
    it("should show the progressbar during upload",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename, progress;
        message = "upload_in_progress";
        filename = "file1.csv";
        progress = {
            loaded: 10,
            total: 100
        };

        // act
        data_upload_ctrl_scope.uploaderfunc(message, filename, progress);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.in_progress).toBe(true);
        expect(data_upload_ctrl_scope.uploader.progress).toBe(2.5);
    });
    it("should start saving the energy data when the file has been uploaded",
        function() {
        // arrange
        create_data_upload_modal_controller();
        var message, filename;
        message = "upload_complete";
        filename = "file1.csv";
        data_upload_ctrl_scope.step.number = 4;

        // act
        data_upload_ctrl_scope.uploaderfunc(message, filename);
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.uploader.status_message)
            .toBe("saving energy data");
    });

    it("should take an dataset payload", function() {
        // arrange
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.name).toBe("");
        expect(data_upload_ctrl_scope.dataset.filename).toBe("");
        expect(data_upload_ctrl_scope.dataset.id).toBe(0);
    });

    it("should extend a custom dataset payload", function() {
        // arrange
        global_dataset = {
            id: 100,
            filename: "seed_data.csv",
            name: "Compliance Project"
        };
        create_data_upload_modal_controller();

        // act
        data_upload_ctrl_scope.$digest();

        // assertions
        expect(data_upload_ctrl_scope.dataset.name).toBe("Compliance Project");
        expect(data_upload_ctrl_scope.dataset.filename).toBe("seed_data.csv");
        expect(data_upload_ctrl_scope.dataset.id).toBe(100);
        expect(data_upload_ctrl_scope.dataset.alert).toBe(false);

    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: dataset_detail_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, ngFilter, delete_called;
    var dataset_detail_ctrl, dataset_detail_ctrl_scope, modalInstance, labels;

    

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, dataset_service, $filter) {
            controller = $controller;
            scope = $rootScope;
            ngFilter = $filter;
            dataset_detail_ctrl_scope = $rootScope.$new();
            modal_state = "";
            delete_called = false;

            // mock the dataset_service factory methods used in the controller
            // and return their promises
            mock_dataset_service = dataset_service;
            spyOn(mock_dataset_service, "get_dataset")
                .andCallFake(function(dataset_id){
                    // return $q.reject for error scenario
                    var fake_importfiles = [
                        {
                            name: "DC_CoveredBuildings_50k.csv",
                            number_of_buildings: 511,
                            number_of_mappings: 511,
                            number_of_cleanings: 1349,
                            source_type: "Assessed Raw",
                            number_of_matchings: 403
                        },
                        {
                            name: "DC_ESPM_Report.csv",
                            number_of_buildings: 511,
                            number_of_matchings: 403,
                            source_type: "Portfolio Raw"
                        }
                    ];
                    var fake_dataset = {
                        name: "DC 2013 data",
                        last_modified: (new Date()).getTime(),
                        last_modified_by: "john.s@buildingenergy.com",
                        number_of_buildings: 89,
                        id: 1,
                        importfiles: fake_importfiles
                    };
                    var fake_payload = {
                        "status": "success",
                        "dataset": fake_dataset
                    };
                    if (delete_called) {
                        fake_payload.dataset.importfiles.pop();
                    }
                    console.log({delete_called: delete_called, ds: fake_payload});
                    return $q.when(fake_payload);
                }
            );

            spyOn(mock_dataset_service, "delete_file")
                .andCallFake(function(import_file){
                    delete_called = true;
                    console.log({d: "delete_called"});
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_detail_controller(){
        var fake_importfiles = [
            {
                name: "DC_CoveredBuildings_50k.csv",
                number_of_buildings: 511,
                number_of_mappings: 511,
                number_of_cleanings: 1349,
                source_type: "Assessed Raw",
                number_of_matchings: 403
            },
            {
                name: "DC_ESPM_Report.csv",
                number_of_buildings: 511,
                number_of_matchings: 403,
                source_type: "Portfolio Raw"
            }
        ];
        var fake_dataset = {
            name: "DC 2013 data",
            last_modified: (new Date()).getTime(),
            last_modified_by: "john.s@buildingenergy.com",
            number_of_buildings: 89,
            id: 1,
            importfiles: fake_importfiles
        };
        var fake_payload = {
            "status": "success",
            "dataset": fake_dataset
        };
        dataset_detail_ctrl = controller('dataset_detail_controller', {
            $scope: dataset_detail_ctrl_scope,
            dataset_payload: fake_payload
        });
    }

    /*
     * Test scenarios
     */

    it("should have an data set payload with import files", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        dataset_detail_ctrl_scope.$digest();

        // assertions
        expect(dataset_detail_ctrl_scope.dataset.importfiles.length).toBe(2);
    });

    it("should show an alert when the delete icon is clicked", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        dataset_detail_ctrl_scope.$digest();
        var importfiles = dataset_detail_ctrl_scope.dataset.importfiles;
        dataset_detail_ctrl_scope.delete_file(importfiles[0]);
        dataset_detail_ctrl_scope.$digest();

        // assertions
        expect(dataset_detail_ctrl_scope.dataset.importfiles.length).toBe(1);
    });
   
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: dataset_list_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, modal_state;
    var edit_ctrl, dataset_list_ctrl_scope, modalInstance, labels;
    var location;

    

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, uploader_service,
            $location) {
            controller = $controller;
            scope = $rootScope;
            dataset_list_ctrl_scope = $rootScope.$new();
            modal_state = "";
            location = $location;

            // mock the uploader_service factory methods used in the controller
            // and return their promises
            mock_uploader_service = uploader_service;
            spyOn(mock_uploader_service, "get_AWS_creds")
                .andCallFake(function(){
                    // return $q.reject for error scenario
                    return $q.when(
                        {
                            "status": "success",
                            "AWS_CLIENT_ACCESS_KEY": "123",
                            "AWS_UPLOAD_BUCKET_NAME": "test-bucket"
                        }
                    );
                }
            );
            spyOn(mock_uploader_service, "create_dataset")
                .andCallFake(function(dataset_name){
                    // return $q.reject for error scenario
                    if (dataset_name !== 'fail'){
                        return $q.when(
                            {
                                "status": "success",
                                "import_record_id": 3,
                                "import_record_name": dataset_name

                            }
                        );
                    } else {
                        return $q.reject(
                            {
                                "status": "error",
                                "message": "name already in use"
                            }
                        );
                    }
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_list_controller(){
        var fake_datasets_payload = {
            "status": "success",
            "datasets": [
                {
                    name: "DC 2013 data",
                    last_modified: (new Date()).getTime(),
                    last_modified_by: "john.s@buildingenergy.com",
                    number_of_buildings: 89
                },
                {
                    name: "DC 2014 data",
                    last_modified: (new Date()).getTime() -
                        1550 * 60 * 60 * 1000,
                    last_modified_by: "gavin.m@buildingenergy.com",
                    number_of_buildings: 70
                }
            ]
        };
        edit_ctrl = controller('dataset_list_controller', {
            $scope: dataset_list_ctrl_scope,
            datasets_payload: fake_datasets_payload
        });
    }

    /*
     * Test scenarios
     */

    it("should have a dataset_payload", function() {
        // arrange
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();

        // assertions
        expect(dataset_list_ctrl_scope.datasets.length).toEqual(2);
    });

    it("should disable the mapping button if the dataset has no" +
        " Assessor files", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Portfolio Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_assessor_files(dataset);

        // assertions
        expect(disabled).toEqual(true);
    });

    it("should enable the mapping button if the dataset has at least one" +
        " Assessor file", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_assessor_files(dataset);

        // assertions
        expect(disabled).toEqual(false);
    });
    it("should disable the matching button if the dataset has no" +
        " Portfolio Manger files", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Assessed Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_pm_files(dataset);

        // assertions
        expect(disabled).toEqual(true);
    });
    it("should enable the matching button if the dataset has at least one" +
        " Portfolio Manger file", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw"
                },
                {
                    source_type: "Assessed Raw"
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        var disabled = dataset_list_ctrl_scope.missing_pm_files(dataset);

        // assertions
        expect(disabled).toEqual(false);
    });
    it("should navigate to the mapping page of the first assessed" +
        " import file when the ``Mapping`` button is clicked", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Assessed Raw",
                    id: 3
                },
                {
                    source_type: "Assessed Raw",
                    id: 5
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        dataset_list_ctrl_scope.goto_mapping(dataset);

        // assertions
        expect(location.path()).toBe('/data/mapping/3');
    });
    it("should navigate to the matching page of the first Portfolio Manager" +
        " import file when the ``Matching`` button is clicked", function() {
        // arrange
        var dataset = {
            importfiles: [
                {
                    source_type: "Portfolio Raw",
                    id: 3
                },
                {
                    source_type: "Portfolio Raw",
                    id: 5
                }
            ]
        };
        create_dataset_list_controller();

        // act
        dataset_list_ctrl_scope.$digest();
        dataset_list_ctrl_scope.goto_matching(dataset);

        // assertions
        expect(location.path()).toBe('/data/matching/3');
    });

   
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: delete_modal_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, building_services, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        // mock the export_service factory methods used in the controller
        // and return their promises
        mock_building_services = building_services;
        spyOn(mock_building_services, "delete_buildings")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_delete_modal_controller(){
        ctrl = ctrl('delete_modal_controller', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            search: { 
                selected_buildings: [1,2],
                filter_params: {},
                select_all_checkbox: false,
                order_by: "",
                sort_reverse: false,
                number_matching_search: 1000
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should start at the delete page", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.delete_state).toEqual("delete"); 
    });
    it("should save the search paramaters",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.delete_payload;
        expect(b.selected_buildings).toEqual([1,2]);
        expect(b.filter_params).toEqual({});
        expect(b.order_by).toEqual("");
        expect(b.sort_reverse).toEqual(false);
        expect(b.select_all_checkbox).toEqual(false);
    });
    it("should delete when the delete button is clicked",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.delete_buildings();

        // assertions
        expect(ctrl_scope.delete_state).toEqual("prepare");
        expect(mock_building_services.delete_buildings).toHaveBeenCalled();
    });
    it("should show the success page when the delete is finished",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.delete_buildings();
        ctrl_scope.$digest();

        // assertions
        expect(mock_building_services.delete_buildings).toHaveBeenCalled();
        expect(ctrl_scope.delete_state).toEqual("success");
    });
    it("should show the number of buildings to be deleted",
        function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.$digest();
        var number_to_delete = ctrl_scope.number_to_delete();

        // assertions
        expect(number_to_delete).toEqual(2);
    });
    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.close();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_delete_modal_controller();

        // act
        ctrl_scope.cancel();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

  
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myDistrictApp = angular.module('myDistrictApp', ['district']);

describe("The district filter", function() {
    beforeEach(module('myDistrictApp'));
    it('replaces `district` with `County/District/Ward/Borough`',
        inject(function(districtFilter) {
            // normal cases
            expect(districtFilter('district')).toBe('County/District/Ward/Borough');
            expect(districtFilter('District')).toBe('County/District/Ward/Borough');
            expect(districtFilter('DistRict')).toBe('County/District/Ward/Borough');
            expect(districtFilter('DISTRICT')).toBe('County/District/Ward/Borough');
            expect(districtFilter('aDISTRICT')).toBe('aDISTRICT');
            expect(districtFilter('')).toBe('');
            expect(districtFilter('district ')).toBe('district ');
            expect(districtFilter('ok')).toBe('ok');
            expect(districtFilter(undefined)).toBe(undefined);
            expect(districtFilter(null)).toBe(null);
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: edit_label_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller, modal_state;
    var edit_ctrl, edit_ctrl_scope, modalInstance, labels;
    var deleted_label, updated_label;
    var return_labels = [
        {
            "name": 'compliant',
            "color": 'green',
            "id": 1
        },
        {
            "name": "new label",
            "color": "blue",
            "id": 2
        }
    ];

    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, urls, $q, project_service) {
        controller = $controller;
        scope = $rootScope;
        edit_ctrl_scope = $rootScope.$new();
        modal_state = "";

        // mock the project_service factory methods used in the controller
        // and return their promises
        mock_project_service = project_service;
        spyOn(mock_project_service, "get_labels")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success", "labels": return_labels});
            }
        );
        spyOn(mock_project_service, "add_label")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
        spyOn(mock_project_service, "delete_label")
            .andCallFake(function(label){
                deleted_label = label;
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
        spyOn(mock_project_service, "update_label")
            .andCallFake(function(label){
                updated_label = label;
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );

    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_edit_modal_controller(){
        var labels = [
            {
                "name": 'compliant',
                "color": 'green',
                "id": 1
            }
        ];

        edit_ctrl = controller('edit_label_modal_ctrl', {
            $scope: edit_ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            labels: labels
        });
    }

    /*
     * Test scenarios
     */

    it("should initialize the default label", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.$digest();
        edit_ctrl_scope.initialize_label_modal();

        // assertions
        expect(edit_ctrl_scope.label_modal.color).toBe("gray");
        expect(edit_ctrl_scope.label_modal.label).toBe("default");
        expect(edit_ctrl_scope.label_modal.name).toBe("");
        expect(edit_ctrl_scope.modal.label.state).toBe("create");
    });

    it("should get the labels available to an organization", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.add_label({});  // calls private get_labels
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.labels.length).toBe(2);
    });

    it("should add a label in the user's organization", function() {
        // arrange
        create_edit_modal_controller();
        var label_to_add = {
            color: "blue",
            label: "primary",
            name: "new label"
        };

        // act
        edit_ctrl_scope.add_label(label_to_add);
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.labels.length).toBe(2);
        expect(edit_ctrl_scope.labels[1].color).toBe("blue");
        expect(edit_ctrl_scope.labels[1].name).toBe("new label");
    });

    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.close();
        edit_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_edit_modal_controller();

        // act
        edit_ctrl_scope.cancel();
        edit_ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

    it("sets the label_modal to the label when its edit button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.edit_label(label);
        edit_ctrl_scope.$digest();

        // assertions
        expect(edit_ctrl_scope.label_modal.color).toBe(label.color);
        expect(edit_ctrl_scope.label_modal.name).toBe(label.name);
        expect(edit_ctrl_scope.modal.label.state).toBe("edit");

        // assert that edit_ctrl_scope.label_modal is a copy and not a reference to label
        edit_ctrl_scope.label_modal.name = "random name here";
        expect(edit_ctrl_scope.label_modal.name).not.toBe(label.name);
    });
    
    it("deletes the appropriate label when the delete button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.delete_label(label);
        edit_ctrl_scope.$digest();

        // assertions
        expect(deleted_label).toBe(label);
    });

    it("updates the appropriate label when the update label button is clicked", function() {
        // arrange
        create_edit_modal_controller();
        var label = edit_ctrl_scope.labels[0];

        // act
        edit_ctrl_scope.edit_label(label);
        edit_ctrl_scope.$digest();
        edit_ctrl_scope.label_modal.name = "harry";
        edit_ctrl_scope.label_modal.color = "blue";
        edit_ctrl_scope.update_label(edit_ctrl_scope.label_modal);
        edit_ctrl_scope.$digest();

        // assertions
        expect(mock_project_service.update_label).toHaveBeenCalledWith(edit_ctrl_scope.label_modal);
        expect(updated_label).toBe(edit_ctrl_scope.label_modal);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: export_modal_controller", function(){
    // globals set up and used in each test scenario
    var mock_export_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, export_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        // mock the export_service factory methods used in the controller
        // and return their promises
        mock_export_service = export_service;
        spyOn(mock_export_service, "export_buildings")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({"status": "success", "export_id": "123456"});
            }
        );
        spyOn(mock_export_service, "export_buildings_progress")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({
                    "status": "success",
                    "buildings_processed": 1000
                });
            }
        );
            spyOn(mock_export_service, "export_buildings_download")
            .andCallFake(function(){
                // return $q.reject for error scenario
                return $q.when({
                    "status": "success",
                    "url": "#"
                });
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_export_modal_controller(){
        ctrl = ctrl('export_modal_controller', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            search: { 
                selected_buildings: [],
                filter_params: {},
                select_all_checkbox: false,
                order_by: "",
                sort_reverse: false,
                number_matching_search: 1000
            },
            selected_fields: ['tax_lot_id', 'postal_code'],
            project: {
                id: 11
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should start at the create page", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.export_state).toEqual("create"); 
    });
    it("should start with an empty name and default file type of 'xls'",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.building_export;
        expect(b.export_name).toEqual("");
        expect(b.export_type).toEqual("xls");
    });
    it("should save the search paramaters",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        var b = ctrl_scope.building_export;
        expect(b.selected_buildings).toEqual([]);
        expect(b.filter_params).toEqual({});
        expect(b.order_by).toEqual("");
        expect(b.sort_reverse).toEqual(false);
        expect(b.select_all_checkbox).toEqual(false);
        expect(b.selected_fields).toEqual(['tax_lot_id', 'postal_code']);
        expect(b.project_id).toEqual(11);
        expect(ctrl_scope.progress_denominator).toEqual(0);
    });
    it("should kick off the export process when the export button is clicked",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.export_buildings();

        // assertions
        expect(ctrl_scope.export_state).toEqual("prepare");
        expect(mock_export_service.export_buildings).toHaveBeenCalled();
    });
    it("should show the success page when the data is ready",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.show_success_page("123");
        ctrl_scope.$digest();

        // assertions
        expect(mock_export_service.export_buildings_download).toHaveBeenCalled();
        expect(ctrl_scope.export_state).toEqual("success");
    });
    it("should update the progress bar",
        function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.monitor_progress("123", 1000);
        ctrl_scope.$digest();
        timeout.flush();

        // assertions
        expect(mock_export_service.export_buildings_progress).toHaveBeenCalled();
        expect(ctrl_scope.progress_percentage).toEqual(100);
        expect(ctrl_scope.progress_numerator).toEqual(1000);
        expect(ctrl_scope.progress_denominator).toEqual(1000);
    });
    it("should close the modal when the close funtion is called", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.close();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("close");
    });

    it("should cancel the modal when the cancel funtion is called", function() {
        // arrange
        create_export_modal_controller();

        // act
        ctrl_scope.cancel();
        ctrl_scope.$digest();

        // assertions
        expect(modal_state).toBe("dismiss");
    });

  
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
/**
 * tests fromNow angularjs filter wrapper of moment.js
 * uses epoch milliseconds as that is what the back-end returns
 */

// create dummy angularJS app to attach filter(s)
var myfromNowFilterApp = angular.module('myfromNowFilterApp', ['fromNow']);

describe("The fromNow filter", function() {
    beforeEach(module('myfromNowFilterApp'));

    it('shows the present time as "a few seconds ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('a few seconds ago');
        })
    );

    it('shows 5 minutes ago as "5 minutes ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 5  * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('5 minutes ago');
        })
    );

    it('shows 4 hours ago as "4 hours ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 4 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('4 hours ago');
        })
    );

    it('shows 24 hours ago as "a day ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 24 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('a day ago');
        })
    );

    it('shows 36 hours ago as "2 days ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 36 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('2 days ago');
        })
    );

    it('shows 1550 hours ago as "2 months ago"',
        inject(function(fromNowFilter) {
            // arrange
            var date_epoch_mills = (new Date()).getTime();
            date_epoch_mills = date_epoch_mills - 1550 * 60 * 60 * 1000;

            // act
            var from_now_value = fromNowFilter(date_epoch_mills);

            // assert
            expect(from_now_value).toBe('2 months ago');
        })
    );

    it('defaults to "a few seconds ago" for undefined values',
        inject(function(fromNowFilter) {
            // arrange

            // act

            // assert
            expect(fromNowFilter(undefined)).toBe('a few seconds ago');
            expect(fromNowFilter(null)).toBe('a few seconds ago');
            expect(fromNowFilter("some text")).toBe('a few seconds ago');
            expect(fromNowFilter({})).toBe('a few seconds ago');
            expect(fromNowFilter({time: "not time"})).toBe('a few seconds ago');
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myignoremapApp = angular.module('myignoremapApp', ['ignoremap']);

describe("The ignoremap filter", function() {
    beforeEach(module('myignoremapApp'));
    it('replaces `""` with `------ Ignore Row ------`',
        inject(function(ignoremapFilter) {
            // normal cases
            expect(ignoremapFilter('')).toBe('------ Ignore Row ------');
            expect(ignoremapFilter(' ')).toBe(' ');
            expect(ignoremapFilter('aignoremap')).toBe('aignoremap');
            expect(ignoremapFilter('ignoremap ')).toBe('ignoremap ');
            expect(ignoremapFilter('ok')).toBe('ok');
            expect(ignoremapFilter(undefined)).toBe('------ Ignore Row ------');
            expect(ignoremapFilter(null)).toBe('------ Ignore Row ------');
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: mapping_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, modal_state;
    var mapping_ctrl, mapping_ctrl_scope, modalInstance, labels;
    var timeout, mock_user_service, mock_search_service;



    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, building_services, $timeout, user_service, search_service) {
            controller = $controller;
            scope = $rootScope;
            mapping_ctrl_scope = $rootScope.$new();
            modal_state = "";
            timeout = $timeout;
            mock_user_service = user_service;
            mock_search_service = search_service;

            spyOn(mock_user_service, 'set_default_columns')
                .andCallFake(function(mapped_columns){
                    return undefined;
                });
            spyOn(mock_search_service, 'search_buildings')
                .andCallFake(function(){
                    return [1,2,3];
                });
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_mapping_controller(){
        var mock_datasets = [
            {
                name: "DC 2013 data",
                last_modified: (new Date()).getTime(),
                last_modified_by: "john.s@buildingenergy.com",
                number_of_buildings: 89,
                id: 1
            },
            {
                name: "DC 2014 data",
                last_modified: (new Date()).getTime() -
                    1550 * 60 * 60 * 1000,
                last_modified_by: "gavin.m@buildingenergy.com",
                number_of_buildings: 70,
                id: 2
            }
        ];
        var fake_import_file_payload = {
            "status": "success",
            "import_file": {
                        file_name: "assessor_fun.csv",
                        last_modified: (new Date()).getTime(),
                        last_modified_by: "john.s@buildingenergy.com",
                        source_type: 'AssessorRaw',
                        dataset: mock_datasets[0],
                        id: 1
                    }
        };

        var mock_be_building_columns = [
            'pm_property_id',
            'property_name',
            'property_notes',
            'tax_lot_id',
            'gross_floor_area',
            'My New non-BEDES field'
        ];

        var mock_be_building_types = {
            'gross_floor_area': {
                unit_type: 'float',
                schema: 'BEDES'
            }
        };

        var mock_mapping_suggestions_payload = {
            'status': 'success',
            'suggested_column_mappings': {
                // key(django model attribute): [csv_header1, ... csv_header3]
                'property id': ['pm_property_id', 89],
                'lot number': ['tax_lot_id' , 54]
            },
            "building_columns": mock_be_building_columns,
            "building_column_types": mock_be_building_types
        };

        var mock_raw_column_names = [
            'property id',
            'property_name',
            'property_notes',
            'lot number',
            'lot size'
        ];

        var mock_first_five_rows = [];
        for (var i=0; i < 4; i++) {
            mock_first_five_rows.push({
                'property id': i,
                'property_name': 'Property ' + i,
                'property_notes': 'Nup.',
                'lot number': i * 2,
                'lot size': 454 * i
            });
        }

        mock_first_five_rows.push({
            'property id': '121L',
            'property_name': 'Inconsistent Property',
            'property_notes': 'N/A',
            'lot number': 'N/A',
            'lot size': 45
        });

        var raw_columns_payload = {
            "status": "success",
            "raw_columns": mock_raw_column_names
        };
        var first_five_rows_payload = {
            "status": "success",
            "first_five_rows": mock_first_five_rows
        };
        mapping_ctrl = controller('mapping_controller', {
            $scope: mapping_ctrl_scope,
            import_file_payload: fake_import_file_payload,
            suggested_mappings_payload: mock_mapping_suggestions_payload,
            raw_columns_payload: raw_columns_payload,
            first_five_rows_payload: first_five_rows_payload,
            all_columns: {fields: []},
            building_services: mock_building_services,
            $timeout: timeout
        });
    }

    /*
     * Test scenarios
     */

    it("should have a import_file_payload", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        expect(mapping_ctrl_scope.import_file.dataset.name).toBe("DC 2013 data");
    });

    it("should show suggested mappings and confidence", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        var raw_columns = mapping_ctrl_scope.raw_columns;
        var first_column = raw_columns[0];

        expect(first_column.confidence).toBe(89);
        expect(first_column.suggestion).toBe("Pm Property Id");
    });

    it("should show 'low', 'med', 'high', or '' confidence text", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assertions
        var raw_columns = mapping_ctrl_scope.raw_columns;
        var first_column = raw_columns[0];
        expect(first_column.confidence_text()).toBe("high");
        first_column.confidence = 70;
        expect(first_column.confidence_text()).toBe("med");
        first_column.confidence = 35;
        expect(first_column.confidence_text()).toBe("low");
        delete(first_column.confidence);
        expect(first_column.confidence_text()).toBe("");
    });

    it("should validate initial data", function() {
        create_mapping_controller();
        // act
        mapping_ctrl_scope.$digest();
        // assertions
        angular.forEach(mapping_ctrl_scope.raw_columns, function(rc) {
            if (rc.suggestion !== '' && typeof(rc.suggestion) !== "undefined") {
                expect(rc.validity).toBe('valid');
            }
        });
    });

    it("should invalidate bad suggestions", function() {
        // Simulate a change on the tcm, make it fail.
        create_mapping_controller();
        // act
        mapping_ctrl_scope.$digest();
        // assertions
        //
        // We change the suggested mapping for the "property name" column
        // to "gross_floor_area" (which validates as float) to
        // purposesly cause a failing change.
        mapping_ctrl_scope.raw_columns[1].suggestion = 'gross_floor_area';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[1]);
        expect(mapping_ctrl_scope.raw_columns[1].validity).toBe('invalid');

    });

    it("should set td_class appropriately", function() {
        var tcm;

        create_mapping_controller();

        mapping_ctrl_scope.$digest();
        tcm = mapping_ctrl_scope.raw_columns[0];
        var good_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[0]
        );

        // First raw column is mapped up as pm_property_id <-> property_id
        // Any kind of string will be valid.
        expect(good_val).toBe('success');

        // Now set it to one that expects float values.
        // Only one of these will *not* validate.
        mapping_ctrl_scope.raw_columns[0].suggestion = 'gross_floor_area';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[0]);

        tcm = mapping_ctrl_scope.raw_columns[0];
        var warning_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[4]
        );

        expect(warning_val).toBe('warning');

        // We don't want the warning style to be applied to neighboring cells
        // in the same row. Check that the cell next to our invalid one is
        // unstyled (undefined).
        tcm = mapping_ctrl_scope.raw_columns[0];
        var adjacent_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[3]
        );

        expect(adjacent_val).toBe(undefined);

        // Now we're saying the suggestion is to not map.
        // Check that we don't have any class set for this row now.
        mapping_ctrl_scope.raw_columns[0].suggestion = '';
        mapping_ctrl_scope.validate_data(mapping_ctrl_scope.raw_columns[0]);

        tcm = mapping_ctrl_scope.raw_columns[0];
        var blank_val = mapping_ctrl_scope.set_td_class(
            tcm,
            tcm.raw_data[4]
        );

        expect(blank_val).toBe('');

    });

    it("should detect duplicates of mapped rows", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // raw_columns[0] and raw_columns[3] should be the only mapped rows
        var column = mapping_ctrl_scope.raw_columns[3];
        var test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

        // Set the property_name tcm's suggestion to the same as
        // the property_id tcm (raw_columns[0])
        column.suggestion = 'Pm Property Id';

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(true);

        // Since we mark both duplicates as duplicates, the other
        // TCM that has the 'pm_property_id' suggestion should also get
        // 'danger' as its duplicate class.
        var other_dup = mapping_ctrl_scope.is_tcm_duplicate(
            mapping_ctrl_scope.raw_columns[0]
        );
        expect(other_dup).toBe(true);

        // Shows that mapped_row is the sole determinant of
        // column ignoring
        column.mapped_row = false;

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

    });

    it("should ignore duplicates of unmapped rows", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // raw_columns[0] and raw_columns[3] should be the only mapped rows
        var column = mapping_ctrl_scope.raw_columns[1];
        var test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);

        // Set the property_name tcm's suggestion to the same as
        // the property_id tcm (raw_columns[0])
        column.suggestion = 'Pm Property Id';

        test_class = mapping_ctrl_scope.is_tcm_duplicate(
            column
        );

        expect(test_class).toBe(false);
    });

    it("should get mapped buildings", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        mapping_ctrl_scope.get_mapped_buildings();
        mapping_ctrl_scope.$digest();

        // assertions
        expect(mapping_ctrl_scope.search.search_buildings).toHaveBeenCalled();
        expect(mock_user_service.set_default_columns).toHaveBeenCalled();
    });

    it("should enbale the 'show & review buildings' button if duplicates are" +
        " not present", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        for (var i = mapping_ctrl_scope.raw_columns.length - 1; i >= 0; i--) {
            mapping_ctrl_scope.change(mapping_ctrl_scope.raw_columns[i]);
        }
        var duplicates_found = mapping_ctrl_scope.duplicates_present();

        // assertions
        expect(duplicates_found).toBe(false);
    });

    it("should disable the 'show & review buildings' button if duplicates " +
        "are present", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();
        for (var i = mapping_ctrl_scope.raw_columns.length - 1; i >= 0; i--) {
            mapping_ctrl_scope.raw_columns[i].suggestion = "pm_property_id";
            mapping_ctrl_scope.change(mapping_ctrl_scope.raw_columns[i]);
        }
        var duplicates_found = mapping_ctrl_scope.duplicates_present();

        // assertions
        expect(duplicates_found).toBe(true);
    });

    it("should get mappings in an API friendly way", function() {
        create_mapping_controller();
        mapping_ctrl_scope.$digest();
        var mappings = mapping_ctrl_scope.get_mappings();
        expect(mappings.length).toBe(5);
        expect(mappings[0]).toEqual(['Pm Property Id', 'property id']);
        // everything in between is empty since we we're using only
        // suggested mappings.
        expect(mappings[3]).toEqual(['Tax Lot Id', 'lot number']);
    });

    it("should show the 'STEP 2' tab when reviewing mappings", function() {
        // arrange
        create_mapping_controller();
        mapping_ctrl_scope.$digest();

        // act
        var mappings = mapping_ctrl_scope.get_mapped_buildings();

        // assert
        expect(mapping_ctrl_scope.tabs).toEqual({
            'one_active': false,
            'two_active': true,
            'three_active': false
        });
    });

    it("should show BEDES fields with a checkbox", function() {
        // arrange
        create_mapping_controller();

        // act
        mapping_ctrl_scope.$digest();

        // assert
        expect(mapping_ctrl_scope.is_suggestion_BEDES('gross_floor_area')).toBe(true);
        expect(mapping_ctrl_scope.is_suggestion_BEDES('Gross Floor Area')).toBe(true);
        expect(mapping_ctrl_scope.is_suggestion_BEDES('My New non-BEDES field')).toBe(false);
    });

});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: matching_controller", function(){
    // globals set up and used in each test scenario
    var mock_building_services, scope, controller, delete_called;
    var matching_ctrl, matching_ctrl_scope, modalInstance, labels;


    // make the seed app available for each test
    // 'BE.seed' is created in TestFilters.html
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function($controller, $rootScope, $modal, urls, $q, building_services) {
            controller = $controller;
            scope = $rootScope;
            matching_ctrl_scope = $rootScope.$new();

            mock_building_services = building_services;
            spyOn(mock_building_services, "get_PM_filter_by_counts")
                .andCallFake(function(import_file){
                    return $q.when(
                        {
                            "status": "success",
                            "unmatched": 5,
                            "matched": 10
                        }
                    );
                }
            );
            spyOn(mock_building_services, "save_match")
                .andCallFake(function(b1, b2, create){
                    return $q.when(
                        {
                            "status": "success",
                            "child_id": 3
                        }
                    );
                }
            );
            spyOn(mock_building_services, "search_matching_buildings")
                .andCallFake(function(q, number_per_page, current_page, order_by, sort_reverse, 
                                        filter_params, file_id ){
                    
                    if(filter_params.children__isnull === undefined){                        
                        var bldgs = [
                            {
                                pm_property_id: 1
                            },
                            {
                                pm_property_id: 2
                            }
                            ,
                            {
                                pm_property_id: 3
                            }
                        ];
                    } else if (filter_params.children__isnull === false){
                        var bldgs = [
                            {
                                pm_property_id: 1
                            }
                        ];
                    } else if (filter_params.children__isnull === true){
                        var bldgs = [
                            {
                                pm_property_id: 2
                            },
                            {
                                pm_property_id: 3
                            }
                        ];
                    }

                    return $q.when(
                        {
                            status: "success",
                            number_returned: buildings_payload.length,
                            number_matching_search: buildings_payload.length,
                            buildings: bldgs
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_dataset_detail_controller(){
        var buildings_payload = {
            buildings: [
                {
                    pm_property_id: 1,
                    tax_lot_id: null,
                    custom_id_1: 2,
                    gross_floor_area: 111,
                    matched: true,
                    id: 1,
                    children: [3],
                    coparent: {
                        pm_property_id: null,
                        tax_lot_id: 2,
                        custom_id_1: null,
                        gross_floor_area: 111,
                        id: 2,
                        children: [3]
                    }
                }
            ],
            number_matching_search: 1,
            number_returned: 1
        };
        matching_ctrl = controller('matching_controller', {
            $scope: matching_ctrl_scope,
            buildings_payload: buildings_payload,
            all_columns: {
                fields: [{sort_column: 'pm_property_id'}]
            },
            default_columns: {
                columns: ['pm_property_id']
            },
            import_file_payload: {
                import_file: {
                    id: 1,
                    dataset: {
                        importfiles: [
                            {
                                id: 1,
                                name: "file_1.csv"
                            },
                            {
                                id: 2,
                                name: "file_2.csv"
                            }
                        ]
                    }
                }
            }
        });
    }



    /*
     * Test scenarios
     */

    it("should have a buildings payload with potential matches", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();
        var b = matching_ctrl_scope.buildings[0];

        // assertions
        expect(matching_ctrl_scope.buildings.length).toBe(1);
        expect(b.coparent.children).toEqual(b.children);
    });

    it("should provide to the view scope variables representing the number matched and the number of unmatched buildings", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();

        // assertions
        expect(matching_ctrl_scope.matched_buildings).toEqual(10);
        expect(matching_ctrl_scope.unmatched_buildings).toEqual(5);
    });

    it("should jump back to the matching list when the 'Back to list' button" +
        " is clicked", function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.show_building_list = false;
        matching_ctrl_scope.back_to_list();

        // assertions
        expect(matching_ctrl_scope.show_building_list).toEqual(true);
    });

    it("should present an initial state with the matching buildings table",
        function() {
        // arrange
        create_dataset_detail_controller();

        // act
        matching_ctrl_scope.$digest();

        // assertions
        expect(matching_ctrl_scope.columns).toEqual([{ sort_column : 'pm_property_id' }]);
        expect(matching_ctrl_scope.number_matching_search).toEqual(1);
        expect(matching_ctrl_scope.number_returned).toEqual(1);
        expect(matching_ctrl_scope.num_pages).toEqual(1);
        expect(mock_building_services.get_PM_filter_by_counts).toHaveBeenCalled();
    });
    it("should match a building in the matching list", function() {
        // arrange
        create_dataset_detail_controller();
        var b1, b2;
        b2 = {
            id: 2,
            children: [],
            matched: false
        };
        b1 = {
            id: 1,
            children: [],
            matched: true,
            coparent: b2
        };

        // act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.toggle_match(b1);
        matching_ctrl_scope.$digest();

        // assertions
        expect(mock_building_services.save_match).toHaveBeenCalledWith(b1.id, b2.id, true);
        expect(mock_building_services.get_PM_filter_by_counts).toHaveBeenCalled();
        expect(b1.children[0]).toEqual(3);
    });
    it("Should update the list of buildings correctly when 'Show Matched' is selected", function() {
        //arrange
        create_dataset_detail_controller();

        //act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.update_show_filter(matching_ctrl.SHOW_MATCHED)

        //assertions
        //expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(1);
        expect(matching_ctrl_scope.number_returned).toEqual(1);
    });
    it("Should update the list of buildings correctly when 'Show Unmatched' is selected",  function() {
        //arrange
        create_dataset_detail_controller();

        //act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.update_show_filter(matching_ctrl.SHOW_UNMATCHED)

        //assertions
        //expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(2);
        expect(matching_ctrl_scope.number_returned).toEqual(2);
    });
    it("Should update the list of buildings correctly when 'Show All' is selected", function() {
        //arrange
        create_dataset_detail_controller();

        //act
        matching_ctrl_scope.$digest();
        matching_ctrl_scope.update_show_filter(matching_ctrl.SHOW_ALL)

        //assertions
        //expect(mock_building_services.search_matching_buildings).toHaveBeenCalled();
        expect(matching_ctrl_scope.buildings.length).toEqual(3);
        expect(matching_ctrl_scope.number_returned).toEqual(3);
    });



});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: members_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller;
    var ctrl, ctrl_scope, modalInstance;
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          $q,
          organization_service) {
            ctrl = $controller;
            scope = $rootScope;
            ctrl_scope = $rootScope.$new();

            mock_organization_service = organization_service;
            
            spyOn(mock_organization_service, "remove_user")
                .andCallFake(function(user_id, org_id){
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
            spyOn(mock_organization_service, "get_organization_users")
                .andCallFake(function(org){
                    return $q.when(
                        {
                            "status": "success",
                            "users": [{id:1, first_name:"Bob", last_name:"D"}]
                        }
                    );
                }
            );
            spyOn(mock_organization_service, "update_role")
                .andCallFake(function(org_id, user_id, role){
                    return $q.when(
                        {
                            "status": "success"
                        }
                    );
                }
            );
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_members_controller(){
        ctrl = ctrl('members_controller', {
            $scope: ctrl_scope,
            users_payload: {users: [
                {first_name: 'J', last_name: 'S'},
                {first_name: undefined, last_name: null}
            ]},
            organization_payload: {
                organization: {name: 'my org', id: 4}
            },
            auth_payload: {
                auth: {
                    'can_invite_member': true,
                    'can_remove_member': true
                }
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should accepts its payload", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.org).toEqual({name : 'my org', id : 4});
        expect(ctrl_scope.users[0].name).toEqual("J S");
        expect(ctrl_scope.users[1].name).toEqual(" ");
    });
    it("clicking remove should remove a user", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.remove_member({user_id: 2});

        // assertions
        expect(mock_organization_service.remove_user)
            .toHaveBeenCalledWith(2, 4);
        
        ctrl_scope.$digest();
        expect(mock_organization_service.get_organization_users)
            .toHaveBeenCalledWith({org_id: 4});
    });
    it("clicking a new role should update the user's role", function() {
        // arrange
        create_members_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.update_role({user_id: 2, role: "viewer"});

        // assertions
        expect(mock_organization_service.update_role)
            .toHaveBeenCalledWith(2, 4, 'viewer');
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: new_member_modal_ctrl", function(){
    // globals set up and used in each test scenario
    var mock_user_service, scope, controller, modal_state;
    var ctrl, ctrl_scope, modalInstance, timeout;
    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(function($controller, $rootScope, $modal, $q, user_service, $timeout) {
        ctrl = $controller;
        scope = $rootScope;
        ctrl_scope = $rootScope.$new();
        modal_state = "";
        timeout = $timeout;

        mock_user_service = user_service;
        spyOn(mock_user_service, "add")
            .andCallFake(function(user){
                // return $q.reject for error scenario
                return $q.when({"status": "success"});
            }
        );
    }));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_new_member_controller(){
        ctrl = ctrl('new_member_modal_ctrl', {
            $scope: ctrl_scope,
            $modalInstance: {
                close: function() {
                    modal_state = "close";
                },
                dismiss: function() {
                    modal_state = "dismiss";
                }
            },
            organization: {organization_id: 1}
        });
    }

    /*
     * Test scenarios
     */

    it("should set the default role to 'member'", function() {
        // arrange
        create_new_member_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.user.role.value).toEqual("member"); 
    });
    it("should call the user service to add a new user to the org",
        function() {
        // arrange
        create_new_member_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.user.first_name = "JB";
        ctrl_scope.user.last_name = "Smooth";
        ctrl_scope.user.email = "jb.smooth@be.com";
        ctrl_scope.submit_form(true);

        // assertions
        expect(mock_user_service.add)
            .toHaveBeenCalledWith({
                first_name: "JB",
                last_name: "Smooth",
                email: "jb.smooth@be.com",
                role: ctrl_scope.roles[0],
                organization: {
                    organization_id: 1
                }
            });
    });
    
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
/**
 * run_jasmine.js: runs the jasmine JS test runner
 */
(function() {
    var jasmineEnv = jasmine.getEnv();
    jasmineEnv.updateInterval = 1000;

    var htmlReporter = new jasmine.HtmlReporter();

    jasmineEnv.addReporter(htmlReporter);

    jasmineEnv.specFilter = function(spec) {
        return htmlReporter.specFilter(spec);
    };

    var currentWindowOnload = window.onload;

    window.onload = function() {
        if (currentWindowOnload) {
        currentWindowOnload();
        }
        execJasmine();
    };
    function execJasmine() {
        jasmineEnv.execute();
    }
})();

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var searchTestApp = angular.module(
    'searchTestApp', ['BE.seed.service.search']
);

describe("The search_service service", function() {
    var saas, httpBackend, test_url;

    beforeEach(function () {
        module("searchTestApp");
        inject(function (search_service, $httpBackend) {
            saas = search_service;
            httpBackend = $httpBackend;
            httpBackend.when("POST", test_url).respond("ok");
        });

    });

    /**
     * sanitize_params tests
     */
    it('removes null and undefined values from filter_params', function () {
        // arrange
        saas.filter_params = {
          'National Median Site Energy Use__gte': 4,
          'National Median Site Energy Use__lte': null,
          'National Median Source EUI__gte': undefined
        };

        // act
        saas.sanitize_params();

        // assert
        expect(saas.filter_params).toEqual({'National Median Site Energy Use__gte': 4});
    });

    /**
     * search_buildings tests
     */
    it('has sane defaults', function() {
        expect(saas.url).toEqual("");
        expect(saas.error_message).toEqual("");
        expect(saas.alert).toEqual(false);
        expect(saas.buildings).toEqual([]);
        expect(saas.current_page).toEqual(1);
        expect(saas.number_per_page).toEqual(10);
        expect(saas.order_by).toEqual("");
        expect(saas.sort_column).toEqual("tax_lot_id");
        expect(saas.sort_reverse).toEqual(false);
        expect(saas.select_all_checkbox).toEqual(false);
        expect(saas.prev_page_disabled).toEqual(true);
        expect(saas.next_page_disabled).toEqual(true);
        expect(saas.num_pages).toEqual(0);
        expect(saas.query).toEqual("");
        expect(saas.showing).toEqual({
            'start': 1,
            'end': 0
        });
    });

    it('search_buildings uses the argument `query`', function() {
        saas.query = "hotels";
        saas.search_buildings("not hotels");

        expect(saas.query).toEqual("not hotels");
    });
    it('filter search resets the current page', function() {
        // arrange
        saas.current_page = 22;
        spyOn(saas, 'search_buildings');

        // act
        saas.filter_search();

        // assert
        expect(saas.current_page).toEqual(1);
        expect(saas.search_buildings).toHaveBeenCalled();
    });

    it('search_buildings function will default to its query if' +
        ' no query is passed as an argument', function() {
        saas.query = "hotels";
        saas.search_buildings();

        expect(saas.query).toEqual("hotels");
    });

    it('search_buildings hits the set url', function() {
        test_url = "/my-search-url";
        saas.url = test_url;
        saas.search_buildings();
        httpBackend.expectPOST(test_url);
        httpBackend.flush();
    });

    it('search_buildings POSTs the query data as `q`', function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.query = "hotel chains";
        saas.number_per_page = 25;
        saas.order_by = "gross_floor_area";
        saas.sort_reverse = true;
        saas.filter_params = {
            project: '2012 data'
        };

        // act
        saas.search_buildings();

        // assert
        httpBackend.expectPOST(test_url,
            {
                "q": "hotel chains",
                "number_per_page": 25,
                "order_by": "gross_floor_area",
                "sort_reverse": true,
                "filter_params": {
                    "project": "2012 data"
                },
                "page":1
            }
        ).respond(201, "");
        httpBackend.flush();
    });
    it('search_buildings updates its `buildings` model', function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.query = "hotel chains";
        saas.number_per_page = 25;
        saas.order_by = "gross_floor_area";
        saas.sort_reverse = true;
        saas.filter_params = {
            project: '2012 data'
        };

        // act
        saas.search_buildings();

        // assert
        httpBackend.expectPOST(test_url,
            {
                "q": "hotel chains",
                "number_per_page": 25,
                "order_by": "gross_floor_area",
                "sort_reverse": true,
                "filter_params": {
                    "project": "2012 data"
                },
                "page":1
            }
        ).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        expect(saas.buildings).toEqual([
            {
                name: "one",
                id: 1,
                checked: false
            },
            {
                name: "two",
                id: 2,
                checked: false
            }
        ]);
    });
    it('should clear the error and alert after a successful search',
        function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;
        saas.error_message = "help";
        saas.alert = true;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {
            'buildings': [
                {
                    name: "one",
                    id: 1
                },
                {
                    name: "two",
                    id: 2
                }],
            'number_matching_search': 101
            });
        httpBackend.flush();

        // assert
        expect(saas.alert).toEqual(false);
        expect(saas.error_message).toEqual("");
    });

    /**
     * pagination tests
     */
    it('increments the page when the `next` button is clicked',
        function() {
        // arrange
        saas.num_pages = 1000;
        saas.current_page = 100;
        spyOn(saas, 'search_buildings');
        // act
        saas.next_page();

        // assert
        expect(saas.current_page).toEqual(101);
        expect(saas.search_buildings).toHaveBeenCalled();
        expect(saas.search_buildings.callCount).toEqual(1);

    });
    it('doesn\'t increment past the last page when the `next` button is' +
        ' clicked', function() {
        // arrange
        saas.num_pages = 2;
        saas.current_page = 2;
        spyOn(saas, 'search_buildings');
        // act
        saas.next_page();

        // assert
        expect(saas.current_page).toEqual(2);
        expect(saas.search_buildings).toHaveBeenCalled();
        expect(saas.search_buildings.callCount).toEqual(1);

    });
    it('decrements the page when the `previous` button is clicked',
        function() {
        // arrange
        saas.num_pages = 1000;
        saas.current_page = 100;
        spyOn(saas, 'search_buildings');
        // act
        saas.prev_page();

        // assert
        expect(saas.current_page).toEqual(99);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('does not decrement below the first page when the `previous` button' +
        ' is clicked', function() {
        // arrange
        saas.num_pages = 1;
        saas.current_page = 1;
        spyOn(saas, 'search_buildings');
        // act
        saas.prev_page();

        // assert
        expect(saas.current_page).toEqual(1);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('fetches more or less results per page when a user selects an option' +
        ' from the number per page select',
        function() {
        // arrange
        saas.number_per_page_options_model = 50;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_number_per_page();

        // assert
        expect(saas.number_per_page).toEqual(50);
        expect(saas.search_buildings).toHaveBeenCalled();
    });
    it('updates the number of results displayed text after a successful '+
        'search', function() {
        // standard case
        // page 2 of 3 with 10/page, so should display 11 of 20
        // arrange
        saas.current_page = 2;
        saas.num_pages = 3;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_start_end_paging();

        // assert
        expect(saas.showing.start).toEqual(11);
        expect(saas.showing.end).toEqual(20);
        expect(saas.search_buildings).not.toHaveBeenCalled();
    });
    it('displays the number matching the query if on the last page of results',
        function() {
        // standard case
        // page 3 of 3 with 10/page and 34 results, so should display 21 of 34
        // arrange
        saas.current_page = 3;
        saas.number_matching_search = 34;
        saas.num_pages = 3;
        spyOn(saas, 'search_buildings');
        // act
        saas.update_start_end_paging();

        // assert
        expect(saas.showing.start).toEqual(21);
        expect(saas.showing.end).toEqual(34);
    });
    it('should call update_start_end_paging after a successful search',
        function() {
        // arrange
        spyOn(saas, 'update_start_end_paging');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_start_end_paging).toHaveBeenCalled();
    });
    it('should call update_buttons after a successful search',
        function() {
        // arrange
        spyOn(saas, 'update_buttons');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_buttons).toHaveBeenCalled();
    });
    it('should disable prev paging buttons at the first page',
        function() {
        // arrange
        saas.current_page = 1;
        saas.num_pages = 5;

        // act
        saas.update_buttons();

        // assert
        expect(saas.prev_page_disabled).toEqual(true);
        expect(saas.next_page_disabled).toEqual(false);
    });
    it('should disable next paging buttons at the last page',
        function() {
        // arrange
        saas.current_page = 5;
        saas.num_pages = 5;

        // act
        saas.update_buttons();

        // assert
        expect(saas.prev_page_disabled).toEqual(false);
        expect(saas.next_page_disabled).toEqual(true);
    });
    it('should calculate the number of pages after a successful search',
        function() {
        // arrange
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {
            'buildings': [
                {
                    name: "one",
                    id: 1
                },
                {
                    name: "two",
                    id: 2
                }],
            'number_matching_search': 101
            });
        httpBackend.flush();

        // assert
        expect(saas.number_matching_search).toEqual(101);
        expect(saas.num_pages).toEqual(11);
    });

    /**
     * checkbox logic tests
     */
    it('should select or unselect all the viewed results when the select all' +
        ' checkbox is checked or unchecked', function() {
        // arrange
        saas.selected_buildings = [1,2,3];
        saas.select_all_checkbox = true;
        saas.buildings = [
            {
                checked: false
            },
            {
                checked: true
            }
        ];
        spyOn(saas, 'select_or_deselect_all_buildings').andCallThrough();

        // act
        saas.select_all_changed();

        // assert
        expect(saas.selected_buildings).toEqual([]);
        expect(saas.buildings).toEqual([
                {
                    checked: true
                },
                {
                    checked: true
                }
            ]);
        expect(saas.select_or_deselect_all_buildings).toHaveBeenCalled();
    });
    it('should call select_or_deselect_all_buildings after a search',
        function() {
        // arrange
        spyOn(saas, 'select_or_deselect_all_buildings');
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.select_or_deselect_all_buildings).toHaveBeenCalled();
    });
    it('should add a building to the selected list when checked',
        function() {
        // arrange
        var building = {
            id: 5,
            checked: true
        };

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([5]);
    });
    it('should add a building to the selected list when unchecked and the ' +
        'select all checkbox is checked', function() {
        // arrange
        var building = {
            id: 5,
            checked: false
        };
        saas.select_all_checkbox = true;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([5]);
    });
    it('should remove a building to the selected list when unchecked',
        function() {
        // arrange
        var building = {
            id: 5,
            checked: false
        };
        saas.selected_buildings = [5,6,7];
        saas.select_all_checkbox = false;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([6,7]);
    });
    it('should remove a building to the selected list when checked if the ' +
        'select all checkbox is checked', function() {
        // arrange
        var building = {
            id: 5,
            checked: true
        };
        saas.selected_buildings = [5,6,7];
        saas.select_all_checkbox = true;

        // act
        saas.add_remove_to_list(building);

        // assert
        expect(saas.selected_buildings).toEqual([6,7]);
    });
    it('should call load_state_from_selected_buildings after a successful ' +
        'search', function() {
        // arrange
        spyOn(saas, 'load_state_from_selected_buildings').andCallThrough();
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.load_state_from_selected_buildings).toHaveBeenCalled();
    });
    it('should call update_results after a successful ' +
        'search', function() {
        // arrange
        var select_or_deselect_all_buildings_time,
            load_state_from_selected_buildings_time;
        spyOn(saas, 'update_results').andCallThrough();
        spyOn(saas, 'select_or_deselect_all_buildings')
            .andCallFake(function() {
                select_or_deselect_all_buildings_time = new Date();
            }
        );
        spyOn(saas, 'load_state_from_selected_buildings')
            .andCallFake(function() {
                // wait for a sec, otherwise both have the same timestamp
                for(var y=0;y<100000;y++){
                    var x = new Date();
                    x = x+y;
                }
                load_state_from_selected_buildings_time = new Date();
            }
        );
        test_url = "https://mytest.com";
        saas.url = test_url;

        // act
        saas.search_buildings();
        httpBackend.expectPOST(test_url).respond(201, {'buildings': [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ]});
        httpBackend.flush();

        // assert
        expect(saas.update_results).toHaveBeenCalled();
        expect(select_or_deselect_all_buildings_time <
               load_state_from_selected_buildings_time).toBe(true);
    });
    it('check selected buildings successful', function() {
        // arrange
        saas.selected_buildings = [2];
        saas.buildings = [
            {
                name: "one",
                id: 1
            },
            {
                name: "two",
                id: 2
            }
        ];

        // act
        saas.load_state_from_selected_buildings();

        // assert
        expect(saas.buildings[1]).toEqual({
            name: "two",
            id: 2,
            checked: true
        });
    });
    it('should generate columns', function() {
        // arrange
        var all_columns, column_headers, columns;
        all_columns = [
            {
                sort_column: "name"
            },
            {
                sort_column: "id"
            }
        ];
        column_headers = ["id"];
        saas.sort_column = "something else";
        saas.update_results({});
        // act
        columns = saas.generate_columns(
            all_columns, column_headers, saas.column_prototype
        );

        // assert that columns are extended off the prototype and only have
        // "id"
        expect(columns.length).toEqual(1);
        expect(columns[0].sort_column).toEqual("id");
        expect(columns[0].is_unsorted()).toEqual(true);
        saas.sort_column = "id";
        expect(columns[0].is_unsorted()).toEqual(false);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
describe("controller: settings_controller", function(){
    // globals set up and used in each test scenario
    var mockService, scope, controller;
    var ctrl, ctrl_scope, modalInstance;
    var mock_organization_service;

    beforeEach(function() {
        module('BE.seed');
    });

    // inject AngularJS dependencies for the controller
    beforeEach(inject(
        function(
          $controller,
          $rootScope,
          $modal,
          $q,
          organization_service) {
            ctrl = $controller;
            scope = $rootScope;
            ctrl_scope = $rootScope.$new();

            mock_organization_service = organization_service;
            
        }
    ));

    // this is outside the beforeEach so it can be configured by each unit test
    function create_settings_controller(){
        ctrl = ctrl('settings_controller', {
            $scope: ctrl_scope,
            all_columns: {fields: [
                {checked: false, title: 'PM Property ID', sort_column: 'pm_property_id'},
                {checked: false, title: 'G', sort_column: 'g'},
                {checked: false, title: "Gross Floor Area", sort_column: 'gross_floor_area'}
            ]},
            organization_payload: {
                organization: {name: 'my org', id: 4}
            },
            query_threshold_payload: {
                query_threshold: 10
            },
            shared_fields_payload: {
                shared_fields: [
                    {
                        title: "PM Property Id",
                        sort_column: "pm_property_id"
                    }
                ],
                public_fields: [
                {
                    title: "Gross Floor Area",
                    sort_column: "gross_floor_area"
                }]
            },
            auth_payload: {
                auth: {
                    'is_owner': true,
                    'is_parent_org_owner': false
                }
            }
        });
    }

    /*
     * Test scenarios
     */

    it("should accepts its payload", function() {
        // arrange
        create_settings_controller();

        // act
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.org).toEqual({
            name : 'my org',
            id : 4,
            query_threshold: 10
        });
        expect(ctrl_scope.fields[0].checked).toEqual(true);
        expect(ctrl_scope.fields[1].checked).toEqual(false);
        expect(ctrl_scope.fields[0].title).toEqual('PM Property ID');
    });
    it("should select all", function() {
        // arrange
        create_settings_controller();

        // act
        ctrl_scope.$digest();
        ctrl_scope.controls.select_all = true;
        ctrl_scope.select_all_clicked();
        ctrl_scope.$digest();

        // assertions
        expect(ctrl_scope.infinite_fields[0].checked).toEqual(true);
    });
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myStripFilterApp = angular.module('myStripFilterApp', ['stripImportPrefix']);

describe("The stripImportPrefix filter", function() {
    beforeEach(module('myStripFilterApp'));
    it('Strips out the import prefix from building ids',
        // e.g. remove the 'IMP12-' from the id 'IMP12-1321/123'
        inject(function(stripImportPrefixFilter) {
            // normal cases
            expect(stripImportPrefixFilter('IMP134-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP134555-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP1-134')).toBe('134');
            expect(stripImportPrefixFilter('IMP0-134')).toBe('134');
            // deals with `-`
            expect(stripImportPrefixFilter('IMP134-abc-dev')).toBe('abc-dev');
            // deals with `/`
            expect(stripImportPrefixFilter('IMP134-00/11')).toBe('00/11');
            // only strips first prefix
            expect(stripImportPrefixFilter('IMP134-IMP134-123')).toBe('IMP134-123');
        })
    );
    it("Does not strip out anything if there is not a prefix",
        inject(function(stripImportPrefixFilter) {
            // normal cases
            expect(stripImportPrefixFilter('123-123')).toBe('123-123');
            expect(stripImportPrefixFilter('0123/123')).toBe('0123/123');
        })
    );
    it("Is case sensitive to the import prefix",
        inject(function(stripImportPrefixFilter) {
            expect(stripImportPrefixFilter('imp123-abc')).toBe('imp123-abc');
            expect(stripImportPrefixFilter('iMp123-abc')).toBe('iMp123-abc');
            expect(stripImportPrefixFilter('iMP123-abc')).toBe('iMP123-abc');
        })
    );
    it("Handles undefined or null inputs",
        inject(function(stripImportPrefixFilter) {
            expect(stripImportPrefixFilter(undefined)).toBe(undefined);
            expect(stripImportPrefixFilter(null)).toBe(null);
        })
    );
    it("Only strips out the prefix if it has at least one digit and a hyphen",
        inject(function(stripImportPrefixFilter) {
            // must have the 'IMP' folowed by a digit then a hyphen
            expect(stripImportPrefixFilter('IMP-123')).toBe('IMP-123');
            expect(stripImportPrefixFilter('IMP1123')).toBe('IMP1123');
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myTitleCaseApp = angular.module('myTitleCaseApp', ['titleCase']);

describe("The TitleCase filter", function() {
    beforeEach(module('myTitleCaseApp'));
    it('Strips out ``_`` characters from strings and capitalizes the rest',
        inject(function(titleCaseFilter) {
            // normal cases
            expect(titleCaseFilter('super_data')).toBe('Super Data');
            expect(titleCaseFilter('super_data_45')).toBe('Super Data 45');
            expect(titleCaseFilter(undefined)).toBe(undefined);
            expect(titleCaseFilter(null)).toBe(null);
        })
    );
});


/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var myTypedNumberFilterApp = angular.module('myTypedNumberFilterApp', ['typedNumber']);

describe("The typedNumber filter", function() {
    beforeEach(module('myTypedNumberFilterApp'));
    it('should parse strings as strings and return them',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('tester')).toBe('tester');
        })
    );
    it('should parse strings as strings and return them, even if they look like numbers',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.1456')).toBe('123.1456');
        })
    );

    it('should parse numbers as numbers and return them',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.00001', 'number')).toBe("123");
        })
    );

    it('should allow the user to set the number of sig digits',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123.321', 'number', 'not_year', 1)).toBe("123.3");
        })
    );

    it('should add commas to number greater than 999',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('123456789', 'number', 'not_year', 0)).toBe("123,456,789");
        })
    );

    it('should parse year_built and not add commas',
        inject(function(typedNumberFilter) {
            expect(typedNumberFilter('1946', 'number', 'year_built', 1)).toBe("1946");
        })
    );
});

/**
 * :copyright: (c) 2014 Building Energy Inc
 */
// create dummy angularJS app to attach filter(s)
var validationTestApp = angular.module(
    'validationTestApp', ['mappingValidatorService']
);

describe("The MappingValidatorService", function() {
    var mvs;

    beforeEach(function () {
        module("validationTestApp");
        inject(function (mappingValidatorService) {
            mvs = mappingValidatorService;

        });

    });

    it('validates good string, float and date data', function() {
        // normal cases
        // Here ``type`` is undefined. Should still work.
        var str_data = ['Fun', 'fun2', 'fun3', 'fun4'];
        var float_data = ['12.34', '144.5', '234'];
        var date_data = ['2014/02/02', '03/13/2013', '03-14-2004'];

        expect(mvs.validate(str_data)).toEqual([]);
        expect(mvs.validate(float_data, 'float')).toEqual([]);
        expect(mvs.validate(date_data, 'date')).toEqual([]);
    });

    it('recognizes semivalid data', function() {
        // Cases where the data is /almost/ right.
        var float_data = ['12.34', '144.5', 'NaN'];
        var date_data = ['2014/02/02', 'huh?', '03-14-2004'];
        expect(mvs.validate(float_data, 'float')).toEqual(['NaN']);
        expect(mvs.validate(date_data, 'date')).toEqual(['huh?']);
    });

    it('recognizes invalid data', function() {
        // Cases where the data is *all* wrong.
        var float_data = ['', 'not a float', 'NaN'];
        var date_data = ['', 'huh?', 'what?'];
        // Cases where the data are correct.
        var good_float_data = ['12.34', '144.5', '234'];
        var good_date_data = ['2014/02/02', '03/13/2013', '03-14-2004'];

        // Data is wrong
        expect(mvs.validate(float_data, 'float')).toEqual(float_data);
        expect(mvs.validate(date_data, 'date')).toEqual(date_data);

        // Type is wrong
        // N.B. we use semivalid here, because Date is pretty forgiving w/ nums.
        expect(mvs.validate(good_float_data, 'date')).toEqual(['12.34']);
        expect(mvs.validate(good_date_data, 'float')).toEqual(good_date_data);


    });

});

