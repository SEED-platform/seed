# -*- coding: utf-8 -*-
"""
:copyright (c) 2014 - 2020, The Regents of the University of California, through Lawrence Berkeley National Laboratory (subject to receipt of any required approvals from the U.S. Department of Energy) and contributors. All rights reserved.  # NOQA
:author
"""
from __future__ import unicode_literals

import csv
import random

from math import floor
from django.core.management.base import BaseCommand

from seed.test_helpers.fake import BaseFake


class DataFaker(BaseFake):
    def __init__(self):
        super().__init__()

    def create_sample_data(self, index):
        # US NORTH = 49.35
        # US SOUTH = 24.74
        # US EAST = -66.95
        # US WEST = -124.78
        pad = 10E6
        lat = random.randint(floor(24.74 * pad), floor(49.35 * pad)) / pad
        long = random.randint(floor(-124.78 * pad), floor(-66.95 * pad)) / pad
        data = {
            'Custom ID': f"{index:06}-{self.fake.numerify(text='#####')}",
            'Address Line 1': self.address_line_1(),
            'City': self.fake.city(),
            'State': self.fake.state_abbr(),
            'Postal Code': self.fake.zipcode(),
            'Gross Floor Area': round(float(self.fake.numerify(text='######')) / 10, 0),
            'Latitude': lat,
            'Longitude': long,
            'Energy Use Intensity': abs(float(self.fake.numerify(text='####')) / 25),
            'Random Company Name': self.fake.company(),
            'Random String': self.fake.bs(),
            'Random Value': abs(float(self.fake.numerify(text='#####'))),
        }
        return list(data.keys()), data.values()


class Command(BaseCommand):
    help = 'Creates a default super user for the system tied to an organization'

    def add_arguments(self, parser):
        parser.add_argument('--count',
                            default=500,
                            type=int,
                            help='Number of rows to create',
                            dest='count')

        parser.add_argument('--savefile',
                            default='autogenerated_data.csv',
                            help='Path where to save file',
                            action='store',
                            dest='savefile')

    def create_sample_data(self, index):
        data = {
            'index': index
        }
        return data

    def handle(self, *args, **options):
        df = DataFaker()
        with open(options['savefile'], mode='w') as f:
            writer = csv.writer(f, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)

            header, _ = df.create_sample_data(0)
            writer.writerow(header)

            for i in range(options['count']):
                _, data = df.create_sample_data(i)
                writer.writerow(data)

        self.stdout.write('Data created!', ending='\n')
