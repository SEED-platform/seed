# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2017-01-19 21:18
from __future__ import unicode_literals

from django.db import migrations

from seed.models.columns import Column, ColumnMapping

def duplicate_column(apps, column):
    Column = apps.get_model("seed", "Column")

    new_c = Column.objects.get(pk=column.id)
    new_c.pk = None
    new_c.save()

    return new_c


def duplicate_mapping(apps, mapping, column, raw_or_mapped):
    ColumnMapping = apps.get_model("seed", "ColumnMapping")

    new_m = ColumnMapping.objects.get(pk=mapping.id)
    new_m.pk = None
    new_m.save()

    new_c = duplicate_column(apps, column)

    # duplicate any of the columns
    if raw_or_mapped == 'mapped':
        new_m.column_mapped.clear()
        new_m.column_mapped.add(new_c)
        new_m.save()
    elif raw_or_mapped == 'raw':
        new_m.column_raw.clear()
        new_m.column_raw.add(new_c)
        new_m.save()

    return new_m, new_c


def forwards(apps, schema_editor):
    Column = apps.get_model("seed", "Column")
    ColumnMapping = apps.get_model("seed", "ColumnMapping")

    # find which columns are not used in column mappings
    # for c in Column.objects.filter(column_name='Building Count'):
    for c in Column.objects.all():
        cm_raw = ColumnMapping.objects.filter(column_raw=c)
        cm_mapped = ColumnMapping.objects.filter(column_mapped=c)

        print "Column {}: {}.{}".format(c.id, c.table_name, c.column_name)

        if cm_raw.count() > 1 or cm_mapped.count() > 1:
            print "from_count: {}     to_count: {}".format(cm_raw.count(), cm_mapped.count())

            # go through the ones that are zeroed and is not extra data in the.
            # Also, split the mappings only if the mapped column is extra data.
            if cm_raw.count() == 0 and cm_mapped.count() > 1 and c.is_extra_data:
                for idx, mapping in enumerate(cm_mapped):
                    print "        Duplicating columns for {}".format(idx)
                    new_m, _new_c = duplicate_mapping(apps, mapping, c, 'mapped')
                    print "            new mapping created {}".format(new_m)

                for m in cm_mapped:
                    m.delete()

            if cm_raw.count() > 1 and cm_mapped.count() == 0:
                for idx, mapping in enumerate(cm_raw):
                    print "        Duplicating columns for {}".format(idx)
                    new_m, _new_c = duplicate_mapping(apps, mapping, c, 'raw')
                    print "            new mapping created {}".format(new_m)

                for m in cm_raw:
                    m.delete()

        elif cm_raw.count() > 1 and cm_mapped.count() > 1:
            # if there are any of the many raw to many mapped, handle those
            # someday... if you see it now, then raise and exception
            raise Exception("this is bad, very bad... talk to @nllong")

    print ""
    print ""
    print "-------------------------------------------------------------------"
    print "Total Columns: {}".format(Column.objects.all().count())

    # exit()

class Migration(migrations.Migration):
    dependencies = [
        ('seed', '0054_remove_same_column_in_mappings'),
    ]

    operations = [
        migrations.RunPython(forwards),
    ]
