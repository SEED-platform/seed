# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2017-04-07 22:16
from __future__ import unicode_literals

from django.db import migrations
from django.db.models import Q

from seed.utils.generic import obj_to_dict


def forwards(apps, schema_editor):
    # Remove duplicate columns
    Organization = apps.get_model("orgs", "Organization")
    Column = apps.get_model("seed", "Column")
    ColumnMapping = apps.get_model("seed", "ColumnMapping")

    column_keys = ['organization', 'table_name', 'column_name', 'is_extra_data']
    for o in Organization.objects.all():
        # for o in Organization.objects.filter(id=267):
        print "Processing organization {}.{}".format(o.id, o.name)

        objs_to_delete = set()

        columns = Column.objects.filter(organization_id=o.pk)
        for c in columns:
            # skip if the column is in the delete list
            if c.pk in [c_obj.pk for c_obj in objs_to_delete]:
                print 'skipping column because it is to be deleted {}'.format(c.pk)
                continue

            check_c = {key: obj_to_dict(c)[key] for key in column_keys}

            multiples = Column.objects.filter(**check_c)
            if multiples.count() > 1:
                print "Found {} duplicate column".format(multiples.count())

                pointer_column = None
                for idx, m in enumerate(multiples):
                    if idx == 0:
                        print "  setting pointer columns to {}".format(m.pk)
                        pointer_column = m
                        continue

                    print "  checking idx {} - pk {}".format(idx, m.pk)
                    # check if there is mappings
                    cms = ColumnMapping.objects.filter(Q(column_raw=m) | Q(column_mapped=m))
                    if cms.count() == 0:
                        print "  no column mappings and idx is > 1, so deleting column {}".format(
                            m.pk)
                        objs_to_delete.add(m)
                        continue

                    cms_raw = ColumnMapping.objects.filter(column_raw=m)
                    if cms_raw.count() == 1:
                        print "    removing old column and adding in new one {} -> {}".format(m.pk,
                                                                                              pointer_column.pk)
                        cms_raw.first().column_raw.add(pointer_column)
                        cms_raw.first().column_raw.remove(m)
                        objs_to_delete.add(m)
                        continue

                    if cms_raw.count() > 1:
                        print "  Not sure what to do here but it probably does not matter"

                    print ColumnMapping.objects.filter(column_raw=m).count()

                    for cm in ColumnMapping.objects.filter(column_mapped=m):
                        print "  cleaning up mapping"
                        if pointer_column in cm.column_mapped.all():
                            print "    already in there"
                        else:
                            print "    removing old column and adding in new one {} -> {}".format(
                                m.pk, pointer_column.pk)
                            cm.column_mapped.remove(m)
                            cm.column_mapped.add(pointer_column)
                            print "    staging old column for delete {}".format(m.pk)
                            objs_to_delete.add(m)

        print "objects to delete:"
        for obj in objs_to_delete:
            print "  {}  --  {}".format(obj.id, obj.column_name)
            obj.delete()


class Migration(migrations.Migration):
    dependencies = [
        ('seed', '0058_auto_20170403_1149'),
    ]

    operations = [
        migrations.RunPython(forwards),
    ]
