# Generated by Django 3.2.25 on 2024-07-19 21:35
from datetime import datetime

import quantityfield.fields
from django.db import connection, migrations, transaction

from seed.data_importer.tasks import hash_state_object
from seed.utils.organizations import default_pm_mappings


def forwards(apps, schema_editor):
    Column = apps.get_model("seed", "Column")
    Organization = apps.get_model("orgs", "Organization")

    new_columns = [
        {
            "column_name": "water_use",
            "table_name": "PropertyState",
            "display_name": "Water Use",
            "column_description": "Water Use",
            "data_type": "water_use",
        },
        {
            "column_name": "indoor_water_use",
            "table_name": "PropertyState",
            "display_name": "Indoor Water Use",
            "column_description": "Indoor Water Use (All Water Sources)",
            "data_type": "water_use",
        },
        {
            "column_name": "outdoor_water_use",
            "table_name": "PropertyState",
            "display_name": "Outdoor Water Use",
            "column_description": "Outdoor Water Use (All Water Sources)",
            "data_type": "water_use",
        },
        {
            "column_name": "wui",
            "table_name": "PropertyState",
            "display_name": "WUI",
            "column_description": "Water Use Intensity",
            "data_type": "wui",
        },
        {
            "column_name": "indoor_wui",
            "table_name": "PropertyState",
            "display_name": "Indoor WUI",
            "column_description": "Indoor Water Use Intensity",
            "data_type": "wui",
        },
    ]

    for org in Organization.objects.all():
        # create new columns
        for column in new_columns:
            Column.objects.create(**{**column, "organization_id": org.id})

        # update existing default profile mappings
        default_profile = org.columnmappingprofile_set.filter(profile_type=0).first()
        if not default_profile:
            continue

        for mapping in default_pm_mappings():
            if mapping not in default_profile.mappings:
                default_profile.mappings.append(mapping)

        default_profile.save()


def rehash(apps, schema_editor):
    PropertyState = apps.get_model("seed", "PropertyState")

    property_count = PropertyState.objects.count()

    with transaction.atomic(), connection.cursor() as cursor:
        properties_updated = 0

        if property_count > 0:
            print(f"Re-hashing {property_count:,} Property State{'' if property_count == 1 else 's'}")
            cursor.execute("PREPARE update_hash (integer, text) AS " "UPDATE seed_propertystate SET hash_object = $2 WHERE id = $1;")
            start = datetime.now()
            for idx, state in enumerate(PropertyState.objects.iterator(chunk_size=1000)):
                old_hash = state.hash_object
                new_hash = hash_state_object(state)

                if new_hash != old_hash:
                    cursor.execute("EXECUTE update_hash (%s, %s);", (state.id, new_hash))
                    properties_updated += 1
                if (idx + 1) % 10000 == 0:
                    print(f"... {idx + 1:,} / {property_count:,} ({properties_updated:,} updated in {datetime.now() - start}) ...")

            print(f"  {properties_updated:,} Property State hash{'' if property_count == 1 else 'es'} updated")
            cursor.execute("DEALLOCATE update_hash;")


class Migration(migrations.Migration):
    dependencies = [("orgs", "0037_organization_display_water_units"), ("seed", "0222_cross_cycle_data_quality")]

    operations = [
        migrations.AddField(
            model_name="propertystate",
            name="indoor_water_use",
            field=quantityfield.fields.QuantityField(base_units="kgal/year", blank=True, null=True, unit_choices=["kgal/year"]),
        ),
        migrations.AddField(
            model_name="propertystate",
            name="indoor_wui",
            field=quantityfield.fields.QuantityField(base_units="gal/ft**2/year", blank=True, null=True, unit_choices=["gal/ft**2/year"]),
        ),
        migrations.AddField(
            model_name="propertystate",
            name="outdoor_water_use",
            field=quantityfield.fields.QuantityField(base_units="kgal/year", blank=True, null=True, unit_choices=["kgal/year"]),
        ),
        migrations.AddField(
            model_name="propertystate",
            name="water_use",
            field=quantityfield.fields.QuantityField(base_units="kgal/year", blank=True, null=True, unit_choices=["kgal/year"]),
        ),
        migrations.AddField(
            model_name="propertystate",
            name="wui",
            field=quantityfield.fields.QuantityField(base_units="gal/ft**2/year", blank=True, null=True, unit_choices=["gal/ft**2/year"]),
        ),
        migrations.RunPython(forwards),
        migrations.RunPython(rehash),
    ]
