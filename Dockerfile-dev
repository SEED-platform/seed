FROM node:20-alpine3.16 AS node
# Use a multi-stage build to first get uv
FROM ghcr.io/astral-sh/uv:0.2.12 as uv

FROM alpine:3.16

COPY --from=node /usr/lib /usr/lib
COPY --from=node /usr/local/lib /usr/local/lib
COPY --from=node /usr/local/include /usr/local/include
COPY --from=node /usr/local/bin /usr/local/bin

RUN apk add --no-cache \
        python3-dev \
        postgresql-dev \
        coreutils \
        alpine-sdk \
        pcre \
        pcre-dev \
        libxslt-dev \
        linux-headers \
        libffi-dev \
        bash \
        bash-completion \
        nginx \
        openssl-dev \
        geos-dev \
        gdal \
        gcc \
        musl-dev \
        cargo \
        tzdata && \
    ln -sf /usr/bin/python3 /usr/bin/python && \
    python -m ensurepip && \
    rm -r /usr/lib/python*/ensurepip && \
    ln -sf /usr/bin/pip3 /usr/bin/pip && \
    pip install --upgrade pip setuptools && \
    pip install supervisor==4.2.5 && \
    mkdir -p /var/log/supervisord && \
    rm -r /root/.cache && \
    addgroup -g 1000 uwsgi && \
    adduser -G uwsgi -H -u 1000 -S uwsgi && \
    mkdir -p /run/nginx

### Install python requirements
WORKDIR /seed
# Create a virtual environment with uv inside the container
RUN --mount=from=uv,source=/uv,target=./uv \
    ./uv venv /opt/venv
# We need to set this environment variable so that uv knows where
# the virtual environment is to install packages
ENV VIRTUAL_ENV=/opt/venv
# Make sure that the virtual environment is in the PATH so
# we can use the binaries of packages that we install such as pip
# without needing to activate the virtual environment explicitly
ENV PATH="/opt/venv/bin:$PATH"
COPY ./requirements.txt /seed/requirements.txt
COPY ./requirements/*.txt /seed/requirements/
RUN pip uninstall -y enum34
# Install the packages with uv using --mount=type=cache to cache the downloaded packages
RUN --mount=type=cache,target=/root/.cache/uv \
    --mount=from=uv,source=/uv,target=./uv \
    ./uv pip install  -r requirements/local.txt
# for remote debugging
RUN pip install remote-pdb
# for live reloading celery
RUN pip install watchdog[watchmedo]

### Install JavaScript requirements - do this first because they take awhile
### and the dependencies will probably change slower than python packages.
### README.md stops the no readme warning
COPY ./package.json /seed/package.json
COPY ./vendors/package.json /seed/vendors/package.json
COPY ./README.md /seed/README.md
# unsafe-perm allows the package.json postinstall script to run with the elevated permissions
RUN npm install -g pnpm
RUN pnpm install --unsafe-perm

### Copy over the remaining part of the SEED application and some helpers
WORKDIR /seed
COPY . /seed/
COPY ./docker/wait-for-it.sh /usr/local/wait-for-it.sh
RUN git config --system --add safe.directory /seed

EXPOSE 80

CMD ["python", "manage.py", "runserver", "--settings=config.settings.docker_dev", "0.0.0.0:80"]
