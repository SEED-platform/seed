"""
:copyright (c) 2014 - 2020, The Regents of the University of California, through Lawrence Berkeley National Laboratory (subject to receipt of any required approvals from the U.S. Department of Energy) and contributors. All rights reserved.  # NOQA
:author
:license: see LICENSE for more details.

seed local_untracked.py

    For this to work with dev settings:
        - run with dev settings:
            $ export DJANGO_SETTINGS_MODULE=config.settings.dev
            or
            $ ./manage.py runserver --settings=config.settings.dev
        - add your settings. Make sure to update the DATABASES, AWS related configurations, and
            CACHES (i.e. everything here starting with 'your-')
    For local dev, all these services can run locally on localhost, 127.0.0.1, or 0.0.0.0.
"""
from __future__ import absolute_import

import os

from kombu import Exchange, Queue

# ============================ General settings and flags ============================
COMPRESS_ENABLED = False
DOMAIN_URLCONFS = {'default': 'config.urls'}
DEBUG = True  # Set to False if this is being used in production mode. If this is set as false, then
# you will need to configure nginx to serve the static assets. Deploying with docker is recommended
# and handles setting up nginx.
INTERNAL_IPS = ('127.0.0.1',)

# MapQuestAPI key for geocoding
MAPQUEST_API_KEY = os.environ.get('MAPQUEST_API_KEY', 'a-mapquest-api-key')

# SECRET_KEY is set here (or in your env variable)
# You can create a key from https://www.miniwebtool.com/django-secret-key-generator/
#SECRET_KEY = 'default-your-secret-key-here'

# MapQuest API key for testing only - A valid key is only needed when refreshing VCR cassettes.
# Keys for app users are attached to each organization.
TESTING_MAPQUEST_API_KEY = os.environ.get('TESTING_MAPQUEST_API_KEY', '<your_key_here>')

# email through SES (django-ses)
#EMAIL_BACKEND = 'django_ses.SESBackend'
#AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID', '')
#AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY', '')
#AWS_SES_REGION_NAME = 'us-west-2'
#AWS_SES_REGION_ENDPOINT = 'email.us-west-2.amazonaws.com'
#SERVER_EMAIL = 'info@seed-platform.org'
#DEFAULT_FROM_EMAIL = 'info@seed-platform.org'

# Sentry Configuration (Optional)
# import raven
# RAVEN_CONFIG = {
#    'dsn': 'https://<user>:<key>@sentry.io/<job_id>',
#    # If you are using git, you can also automatically configure the
#    # release based on the git info.
#    'release': raven.fetch_git_sha(os.path.abspath(os.curdir)),
# }
# SENTRY_JS_DSN = 'https://<key>@sentry.io/<job_id>'

# OAuth2 Configuration (Optional)
# Token request Url is a common choice for audience
# see https://tools.ietf.org/html/rfc7523#section-3 and
# https://github.com/GreenBuildingRegistry/jwt-oauth2 for additional details
# OAUTH2_JWT_PROVIDER = {
#     'JWT_AUDIENCE': 'https://example.com/oauth/token/',
#     'DEVELOPER_GROUP': 'developers',
#     'TRUSTED_OAUTH_GROUP': 'trusted_developers',
# }


# ================================= Database settings ===============================
DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': 'seed',
        'USER': 'your-username',
        'PASSWORD': 'your-password',
        'HOST': 'your-host',
        'PORT': 'your-port',
    }
}

# =============================== Celery/Redis Cache Settings (No Password) =========
CACHES = {
    'default': {
        'BACKEND': 'redis_cache.cache.RedisCache',
        'LOCATION': 'your-cache-url:your-cache-port',
        'OPTIONS': {'DB': 1},
        'TIMEOUT': 300
    }
}

CELERY_BROKER_URL = 'redis://%s/%s' % (
    CACHES['default']['LOCATION'], CACHES['default']['OPTIONS']['DB']
)
CELERY_RESULT_BACKEND = CELERY_BROKER_URL
CELERY_TASK_DEFAULT_QUEUE = 'seed-local'
CELERY_TASK_QUEUES = (
    Queue(
        CELERY_TASK_DEFAULT_QUEUE,
        Exchange(CELERY_TASK_DEFAULT_QUEUE),
        routing_key=CELERY_TASK_DEFAULT_QUEUE
    ),
)

# =============================== Celery/Redis Cache Settings (w/Password) =========
#CACHES = {
#   'default': {
#        'BACKEND': 'redis_cache.cache.RedisCache',
#        'LOCATION': 'your-cache-url:your-cache-port',
#        'OPTIONS': {
#            'DB': 1,
#             'PASSWORD': 'your-redis-password',
#        },
#        'TIMEOUT': 300
#    }
#}
#
#CELERY_BROKER_URL = 'redis://:%s@%s/%s' % (
#    CACHES['default']['OPTIONS']['PASSWORD'],
#    CACHES['default']['LOCATION'],
#    CACHES['default']['OPTIONS']['DB']
#)
#CELERY_RESULT_BACKEND = CELERY_BROKER_URL
#CELERY_TASK_DEFAULT_QUEUE = 'seed-local'
#CELERY_TASK_QUEUES = (
#    Queue(
#        CELERY_TASK_DEFAULT_QUEUE,
#        Exchange(CELERY_TASK_DEFAULT_QUEUE),
#        routing_key=CELERY_TASK_DEFAULT_QUEUE
#    ),
#)


# =================================== Logging =======================================
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'level': 'ERROR',
            'class': 'logging.StreamHandler'
        }
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'DEBUG'),
        },
    },
}
